2024-03-19 02:00:32,408 [functions.py:log_start()] - --------------------KlipperScreen Log Start--------------------
2024-03-19 02:00:32,409 [functions.py:log_start()] - KlipperScreen Version: v0.3.9-50-gdaed9a0
2024-03-19 02:00:32,409 [functions.py:log_start()] - Python version: 3.11
2024-03-19 02:00:32,763 [config.py:get_config_file_location()] - Passed config (-c): .
2024-03-19 02:00:32,767 [config.py:__init__()] - Config path location: /home/pi/KlipperScreen/ks_includes/defaults.conf
2024-03-19 02:00:32,814 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2024-03-19 02:00:33,125 [config.py:create_translations()] - Selected lang: None OS lang: en_GB
2024-03-19 02:00:33,126 [config.py:install_language()] - Using lang en
2024-03-19 02:00:33,181 [screen.py:__init__()] - Monitors: 1 using number: 0
2024-03-19 02:00:33,185 [screen.py:__init__()] - Wayland: False Display name: :0
2024-03-19 02:00:33,192 [screen.py:__init__()] - Screen resolution: 1024x768
2024-03-19 02:00:33,195 [KlippyGtk.py:__init__()] - Font size: 23.8 (medium)
2024-03-19 02:00:35,094 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2024-03-19 02:00:35,129 [screen.py:set_screenblanking_timeout()] - Using DPMS
2024-03-19 02:00:35,156 [screen.py:initial_connection()] - Default printer: None
2024-03-19 02:00:35,320 [screen.py:connect_printer()] - Connecting to printer: Printer
2024-03-19 02:00:35,321 [screen.py:_load_panel()] - Loading panel: splash_screen
2024-03-19 02:00:35,533 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-03-19 02:00:35,586 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-03-19 02:00:35,587 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-03-19 02:00:35,638 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/access/oneshot_token
2024-03-19 02:00:35,673 [KlippyWebsocket.py:connect()] - Starting websocket thread
2024-03-19 02:00:35,707 [_logging.py:info()] - Websocket connected
2024-03-19 02:00:35,707 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2024-03-19 02:00:35,711 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-03-19 02:00:35,747 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-03-19 02:00:35,781 [printer.py:configure_cameras()] - Cameras: []
2024-03-19 02:00:35,782 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'ready', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'octoprint_compat', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-318-g9813011', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-03-19 02:00:35,783 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-03-19 02:00:35,823 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-03-19 02:00:36,143 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set allow_park = client.park_at_cancel | default(false) | lower == \'true\' %}\n{% set retract = client.cancel_retract | default(5.0) | abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x | default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y | default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x | length > 0 or park_y | length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro | default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set idle_timeout = client.idle_timeout | default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE | default(1) | int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro | default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move | default(velocity) %}\n{% set runout_resume = True if client.runout_sensor | default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state | upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro | default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY | default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}"}, 'neopixel sb_leds': {'pin': 'EBBCan:gpio16', 'chain_count': '3', 'color_order': 'GRB', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0'}, 'led_effect sb_logo_busy': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (1,0,0)'}, 'led_effect sb_logo_cleaning': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.02, 0.5)'}, 'led_effect sb_logo_calibrating_z': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 0.35)'}, 'led_effect sb_logo_heating': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nbreathing  3 1 top (1, 0.18, 0)'}, 'led_effect sb_logo_cooling': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nbreathing  3 1 top (0, 0, 1)'}, 'led_effect sb_logo_homing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.6, 0.2)'}, 'led_effect sb_logo_leveling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.5, 0.1, 0.4)'}, 'led_effect sb_logo_meshing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.2, 1.0, 0.0)'}, 'led_effect sb_logo_printing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.3, 0.3, 0.0),(0.3, 0.1, 0.0)'}, 'led_effect sb_logo_standby': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.01, 0.01, 0.01)'}, 'led_effect sb_logo_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 1.0, 0.0)'}, 'led_effect sb_nozzle_heating': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (1.0, 0.18, 0.0, 0.0)'}, 'led_effect sb_nozzle_cooling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 1.0, 0.1)'}, 'led_effect sb_nozzle_standby': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.6, 0.0, 0.0, 0.0)'}, 'led_effect sb_nozzle_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.6, 1.0, 0.0, 0.1)'}, 'led_effect sb_critical_error': {'leds': '\nneopixel:sb_leds', 'layers': '\nstrobe         1  1.5   add        (1.0,  1.0, 1.0)\nbreathing      2  0     difference (0.95, 0.0, 0.0)\nstatic         1  0     top        (1.0,  0.0, 0.0)', 'autostart': 'false', 'frame_rate': '24', 'run_on_error': 'true'}, 'led_effect rainbow': {'leds': '\nneopixel:sb_leds', 'autostart': 'true', 'frame_rate': '24', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.0, 0.3, 0.0),(0.0, 0.0, 0.3)'}, 'led_effect set_nozzle_leds': {'leds': '\nneopixel:sb_leds (2,3)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nstatic         0  0     top        (0.5,  0.5, 0.5)'}, 'led_effect set_logo_leds': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nstatic         0  0     top        (1.0,  1.0, 1.0)'}, 'gcode_macro set_logo_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds STOP=1'}, 'gcode_macro set_logo_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1'}, 'gcode_macro status_off': {'gcode': '\nSTOP_LED_EFFECTS'}, 'gcode_macro status_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=rainbow'}, 'gcode_macro status_part_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready'}, 'gcode_macro status_busy': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_busy\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_heating\nSET_LED_EFFECT EFFECT=sb_nozzle_heating'}, 'gcode_macro status_cooling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cooling\nSET_LED_EFFECT EFFECT=sb_nozzle_cooling'}, 'gcode_macro status_leveling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_leveling\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_homing\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cleaning\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_meshing\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_calibrating_z\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_printing\nset_nozzle_leds_on'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_sam4e8e_00313753364B37373032303038303139-if00'}, 'mcu EBBCan': {'canbus_uuid': '8250861450f7'}, 'adxl345': {'cs_pin': 'EBBCan:gpio1', 'spi_software_sclk_pin': 'EBBCan:gpio2', 'spi_software_mosi_pin': 'EBBCan:gpio0', 'spi_software_miso_pin': 'EBBCan:gpio3', 'axes_map': 'z,-y,x'}, 'resonance_tester': {'probe_points': '100, 100, 20', 'accel_chip': 'adxl345'}, 'input_shaper': {'shaper_freq_x': '45', 'shaper_type': '3hump_ei'}, 'stepper_x': {'step_pin': 'PD6', 'dir_pin': '!PD11', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'EBBCan:gpio24', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '40'}, 'tmc2660 stepper_x': {'cs_pin': 'PD14', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'stepper_y': {'step_pin': 'PD7', 'dir_pin': '!PD12', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'PA2', 'position_endstop': '0', 'position_max': '225', 'position_min': '-4', 'homing_speed': '35', 'homing_retract_dist': '0'}, 'tmc2660 stepper_y': {'cs_pin': 'PC9', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'stepper_z': {'step_pin': 'PD8', 'dir_pin': '!PD13', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '230', 'position_min': '-2.5', 'homing_speed': '35.0'}, 'tmc2660 stepper_z': {'cs_pin': 'PC10', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'adc_temperature my_thermistor': {'temperature1': '0', 'resistance1': '1000', 'temperature2': '80', 'resistance2': '1309'}, 'extruder': {'step_pin': '!EBBCan:gpio18', 'dir_pin': 'EBBCan:gpio19', 'enable_pin': '!EBBCan:gpio17', 'microsteps': '32', 'rotation_distance': '21.63024711', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'gear_ratio': '50:10', 'heater_pin': 'EBBCan:gpio7', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'EBBCan:gpio27', 'control': 'pid', 'pid_kp': '21.527', 'pid_ki': '1.063', 'pid_kd': '108.982', 'min_temp': '0', 'max_temp': '250'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan:gpio20', 'run_current': '0.5', 'stealthchop_threshold': '999999'}, 'filament_switch_sensor extruder': {'pause_on_runout': 'True', 'switch_pin': 'EBBCan:gpio21'}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu'}, 'thermistor chamber_temp': {'temperature1': '25', 'resistance1': '10000', 'beta': '3950'}, 'heater_bed': {'heater_pin': '!PA19', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PC13', 'control': 'watermark', 'min_temp': '0', 'max_temp': '120'}, 'heater_fan extruder_fan': {'pin': 'EBBCan:gpio13', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'EBBCan:gpio14', 'cycle_time': '.08', 'kick_start_time': '.25'}, 'probe': {'pin': '^EBBCan:gpio22', 'x_offset': '0', 'y_offset': '0', 'samples': '3', 'samples_result': 'median', 'sample_retract_dist': '3', 'samples_tolerance': '0.015', 'samples_tolerance_retries': '3', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'z_offset': '-1.500'}, 'homing_override': {'axes': 'z', 'set_position_z': '0', 'gcode': '\nstatus_homing\nG90\nG0 Z5 F500\nG28 X0 Y0\nG0 X150 Y100 F9000\nG28 Z0\nG0 Z5 F500\nstatus_ready'}, 'bed_mesh': {'speed': '150', 'horizontal_move_z': '5', 'mesh_min': '25,35.0', 'mesh_max': '225.0,220', 'probe_count': '6,6', 'algorithm': 'bicubic', 'fade_start': '1', 'fade_end': '10', 'fade_target': '0'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\nM117 Homing...\nG28 Y0 X0 Z0\n\n\n\n\n\n\n\n\n\n\n\n\nSTATUS_HEATING\nM107\nM117 Heating bed\nM190 S{ params.BED }\nM117 Heating nozzle\nM109 S{target_extruder}\nstatus_ready\nG1 Z15.0 F600\nG1 X125 Y125 F3000\nG92 E0\nG1 F9000\nstatus_printing\nM117 Printing...'}, 'gcode_macro PRINT_END': {'gcode': '\nstatus_busy\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\n\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y} F3600\nM117 Finished!\nstatus_off'}, 'printer': {'kinematics': 'corexz', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '5', 'max_z_accel': '100'}, 'force_move': {'enable_force_move': 'true'}, 'exclude_object': {}, 'bed_mesh default': {'version': '1', 'points': '\n-0.287500, -0.112500, -0.062500, -0.025000, 0.137500, -0.137500\n-0.225000, -0.112500, -0.087500, 0.037500, 0.137500, 0.287500\n-0.287500, -0.200000, -0.087500, -0.000000, 0.137500, 0.300000\n-0.337500, -0.200000, -0.137500, -0.012500, 0.125000, 0.275000\n-0.300000, -0.162500, -0.062500, 0.037500, 0.187500, 0.337500\n-0.212500, -0.075000, 0.025000, 0.125000, 0.275000, 0.450000', 'x_count': '6', 'y_count': '6', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'bicubic', 'tension': '0.2', 'min_x': '25.0', 'max_x': '225.0', 'min_y': '35.0', 'max_y': '220.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_sam4e8e_00313753364B37373032303038303139-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu ebbcan': {'canbus_uuid': '8250861450f7', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set allow_park = client.park_at_cancel | default(false) | lower == \'true\' %}\n{% set retract = client.cancel_retract | default(5.0) | abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x | default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y | default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x | length > 0 or park_y | length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro | default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set idle_timeout = client.idle_timeout | default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE | default(1) | int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro | default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move | default(velocity) %}\n{% set runout_resume = True if client.runout_sensor | default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state | upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro | default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY | default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'neopixel sb_leds': {'pin': 'EBBCan:gpio16', 'chain_count': 3, 'color_order': ['GRB'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'led_effect sb_logo_busy': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1,0,0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_cleaning': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.02, 0.5)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_calibrating_z': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 0.35)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1, 0.18, 0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0, 0, 1)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_homing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.6, 0.2)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_leveling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.5, 0.1, 0.4)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_meshing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.2, 1.0, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_printing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.3, 0.3, 0.0),(0.3, 0.1, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_standby': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.01, 0.01, 0.01)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 1.0, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_nozzle_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1.0, 0.18, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 1.0, 0.1)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_standby': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.6, 0.0, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.6, 1.0, 0.0, 0.1)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_critical_error': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': True, 'endstops': '', 'layers': '\nstrobe         1  1.5   add        (1.0,  1.0, 1.0)\nbreathing      2  0     difference (0.95, 0.0, 0.0)\nstatic         1  0     top        (1.0,  0.0, 0.0)', 'leds': '\nneopixel:sb_leds'}, 'led_effect rainbow': {'frame_rate': 24.0, 'autostart': True, 'run_on_error': False, 'endstops': '', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.0, 0.3, 0.0),(0.0, 0.0, 0.3)', 'leds': '\nneopixel:sb_leds'}, 'led_effect set_nozzle_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic         0  0     top        (0.5,  0.5, 0.5)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect set_logo_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic         0  0     top        (1.0,  1.0, 1.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'gcode_macro set_logo_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nSTOP_LED_EFFECTS', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=rainbow', 'description': 'G-Code macro'}, 'gcode_macro status_part_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_busy\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_heating\nSET_LED_EFFECT EFFECT=sb_nozzle_heating', 'description': 'G-Code macro'}, 'gcode_macro status_cooling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cooling\nSET_LED_EFFECT EFFECT=sb_nozzle_cooling', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_leveling\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_homing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cleaning\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_meshing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_calibrating_z\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_printing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'adxl345': {'axes_map': ['z', '-y', 'x'], 'rate': 3200, 'cs_pin': 'EBBCan:gpio1', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'EBBCan:gpio2', 'spi_software_miso_pin': 'EBBCan:gpio3', 'spi_software_mosi_pin': 'EBBCan:gpio0'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[100.0, 100.0, 20.0]], 'accel_chip': 'adxl345'}, 'input_shaper': {'shaper_type': '3hump_ei', 'shaper_type_x': '3hump_ei', 'damping_ratio_x': 0.1, 'shaper_freq_x': 45.0, 'shaper_type_y': '3hump_ei', 'damping_ratio_y': 0.1, 'shaper_freq_y': 0.0}, 'tmc2660 stepper_x': {'cs_pin': 'PD14', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PD6', 'dir_pin': '!PD11', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'EBBCan:gpio24', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2660 stepper_y': {'cs_pin': 'PC9', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PD7', 'dir_pin': '!PD12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'PA2', 'position_endstop': 0.0, 'position_min': -4.0, 'position_max': 225.0, 'homing_speed': 35.0, 'second_homing_speed': 17.5, 'homing_retract_speed': 35.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2660 stepper_z': {'cs_pin': 'PC10', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PD8', 'dir_pin': '!PD13', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -2.5, 'position_max': 230.0, 'homing_speed': 35.0, 'second_homing_speed': 17.5, 'homing_retract_speed': 35.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'adc_temperature my_thermistor': {'resistance1': 1000.0, 'temperature1': 0.0, 'temperature2': 80.0, 'resistance2': 1309.0}, 'tmc2209 extruder': {'uart_pin': 'EBBCan:gpio20', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan:gpio27', 'min_temp': 0.0, 'max_temp': 250.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 21.527, 'pid_ki': 1.063, 'pid_kd': 108.982, 'heater_pin': 'EBBCan:gpio7', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': '!EBBCan:gpio18', 'pressure_advance': 0.0, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'EBBCan:gpio19', 'rotation_distance': 21.63024711, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!EBBCan:gpio17'}, 'filament_switch_sensor extruder': {'switch_pin': 'EBBCan:gpio21', 'pause_on_runout': True, 'runout_gcode': '', 'pause_delay': 0.5, 'event_delay': 3.0}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'thermistor chamber_temp': {'temperature1': 25.0, 'resistance1': 10000.0, 'beta': 3950.0}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PC13', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'watermark', 'max_delta': 2.0, 'heater_pin': '!PA19', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan extruder_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'EBBCan:gpio13', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.25, 'off_below': 0.0, 'cycle_time': 0.08, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'EBBCan:gpio14'}, 'probe': {'z_offset': -1.5, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': '^EBBCan:gpio22', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 3, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.015, 'samples_tolerance_retries': 3}, 'homing_override': {'set_position_z': 0.0, 'axes': 'z', 'gcode': '\nstatus_homing\nG90\nG0 Z5 F500\nG28 X0 Y0\nG0 X150 Y100 F9000\nG28 Z0\nG0 Z5 F500\nstatus_ready'}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [6, 6], 'mesh_min': [25.0, 35.0], 'mesh_max': [225.0, 220.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 150.0, 'fade_start': 1.0, 'fade_end': 10.0, 'fade_target': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[-0.2875, -0.1125, -0.0625, -0.025, 0.1375, -0.1375], [-0.225, -0.1125, -0.0875, 0.0375, 0.1375, 0.2875], [-0.2875, -0.2, -0.0875, -0.0, 0.1375, 0.3], [-0.3375, -0.2, -0.1375, -0.0125, 0.125, 0.275], [-0.3, -0.1625, -0.0625, 0.0375, 0.1875, 0.3375], [-0.2125, -0.075, 0.025, 0.125, 0.275, 0.45]], 'min_x': 25.0, 'max_x': 225.0, 'min_y': 35.0, 'max_y': 220.0, 'x_count': 6, 'y_count': 6, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'bicubic', 'tension': 0.2}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\nM117 Homing...\nG28 Y0 X0 Z0\n\n\n\n\n\n\n\n\n\n\n\n\nSTATUS_HEATING\nM107\nM117 Heating bed\nM190 S{ params.BED }\nM117 Heating nozzle\nM109 S{target_extruder}\nstatus_ready\nG1 Z15.0 F600\nG1 X125 Y125 F3000\nG92 E0\nG1 F9000\nstatus_printing\nM117 Printing...', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\nstatus_busy\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\n\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y} F3600\nM117 Finished!\nstatus_off', 'description': 'G-Code macro'}, 'force_move': {'enable_force_move': True}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'max_accel_to_decel': 1500.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexz', 'max_z_velocity': 5.0, 'max_z_accel': 100.0}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-03-19 02:00:36,152 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-03-19 02:00:36,156 [printer.py:reinit()] - Klipper version: v0.12.0-114-ga77d0790-dirty
2024-03-19 02:00:36,156 [printer.py:reinit()] - # Extruders: 1
2024-03-19 02:00:36,157 [printer.py:reinit()] - # Temperature devices: 2
2024-03-19 02:00:36,157 [printer.py:reinit()] - # Fans: 2
2024-03-19 02:00:36,158 [printer.py:reinit()] - # Output pins: 0
2024-03-19 02:00:36,158 [printer.py:reinit()] - # Leds: 20
2024-03-19 02:00:36,158 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-03-19 02:00:36,220 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-03-19 02:00:36,226 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor mcu&fan&heater_fan extruder_fan&filament_switch_sensor extruder&neopixel sb_leds
2024-03-19 02:00:36,484 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-03-19 02:00:36,484 [screen.py:init_klipper()] - Printer initialized
2024-03-19 02:00:36,485 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2024-03-19 02:00:36,485 [printer.py:change_state()] - Adding callback for state: ready
2024-03-19 02:00:36,696 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-03-19 02:00:36,711 [screen.py:_load_panel()] - Loading panel: main_menu
2024-03-19 02:00:37,154 [main_menu.py:__init__()] - ### Making MainMenu
2024-03-19 02:00:37,227 [main_menu.py:add_device()] - Adding device: extruder
2024-03-19 02:00:37,265 [main_menu.py:add_device()] - Adding device: heater_bed
2024-03-19 02:00:37,294 [main_menu.py:add_device()] - Adding device: temperature_sensor mcu
2024-03-19 02:00:37,437 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-03-19 02:00:37,439 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-03-19 02:00:37,510 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor mcu', 'heater_bed', 'extruder']
2024-03-19 02:00:37,512 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-03-19 02:00:37,543 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-03-19 02:01:01,309 [functions.py:log_start()] - --------------------KlipperScreen Log Start--------------------
2024-03-19 02:01:01,310 [functions.py:log_start()] - KlipperScreen Version: v0.3.9-50-gdaed9a0
2024-03-19 02:01:01,310 [functions.py:log_start()] - Python version: 3.11
2024-03-19 02:01:01,631 [config.py:get_config_file_location()] - Passed config (-c): .
2024-03-19 02:01:01,634 [config.py:__init__()] - Config path location: /home/pi/KlipperScreen/ks_includes/defaults.conf
2024-03-19 02:01:01,680 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2024-03-19 02:01:01,913 [config.py:create_translations()] - Selected lang: None OS lang: en_GB
2024-03-19 02:01:01,913 [config.py:install_language()] - Using lang en
2024-03-19 02:01:01,958 [screen.py:__init__()] - Monitors: 1 using number: 0
2024-03-19 02:01:01,962 [screen.py:__init__()] - Wayland: False Display name: :0
2024-03-19 02:01:01,968 [screen.py:__init__()] - Screen resolution: 1024x768
2024-03-19 02:01:01,971 [KlippyGtk.py:__init__()] - Font size: 23.8 (medium)
2024-03-19 02:01:02,888 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2024-03-19 02:01:02,910 [screen.py:set_screenblanking_timeout()] - Using DPMS
2024-03-19 02:01:02,932 [screen.py:initial_connection()] - Default printer: None
2024-03-19 02:01:03,045 [screen.py:connect_printer()] - Connecting to printer: Printer
2024-03-19 02:01:03,046 [screen.py:_load_panel()] - Loading panel: splash_screen
2024-03-19 02:01:03,192 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-03-19 02:01:03,234 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-03-19 02:01:03,234 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-03-19 02:01:03,269 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/access/oneshot_token
2024-03-19 02:01:03,294 [KlippyWebsocket.py:connect()] - Starting websocket thread
2024-03-19 02:01:03,311 [_logging.py:info()] - Websocket connected
2024-03-19 02:01:03,312 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2024-03-19 02:01:03,316 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-03-19 02:01:03,339 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-03-19 02:01:03,361 [printer.py:configure_cameras()] - Cameras: []
2024-03-19 02:01:03,362 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'ready', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'octoprint_compat', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-318-g9813011', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-03-19 02:01:03,363 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-03-19 02:01:03,388 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-03-19 02:01:03,451 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set allow_park = client.park_at_cancel | default(false) | lower == \'true\' %}\n{% set retract = client.cancel_retract | default(5.0) | abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x | default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y | default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x | length > 0 or park_y | length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro | default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set idle_timeout = client.idle_timeout | default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE | default(1) | int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro | default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move | default(velocity) %}\n{% set runout_resume = True if client.runout_sensor | default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state | upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro | default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY | default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}"}, 'neopixel sb_leds': {'pin': 'EBBCan:gpio16', 'chain_count': '3', 'color_order': 'GRB', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0'}, 'led_effect sb_logo_busy': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (1,0,0)'}, 'led_effect sb_logo_cleaning': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.02, 0.5)'}, 'led_effect sb_logo_calibrating_z': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 0.35)'}, 'led_effect sb_logo_heating': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nbreathing  3 1 top (1, 0.18, 0)'}, 'led_effect sb_logo_cooling': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nbreathing  3 1 top (0, 0, 1)'}, 'led_effect sb_logo_homing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.6, 0.2)'}, 'led_effect sb_logo_leveling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.5, 0.1, 0.4)'}, 'led_effect sb_logo_meshing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.2, 1.0, 0.0)'}, 'led_effect sb_logo_printing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.3, 0.3, 0.0),(0.3, 0.1, 0.0)'}, 'led_effect sb_logo_standby': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.01, 0.01, 0.01)'}, 'led_effect sb_logo_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 1.0, 0.0)'}, 'led_effect sb_nozzle_heating': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (1.0, 0.18, 0.0, 0.0)'}, 'led_effect sb_nozzle_cooling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 1.0, 0.1)'}, 'led_effect sb_nozzle_standby': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.6, 0.0, 0.0, 0.0)'}, 'led_effect sb_nozzle_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.6, 1.0, 0.0, 0.1)'}, 'led_effect sb_critical_error': {'leds': '\nneopixel:sb_leds', 'layers': '\nstrobe         1  1.5   add        (1.0,  1.0, 1.0)\nbreathing      2  0     difference (0.95, 0.0, 0.0)\nstatic         1  0     top        (1.0,  0.0, 0.0)', 'autostart': 'false', 'frame_rate': '24', 'run_on_error': 'true'}, 'led_effect rainbow': {'leds': '\nneopixel:sb_leds', 'autostart': 'true', 'frame_rate': '24', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.0, 0.3, 0.0),(0.0, 0.0, 0.3)'}, 'led_effect set_nozzle_leds': {'leds': '\nneopixel:sb_leds (2,3)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nstatic         0  0     top        (0.5,  0.5, 0.5)'}, 'led_effect set_logo_leds': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nstatic         0  0     top        (1.0,  1.0, 1.0)'}, 'gcode_macro set_logo_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds STOP=1'}, 'gcode_macro set_logo_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1'}, 'gcode_macro status_off': {'gcode': '\nSTOP_LED_EFFECTS'}, 'gcode_macro status_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=rainbow'}, 'gcode_macro status_part_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready'}, 'gcode_macro status_busy': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_busy\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_heating\nSET_LED_EFFECT EFFECT=sb_nozzle_heating'}, 'gcode_macro status_cooling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cooling\nSET_LED_EFFECT EFFECT=sb_nozzle_cooling'}, 'gcode_macro status_leveling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_leveling\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_homing\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cleaning\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_meshing\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_calibrating_z\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_printing\nset_nozzle_leds_on'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_sam4e8e_00313753364B37373032303038303139-if00'}, 'mcu EBBCan': {'canbus_uuid': '8250861450f7'}, 'adxl345': {'cs_pin': 'EBBCan:gpio1', 'spi_software_sclk_pin': 'EBBCan:gpio2', 'spi_software_mosi_pin': 'EBBCan:gpio0', 'spi_software_miso_pin': 'EBBCan:gpio3', 'axes_map': 'z,-y,x'}, 'resonance_tester': {'probe_points': '100, 100, 20', 'accel_chip': 'adxl345'}, 'input_shaper': {'shaper_freq_x': '45', 'shaper_type': '3hump_ei'}, 'stepper_x': {'step_pin': 'PD6', 'dir_pin': '!PD11', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'EBBCan:gpio24', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '40'}, 'tmc2660 stepper_x': {'cs_pin': 'PD14', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'stepper_y': {'step_pin': 'PD7', 'dir_pin': '!PD12', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'PA2', 'position_endstop': '0', 'position_max': '225', 'position_min': '-4', 'homing_speed': '35', 'homing_retract_dist': '0'}, 'tmc2660 stepper_y': {'cs_pin': 'PC9', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'stepper_z': {'step_pin': 'PD8', 'dir_pin': '!PD13', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '230', 'position_min': '-2.5', 'homing_speed': '35.0'}, 'tmc2660 stepper_z': {'cs_pin': 'PC10', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'adc_temperature my_thermistor': {'temperature1': '0', 'resistance1': '1000', 'temperature2': '80', 'resistance2': '1309'}, 'extruder': {'step_pin': '!EBBCan:gpio18', 'dir_pin': 'EBBCan:gpio19', 'enable_pin': '!EBBCan:gpio17', 'microsteps': '32', 'rotation_distance': '21.63024711', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'gear_ratio': '50:10', 'heater_pin': 'EBBCan:gpio7', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'EBBCan:gpio27', 'control': 'pid', 'pid_kp': '21.527', 'pid_ki': '1.063', 'pid_kd': '108.982', 'min_temp': '0', 'max_temp': '250'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan:gpio20', 'run_current': '0.5', 'stealthchop_threshold': '999999'}, 'filament_switch_sensor extruder': {'pause_on_runout': 'True', 'switch_pin': 'EBBCan:gpio21'}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu'}, 'thermistor chamber_temp': {'temperature1': '25', 'resistance1': '10000', 'beta': '3950'}, 'heater_bed': {'heater_pin': '!PA19', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PC13', 'control': 'watermark', 'min_temp': '0', 'max_temp': '120'}, 'heater_fan extruder_fan': {'pin': 'EBBCan:gpio13', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'EBBCan:gpio14', 'cycle_time': '.08', 'kick_start_time': '.25'}, 'probe': {'pin': '^EBBCan:gpio22', 'x_offset': '0', 'y_offset': '0', 'samples': '3', 'samples_result': 'median', 'sample_retract_dist': '3', 'samples_tolerance': '0.015', 'samples_tolerance_retries': '3', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'z_offset': '-1.500'}, 'homing_override': {'axes': 'z', 'set_position_z': '0', 'gcode': '\nstatus_homing\nG90\nG0 Z5 F500\nG28 X0 Y0\nG0 X150 Y100 F9000\nG28 Z0\nG0 Z5 F500\nstatus_ready'}, 'bed_mesh': {'speed': '150', 'horizontal_move_z': '5', 'mesh_min': '25,35.0', 'mesh_max': '225.0,220', 'probe_count': '6,6', 'algorithm': 'bicubic', 'fade_start': '1', 'fade_end': '10', 'fade_target': '0'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\nM117 Homing...\nG28 Y0 X0 Z0\n\n\n\n\n\n\n\n\n\n\n\n\nSTATUS_HEATING\nM107\nM117 Heating bed\nM190 S{ params.BED }\nM117 Heating nozzle\nM109 S{target_extruder}\nstatus_ready\nG1 Z15.0 F600\nG1 X125 Y125 F3000\nG92 E0\nG1 F9000\nstatus_printing\nM117 Printing...'}, 'gcode_macro PRINT_END': {'gcode': '\nstatus_busy\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\n\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y} F3600\nM117 Finished!\nstatus_off'}, 'printer': {'kinematics': 'corexz', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '5', 'max_z_accel': '100'}, 'force_move': {'enable_force_move': 'true'}, 'exclude_object': {}, 'bed_mesh default': {'version': '1', 'points': '\n-0.287500, -0.112500, -0.062500, -0.025000, 0.137500, -0.137500\n-0.225000, -0.112500, -0.087500, 0.037500, 0.137500, 0.287500\n-0.287500, -0.200000, -0.087500, -0.000000, 0.137500, 0.300000\n-0.337500, -0.200000, -0.137500, -0.012500, 0.125000, 0.275000\n-0.300000, -0.162500, -0.062500, 0.037500, 0.187500, 0.337500\n-0.212500, -0.075000, 0.025000, 0.125000, 0.275000, 0.450000', 'x_count': '6', 'y_count': '6', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'bicubic', 'tension': '0.2', 'min_x': '25.0', 'max_x': '225.0', 'min_y': '35.0', 'max_y': '220.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_sam4e8e_00313753364B37373032303038303139-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu ebbcan': {'canbus_uuid': '8250861450f7', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set allow_park = client.park_at_cancel | default(false) | lower == \'true\' %}\n{% set retract = client.cancel_retract | default(5.0) | abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x | default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y | default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x | length > 0 or park_y | length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro | default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set idle_timeout = client.idle_timeout | default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE | default(1) | int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro | default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move | default(velocity) %}\n{% set runout_resume = True if client.runout_sensor | default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state | upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro | default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY | default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'neopixel sb_leds': {'pin': 'EBBCan:gpio16', 'chain_count': 3, 'color_order': ['GRB'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'led_effect sb_logo_busy': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1,0,0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_cleaning': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.02, 0.5)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_calibrating_z': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 0.35)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1, 0.18, 0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0, 0, 1)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_homing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.6, 0.2)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_leveling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.5, 0.1, 0.4)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_meshing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.2, 1.0, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_printing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.3, 0.3, 0.0),(0.3, 0.1, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_standby': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.01, 0.01, 0.01)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 1.0, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_nozzle_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1.0, 0.18, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 1.0, 0.1)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_standby': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.6, 0.0, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.6, 1.0, 0.0, 0.1)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_critical_error': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': True, 'endstops': '', 'layers': '\nstrobe         1  1.5   add        (1.0,  1.0, 1.0)\nbreathing      2  0     difference (0.95, 0.0, 0.0)\nstatic         1  0     top        (1.0,  0.0, 0.0)', 'leds': '\nneopixel:sb_leds'}, 'led_effect rainbow': {'frame_rate': 24.0, 'autostart': True, 'run_on_error': False, 'endstops': '', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.0, 0.3, 0.0),(0.0, 0.0, 0.3)', 'leds': '\nneopixel:sb_leds'}, 'led_effect set_nozzle_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic         0  0     top        (0.5,  0.5, 0.5)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect set_logo_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic         0  0     top        (1.0,  1.0, 1.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'gcode_macro set_logo_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nSTOP_LED_EFFECTS', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=rainbow', 'description': 'G-Code macro'}, 'gcode_macro status_part_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_busy\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_heating\nSET_LED_EFFECT EFFECT=sb_nozzle_heating', 'description': 'G-Code macro'}, 'gcode_macro status_cooling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cooling\nSET_LED_EFFECT EFFECT=sb_nozzle_cooling', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_leveling\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_homing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cleaning\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_meshing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_calibrating_z\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_printing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'adxl345': {'axes_map': ['z', '-y', 'x'], 'rate': 3200, 'cs_pin': 'EBBCan:gpio1', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'EBBCan:gpio2', 'spi_software_miso_pin': 'EBBCan:gpio3', 'spi_software_mosi_pin': 'EBBCan:gpio0'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[100.0, 100.0, 20.0]], 'accel_chip': 'adxl345'}, 'input_shaper': {'shaper_type': '3hump_ei', 'shaper_type_x': '3hump_ei', 'damping_ratio_x': 0.1, 'shaper_freq_x': 45.0, 'shaper_type_y': '3hump_ei', 'damping_ratio_y': 0.1, 'shaper_freq_y': 0.0}, 'tmc2660 stepper_x': {'cs_pin': 'PD14', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PD6', 'dir_pin': '!PD11', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'EBBCan:gpio24', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2660 stepper_y': {'cs_pin': 'PC9', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PD7', 'dir_pin': '!PD12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'PA2', 'position_endstop': 0.0, 'position_min': -4.0, 'position_max': 225.0, 'homing_speed': 35.0, 'second_homing_speed': 17.5, 'homing_retract_speed': 35.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2660 stepper_z': {'cs_pin': 'PC10', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PD8', 'dir_pin': '!PD13', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -2.5, 'position_max': 230.0, 'homing_speed': 35.0, 'second_homing_speed': 17.5, 'homing_retract_speed': 35.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'adc_temperature my_thermistor': {'resistance1': 1000.0, 'temperature1': 0.0, 'temperature2': 80.0, 'resistance2': 1309.0}, 'tmc2209 extruder': {'uart_pin': 'EBBCan:gpio20', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan:gpio27', 'min_temp': 0.0, 'max_temp': 250.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 21.527, 'pid_ki': 1.063, 'pid_kd': 108.982, 'heater_pin': 'EBBCan:gpio7', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': '!EBBCan:gpio18', 'pressure_advance': 0.0, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'EBBCan:gpio19', 'rotation_distance': 21.63024711, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!EBBCan:gpio17'}, 'filament_switch_sensor extruder': {'switch_pin': 'EBBCan:gpio21', 'pause_on_runout': True, 'runout_gcode': '', 'pause_delay': 0.5, 'event_delay': 3.0}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'thermistor chamber_temp': {'temperature1': 25.0, 'resistance1': 10000.0, 'beta': 3950.0}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PC13', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'watermark', 'max_delta': 2.0, 'heater_pin': '!PA19', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan extruder_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'EBBCan:gpio13', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.25, 'off_below': 0.0, 'cycle_time': 0.08, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'EBBCan:gpio14'}, 'probe': {'z_offset': -1.5, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': '^EBBCan:gpio22', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 3, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.015, 'samples_tolerance_retries': 3}, 'homing_override': {'set_position_z': 0.0, 'axes': 'z', 'gcode': '\nstatus_homing\nG90\nG0 Z5 F500\nG28 X0 Y0\nG0 X150 Y100 F9000\nG28 Z0\nG0 Z5 F500\nstatus_ready'}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [6, 6], 'mesh_min': [25.0, 35.0], 'mesh_max': [225.0, 220.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 150.0, 'fade_start': 1.0, 'fade_end': 10.0, 'fade_target': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[-0.2875, -0.1125, -0.0625, -0.025, 0.1375, -0.1375], [-0.225, -0.1125, -0.0875, 0.0375, 0.1375, 0.2875], [-0.2875, -0.2, -0.0875, -0.0, 0.1375, 0.3], [-0.3375, -0.2, -0.1375, -0.0125, 0.125, 0.275], [-0.3, -0.1625, -0.0625, 0.0375, 0.1875, 0.3375], [-0.2125, -0.075, 0.025, 0.125, 0.275, 0.45]], 'min_x': 25.0, 'max_x': 225.0, 'min_y': 35.0, 'max_y': 220.0, 'x_count': 6, 'y_count': 6, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'bicubic', 'tension': 0.2}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\nM117 Homing...\nG28 Y0 X0 Z0\n\n\n\n\n\n\n\n\n\n\n\n\nSTATUS_HEATING\nM107\nM117 Heating bed\nM190 S{ params.BED }\nM117 Heating nozzle\nM109 S{target_extruder}\nstatus_ready\nG1 Z15.0 F600\nG1 X125 Y125 F3000\nG92 E0\nG1 F9000\nstatus_printing\nM117 Printing...', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\nstatus_busy\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\n\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y} F3600\nM117 Finished!\nstatus_off', 'description': 'G-Code macro'}, 'force_move': {'enable_force_move': True}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'max_accel_to_decel': 1500.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexz', 'max_z_velocity': 5.0, 'max_z_accel': 100.0}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-03-19 02:01:03,457 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-03-19 02:01:03,461 [printer.py:reinit()] - Klipper version: v0.12.0-114-ga77d0790-dirty
2024-03-19 02:01:03,462 [printer.py:reinit()] - # Extruders: 1
2024-03-19 02:01:03,462 [printer.py:reinit()] - # Temperature devices: 2
2024-03-19 02:01:03,462 [printer.py:reinit()] - # Fans: 2
2024-03-19 02:01:03,463 [printer.py:reinit()] - # Output pins: 0
2024-03-19 02:01:03,463 [printer.py:reinit()] - # Leds: 20
2024-03-19 02:01:03,463 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-03-19 02:01:03,497 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-03-19 02:01:03,502 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor mcu&fan&heater_fan extruder_fan&filament_switch_sensor extruder&neopixel sb_leds
2024-03-19 02:01:03,773 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-03-19 02:01:03,774 [screen.py:init_klipper()] - Printer initialized
2024-03-19 02:01:03,775 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2024-03-19 02:01:03,776 [printer.py:change_state()] - Adding callback for state: ready
2024-03-19 02:01:03,912 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-03-19 02:01:03,922 [screen.py:_load_panel()] - Loading panel: main_menu
2024-03-19 02:01:04,158 [main_menu.py:__init__()] - ### Making MainMenu
2024-03-19 02:01:04,194 [main_menu.py:add_device()] - Adding device: extruder
2024-03-19 02:01:04,213 [main_menu.py:add_device()] - Adding device: heater_bed
2024-03-19 02:01:04,233 [main_menu.py:add_device()] - Adding device: temperature_sensor mcu
2024-03-19 02:01:04,342 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-03-19 02:01:04,345 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-03-19 02:01:04,410 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor mcu', 'heater_bed', 'extruder']
2024-03-19 02:01:04,415 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-03-19 02:01:04,443 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-03-19 02:57:09,970 [functions.py:log_start()] - --------------------KlipperScreen Log Start--------------------
2024-03-19 02:57:09,970 [functions.py:log_start()] - KlipperScreen Version: v0.3.9-50-gdaed9a0
2024-03-19 02:57:09,971 [functions.py:log_start()] - Python version: 3.11
2024-03-19 02:57:10,403 [config.py:get_config_file_location()] - Passed config (-c): .
2024-03-19 02:57:10,405 [config.py:__init__()] - Config path location: /home/pi/KlipperScreen/ks_includes/defaults.conf
2024-03-19 02:57:10,458 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2024-03-19 02:57:10,742 [config.py:create_translations()] - Selected lang: None OS lang: en_GB
2024-03-19 02:57:10,744 [config.py:install_language()] - Using lang en
2024-03-19 02:57:10,799 [screen.py:__init__()] - Monitors: 1 using number: 0
2024-03-19 02:57:10,802 [screen.py:__init__()] - Wayland: False Display name: :100
2024-03-19 02:57:10,807 [screen.py:__init__()] - Screen resolution: 1058x540
2024-03-19 02:57:10,809 [KlippyGtk.py:__init__()] - Font size: 18.6 (medium)
2024-03-19 02:57:13,047 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2024-03-19 02:57:13,065 [screen.py:set_screenblanking_timeout()] - DPMS State FAIL
2024-03-19 02:57:13,071 [screen.py:show_popup_message()] - error: DPMS has failed to load and has been disabled
2024-03-19 02:57:13,107 [config.py:save_user_config_options()] - Creating a new config file in /home/pi/printer_data/config/KlipperScreen.conf
2024-03-19 02:57:13,110 [screen.py:set_screenblanking_timeout()] - Not using DPMS
2024-03-19 02:57:13,129 [screen.py:initial_connection()] - Default printer: None
2024-03-19 02:57:13,245 [screen.py:connect_printer()] - Connecting to printer: Printer
2024-03-19 02:57:13,246 [screen.py:_load_panel()] - Loading panel: splash_screen
2024-03-19 02:57:13,402 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-03-19 02:57:13,442 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-03-19 02:57:13,443 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-03-19 02:57:13,487 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/access/oneshot_token
2024-03-19 02:57:13,511 [KlippyWebsocket.py:connect()] - Starting websocket thread
2024-03-19 02:57:13,529 [_logging.py:info()] - Websocket connected
2024-03-19 02:57:13,530 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2024-03-19 02:57:13,557 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-03-19 02:57:13,582 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-03-19 02:57:13,604 [printer.py:configure_cameras()] - Cameras: []
2024-03-19 02:57:13,605 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'ready', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'octoprint_compat', 'update_manager', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-318-g9813011', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-03-19 02:57:13,606 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-03-19 02:57:13,633 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-03-19 02:57:13,807 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set allow_park = client.park_at_cancel | default(false) | lower == \'true\' %}\n{% set retract = client.cancel_retract | default(5.0) | abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x | default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y | default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x | length > 0 or park_y | length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro | default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set idle_timeout = client.idle_timeout | default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE | default(1) | int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro | default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move | default(velocity) %}\n{% set runout_resume = True if client.runout_sensor | default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state | upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro | default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY | default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}"}, 'neopixel sb_leds': {'pin': 'EBBCan:gpio16', 'chain_count': '3', 'color_order': 'GRB', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0'}, 'led_effect sb_logo_busy': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (1,0,0)'}, 'led_effect sb_logo_cleaning': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.02, 0.5)'}, 'led_effect sb_logo_calibrating_z': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 0.35)'}, 'led_effect sb_logo_heating': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nbreathing  3 1 top (1, 0.18, 0)'}, 'led_effect sb_logo_cooling': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nbreathing  3 1 top (0, 0, 1)'}, 'led_effect sb_logo_homing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.6, 0.2)'}, 'led_effect sb_logo_leveling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.5, 0.1, 0.4)'}, 'led_effect sb_logo_meshing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.2, 1.0, 0.0)'}, 'led_effect sb_logo_printing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.3, 0.3, 0.0),(0.3, 0.1, 0.0)'}, 'led_effect sb_logo_standby': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.01, 0.01, 0.01)'}, 'led_effect sb_logo_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 1.0, 0.0)'}, 'led_effect sb_nozzle_heating': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (1.0, 0.18, 0.0, 0.0)'}, 'led_effect sb_nozzle_cooling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 1.0, 0.1)'}, 'led_effect sb_nozzle_standby': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.6, 0.0, 0.0, 0.0)'}, 'led_effect sb_nozzle_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.6, 1.0, 0.0, 0.1)'}, 'led_effect sb_critical_error': {'leds': '\nneopixel:sb_leds', 'layers': '\nstrobe         1  1.5   add        (1.0,  1.0, 1.0)\nbreathing      2  0     difference (0.95, 0.0, 0.0)\nstatic         1  0     top        (1.0,  0.0, 0.0)', 'autostart': 'false', 'frame_rate': '24', 'run_on_error': 'true'}, 'led_effect rainbow': {'leds': '\nneopixel:sb_leds', 'autostart': 'true', 'frame_rate': '24', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.0, 0.3, 0.0),(0.0, 0.0, 0.3)'}, 'led_effect set_nozzle_leds': {'leds': '\nneopixel:sb_leds (2,3)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nstatic         0  0     top        (0.5,  0.5, 0.5)'}, 'led_effect set_logo_leds': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nstatic         0  0     top        (1.0,  1.0, 1.0)'}, 'gcode_macro set_logo_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds STOP=1'}, 'gcode_macro set_logo_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1'}, 'gcode_macro status_off': {'gcode': '\nSTOP_LED_EFFECTS'}, 'gcode_macro status_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=rainbow'}, 'gcode_macro status_part_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready'}, 'gcode_macro status_busy': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_busy\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_heating\nSET_LED_EFFECT EFFECT=sb_nozzle_heating'}, 'gcode_macro status_cooling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cooling\nSET_LED_EFFECT EFFECT=sb_nozzle_cooling'}, 'gcode_macro status_leveling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_leveling\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_homing\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cleaning\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_meshing\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_calibrating_z\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_printing\nset_nozzle_leds_on'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_sam4e8e_00313753364B37373032303038303139-if00'}, 'mcu EBBCan': {'canbus_uuid': '8250861450f7'}, 'adxl345': {'cs_pin': 'EBBCan:gpio1', 'spi_software_sclk_pin': 'EBBCan:gpio2', 'spi_software_mosi_pin': 'EBBCan:gpio0', 'spi_software_miso_pin': 'EBBCan:gpio3', 'axes_map': 'z,-y,x'}, 'resonance_tester': {'probe_points': '100, 100, 20', 'accel_chip': 'adxl345'}, 'input_shaper': {'shaper_freq_x': '45', 'shaper_type': '3hump_ei'}, 'stepper_x': {'step_pin': 'PD6', 'dir_pin': '!PD11', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'EBBCan:gpio24', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '40'}, 'tmc2660 stepper_x': {'cs_pin': 'PD14', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'stepper_y': {'step_pin': 'PD7', 'dir_pin': '!PD12', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'PA2', 'position_endstop': '0', 'position_max': '225', 'position_min': '-4', 'homing_speed': '35', 'homing_retract_dist': '0'}, 'tmc2660 stepper_y': {'cs_pin': 'PC9', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'stepper_z': {'step_pin': 'PD8', 'dir_pin': '!PD13', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '230', 'position_min': '-2.5', 'homing_speed': '35.0'}, 'tmc2660 stepper_z': {'cs_pin': 'PC10', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'adc_temperature my_thermistor': {'temperature1': '0', 'resistance1': '1000', 'temperature2': '80', 'resistance2': '1309'}, 'extruder': {'step_pin': '!EBBCan:gpio18', 'dir_pin': 'EBBCan:gpio19', 'enable_pin': '!EBBCan:gpio17', 'microsteps': '32', 'rotation_distance': '21.63024711', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'gear_ratio': '50:10', 'heater_pin': 'EBBCan:gpio7', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'EBBCan:gpio27', 'control': 'pid', 'pid_kp': '21.527', 'pid_ki': '1.063', 'pid_kd': '108.982', 'min_temp': '0', 'max_temp': '250'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan:gpio20', 'run_current': '0.5', 'stealthchop_threshold': '999999'}, 'filament_switch_sensor extruder': {'pause_on_runout': 'True', 'switch_pin': 'EBBCan:gpio21'}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu'}, 'thermistor chamber_temp': {'temperature1': '25', 'resistance1': '10000', 'beta': '3950'}, 'heater_bed': {'heater_pin': '!PA19', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PC13', 'control': 'watermark', 'min_temp': '0', 'max_temp': '120'}, 'heater_fan extruder_fan': {'pin': 'EBBCan:gpio13', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'EBBCan:gpio14', 'cycle_time': '.08', 'kick_start_time': '.25'}, 'probe': {'pin': '^EBBCan:gpio22', 'x_offset': '0', 'y_offset': '0', 'samples': '3', 'samples_result': 'median', 'sample_retract_dist': '3', 'samples_tolerance': '0.015', 'samples_tolerance_retries': '3', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'z_offset': '-1.500'}, 'homing_override': {'axes': 'z', 'set_position_z': '0', 'gcode': '\nstatus_homing\nG90\nG0 Z5 F500\nG28 X0 Y0\nG0 X150 Y100 F9000\nG28 Z0\nG0 Z5 F500\nstatus_ready'}, 'bed_mesh': {'speed': '150', 'horizontal_move_z': '5', 'mesh_min': '25,35.0', 'mesh_max': '225.0,220', 'probe_count': '6,6', 'algorithm': 'bicubic', 'fade_start': '1', 'fade_end': '10', 'fade_target': '0'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\nM117 Homing...\nG28 Y0 X0 Z0\n\n\n\n\n\n\n\n\n\n\n\n\nSTATUS_HEATING\nM107\nM117 Heating bed\nM190 S{ params.BED }\nM117 Heating nozzle\nM109 S{target_extruder}\nstatus_ready\nG1 Z15.0 F600\nG1 X125 Y125 F3000\nG92 E0\nG1 F9000\nstatus_printing\nM117 Printing...'}, 'gcode_macro PRINT_END': {'gcode': '\nstatus_busy\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\n\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y} F3600\nM117 Finished!\nstatus_off'}, 'printer': {'kinematics': 'corexz', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '5', 'max_z_accel': '100'}, 'force_move': {'enable_force_move': 'true'}, 'exclude_object': {}, 'bed_mesh default': {'version': '1', 'points': '\n-0.287500, -0.112500, -0.062500, -0.025000, 0.137500, -0.137500\n-0.225000, -0.112500, -0.087500, 0.037500, 0.137500, 0.287500\n-0.287500, -0.200000, -0.087500, -0.000000, 0.137500, 0.300000\n-0.337500, -0.200000, -0.137500, -0.012500, 0.125000, 0.275000\n-0.300000, -0.162500, -0.062500, 0.037500, 0.187500, 0.337500\n-0.212500, -0.075000, 0.025000, 0.125000, 0.275000, 0.450000', 'x_count': '6', 'y_count': '6', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'bicubic', 'tension': '0.2', 'min_x': '25.0', 'max_x': '225.0', 'min_y': '35.0', 'max_y': '220.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_sam4e8e_00313753364B37373032303038303139-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu ebbcan': {'canbus_uuid': '8250861450f7', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set allow_park = client.park_at_cancel | default(false) | lower == \'true\' %}\n{% set retract = client.cancel_retract | default(5.0) | abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x | default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y | default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x | length > 0 or park_y | length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro | default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set idle_timeout = client.idle_timeout | default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE | default(1) | int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro | default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move | default(velocity) %}\n{% set runout_resume = True if client.runout_sensor | default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state | upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro | default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY | default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'neopixel sb_leds': {'pin': 'EBBCan:gpio16', 'chain_count': 3, 'color_order': ['GRB'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'led_effect sb_logo_busy': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1,0,0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_cleaning': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.02, 0.5)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_calibrating_z': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 0.35)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1, 0.18, 0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0, 0, 1)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_homing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.6, 0.2)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_leveling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.5, 0.1, 0.4)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_meshing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.2, 1.0, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_printing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.3, 0.3, 0.0),(0.3, 0.1, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_standby': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.01, 0.01, 0.01)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 1.0, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_nozzle_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1.0, 0.18, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 1.0, 0.1)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_standby': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.6, 0.0, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.6, 1.0, 0.0, 0.1)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_critical_error': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': True, 'endstops': '', 'layers': '\nstrobe         1  1.5   add        (1.0,  1.0, 1.0)\nbreathing      2  0     difference (0.95, 0.0, 0.0)\nstatic         1  0     top        (1.0,  0.0, 0.0)', 'leds': '\nneopixel:sb_leds'}, 'led_effect rainbow': {'frame_rate': 24.0, 'autostart': True, 'run_on_error': False, 'endstops': '', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.0, 0.3, 0.0),(0.0, 0.0, 0.3)', 'leds': '\nneopixel:sb_leds'}, 'led_effect set_nozzle_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic         0  0     top        (0.5,  0.5, 0.5)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect set_logo_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic         0  0     top        (1.0,  1.0, 1.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'gcode_macro set_logo_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nSTOP_LED_EFFECTS', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=rainbow', 'description': 'G-Code macro'}, 'gcode_macro status_part_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_busy\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_heating\nSET_LED_EFFECT EFFECT=sb_nozzle_heating', 'description': 'G-Code macro'}, 'gcode_macro status_cooling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cooling\nSET_LED_EFFECT EFFECT=sb_nozzle_cooling', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_leveling\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_homing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cleaning\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_meshing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_calibrating_z\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_printing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'adxl345': {'axes_map': ['z', '-y', 'x'], 'rate': 3200, 'cs_pin': 'EBBCan:gpio1', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'EBBCan:gpio2', 'spi_software_miso_pin': 'EBBCan:gpio3', 'spi_software_mosi_pin': 'EBBCan:gpio0'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[100.0, 100.0, 20.0]], 'accel_chip': 'adxl345'}, 'input_shaper': {'shaper_type': '3hump_ei', 'shaper_type_x': '3hump_ei', 'damping_ratio_x': 0.1, 'shaper_freq_x': 45.0, 'shaper_type_y': '3hump_ei', 'damping_ratio_y': 0.1, 'shaper_freq_y': 0.0}, 'tmc2660 stepper_x': {'cs_pin': 'PD14', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PD6', 'dir_pin': '!PD11', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'EBBCan:gpio24', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2660 stepper_y': {'cs_pin': 'PC9', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PD7', 'dir_pin': '!PD12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'PA2', 'position_endstop': 0.0, 'position_min': -4.0, 'position_max': 225.0, 'homing_speed': 35.0, 'second_homing_speed': 17.5, 'homing_retract_speed': 35.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2660 stepper_z': {'cs_pin': 'PC10', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PD8', 'dir_pin': '!PD13', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -2.5, 'position_max': 230.0, 'homing_speed': 35.0, 'second_homing_speed': 17.5, 'homing_retract_speed': 35.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'adc_temperature my_thermistor': {'resistance1': 1000.0, 'temperature1': 0.0, 'temperature2': 80.0, 'resistance2': 1309.0}, 'tmc2209 extruder': {'uart_pin': 'EBBCan:gpio20', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan:gpio27', 'min_temp': 0.0, 'max_temp': 250.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 21.527, 'pid_ki': 1.063, 'pid_kd': 108.982, 'heater_pin': 'EBBCan:gpio7', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': '!EBBCan:gpio18', 'pressure_advance': 0.0, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'EBBCan:gpio19', 'rotation_distance': 21.63024711, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!EBBCan:gpio17'}, 'filament_switch_sensor extruder': {'switch_pin': 'EBBCan:gpio21', 'pause_on_runout': True, 'runout_gcode': '', 'pause_delay': 0.5, 'event_delay': 3.0}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'thermistor chamber_temp': {'temperature1': 25.0, 'resistance1': 10000.0, 'beta': 3950.0}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PC13', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'watermark', 'max_delta': 2.0, 'heater_pin': '!PA19', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan extruder_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'EBBCan:gpio13', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.25, 'off_below': 0.0, 'cycle_time': 0.08, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'EBBCan:gpio14'}, 'probe': {'z_offset': -1.5, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': '^EBBCan:gpio22', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 3, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.015, 'samples_tolerance_retries': 3}, 'homing_override': {'set_position_z': 0.0, 'axes': 'z', 'gcode': '\nstatus_homing\nG90\nG0 Z5 F500\nG28 X0 Y0\nG0 X150 Y100 F9000\nG28 Z0\nG0 Z5 F500\nstatus_ready'}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [6, 6], 'mesh_min': [25.0, 35.0], 'mesh_max': [225.0, 220.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 150.0, 'fade_start': 1.0, 'fade_end': 10.0, 'fade_target': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[-0.2875, -0.1125, -0.0625, -0.025, 0.1375, -0.1375], [-0.225, -0.1125, -0.0875, 0.0375, 0.1375, 0.2875], [-0.2875, -0.2, -0.0875, -0.0, 0.1375, 0.3], [-0.3375, -0.2, -0.1375, -0.0125, 0.125, 0.275], [-0.3, -0.1625, -0.0625, 0.0375, 0.1875, 0.3375], [-0.2125, -0.075, 0.025, 0.125, 0.275, 0.45]], 'min_x': 25.0, 'max_x': 225.0, 'min_y': 35.0, 'max_y': 220.0, 'x_count': 6, 'y_count': 6, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'bicubic', 'tension': 0.2}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\nM117 Homing...\nG28 Y0 X0 Z0\n\n\n\n\n\n\n\n\n\n\n\n\nSTATUS_HEATING\nM107\nM117 Heating bed\nM190 S{ params.BED }\nM117 Heating nozzle\nM109 S{target_extruder}\nstatus_ready\nG1 Z15.0 F600\nG1 X125 Y125 F3000\nG92 E0\nG1 F9000\nstatus_printing\nM117 Printing...', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\nstatus_busy\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\n\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y} F3600\nM117 Finished!\nstatus_off', 'description': 'G-Code macro'}, 'force_move': {'enable_force_move': True}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'max_accel_to_decel': 1500.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexz', 'max_z_velocity': 5.0, 'max_z_accel': 100.0}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-03-19 02:57:13,814 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-03-19 02:57:13,817 [printer.py:reinit()] - Klipper version: v0.12.0-114-ga77d0790-dirty
2024-03-19 02:57:13,818 [printer.py:reinit()] - # Extruders: 1
2024-03-19 02:57:13,818 [printer.py:reinit()] - # Temperature devices: 2
2024-03-19 02:57:13,818 [printer.py:reinit()] - # Fans: 2
2024-03-19 02:57:13,819 [printer.py:reinit()] - # Output pins: 0
2024-03-19 02:57:13,819 [printer.py:reinit()] - # Leds: 20
2024-03-19 02:57:13,819 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-03-19 02:57:13,854 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-03-19 02:57:13,859 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor mcu&fan&heater_fan extruder_fan&filament_switch_sensor extruder&neopixel sb_leds
2024-03-19 02:57:14,138 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-03-19 02:57:14,138 [screen.py:init_klipper()] - Printer initialized
2024-03-19 02:57:14,139 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2024-03-19 02:57:14,139 [printer.py:change_state()] - Adding callback for state: ready
2024-03-19 02:57:14,490 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-03-19 02:57:14,501 [screen.py:_load_panel()] - Loading panel: main_menu
2024-03-19 02:57:14,767 [main_menu.py:__init__()] - ### Making MainMenu
2024-03-19 02:57:14,802 [main_menu.py:add_device()] - Adding device: extruder
2024-03-19 02:57:14,827 [main_menu.py:add_device()] - Adding device: heater_bed
2024-03-19 02:57:14,846 [main_menu.py:add_device()] - Adding device: temperature_sensor mcu
2024-03-19 02:57:14,958 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-03-19 02:57:14,961 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-03-19 02:57:15,025 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor mcu', 'heater_bed', 'extruder']
2024-03-19 02:57:15,030 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-03-19 02:57:15,058 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-03-19 02:57:24,912 [screen.py:_load_panel()] - Loading panel: gcode_macros
2024-03-19 02:57:25,293 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > gcode_macros
2024-03-19 02:57:29,663 [keyboard.py:__init__()] - Keyboard en
2024-03-19 02:57:30,373 [screen.py:update_size()] - Size changed: 1058x540
2024-03-19 02:57:49,216 [screen_panel.py:load_menu()] - loading menu options
2024-03-19 02:57:59,755 [screen_panel.py:unload_menu()] - self.menu: ['macros_menu', 'options_menu']
2024-03-19 02:58:10,548 [screen.py:_menu_go_back()] - #### Menu go back
2024-03-19 02:58:10,928 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-03-19 02:58:20,024 [screen.py:_load_panel()] - Loading panel: temperature
2024-03-19 02:58:20,130 [temperature.py:add_device()] - Adding device: extruder
2024-03-19 02:58:20,150 [temperature.py:add_device()] - Adding device: heater_bed
2024-03-19 02:58:20,170 [temperature.py:add_device()] - Adding device: temperature_sensor mcu
2024-03-19 02:58:20,192 [temperature.py:select_heater()] - Selecting extruder
2024-03-19 02:58:20,197 [temperature.py:select_heater()] - Selecting heater_bed
2024-03-19 02:58:20,312 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > temperature
2024-03-19 02:58:22,825 [screen.py:_menu_go_back()] - #### Menu go back
2024-03-19 02:58:23,157 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-03-19 02:58:27,766 [screen.py:_load_panel()] - Loading panel: shutdown
2024-03-19 02:58:28,096 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > shutdown
2024-03-19 02:58:33,073 [screen.py:_menu_go_back()] - #### Menu go back
2024-03-19 02:58:33,372 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-03-19 02:58:35,291 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > shutdown
2024-03-19 02:58:36,843 [screen.py:_menu_go_back()] - #### Menu go back
2024-03-19 02:58:37,169 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-03-19 03:00:07,530 [screen.py:_load_panel()] - Loading panel: move
2024-03-19 03:00:07,858 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2024-03-19 03:27:19,118 [functions.py:log_start()] - --------------------KlipperScreen Log Start--------------------
2024-03-19 03:27:19,118 [functions.py:log_start()] - KlipperScreen Version: v0.3.9-50-gdaed9a0
2024-03-19 03:27:19,119 [functions.py:log_start()] - Python version: 3.11
2024-03-19 03:27:19,439 [config.py:get_config_file_location()] - Passed config (-c): .
2024-03-19 03:27:19,440 [config.py:__init__()] - Config path location: /home/pi/printer_data/config/KlipperScreen.conf
2024-03-19 03:27:19,490 [config.py:log_config()] -  ===== Config File =====

=======================
2024-03-19 03:27:19,495 [config.py:__init__()] - ====== Saved Def ======

[main]
use_dpms = False

=======================
2024-03-19 03:27:19,497 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2024-03-19 03:27:19,733 [config.py:create_translations()] - Selected lang: None OS lang: en_GB
2024-03-19 03:27:19,733 [config.py:install_language()] - Using lang en
2024-03-19 03:27:19,772 [screen.py:__init__()] - Monitors: 1 using number: 0
2024-03-19 03:27:19,775 [screen.py:__init__()] - Wayland: False Display name: :100
2024-03-19 03:27:19,781 [screen.py:__init__()] - Screen resolution: 1058x540
2024-03-19 03:27:19,783 [KlippyGtk.py:__init__()] - Font size: 18.6 (medium)
2024-03-19 03:27:20,837 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2024-03-19 03:27:20,838 [screen.py:set_screenblanking_timeout()] - Not using DPMS
2024-03-19 03:27:20,855 [screen.py:initial_connection()] - Default printer: None
2024-03-19 03:27:20,971 [screen.py:connect_printer()] - Connecting to printer: Printer
2024-03-19 03:27:20,972 [screen.py:_load_panel()] - Loading panel: splash_screen
2024-03-19 03:27:21,113 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-03-19 03:27:21,155 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-03-19 03:27:21,155 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-03-19 03:27:21,188 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/access/oneshot_token
2024-03-19 03:27:21,211 [KlippyWebsocket.py:connect()] - Starting websocket thread
2024-03-19 03:27:21,230 [_logging.py:info()] - Websocket connected
2024-03-19 03:27:21,230 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2024-03-19 03:27:21,357 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-03-19 03:27:21,380 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-03-19 03:27:21,403 [printer.py:configure_cameras()] - Cameras: []
2024-03-19 03:27:21,404 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'ready', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'octoprint_compat', 'update_manager', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-318-g9813011', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-03-19 03:27:21,404 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-03-19 03:27:21,431 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-03-19 03:27:21,599 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set allow_park = client.park_at_cancel | default(false) | lower == \'true\' %}\n{% set retract = client.cancel_retract | default(5.0) | abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x | default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y | default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x | length > 0 or park_y | length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro | default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set idle_timeout = client.idle_timeout | default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE | default(1) | int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro | default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move | default(velocity) %}\n{% set runout_resume = True if client.runout_sensor | default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state | upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro | default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY | default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}"}, 'neopixel sb_leds': {'pin': 'EBBCan:gpio16', 'chain_count': '3', 'color_order': 'GRB', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0'}, 'led_effect sb_logo_busy': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (1,0,0)'}, 'led_effect sb_logo_cleaning': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.02, 0.5)'}, 'led_effect sb_logo_calibrating_z': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 0.35)'}, 'led_effect sb_logo_heating': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nbreathing  3 1 top (1, 0.18, 0)'}, 'led_effect sb_logo_cooling': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nbreathing  3 1 top (0, 0, 1)'}, 'led_effect sb_logo_homing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.6, 0.2)'}, 'led_effect sb_logo_leveling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.5, 0.1, 0.4)'}, 'led_effect sb_logo_meshing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.2, 1.0, 0.0)'}, 'led_effect sb_logo_printing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.3, 0.3, 0.0),(0.3, 0.1, 0.0)'}, 'led_effect sb_logo_standby': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.01, 0.01, 0.01)'}, 'led_effect sb_logo_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 1.0, 0.0)'}, 'led_effect sb_nozzle_heating': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (1.0, 0.18, 0.0, 0.0)'}, 'led_effect sb_nozzle_cooling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 1.0, 0.1)'}, 'led_effect sb_nozzle_standby': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.6, 0.0, 0.0, 0.0)'}, 'led_effect sb_nozzle_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.6, 1.0, 0.0, 0.1)'}, 'led_effect sb_critical_error': {'leds': '\nneopixel:sb_leds', 'layers': '\nstrobe         1  1.5   add        (1.0,  1.0, 1.0)\nbreathing      2  0     difference (0.95, 0.0, 0.0)\nstatic         1  0     top        (1.0,  0.0, 0.0)', 'autostart': 'false', 'frame_rate': '24', 'run_on_error': 'true'}, 'led_effect rainbow': {'leds': '\nneopixel:sb_leds', 'autostart': 'true', 'frame_rate': '24', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.0, 0.3, 0.0),(0.0, 0.0, 0.3)'}, 'led_effect set_nozzle_leds': {'leds': '\nneopixel:sb_leds (2,3)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nstatic         0  0     top        (0.5,  0.5, 0.5)'}, 'led_effect set_logo_leds': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nstatic         0  0     top        (1.0,  1.0, 1.0)'}, 'gcode_macro set_logo_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds STOP=1'}, 'gcode_macro set_logo_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1'}, 'gcode_macro status_off': {'gcode': '\nSTOP_LED_EFFECTS'}, 'gcode_macro status_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=rainbow'}, 'gcode_macro status_part_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready'}, 'gcode_macro status_busy': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_busy\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_heating\nSET_LED_EFFECT EFFECT=sb_nozzle_heating'}, 'gcode_macro status_cooling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cooling\nSET_LED_EFFECT EFFECT=sb_nozzle_cooling'}, 'gcode_macro status_leveling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_leveling\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_homing\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cleaning\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_meshing\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_calibrating_z\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_printing\nset_nozzle_leds_on'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_sam4e8e_00313753364B37373032303038303139-if00'}, 'mcu EBBCan': {'canbus_uuid': '8250861450f7'}, 'adxl345': {'cs_pin': 'EBBCan:gpio1', 'spi_software_sclk_pin': 'EBBCan:gpio2', 'spi_software_mosi_pin': 'EBBCan:gpio0', 'spi_software_miso_pin': 'EBBCan:gpio3', 'axes_map': 'z,-y,x'}, 'resonance_tester': {'probe_points': '100, 100, 20', 'accel_chip': 'adxl345'}, 'input_shaper': {'shaper_freq_x': '45', 'shaper_type': '3hump_ei'}, 'stepper_x': {'step_pin': 'PD6', 'dir_pin': '!PD11', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'EBBCan:gpio24', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '40'}, 'tmc2660 stepper_x': {'cs_pin': 'PD14', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'stepper_y': {'step_pin': 'PD7', 'dir_pin': '!PD12', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'PA2', 'position_endstop': '0', 'position_max': '225', 'position_min': '-4', 'homing_speed': '35', 'homing_retract_dist': '0'}, 'tmc2660 stepper_y': {'cs_pin': 'PC9', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'stepper_z': {'step_pin': 'PD8', 'dir_pin': '!PD13', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '230', 'position_min': '-2.5', 'homing_speed': '35.0'}, 'tmc2660 stepper_z': {'cs_pin': 'PC10', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'adc_temperature my_thermistor': {'temperature1': '0', 'resistance1': '1000', 'temperature2': '80', 'resistance2': '1309'}, 'extruder': {'step_pin': '!EBBCan:gpio18', 'dir_pin': 'EBBCan:gpio19', 'enable_pin': '!EBBCan:gpio17', 'microsteps': '32', 'rotation_distance': '21.63024711', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'gear_ratio': '50:10', 'heater_pin': 'EBBCan:gpio7', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'EBBCan:gpio27', 'control': 'pid', 'pid_kp': '21.527', 'pid_ki': '1.063', 'pid_kd': '108.982', 'min_temp': '0', 'max_temp': '250'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan:gpio20', 'run_current': '0.5', 'stealthchop_threshold': '999999'}, 'filament_switch_sensor extruder': {'pause_on_runout': 'True', 'switch_pin': 'EBBCan:gpio21'}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu'}, 'thermistor chamber_temp': {'temperature1': '25', 'resistance1': '10000', 'beta': '3950'}, 'heater_bed': {'heater_pin': '!PA19', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PC13', 'control': 'watermark', 'min_temp': '0', 'max_temp': '120'}, 'heater_fan extruder_fan': {'pin': 'EBBCan:gpio13', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'EBBCan:gpio14', 'cycle_time': '.08', 'kick_start_time': '.25'}, 'probe': {'pin': '^EBBCan:gpio22', 'x_offset': '0', 'y_offset': '0', 'samples': '3', 'samples_result': 'median', 'sample_retract_dist': '3', 'samples_tolerance': '0.015', 'samples_tolerance_retries': '3', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'z_offset': '-1.500'}, 'homing_override': {'axes': 'z', 'set_position_z': '0', 'gcode': '\nstatus_homing\nG90\nG0 Z5 F500\nG28 X0 Y0\nG0 X150 Y100 F9000\nG28 Z0\nG0 Z5 F500\nstatus_ready'}, 'bed_mesh': {'speed': '150', 'horizontal_move_z': '5', 'mesh_min': '25,35.0', 'mesh_max': '225.0,220', 'probe_count': '6,6', 'algorithm': 'bicubic', 'fade_start': '1', 'fade_end': '10', 'fade_target': '0'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\nM117 Homing...\nG28 Y0 X0 Z0\n\n\n\n\n\n\n\n\n\n\n\n\nSTATUS_HEATING\nM107\nM117 Heating bed\nM190 S{ params.BED }\nM117 Heating nozzle\nM109 S{target_extruder}\nstatus_ready\nG1 Z15.0 F600\nG1 X125 Y125 F3000\nG92 E0\nG1 F9000\nstatus_printing\nM117 Printing...'}, 'gcode_macro PRINT_END': {'gcode': '\nstatus_busy\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\n\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y} F3600\nM117 Finished!\nstatus_off'}, 'printer': {'kinematics': 'corexz', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '5', 'max_z_accel': '100'}, 'force_move': {'enable_force_move': 'true'}, 'exclude_object': {}, 'bed_mesh default': {'version': '1', 'points': '\n-0.287500, -0.112500, -0.062500, -0.025000, 0.137500, -0.137500\n-0.225000, -0.112500, -0.087500, 0.037500, 0.137500, 0.287500\n-0.287500, -0.200000, -0.087500, -0.000000, 0.137500, 0.300000\n-0.337500, -0.200000, -0.137500, -0.012500, 0.125000, 0.275000\n-0.300000, -0.162500, -0.062500, 0.037500, 0.187500, 0.337500\n-0.212500, -0.075000, 0.025000, 0.125000, 0.275000, 0.450000', 'x_count': '6', 'y_count': '6', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'bicubic', 'tension': '0.2', 'min_x': '25.0', 'max_x': '225.0', 'min_y': '35.0', 'max_y': '220.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_sam4e8e_00313753364B37373032303038303139-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu ebbcan': {'canbus_uuid': '8250861450f7', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set allow_park = client.park_at_cancel | default(false) | lower == \'true\' %}\n{% set retract = client.cancel_retract | default(5.0) | abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x | default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y | default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x | length > 0 or park_y | length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro | default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set idle_timeout = client.idle_timeout | default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE | default(1) | int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro | default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move | default(velocity) %}\n{% set runout_resume = True if client.runout_sensor | default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state | upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro | default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY | default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'neopixel sb_leds': {'pin': 'EBBCan:gpio16', 'chain_count': 3, 'color_order': ['GRB'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'led_effect sb_logo_busy': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1,0,0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_cleaning': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.02, 0.5)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_calibrating_z': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 0.35)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1, 0.18, 0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0, 0, 1)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_homing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.6, 0.2)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_leveling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.5, 0.1, 0.4)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_meshing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.2, 1.0, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_printing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.3, 0.3, 0.0),(0.3, 0.1, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_standby': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.01, 0.01, 0.01)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 1.0, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_nozzle_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1.0, 0.18, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 1.0, 0.1)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_standby': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.6, 0.0, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.6, 1.0, 0.0, 0.1)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_critical_error': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': True, 'endstops': '', 'layers': '\nstrobe         1  1.5   add        (1.0,  1.0, 1.0)\nbreathing      2  0     difference (0.95, 0.0, 0.0)\nstatic         1  0     top        (1.0,  0.0, 0.0)', 'leds': '\nneopixel:sb_leds'}, 'led_effect rainbow': {'frame_rate': 24.0, 'autostart': True, 'run_on_error': False, 'endstops': '', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.0, 0.3, 0.0),(0.0, 0.0, 0.3)', 'leds': '\nneopixel:sb_leds'}, 'led_effect set_nozzle_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic         0  0     top        (0.5,  0.5, 0.5)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect set_logo_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic         0  0     top        (1.0,  1.0, 1.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'gcode_macro set_logo_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nSTOP_LED_EFFECTS', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=rainbow', 'description': 'G-Code macro'}, 'gcode_macro status_part_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_busy\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_heating\nSET_LED_EFFECT EFFECT=sb_nozzle_heating', 'description': 'G-Code macro'}, 'gcode_macro status_cooling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cooling\nSET_LED_EFFECT EFFECT=sb_nozzle_cooling', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_leveling\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_homing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cleaning\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_meshing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_calibrating_z\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_printing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'adxl345': {'axes_map': ['z', '-y', 'x'], 'rate': 3200, 'cs_pin': 'EBBCan:gpio1', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'EBBCan:gpio2', 'spi_software_miso_pin': 'EBBCan:gpio3', 'spi_software_mosi_pin': 'EBBCan:gpio0'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[100.0, 100.0, 20.0]], 'accel_chip': 'adxl345'}, 'input_shaper': {'shaper_type': '3hump_ei', 'shaper_type_x': '3hump_ei', 'damping_ratio_x': 0.1, 'shaper_freq_x': 45.0, 'shaper_type_y': '3hump_ei', 'damping_ratio_y': 0.1, 'shaper_freq_y': 0.0}, 'tmc2660 stepper_x': {'cs_pin': 'PD14', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PD6', 'dir_pin': '!PD11', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'EBBCan:gpio24', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2660 stepper_y': {'cs_pin': 'PC9', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PD7', 'dir_pin': '!PD12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'PA2', 'position_endstop': 0.0, 'position_min': -4.0, 'position_max': 225.0, 'homing_speed': 35.0, 'second_homing_speed': 17.5, 'homing_retract_speed': 35.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2660 stepper_z': {'cs_pin': 'PC10', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PD8', 'dir_pin': '!PD13', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -2.5, 'position_max': 230.0, 'homing_speed': 35.0, 'second_homing_speed': 17.5, 'homing_retract_speed': 35.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'adc_temperature my_thermistor': {'resistance1': 1000.0, 'temperature1': 0.0, 'temperature2': 80.0, 'resistance2': 1309.0}, 'tmc2209 extruder': {'uart_pin': 'EBBCan:gpio20', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan:gpio27', 'min_temp': 0.0, 'max_temp': 250.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 21.527, 'pid_ki': 1.063, 'pid_kd': 108.982, 'heater_pin': 'EBBCan:gpio7', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': '!EBBCan:gpio18', 'pressure_advance': 0.0, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'EBBCan:gpio19', 'rotation_distance': 21.63024711, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!EBBCan:gpio17'}, 'filament_switch_sensor extruder': {'switch_pin': 'EBBCan:gpio21', 'pause_on_runout': True, 'runout_gcode': '', 'pause_delay': 0.5, 'event_delay': 3.0}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'thermistor chamber_temp': {'temperature1': 25.0, 'resistance1': 10000.0, 'beta': 3950.0}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PC13', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'watermark', 'max_delta': 2.0, 'heater_pin': '!PA19', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan extruder_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'EBBCan:gpio13', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.25, 'off_below': 0.0, 'cycle_time': 0.08, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'EBBCan:gpio14'}, 'probe': {'z_offset': -1.5, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': '^EBBCan:gpio22', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 3, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.015, 'samples_tolerance_retries': 3}, 'homing_override': {'set_position_z': 0.0, 'axes': 'z', 'gcode': '\nstatus_homing\nG90\nG0 Z5 F500\nG28 X0 Y0\nG0 X150 Y100 F9000\nG28 Z0\nG0 Z5 F500\nstatus_ready'}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [6, 6], 'mesh_min': [25.0, 35.0], 'mesh_max': [225.0, 220.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 150.0, 'fade_start': 1.0, 'fade_end': 10.0, 'fade_target': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[-0.2875, -0.1125, -0.0625, -0.025, 0.1375, -0.1375], [-0.225, -0.1125, -0.0875, 0.0375, 0.1375, 0.2875], [-0.2875, -0.2, -0.0875, -0.0, 0.1375, 0.3], [-0.3375, -0.2, -0.1375, -0.0125, 0.125, 0.275], [-0.3, -0.1625, -0.0625, 0.0375, 0.1875, 0.3375], [-0.2125, -0.075, 0.025, 0.125, 0.275, 0.45]], 'min_x': 25.0, 'max_x': 225.0, 'min_y': 35.0, 'max_y': 220.0, 'x_count': 6, 'y_count': 6, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'bicubic', 'tension': 0.2}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\nM117 Homing...\nG28 Y0 X0 Z0\n\n\n\n\n\n\n\n\n\n\n\n\nSTATUS_HEATING\nM107\nM117 Heating bed\nM190 S{ params.BED }\nM117 Heating nozzle\nM109 S{target_extruder}\nstatus_ready\nG1 Z15.0 F600\nG1 X125 Y125 F3000\nG92 E0\nG1 F9000\nstatus_printing\nM117 Printing...', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\nstatus_busy\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\n\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y} F3600\nM117 Finished!\nstatus_off', 'description': 'G-Code macro'}, 'force_move': {'enable_force_move': True}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'max_accel_to_decel': 1500.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexz', 'max_z_velocity': 5.0, 'max_z_accel': 100.0}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-03-19 03:27:21,606 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-03-19 03:27:21,609 [printer.py:reinit()] - Klipper version: v0.12.0-114-ga77d0790-dirty
2024-03-19 03:27:21,610 [printer.py:reinit()] - # Extruders: 1
2024-03-19 03:27:21,610 [printer.py:reinit()] - # Temperature devices: 2
2024-03-19 03:27:21,610 [printer.py:reinit()] - # Fans: 2
2024-03-19 03:27:21,611 [printer.py:reinit()] - # Output pins: 0
2024-03-19 03:27:21,611 [printer.py:reinit()] - # Leds: 20
2024-03-19 03:27:21,612 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-03-19 03:27:21,645 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-03-19 03:27:21,650 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor mcu&fan&heater_fan extruder_fan&filament_switch_sensor extruder&neopixel sb_leds
2024-03-19 03:27:21,928 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-03-19 03:27:21,928 [screen.py:init_klipper()] - Printer initialized
2024-03-19 03:27:21,929 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2024-03-19 03:27:21,930 [printer.py:change_state()] - Adding callback for state: ready
2024-03-19 03:27:22,109 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-03-19 03:27:22,120 [screen.py:_load_panel()] - Loading panel: main_menu
2024-03-19 03:27:22,364 [main_menu.py:__init__()] - ### Making MainMenu
2024-03-19 03:27:22,396 [main_menu.py:add_device()] - Adding device: extruder
2024-03-19 03:27:22,415 [main_menu.py:add_device()] - Adding device: heater_bed
2024-03-19 03:27:22,432 [main_menu.py:add_device()] - Adding device: temperature_sensor mcu
2024-03-19 03:27:22,541 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-03-19 03:27:22,544 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-03-19 03:27:22,615 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor mcu', 'heater_bed', 'extruder']
2024-03-19 03:27:22,620 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-03-19 03:27:22,645 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-03-21 19:27:32,814 [functions.py:log_start()] - --------------------KlipperScreen Log Start--------------------
2024-03-21 19:27:32,815 [functions.py:log_start()] - KlipperScreen Version: v0.3.9-50-gdaed9a0
2024-03-21 19:27:32,815 [functions.py:log_start()] - Python version: 3.11
2024-03-21 19:27:33,076 [config.py:get_config_file_location()] - Passed config (-c): .
2024-03-21 19:27:33,077 [config.py:__init__()] - Config path location: /home/pi/printer_data/config/KlipperScreen.conf
2024-03-21 19:27:33,122 [config.py:log_config()] -  ===== Config File =====

=======================
2024-03-21 19:27:33,124 [config.py:__init__()] - ====== Saved Def ======

[main]
use_dpms = False

=======================
2024-03-21 19:27:33,125 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2024-03-21 19:27:33,281 [config.py:create_translations()] - Selected lang: None OS lang: en_GB
2024-03-21 19:27:33,281 [config.py:install_language()] - Using lang en
2024-03-21 19:27:33,311 [screen.py:__init__()] - Monitors: 1 using number: 0
2024-03-21 19:27:33,312 [screen.py:__init__()] - Wayland: False Display name: :100
2024-03-21 19:27:33,315 [screen.py:__init__()] - Screen resolution: 1058x540
2024-03-21 19:27:33,316 [KlippyGtk.py:__init__()] - Font size: 18.6 (medium)
2024-03-21 19:27:34,802 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2024-03-21 19:27:34,802 [screen.py:set_screenblanking_timeout()] - Not using DPMS
2024-03-21 19:27:34,813 [screen.py:initial_connection()] - Default printer: None
2024-03-21 19:27:34,879 [screen.py:connect_printer()] - Connecting to printer: Printer
2024-03-21 19:27:34,880 [screen.py:_load_panel()] - Loading panel: splash_screen
2024-03-21 19:27:34,976 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-03-21 19:27:34,995 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-03-21 19:27:34,995 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-03-21 19:27:35,021 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/access/oneshot_token
2024-03-21 19:27:35,033 [KlippyWebsocket.py:connect()] - Starting websocket thread
2024-03-21 19:27:35,044 [_logging.py:info()] - Websocket connected
2024-03-21 19:27:35,044 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2024-03-21 19:27:35,888 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-03-21 19:27:35,901 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-03-21 19:27:35,912 [printer.py:configure_cameras()] - Cameras: []
2024-03-21 19:27:35,912 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'ready', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'octoprint_compat', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-318-g9813011', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-03-21 19:27:35,913 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-03-21 19:27:35,926 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-03-21 19:27:36,005 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set allow_park = client.park_at_cancel | default(false) | lower == \'true\' %}\n{% set retract = client.cancel_retract | default(5.0) | abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x | default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y | default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x | length > 0 or park_y | length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro | default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set idle_timeout = client.idle_timeout | default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE | default(1) | int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro | default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move | default(velocity) %}\n{% set runout_resume = True if client.runout_sensor | default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state | upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro | default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY | default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}"}, 'neopixel sb_leds': {'pin': 'EBBCan:gpio16', 'chain_count': '3', 'color_order': 'GRB', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0'}, 'led_effect sb_logo_busy': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (1,0,0)'}, 'led_effect sb_logo_cleaning': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.02, 0.5)'}, 'led_effect sb_logo_calibrating_z': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 0.35)'}, 'led_effect sb_logo_heating': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nbreathing  3 1 top (1, 0.18, 0)'}, 'led_effect sb_logo_cooling': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nbreathing  3 1 top (0, 0, 1)'}, 'led_effect sb_logo_homing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.6, 0.2)'}, 'led_effect sb_logo_leveling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.5, 0.1, 0.4)'}, 'led_effect sb_logo_meshing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.2, 1.0, 0.0)'}, 'led_effect sb_logo_printing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.3, 0.3, 0.0),(0.3, 0.1, 0.0)'}, 'led_effect sb_logo_standby': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.01, 0.01, 0.01)'}, 'led_effect sb_logo_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 1.0, 0.0)'}, 'led_effect sb_nozzle_heating': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (1.0, 0.18, 0.0, 0.0)'}, 'led_effect sb_nozzle_cooling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 1.0, 0.1)'}, 'led_effect sb_nozzle_standby': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.6, 0.0, 0.0, 0.0)'}, 'led_effect sb_nozzle_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.6, 1.0, 0.0, 0.1)'}, 'led_effect sb_critical_error': {'leds': '\nneopixel:sb_leds', 'layers': '\nstrobe         1  1.5   add        (1.0,  1.0, 1.0)\nbreathing      2  0     difference (0.95, 0.0, 0.0)\nstatic         1  0     top        (1.0,  0.0, 0.0)', 'autostart': 'false', 'frame_rate': '24', 'run_on_error': 'true'}, 'led_effect rainbow': {'leds': '\nneopixel:sb_leds', 'autostart': 'true', 'frame_rate': '24', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.0, 0.3, 0.0),(0.0, 0.0, 0.3)'}, 'led_effect set_nozzle_leds': {'leds': '\nneopixel:sb_leds (2,3)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nstatic         0  0     top        (0.5,  0.5, 0.5)'}, 'led_effect set_logo_leds': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nstatic         0  0     top        (1.0,  1.0, 1.0)'}, 'gcode_macro set_logo_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds STOP=1'}, 'gcode_macro set_logo_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1'}, 'gcode_macro status_off': {'gcode': '\nSTOP_LED_EFFECTS'}, 'gcode_macro status_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=rainbow'}, 'gcode_macro status_part_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready'}, 'gcode_macro status_busy': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_busy\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_heating\nSET_LED_EFFECT EFFECT=sb_nozzle_heating'}, 'gcode_macro status_cooling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cooling\nSET_LED_EFFECT EFFECT=sb_nozzle_cooling'}, 'gcode_macro status_leveling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_leveling\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_homing\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cleaning\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_meshing\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_calibrating_z\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_printing\nset_nozzle_leds_on'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_sam4e8e_00313753364B37373032303038303139-if00'}, 'mcu EBBCan': {'canbus_uuid': '8250861450f7'}, 'adxl345': {'cs_pin': 'EBBCan:gpio1', 'spi_software_sclk_pin': 'EBBCan:gpio2', 'spi_software_mosi_pin': 'EBBCan:gpio0', 'spi_software_miso_pin': 'EBBCan:gpio3', 'axes_map': 'z,-y,x'}, 'resonance_tester': {'probe_points': '100, 100, 20', 'accel_chip': 'adxl345'}, 'input_shaper': {'shaper_freq_x': '45', 'shaper_type': '3hump_ei'}, 'stepper_x': {'step_pin': 'PD6', 'dir_pin': '!PD11', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'EBBCan:gpio24', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '40'}, 'tmc2660 stepper_x': {'cs_pin': 'PD14', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'stepper_y': {'step_pin': 'PD7', 'dir_pin': '!PD12', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'PA2', 'position_endstop': '0', 'position_max': '225', 'position_min': '-4', 'homing_speed': '35', 'homing_retract_dist': '0'}, 'tmc2660 stepper_y': {'cs_pin': 'PC9', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'stepper_z': {'step_pin': 'PD8', 'dir_pin': '!PD13', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '230', 'position_min': '-2.5', 'homing_speed': '35.0'}, 'tmc2660 stepper_z': {'cs_pin': 'PC10', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'adc_temperature my_thermistor': {'temperature1': '0', 'resistance1': '1000', 'temperature2': '80', 'resistance2': '1309'}, 'extruder': {'step_pin': '!EBBCan:gpio18', 'dir_pin': 'EBBCan:gpio19', 'enable_pin': '!EBBCan:gpio17', 'microsteps': '32', 'rotation_distance': '21.63024711', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'gear_ratio': '50:10', 'heater_pin': 'EBBCan:gpio7', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'EBBCan:gpio27', 'control': 'pid', 'pid_kp': '21.527', 'pid_ki': '1.063', 'pid_kd': '108.982', 'min_temp': '0', 'max_temp': '250'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan:gpio20', 'run_current': '0.5', 'stealthchop_threshold': '999999'}, 'filament_switch_sensor extruder': {'pause_on_runout': 'True', 'switch_pin': 'EBBCan:gpio21'}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu'}, 'thermistor chamber_temp': {'temperature1': '25', 'resistance1': '10000', 'beta': '3950'}, 'heater_bed': {'heater_pin': '!PA19', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PC13', 'control': 'watermark', 'min_temp': '0', 'max_temp': '120'}, 'heater_fan extruder_fan': {'pin': 'EBBCan:gpio13', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'EBBCan:gpio14', 'cycle_time': '.08', 'kick_start_time': '.25'}, 'probe': {'pin': '^EBBCan:gpio22', 'x_offset': '0', 'y_offset': '0', 'samples': '3', 'samples_result': 'median', 'sample_retract_dist': '3', 'samples_tolerance': '0.015', 'samples_tolerance_retries': '3', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'z_offset': '-1.500'}, 'homing_override': {'axes': 'z', 'set_position_z': '0', 'gcode': '\nstatus_homing\nG90\nG0 Z5 F500\nG28 X0 Y0\nG0 X150 Y100 F9000\nG28 Z0\nG0 Z5 F500\nstatus_ready'}, 'bed_mesh': {'speed': '150', 'horizontal_move_z': '5', 'mesh_min': '25,35.0', 'mesh_max': '225.0,220', 'probe_count': '6,6', 'algorithm': 'bicubic', 'fade_start': '1', 'fade_end': '10', 'fade_target': '0'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\nM117 Homing...\nG28 Y0 X0 Z0\n\n\n\n\n\n\n\n\n\n\n\n\nSTATUS_HEATING\nM107\nM117 Heating bed\nM190 S{ params.BED }\nM117 Heating nozzle\nM109 S{target_extruder}\nstatus_ready\nG1 Z15.0 F600\nG1 X125 Y125 F3000\nG92 E0\nG1 F9000\nstatus_printing\nM117 Printing...'}, 'gcode_macro PRINT_END': {'gcode': '\nstatus_busy\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\n\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y} F3600\nM117 Finished!\nstatus_off'}, 'printer': {'kinematics': 'corexz', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '5', 'max_z_accel': '100'}, 'force_move': {'enable_force_move': 'true'}, 'exclude_object': {}, 'bed_mesh default': {'version': '1', 'points': '\n-0.287500, -0.112500, -0.062500, -0.025000, 0.137500, -0.137500\n-0.225000, -0.112500, -0.087500, 0.037500, 0.137500, 0.287500\n-0.287500, -0.200000, -0.087500, -0.000000, 0.137500, 0.300000\n-0.337500, -0.200000, -0.137500, -0.012500, 0.125000, 0.275000\n-0.300000, -0.162500, -0.062500, 0.037500, 0.187500, 0.337500\n-0.212500, -0.075000, 0.025000, 0.125000, 0.275000, 0.450000', 'x_count': '6', 'y_count': '6', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'bicubic', 'tension': '0.2', 'min_x': '25.0', 'max_x': '225.0', 'min_y': '35.0', 'max_y': '220.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_sam4e8e_00313753364B37373032303038303139-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu ebbcan': {'canbus_uuid': '8250861450f7', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set allow_park = client.park_at_cancel | default(false) | lower == \'true\' %}\n{% set retract = client.cancel_retract | default(5.0) | abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x | default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y | default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x | length > 0 or park_y | length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro | default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set idle_timeout = client.idle_timeout | default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE | default(1) | int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro | default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move | default(velocity) %}\n{% set runout_resume = True if client.runout_sensor | default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state | upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro | default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY | default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'neopixel sb_leds': {'pin': 'EBBCan:gpio16', 'chain_count': 3, 'color_order': ['GRB'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'led_effect sb_logo_busy': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1,0,0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_cleaning': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.02, 0.5)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_calibrating_z': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 0.35)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1, 0.18, 0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0, 0, 1)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_homing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.6, 0.2)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_leveling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.5, 0.1, 0.4)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_meshing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.2, 1.0, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_printing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.3, 0.3, 0.0),(0.3, 0.1, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_standby': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.01, 0.01, 0.01)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 1.0, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_nozzle_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1.0, 0.18, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 1.0, 0.1)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_standby': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.6, 0.0, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.6, 1.0, 0.0, 0.1)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_critical_error': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': True, 'endstops': '', 'layers': '\nstrobe         1  1.5   add        (1.0,  1.0, 1.0)\nbreathing      2  0     difference (0.95, 0.0, 0.0)\nstatic         1  0     top        (1.0,  0.0, 0.0)', 'leds': '\nneopixel:sb_leds'}, 'led_effect rainbow': {'frame_rate': 24.0, 'autostart': True, 'run_on_error': False, 'endstops': '', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.0, 0.3, 0.0),(0.0, 0.0, 0.3)', 'leds': '\nneopixel:sb_leds'}, 'led_effect set_nozzle_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic         0  0     top        (0.5,  0.5, 0.5)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect set_logo_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic         0  0     top        (1.0,  1.0, 1.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'gcode_macro set_logo_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nSTOP_LED_EFFECTS', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=rainbow', 'description': 'G-Code macro'}, 'gcode_macro status_part_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_busy\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_heating\nSET_LED_EFFECT EFFECT=sb_nozzle_heating', 'description': 'G-Code macro'}, 'gcode_macro status_cooling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cooling\nSET_LED_EFFECT EFFECT=sb_nozzle_cooling', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_leveling\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_homing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cleaning\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_meshing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_calibrating_z\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_printing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'adxl345': {'axes_map': ['z', '-y', 'x'], 'rate': 3200, 'cs_pin': 'EBBCan:gpio1', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'EBBCan:gpio2', 'spi_software_miso_pin': 'EBBCan:gpio3', 'spi_software_mosi_pin': 'EBBCan:gpio0'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[100.0, 100.0, 20.0]], 'accel_chip': 'adxl345'}, 'input_shaper': {'shaper_type': '3hump_ei', 'shaper_type_x': '3hump_ei', 'damping_ratio_x': 0.1, 'shaper_freq_x': 45.0, 'shaper_type_y': '3hump_ei', 'damping_ratio_y': 0.1, 'shaper_freq_y': 0.0}, 'tmc2660 stepper_x': {'cs_pin': 'PD14', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PD6', 'dir_pin': '!PD11', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'EBBCan:gpio24', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2660 stepper_y': {'cs_pin': 'PC9', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PD7', 'dir_pin': '!PD12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'PA2', 'position_endstop': 0.0, 'position_min': -4.0, 'position_max': 225.0, 'homing_speed': 35.0, 'second_homing_speed': 17.5, 'homing_retract_speed': 35.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2660 stepper_z': {'cs_pin': 'PC10', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PD8', 'dir_pin': '!PD13', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -2.5, 'position_max': 230.0, 'homing_speed': 35.0, 'second_homing_speed': 17.5, 'homing_retract_speed': 35.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'adc_temperature my_thermistor': {'resistance1': 1000.0, 'temperature1': 0.0, 'temperature2': 80.0, 'resistance2': 1309.0}, 'tmc2209 extruder': {'uart_pin': 'EBBCan:gpio20', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan:gpio27', 'min_temp': 0.0, 'max_temp': 250.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 21.527, 'pid_ki': 1.063, 'pid_kd': 108.982, 'heater_pin': 'EBBCan:gpio7', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': '!EBBCan:gpio18', 'pressure_advance': 0.0, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'EBBCan:gpio19', 'rotation_distance': 21.63024711, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!EBBCan:gpio17'}, 'filament_switch_sensor extruder': {'switch_pin': 'EBBCan:gpio21', 'pause_on_runout': True, 'runout_gcode': '', 'pause_delay': 0.5, 'event_delay': 3.0}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'thermistor chamber_temp': {'temperature1': 25.0, 'resistance1': 10000.0, 'beta': 3950.0}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PC13', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'watermark', 'max_delta': 2.0, 'heater_pin': '!PA19', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan extruder_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'EBBCan:gpio13', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.25, 'off_below': 0.0, 'cycle_time': 0.08, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'EBBCan:gpio14'}, 'probe': {'z_offset': -1.5, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': '^EBBCan:gpio22', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 3, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.015, 'samples_tolerance_retries': 3}, 'homing_override': {'set_position_z': 0.0, 'axes': 'z', 'gcode': '\nstatus_homing\nG90\nG0 Z5 F500\nG28 X0 Y0\nG0 X150 Y100 F9000\nG28 Z0\nG0 Z5 F500\nstatus_ready'}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [6, 6], 'mesh_min': [25.0, 35.0], 'mesh_max': [225.0, 220.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 150.0, 'fade_start': 1.0, 'fade_end': 10.0, 'fade_target': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[-0.2875, -0.1125, -0.0625, -0.025, 0.1375, -0.1375], [-0.225, -0.1125, -0.0875, 0.0375, 0.1375, 0.2875], [-0.2875, -0.2, -0.0875, -0.0, 0.1375, 0.3], [-0.3375, -0.2, -0.1375, -0.0125, 0.125, 0.275], [-0.3, -0.1625, -0.0625, 0.0375, 0.1875, 0.3375], [-0.2125, -0.075, 0.025, 0.125, 0.275, 0.45]], 'min_x': 25.0, 'max_x': 225.0, 'min_y': 35.0, 'max_y': 220.0, 'x_count': 6, 'y_count': 6, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'bicubic', 'tension': 0.2}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\nM117 Homing...\nG28 Y0 X0 Z0\n\n\n\n\n\n\n\n\n\n\n\n\nSTATUS_HEATING\nM107\nM117 Heating bed\nM190 S{ params.BED }\nM117 Heating nozzle\nM109 S{target_extruder}\nstatus_ready\nG1 Z15.0 F600\nG1 X125 Y125 F3000\nG92 E0\nG1 F9000\nstatus_printing\nM117 Printing...', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\nstatus_busy\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\n\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y} F3600\nM117 Finished!\nstatus_off', 'description': 'G-Code macro'}, 'force_move': {'enable_force_move': True}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'max_accel_to_decel': 1500.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexz', 'max_z_velocity': 5.0, 'max_z_accel': 100.0}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-03-21 19:27:36,008 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-03-21 19:27:36,010 [printer.py:reinit()] - Klipper version: v0.12.0-114-ga77d0790-dirty
2024-03-21 19:27:36,010 [printer.py:reinit()] - # Extruders: 1
2024-03-21 19:27:36,010 [printer.py:reinit()] - # Temperature devices: 2
2024-03-21 19:27:36,010 [printer.py:reinit()] - # Fans: 2
2024-03-21 19:27:36,010 [printer.py:reinit()] - # Output pins: 0
2024-03-21 19:27:36,011 [printer.py:reinit()] - # Leds: 20
2024-03-21 19:27:36,011 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-03-21 19:27:36,032 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-03-21 19:27:36,034 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor mcu&fan&heater_fan extruder_fan&filament_switch_sensor extruder&neopixel sb_leds
2024-03-21 19:27:36,306 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-03-21 19:27:36,307 [screen.py:init_klipper()] - Printer initialized
2024-03-21 19:27:36,307 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2024-03-21 19:27:36,307 [printer.py:change_state()] - Adding callback for state: ready
2024-03-21 19:27:36,397 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-03-21 19:27:36,401 [screen.py:_load_panel()] - Loading panel: main_menu
2024-03-21 19:27:36,539 [main_menu.py:__init__()] - ### Making MainMenu
2024-03-21 19:27:36,554 [main_menu.py:add_device()] - Adding device: extruder
2024-03-21 19:27:36,570 [main_menu.py:add_device()] - Adding device: heater_bed
2024-03-21 19:27:36,581 [main_menu.py:add_device()] - Adding device: temperature_sensor mcu
2024-03-21 19:27:36,632 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-03-21 19:27:36,634 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-03-21 19:27:36,662 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor mcu', 'heater_bed', 'extruder']
2024-03-21 19:27:36,664 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-03-21 19:27:36,676 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-03-21 19:27:44,869 [screen.py:_load_panel()] - Loading panel: temperature
2024-03-21 19:27:44,911 [temperature.py:add_device()] - Adding device: extruder
2024-03-21 19:27:44,925 [temperature.py:add_device()] - Adding device: heater_bed
2024-03-21 19:27:44,939 [temperature.py:add_device()] - Adding device: temperature_sensor mcu
2024-03-21 19:27:44,953 [temperature.py:select_heater()] - Selecting extruder
2024-03-21 19:27:44,954 [temperature.py:select_heater()] - Selecting heater_bed
2024-03-21 19:27:45,030 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > temperature
2024-03-21 19:27:46,696 [screen.py:_menu_go_back()] - #### Menu go back
2024-03-21 19:27:47,004 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-03-21 19:37:03,470 [functions.py:log_start()] - --------------------KlipperScreen Log Start--------------------
2024-03-21 19:37:03,470 [functions.py:log_start()] - KlipperScreen Version: v0.3.9-50-gdaed9a0
2024-03-21 19:37:03,471 [functions.py:log_start()] - Python version: 3.11
2024-03-21 19:37:03,924 [config.py:get_config_file_location()] - Passed config (-c): .
2024-03-21 19:37:03,925 [config.py:__init__()] - Config path location: /home/pi/printer_data/config/KlipperScreen.conf
2024-03-21 19:37:04,017 [config.py:log_config()] -  ===== Config File =====

=======================
2024-03-21 19:37:04,022 [config.py:__init__()] - ====== Saved Def ======

[main]
use_dpms = False

=======================
2024-03-21 19:37:04,024 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2024-03-21 19:37:04,448 [config.py:create_translations()] - Selected lang: None OS lang: en_GB
2024-03-21 19:37:04,448 [config.py:install_language()] - Using lang en
2024-03-21 19:37:04,476 [screen.py:__init__()] - Monitors: 1 using number: 0
2024-03-21 19:37:04,478 [screen.py:__init__()] - Wayland: False Display name: :100
2024-03-21 19:37:04,480 [screen.py:__init__()] - Screen resolution: 984x540
2024-03-21 19:37:04,482 [KlippyGtk.py:__init__()] - Font size: 18.6 (medium)
2024-03-21 19:37:06,500 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2024-03-21 19:37:06,501 [screen.py:set_screenblanking_timeout()] - Not using DPMS
2024-03-21 19:37:06,518 [screen.py:initial_connection()] - Default printer: None
2024-03-21 19:37:06,629 [screen.py:connect_printer()] - Connecting to printer: Printer
2024-03-21 19:37:06,629 [screen.py:_load_panel()] - Loading panel: splash_screen
2024-03-21 19:37:06,799 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-03-21 19:37:06,840 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-03-21 19:37:06,841 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-03-21 19:37:06,886 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/access/oneshot_token
2024-03-21 19:37:06,911 [KlippyWebsocket.py:connect()] - Starting websocket thread
2024-03-21 19:37:06,935 [_logging.py:info()] - Websocket connected
2024-03-21 19:37:06,936 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2024-03-21 19:37:07,559 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-03-21 19:37:07,582 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-03-21 19:37:07,605 [printer.py:configure_cameras()] - Cameras: []
2024-03-21 19:37:07,606 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'ready', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'octoprint_compat', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-318-g9813011', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-03-21 19:37:07,607 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-03-21 19:37:07,632 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-03-21 19:37:07,829 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set allow_park = client.park_at_cancel | default(false) | lower == \'true\' %}\n{% set retract = client.cancel_retract | default(5.0) | abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x | default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y | default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x | length > 0 or park_y | length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro | default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set idle_timeout = client.idle_timeout | default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE | default(1) | int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro | default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move | default(velocity) %}\n{% set runout_resume = True if client.runout_sensor | default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state | upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro | default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY | default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}"}, 'neopixel sb_leds': {'pin': 'EBBCan:gpio16', 'chain_count': '3', 'color_order': 'GRB', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0'}, 'led_effect sb_logo_busy': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (1,0,0)'}, 'led_effect sb_logo_cleaning': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.02, 0.5)'}, 'led_effect sb_logo_calibrating_z': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 0.35)'}, 'led_effect sb_logo_heating': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nbreathing  3 1 top (1, 0.18, 0)'}, 'led_effect sb_logo_cooling': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nbreathing  3 1 top (0, 0, 1)'}, 'led_effect sb_logo_homing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.6, 0.2)'}, 'led_effect sb_logo_leveling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.5, 0.1, 0.4)'}, 'led_effect sb_logo_meshing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.2, 1.0, 0.0)'}, 'led_effect sb_logo_printing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.3, 0.3, 0.0),(0.3, 0.1, 0.0)'}, 'led_effect sb_logo_standby': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.01, 0.01, 0.01)'}, 'led_effect sb_logo_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 1.0, 0.0)'}, 'led_effect sb_nozzle_heating': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (1.0, 0.18, 0.0, 0.0)'}, 'led_effect sb_nozzle_cooling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 1.0, 0.1)'}, 'led_effect sb_nozzle_standby': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.6, 0.0, 0.0, 0.0)'}, 'led_effect sb_nozzle_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.6, 1.0, 0.0, 0.1)'}, 'led_effect sb_critical_error': {'leds': '\nneopixel:sb_leds', 'layers': '\nstrobe         1  1.5   add        (1.0,  1.0, 1.0)\nbreathing      2  0     difference (0.95, 0.0, 0.0)\nstatic         1  0     top        (1.0,  0.0, 0.0)', 'autostart': 'false', 'frame_rate': '24', 'run_on_error': 'true'}, 'led_effect rainbow': {'leds': '\nneopixel:sb_leds', 'autostart': 'true', 'frame_rate': '24', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.0, 0.3, 0.0),(0.0, 0.0, 0.3)'}, 'led_effect set_nozzle_leds': {'leds': '\nneopixel:sb_leds (2,3)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nstatic         0  0     top        (0.5,  0.5, 0.5)'}, 'led_effect set_logo_leds': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nstatic         0  0     top        (1.0,  1.0, 1.0)'}, 'gcode_macro set_logo_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds STOP=1'}, 'gcode_macro set_logo_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1'}, 'gcode_macro status_off': {'gcode': '\nSTOP_LED_EFFECTS'}, 'gcode_macro status_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=rainbow'}, 'gcode_macro status_part_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready'}, 'gcode_macro status_busy': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_busy\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_heating\nSET_LED_EFFECT EFFECT=sb_nozzle_heating'}, 'gcode_macro status_cooling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cooling\nSET_LED_EFFECT EFFECT=sb_nozzle_cooling'}, 'gcode_macro status_leveling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_leveling\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_homing\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cleaning\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_meshing\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_calibrating_z\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_printing\nset_nozzle_leds_on'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_sam4e8e_00313753364B37373032303038303139-if00'}, 'mcu EBBCan': {'canbus_uuid': '8250861450f7'}, 'adxl345': {'cs_pin': 'EBBCan:gpio1', 'spi_software_sclk_pin': 'EBBCan:gpio2', 'spi_software_mosi_pin': 'EBBCan:gpio0', 'spi_software_miso_pin': 'EBBCan:gpio3', 'axes_map': 'z,-y,x'}, 'resonance_tester': {'probe_points': '100, 100, 20', 'accel_chip': 'adxl345'}, 'input_shaper': {'shaper_freq_x': '45', 'shaper_type': '3hump_ei'}, 'stepper_x': {'step_pin': 'PD6', 'dir_pin': '!PD11', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'EBBCan:gpio24', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '40'}, 'tmc2660 stepper_x': {'cs_pin': 'PD14', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'stepper_y': {'step_pin': 'PD7', 'dir_pin': '!PD12', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'PA2', 'position_endstop': '0', 'position_max': '225', 'position_min': '-4', 'homing_speed': '35', 'homing_retract_dist': '0'}, 'tmc2660 stepper_y': {'cs_pin': 'PC9', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'stepper_z': {'step_pin': 'PD8', 'dir_pin': '!PD13', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '230', 'position_min': '-2.5', 'homing_speed': '35.0'}, 'tmc2660 stepper_z': {'cs_pin': 'PC10', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'adc_temperature my_thermistor': {'temperature1': '0', 'resistance1': '1000', 'temperature2': '80', 'resistance2': '1309'}, 'extruder': {'step_pin': '!EBBCan:gpio18', 'dir_pin': 'EBBCan:gpio19', 'enable_pin': '!EBBCan:gpio17', 'microsteps': '32', 'rotation_distance': '21.63024711', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'gear_ratio': '50:10', 'heater_pin': 'EBBCan:gpio7', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'EBBCan:gpio27', 'control': 'pid', 'pid_kp': '21.527', 'pid_ki': '1.063', 'pid_kd': '108.982', 'min_temp': '0', 'max_temp': '250'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan:gpio20', 'run_current': '0.5', 'stealthchop_threshold': '999999'}, 'filament_switch_sensor extruder': {'pause_on_runout': 'True', 'switch_pin': 'EBBCan:gpio21'}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu'}, 'thermistor chamber_temp': {'temperature1': '25', 'resistance1': '10000', 'beta': '3950'}, 'heater_bed': {'heater_pin': '!PA19', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PC13', 'control': 'watermark', 'min_temp': '0', 'max_temp': '120'}, 'heater_fan extruder_fan': {'pin': 'EBBCan:gpio13', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'EBBCan:gpio14', 'cycle_time': '.08', 'kick_start_time': '.25'}, 'probe': {'pin': '^EBBCan:gpio22', 'x_offset': '0', 'y_offset': '0', 'samples': '3', 'samples_result': 'median', 'sample_retract_dist': '3', 'samples_tolerance': '0.015', 'samples_tolerance_retries': '3', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'z_offset': '-1.500'}, 'homing_override': {'axes': 'z', 'set_position_z': '0', 'gcode': '\nstatus_homing\nG90\nG0 Z5 F500\nG28 X0 Y0\nG0 X150 Y100 F9000\nG28 Z0\nG0 Z5 F500\nstatus_ready'}, 'bed_mesh': {'speed': '150', 'horizontal_move_z': '5', 'mesh_min': '25,35.0', 'mesh_max': '225.0,220', 'probe_count': '6,6', 'algorithm': 'bicubic', 'fade_start': '1', 'fade_end': '10', 'fade_target': '0'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\nM117 Homing...\nG28 Y0 X0 Z0\n\n\n\n\n\n\n\n\n\n\n\n\nSTATUS_HEATING\nM107\nM117 Heating bed\nM190 S{ params.BED }\nM117 Heating nozzle\nM109 S{target_extruder}\nstatus_ready\nG1 Z15.0 F600\nG1 X125 Y125 F3000\nG92 E0\nG1 F9000\nstatus_printing\nM117 Printing...'}, 'gcode_macro PRINT_END': {'gcode': '\nstatus_busy\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\n\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y} F3600\nM117 Finished!\nstatus_off'}, 'printer': {'kinematics': 'corexz', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '5', 'max_z_accel': '100'}, 'force_move': {'enable_force_move': 'true'}, 'exclude_object': {}, 'bed_mesh default': {'version': '1', 'points': '\n-0.287500, -0.112500, -0.062500, -0.025000, 0.137500, -0.137500\n-0.225000, -0.112500, -0.087500, 0.037500, 0.137500, 0.287500\n-0.287500, -0.200000, -0.087500, -0.000000, 0.137500, 0.300000\n-0.337500, -0.200000, -0.137500, -0.012500, 0.125000, 0.275000\n-0.300000, -0.162500, -0.062500, 0.037500, 0.187500, 0.337500\n-0.212500, -0.075000, 0.025000, 0.125000, 0.275000, 0.450000', 'x_count': '6', 'y_count': '6', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'bicubic', 'tension': '0.2', 'min_x': '25.0', 'max_x': '225.0', 'min_y': '35.0', 'max_y': '220.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_sam4e8e_00313753364B37373032303038303139-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu ebbcan': {'canbus_uuid': '8250861450f7', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set allow_park = client.park_at_cancel | default(false) | lower == \'true\' %}\n{% set retract = client.cancel_retract | default(5.0) | abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x | default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y | default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x | length > 0 or park_y | length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro | default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set idle_timeout = client.idle_timeout | default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE | default(1) | int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro | default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move | default(velocity) %}\n{% set runout_resume = True if client.runout_sensor | default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state | upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro | default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY | default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'neopixel sb_leds': {'pin': 'EBBCan:gpio16', 'chain_count': 3, 'color_order': ['GRB'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'led_effect sb_logo_busy': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1,0,0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_cleaning': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.02, 0.5)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_calibrating_z': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 0.35)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1, 0.18, 0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0, 0, 1)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_homing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.6, 0.2)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_leveling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.5, 0.1, 0.4)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_meshing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.2, 1.0, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_printing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.3, 0.3, 0.0),(0.3, 0.1, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_standby': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.01, 0.01, 0.01)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 1.0, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_nozzle_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1.0, 0.18, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 1.0, 0.1)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_standby': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.6, 0.0, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.6, 1.0, 0.0, 0.1)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_critical_error': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': True, 'endstops': '', 'layers': '\nstrobe         1  1.5   add        (1.0,  1.0, 1.0)\nbreathing      2  0     difference (0.95, 0.0, 0.0)\nstatic         1  0     top        (1.0,  0.0, 0.0)', 'leds': '\nneopixel:sb_leds'}, 'led_effect rainbow': {'frame_rate': 24.0, 'autostart': True, 'run_on_error': False, 'endstops': '', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.0, 0.3, 0.0),(0.0, 0.0, 0.3)', 'leds': '\nneopixel:sb_leds'}, 'led_effect set_nozzle_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic         0  0     top        (0.5,  0.5, 0.5)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect set_logo_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic         0  0     top        (1.0,  1.0, 1.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'gcode_macro set_logo_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nSTOP_LED_EFFECTS', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=rainbow', 'description': 'G-Code macro'}, 'gcode_macro status_part_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_busy\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_heating\nSET_LED_EFFECT EFFECT=sb_nozzle_heating', 'description': 'G-Code macro'}, 'gcode_macro status_cooling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cooling\nSET_LED_EFFECT EFFECT=sb_nozzle_cooling', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_leveling\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_homing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cleaning\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_meshing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_calibrating_z\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_printing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'adxl345': {'axes_map': ['z', '-y', 'x'], 'rate': 3200, 'cs_pin': 'EBBCan:gpio1', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'EBBCan:gpio2', 'spi_software_miso_pin': 'EBBCan:gpio3', 'spi_software_mosi_pin': 'EBBCan:gpio0'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[100.0, 100.0, 20.0]], 'accel_chip': 'adxl345'}, 'input_shaper': {'shaper_type': '3hump_ei', 'shaper_type_x': '3hump_ei', 'damping_ratio_x': 0.1, 'shaper_freq_x': 45.0, 'shaper_type_y': '3hump_ei', 'damping_ratio_y': 0.1, 'shaper_freq_y': 0.0}, 'tmc2660 stepper_x': {'cs_pin': 'PD14', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PD6', 'dir_pin': '!PD11', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'EBBCan:gpio24', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2660 stepper_y': {'cs_pin': 'PC9', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PD7', 'dir_pin': '!PD12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'PA2', 'position_endstop': 0.0, 'position_min': -4.0, 'position_max': 225.0, 'homing_speed': 35.0, 'second_homing_speed': 17.5, 'homing_retract_speed': 35.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2660 stepper_z': {'cs_pin': 'PC10', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PD8', 'dir_pin': '!PD13', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -2.5, 'position_max': 230.0, 'homing_speed': 35.0, 'second_homing_speed': 17.5, 'homing_retract_speed': 35.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'adc_temperature my_thermistor': {'resistance1': 1000.0, 'temperature1': 0.0, 'temperature2': 80.0, 'resistance2': 1309.0}, 'tmc2209 extruder': {'uart_pin': 'EBBCan:gpio20', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan:gpio27', 'min_temp': 0.0, 'max_temp': 250.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 21.527, 'pid_ki': 1.063, 'pid_kd': 108.982, 'heater_pin': 'EBBCan:gpio7', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': '!EBBCan:gpio18', 'pressure_advance': 0.0, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'EBBCan:gpio19', 'rotation_distance': 21.63024711, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!EBBCan:gpio17'}, 'filament_switch_sensor extruder': {'switch_pin': 'EBBCan:gpio21', 'pause_on_runout': True, 'runout_gcode': '', 'pause_delay': 0.5, 'event_delay': 3.0}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'thermistor chamber_temp': {'temperature1': 25.0, 'resistance1': 10000.0, 'beta': 3950.0}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PC13', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'watermark', 'max_delta': 2.0, 'heater_pin': '!PA19', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan extruder_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'EBBCan:gpio13', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.25, 'off_below': 0.0, 'cycle_time': 0.08, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'EBBCan:gpio14'}, 'probe': {'z_offset': -1.5, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': '^EBBCan:gpio22', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 3, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.015, 'samples_tolerance_retries': 3}, 'homing_override': {'set_position_z': 0.0, 'axes': 'z', 'gcode': '\nstatus_homing\nG90\nG0 Z5 F500\nG28 X0 Y0\nG0 X150 Y100 F9000\nG28 Z0\nG0 Z5 F500\nstatus_ready'}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [6, 6], 'mesh_min': [25.0, 35.0], 'mesh_max': [225.0, 220.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 150.0, 'fade_start': 1.0, 'fade_end': 10.0, 'fade_target': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[-0.2875, -0.1125, -0.0625, -0.025, 0.1375, -0.1375], [-0.225, -0.1125, -0.0875, 0.0375, 0.1375, 0.2875], [-0.2875, -0.2, -0.0875, -0.0, 0.1375, 0.3], [-0.3375, -0.2, -0.1375, -0.0125, 0.125, 0.275], [-0.3, -0.1625, -0.0625, 0.0375, 0.1875, 0.3375], [-0.2125, -0.075, 0.025, 0.125, 0.275, 0.45]], 'min_x': 25.0, 'max_x': 225.0, 'min_y': 35.0, 'max_y': 220.0, 'x_count': 6, 'y_count': 6, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'bicubic', 'tension': 0.2}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\nM117 Homing...\nG28 Y0 X0 Z0\n\n\n\n\n\n\n\n\n\n\n\n\nSTATUS_HEATING\nM107\nM117 Heating bed\nM190 S{ params.BED }\nM117 Heating nozzle\nM109 S{target_extruder}\nstatus_ready\nG1 Z15.0 F600\nG1 X125 Y125 F3000\nG92 E0\nG1 F9000\nstatus_printing\nM117 Printing...', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\nstatus_busy\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\n\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y} F3600\nM117 Finished!\nstatus_off', 'description': 'G-Code macro'}, 'force_move': {'enable_force_move': True}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'max_accel_to_decel': 1500.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexz', 'max_z_velocity': 5.0, 'max_z_accel': 100.0}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-03-21 19:37:07,836 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-03-21 19:37:07,839 [printer.py:reinit()] - Klipper version: v0.12.0-114-ga77d0790-dirty
2024-03-21 19:37:07,840 [printer.py:reinit()] - # Extruders: 1
2024-03-21 19:37:07,840 [printer.py:reinit()] - # Temperature devices: 2
2024-03-21 19:37:07,842 [printer.py:reinit()] - # Fans: 2
2024-03-21 19:37:07,843 [printer.py:reinit()] - # Output pins: 0
2024-03-21 19:37:07,843 [printer.py:reinit()] - # Leds: 20
2024-03-21 19:37:07,843 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-03-21 19:37:07,879 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-03-21 19:37:07,883 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor mcu&fan&heater_fan extruder_fan&filament_switch_sensor extruder&neopixel sb_leds
2024-03-21 19:37:08,128 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-03-21 19:37:08,128 [screen.py:init_klipper()] - Printer initialized
2024-03-21 19:37:08,129 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2024-03-21 19:37:08,129 [printer.py:change_state()] - Adding callback for state: ready
2024-03-21 19:37:08,313 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-03-21 19:37:08,324 [screen.py:_load_panel()] - Loading panel: main_menu
2024-03-21 19:37:08,584 [main_menu.py:__init__()] - ### Making MainMenu
2024-03-21 19:37:08,621 [main_menu.py:add_device()] - Adding device: extruder
2024-03-21 19:37:08,646 [main_menu.py:add_device()] - Adding device: heater_bed
2024-03-21 19:37:08,666 [main_menu.py:add_device()] - Adding device: temperature_sensor mcu
2024-03-21 19:37:08,775 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-03-21 19:37:08,780 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-03-21 19:37:08,843 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor mcu', 'heater_bed', 'extruder']
2024-03-21 19:37:08,848 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-03-21 19:37:08,872 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-03-21 19:37:23,241 [screen.py:_go_to_submenu()] - #### Go to submenu more
2024-03-21 19:37:23,241 [screen.py:_go_to_submenu()] - #### Menu __main
2024-03-21 19:37:23,265 [screen.py:_load_panel()] - Loading panel: menu
2024-03-21 19:37:24,053 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more
2024-03-21 19:37:24,075 [menu.py:arrangeMenuItems()] - X > more bedlevel
2024-03-21 19:37:24,105 [menu.py:arrangeMenuItems()] - X > more retraction
2024-03-21 19:37:24,141 [menu.py:arrangeMenuItems()] - X > more pins
2024-03-21 19:37:24,151 [menu.py:arrangeMenuItems()] - X > more power
2024-03-21 19:37:24,160 [menu.py:arrangeMenuItems()] - X > more camera
2024-03-21 19:37:24,199 [menu.py:arrangeMenuItems()] - X > more spoolman
2024-03-21 19:37:26,399 [screen.py:_load_panel()] - Loading panel: network
2024-03-21 19:37:26,474 [network.py:__init__()] - Found wireless interfaces: ['wlan0']
2024-03-21 19:37:26,474 [network.py:__init__()] - Using NetworkManager
2024-03-21 19:37:27,472 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more > network
2024-03-21 19:37:30,805 [connection.py:maybe_handle_message()] - Exception in handler for D-Bus signal:
Traceback (most recent call last):
  File "/home/pi/.KlipperScreen-env/lib/python3.11/site-packages/dbus/connection.py", line 218, in maybe_handle_message
    self._handler(*args, **kwargs)
  File "/home/pi/KlipperScreen/ks_includes/NetworkManager.py", line 100, in handle_signal
    receiver(sender, *(sargs + rargs), **rkwargs)
  File "/home/pi/KlipperScreen/ks_includes/wifi_nm.py", line 58, in _ap_added
    access_point.OnPropertiesChanged(self._ap_prop_changed)
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: 'AccessPoint' object has no attribute 'OnPropertiesChanged'
2024-03-21 19:37:33,465 [screen.py:_menu_go_back()] - #### Menu go back
2024-03-21 19:37:33,554 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more
2024-03-21 19:37:33,572 [menu.py:arrangeMenuItems()] - X > more bedlevel
2024-03-21 19:37:33,589 [menu.py:arrangeMenuItems()] - X > more retraction
2024-03-21 19:37:33,615 [menu.py:arrangeMenuItems()] - X > more pins
2024-03-21 19:37:33,623 [menu.py:arrangeMenuItems()] - X > more power
2024-03-21 19:37:33,627 [menu.py:arrangeMenuItems()] - X > more camera
2024-03-21 19:37:33,647 [menu.py:arrangeMenuItems()] - X > more spoolman
2024-03-21 19:37:36,428 [screen.py:_load_panel()] - Loading panel: settings
2024-03-21 19:37:37,041 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more > settings
2024-03-21 19:37:57,421 [screen.py:_menu_go_back()] - #### Menu go back
2024-03-21 19:37:57,540 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more
2024-03-21 19:37:57,565 [menu.py:arrangeMenuItems()] - X > more bedlevel
2024-03-21 19:37:57,589 [menu.py:arrangeMenuItems()] - X > more retraction
2024-03-21 19:37:57,626 [menu.py:arrangeMenuItems()] - X > more pins
2024-03-21 19:37:57,635 [menu.py:arrangeMenuItems()] - X > more power
2024-03-21 19:37:57,644 [menu.py:arrangeMenuItems()] - X > more camera
2024-03-21 19:37:57,684 [menu.py:arrangeMenuItems()] - X > more spoolman
2024-03-21 19:38:00,247 [screen.py:_load_panel()] - Loading panel: input_shaper
2024-03-21 19:38:00,368 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more > input_shaper
2024-03-21 19:38:00,368 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: SET_INPUT_SHAPER
2024-03-21 19:38:00,369 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: ACCELEROMETER_QUERY
2024-03-21 19:38:00,370 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: MEASURE_AXES_NOISE
2024-03-21 19:38:04,773 [screen.py:_menu_go_back()] - #### Menu go back
2024-03-21 19:38:04,903 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more
2024-03-21 19:38:04,934 [menu.py:arrangeMenuItems()] - X > more bedlevel
2024-03-21 19:38:04,962 [menu.py:arrangeMenuItems()] - X > more retraction
2024-03-21 19:38:05,020 [menu.py:arrangeMenuItems()] - X > more pins
2024-03-21 19:38:05,035 [menu.py:arrangeMenuItems()] - X > more power
2024-03-21 19:38:05,047 [menu.py:arrangeMenuItems()] - X > more camera
2024-03-21 19:38:05,104 [menu.py:arrangeMenuItems()] - X > more spoolman
2024-03-21 19:38:12,935 [screen.py:_load_panel()] - Loading panel: bed_mesh
2024-03-21 19:38:13,043 [bed_mesh.py:add_profile()] - Adding Profile: default
2024-03-21 19:38:13,086 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more > bed_mesh
2024-03-21 19:38:13,087 [bed_mesh.py:activate_mesh()] - Clearing active profile
2024-03-21 19:38:13,087 [bed_mesh.py:activate_mesh()] - Clearing active profile
2024-03-21 19:38:27,381 [screen.py:_menu_go_back()] - #### Menu go back
2024-03-21 19:38:27,470 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more
2024-03-21 19:38:27,482 [menu.py:arrangeMenuItems()] - X > more bedlevel
2024-03-21 19:38:27,493 [menu.py:arrangeMenuItems()] - X > more retraction
2024-03-21 19:38:27,510 [menu.py:arrangeMenuItems()] - X > more pins
2024-03-21 19:38:27,515 [menu.py:arrangeMenuItems()] - X > more power
2024-03-21 19:38:27,519 [menu.py:arrangeMenuItems()] - X > more camera
2024-03-21 19:38:27,540 [menu.py:arrangeMenuItems()] - X > more spoolman
2024-03-21 19:38:29,078 [screen.py:_menu_go_back()] - #### Menu go back
2024-03-21 19:38:29,328 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-03-21 19:38:32,643 [heatergraph.py:event_cb()] - Graph area: 125.0 78.0
2024-03-21 19:38:37,853 [screen.py:_load_panel()] - Loading panel: gcode_macros
2024-03-21 19:38:38,240 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > gcode_macros
2024-03-21 19:38:44,225 [screen.py:_menu_go_back()] - #### Menu go back
2024-03-21 19:38:44,539 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-03-21 19:38:56,209 [screen.py:_load_panel()] - Loading panel: print
2024-03-21 19:38:56,318 [print.py:__init__()] - Thumbsize: 128.48275862068962
2024-03-21 19:38:56,323 [print.py:__init__()] - thumbs
2024-03-21 19:38:56,339 [KlippyWebsocket.py:get_dir_info()] - Sending server.files.get_directory  gcodes
2024-03-21 19:38:56,390 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > print
2024-03-21 19:38:56,555 [print.py:load_files()] - Loaded in 0.135 seconds
2024-03-21 19:39:02,624 [print.py:change_sort()] - Changing from name to date
2024-03-21 19:39:14,889 [screen.py:_menu_go_back()] - #### Menu go back
2024-03-21 19:39:15,130 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-03-21 19:50:30,506 [screen.py:_load_panel()] - Loading panel: temperature
2024-03-21 19:50:30,555 [temperature.py:add_device()] - Adding device: extruder
2024-03-21 19:50:30,575 [temperature.py:add_device()] - Adding device: heater_bed
2024-03-21 19:50:30,596 [temperature.py:add_device()] - Adding device: temperature_sensor mcu
2024-03-21 19:50:30,614 [temperature.py:select_heater()] - Selecting extruder
2024-03-21 19:50:30,616 [temperature.py:select_heater()] - Selecting heater_bed
2024-03-21 19:50:30,736 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > temperature
2024-03-21 19:50:34,661 [screen.py:_menu_go_back()] - #### Menu go back
2024-03-21 19:50:34,989 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-03-21 20:50:35,214 [screen.py:show_screensaver()] - Showing Screensaver
2024-03-21 22:07:38,045 [screen.py:close_screensaver()] - Closing Screensaver
2024-03-21 22:23:31,165 [screen.py:_load_panel()] - Loading panel: move
2024-03-21 22:23:31,459 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2024-03-21 22:23:39,161 [screen.py:_load_panel()] - Loading panel: menu
2024-03-21 22:23:39,434 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move > menu
2024-03-21 22:23:39,475 [menu.py:arrangeMenuItems()] - X > homing quad_gantry_level
2024-03-21 22:23:39,483 [menu.py:arrangeMenuItems()] - X > homing Z-Tilt
2024-03-21 22:23:42,133 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G28'}
2024-03-21 22:24:39,207 [functions.py:log_start()] - --------------------KlipperScreen Log Start--------------------
2024-03-21 22:24:39,208 [functions.py:log_start()] - KlipperScreen Version: v0.3.9-50-gdaed9a0
2024-03-21 22:24:39,208 [functions.py:log_start()] - Python version: 3.11
2024-03-21 22:24:39,423 [config.py:get_config_file_location()] - Passed config (-c): .
2024-03-21 22:24:39,424 [config.py:__init__()] - Config path location: /home/pi/printer_data/config/KlipperScreen.conf
2024-03-21 22:24:39,467 [config.py:log_config()] -  ===== Config File =====

=======================
2024-03-21 22:24:39,472 [config.py:__init__()] - ====== Saved Def ======

[main]
use_dpms = False
print_sort_dir = date_desc

=======================
2024-03-21 22:24:39,474 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2024-03-21 22:24:39,717 [config.py:create_translations()] - Selected lang: None OS lang: en_GB
2024-03-21 22:24:39,718 [config.py:install_language()] - Using lang en
2024-03-21 22:24:39,759 [screen.py:__init__()] - Monitors: 1 using number: 0
2024-03-21 22:24:39,762 [screen.py:__init__()] - Wayland: False Display name: :100
2024-03-21 22:24:39,767 [screen.py:__init__()] - Screen resolution: 984x540
2024-03-21 22:24:39,771 [KlippyGtk.py:__init__()] - Font size: 18.6 (medium)
2024-03-21 22:24:40,936 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2024-03-21 22:24:40,937 [screen.py:set_screenblanking_timeout()] - Not using DPMS
2024-03-21 22:24:40,958 [screen.py:initial_connection()] - Default printer: None
2024-03-21 22:24:41,074 [screen.py:connect_printer()] - Connecting to printer: Printer
2024-03-21 22:24:41,075 [screen.py:_load_panel()] - Loading panel: splash_screen
2024-03-21 22:24:41,226 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-03-21 22:24:41,268 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-03-21 22:24:41,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-03-21 22:24:41,303 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/access/oneshot_token
2024-03-21 22:24:41,325 [KlippyWebsocket.py:connect()] - Starting websocket thread
2024-03-21 22:24:41,345 [_logging.py:info()] - Websocket connected
2024-03-21 22:24:41,346 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2024-03-21 22:24:41,358 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-03-21 22:24:41,385 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-03-21 22:24:41,407 [printer.py:configure_cameras()] - Cameras: []
2024-03-21 22:24:41,408 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'ready', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'octoprint_compat', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 3, 'moonraker_version': 'v0.8.0-318-g9813011', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-03-21 22:24:41,409 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-03-21 22:24:41,435 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-03-21 22:24:41,736 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set allow_park = client.park_at_cancel | default(false) | lower == \'true\' %}\n{% set retract = client.cancel_retract | default(5.0) | abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x | default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y | default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x | length > 0 or park_y | length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro | default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set idle_timeout = client.idle_timeout | default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE | default(1) | int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro | default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move | default(velocity) %}\n{% set runout_resume = True if client.runout_sensor | default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state | upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro | default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY | default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}"}, 'neopixel sb_leds': {'pin': 'EBBCan:gpio16', 'chain_count': '3', 'color_order': 'GRB', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0'}, 'led_effect sb_logo_busy': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (1,0,0)'}, 'led_effect sb_logo_cleaning': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.02, 0.5)'}, 'led_effect sb_logo_calibrating_z': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 0.35)'}, 'led_effect sb_logo_heating': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nbreathing  3 1 top (1, 0.18, 0)'}, 'led_effect sb_logo_cooling': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nbreathing  3 1 top (0, 0, 1)'}, 'led_effect sb_logo_homing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.6, 0.2)'}, 'led_effect sb_logo_leveling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.5, 0.1, 0.4)'}, 'led_effect sb_logo_meshing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.2, 1.0, 0.0)'}, 'led_effect sb_logo_printing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.3, 0.3, 0.0),(0.3, 0.1, 0.0)'}, 'led_effect sb_logo_standby': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.01, 0.01, 0.01)'}, 'led_effect sb_logo_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 1.0, 0.0)'}, 'led_effect sb_nozzle_heating': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (1.0, 0.18, 0.0, 0.0)'}, 'led_effect sb_nozzle_cooling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 1.0, 0.1)'}, 'led_effect sb_nozzle_standby': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.6, 0.0, 0.0, 0.0)'}, 'led_effect sb_nozzle_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.6, 1.0, 0.0, 0.1)'}, 'led_effect sb_critical_error': {'leds': '\nneopixel:sb_leds', 'layers': '\nstrobe         1  1.5   add        (1.0,  1.0, 1.0)\nbreathing      2  0     difference (0.95, 0.0, 0.0)\nstatic         1  0     top        (1.0,  0.0, 0.0)', 'autostart': 'false', 'frame_rate': '24', 'run_on_error': 'true'}, 'led_effect rainbow': {'leds': '\nneopixel:sb_leds', 'autostart': 'true', 'frame_rate': '24', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.0, 0.3, 0.0),(0.0, 0.0, 0.3)'}, 'led_effect set_nozzle_leds': {'leds': '\nneopixel:sb_leds (2,3)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nstatic         0  0     top        (0.5,  0.5, 0.5)'}, 'led_effect set_logo_leds': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nstatic         0  0     top        (1.0,  1.0, 1.0)'}, 'gcode_macro set_logo_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds STOP=1'}, 'gcode_macro set_logo_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1'}, 'gcode_macro status_off': {'gcode': '\nSTOP_LED_EFFECTS'}, 'gcode_macro status_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=rainbow'}, 'gcode_macro status_part_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready'}, 'gcode_macro status_busy': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_busy\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_heating\nSET_LED_EFFECT EFFECT=sb_nozzle_heating'}, 'gcode_macro status_cooling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cooling\nSET_LED_EFFECT EFFECT=sb_nozzle_cooling'}, 'gcode_macro status_leveling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_leveling\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_homing\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cleaning\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_meshing\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_calibrating_z\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_printing\nset_nozzle_leds_on'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_sam4e8e_00313753364B37373032303038303139-if00'}, 'mcu EBBCan': {'canbus_uuid': '8250861450f7'}, 'adxl345': {'cs_pin': 'EBBCan:gpio1', 'spi_software_sclk_pin': 'EBBCan:gpio2', 'spi_software_mosi_pin': 'EBBCan:gpio0', 'spi_software_miso_pin': 'EBBCan:gpio3', 'axes_map': 'z,-y,x'}, 'resonance_tester': {'probe_points': '100, 100, 20', 'accel_chip': 'adxl345'}, 'input_shaper': {'shaper_freq_x': '45', 'shaper_type': '3hump_ei'}, 'stepper_x': {'step_pin': 'PD6', 'dir_pin': '!PD11', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'EBBCan:gpio24', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '40'}, 'tmc2660 stepper_x': {'cs_pin': 'PD14', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'stepper_y': {'step_pin': 'PD7', 'dir_pin': '!PD12', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'PA2', 'position_endstop': '0', 'position_max': '225', 'position_min': '-4', 'homing_speed': '35', 'homing_retract_dist': '0'}, 'tmc2660 stepper_y': {'cs_pin': 'PC9', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'stepper_z': {'step_pin': 'PD8', 'dir_pin': '!PD13', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '230', 'position_min': '-2.5', 'homing_speed': '35.0'}, 'tmc2660 stepper_z': {'cs_pin': 'PC10', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'adc_temperature my_thermistor': {'temperature1': '0', 'resistance1': '1000', 'temperature2': '80', 'resistance2': '1309'}, 'extruder': {'step_pin': '!EBBCan:gpio18', 'dir_pin': 'EBBCan:gpio19', 'enable_pin': '!EBBCan:gpio17', 'microsteps': '32', 'rotation_distance': '21.63024711', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'gear_ratio': '50:10', 'heater_pin': 'EBBCan:gpio7', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'EBBCan:gpio27', 'control': 'pid', 'pid_kp': '21.527', 'pid_ki': '1.063', 'pid_kd': '108.982', 'min_temp': '0', 'max_temp': '250'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan:gpio20', 'run_current': '0.5', 'stealthchop_threshold': '999999'}, 'filament_switch_sensor extruder': {'pause_on_runout': 'True', 'switch_pin': 'EBBCan:gpio21'}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu'}, 'thermistor chamber_temp': {'temperature1': '25', 'resistance1': '10000', 'beta': '3950'}, 'heater_bed': {'heater_pin': '!PA19', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PC13', 'control': 'watermark', 'min_temp': '0', 'max_temp': '120'}, 'heater_fan extruder_fan': {'pin': 'EBBCan:gpio13', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'EBBCan:gpio14', 'cycle_time': '.08', 'kick_start_time': '.25'}, 'probe': {'pin': '^EBBCan:gpio22', 'x_offset': '0', 'y_offset': '0', 'samples': '3', 'samples_result': 'median', 'sample_retract_dist': '3', 'samples_tolerance': '0.015', 'samples_tolerance_retries': '3', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'z_offset': '-1.500'}, 'homing_override': {'axes': 'z', 'set_position_z': '0', 'gcode': '\nstatus_homing\nG90\nG0 Z5 F500\nG28 X0 Y0\nG0 X150 Y100 F9000\nG28 Z0\nG0 Z5 F500\nstatus_ready'}, 'bed_mesh': {'speed': '150', 'horizontal_move_z': '5', 'mesh_min': '25,35.0', 'mesh_max': '225.0,220', 'probe_count': '6,6', 'algorithm': 'bicubic', 'fade_start': '1', 'fade_end': '10', 'fade_target': '0'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\nM117 Homing...\nG28 Y0 X0 Z0\n\n\n\n\n\n\n\n\n\n\n\n\nSTATUS_HEATING\nM107\nM117 Heating bed\nM190 S{ params.BED }\nM117 Heating nozzle\nM109 S{target_extruder}\nstatus_ready\nG1 Z15.0 F600\nG1 X125 Y125 F3000\nG92 E0\nG1 F9000\nstatus_printing\nM117 Printing...'}, 'gcode_macro PRINT_END': {'gcode': '\nstatus_busy\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\n\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y} F3600\nM117 Finished!\nstatus_off'}, 'printer': {'kinematics': 'corexz', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '5', 'max_z_accel': '100'}, 'force_move': {'enable_force_move': 'true'}, 'exclude_object': {}, 'bed_mesh default': {'version': '1', 'points': '\n-0.287500, -0.112500, -0.062500, -0.025000, 0.137500, -0.137500\n-0.225000, -0.112500, -0.087500, 0.037500, 0.137500, 0.287500\n-0.287500, -0.200000, -0.087500, -0.000000, 0.137500, 0.300000\n-0.337500, -0.200000, -0.137500, -0.012500, 0.125000, 0.275000\n-0.300000, -0.162500, -0.062500, 0.037500, 0.187500, 0.337500\n-0.212500, -0.075000, 0.025000, 0.125000, 0.275000, 0.450000', 'x_count': '6', 'y_count': '6', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'bicubic', 'tension': '0.2', 'min_x': '25.0', 'max_x': '225.0', 'min_y': '35.0', 'max_y': '220.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_sam4e8e_00313753364B37373032303038303139-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu ebbcan': {'canbus_uuid': '8250861450f7', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set allow_park = client.park_at_cancel | default(false) | lower == \'true\' %}\n{% set retract = client.cancel_retract | default(5.0) | abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x | default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y | default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x | length > 0 or park_y | length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro | default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set idle_timeout = client.idle_timeout | default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE | default(1) | int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro | default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move | default(velocity) %}\n{% set runout_resume = True if client.runout_sensor | default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state | upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro | default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY | default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'neopixel sb_leds': {'pin': 'EBBCan:gpio16', 'chain_count': 3, 'color_order': ['GRB'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'led_effect sb_logo_busy': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1,0,0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_cleaning': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.02, 0.5)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_calibrating_z': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 0.35)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1, 0.18, 0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0, 0, 1)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_homing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.6, 0.2)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_leveling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.5, 0.1, 0.4)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_meshing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.2, 1.0, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_printing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.3, 0.3, 0.0),(0.3, 0.1, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_standby': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.01, 0.01, 0.01)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 1.0, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_nozzle_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1.0, 0.18, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 1.0, 0.1)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_standby': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.6, 0.0, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.6, 1.0, 0.0, 0.1)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_critical_error': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': True, 'endstops': '', 'layers': '\nstrobe         1  1.5   add        (1.0,  1.0, 1.0)\nbreathing      2  0     difference (0.95, 0.0, 0.0)\nstatic         1  0     top        (1.0,  0.0, 0.0)', 'leds': '\nneopixel:sb_leds'}, 'led_effect rainbow': {'frame_rate': 24.0, 'autostart': True, 'run_on_error': False, 'endstops': '', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.0, 0.3, 0.0),(0.0, 0.0, 0.3)', 'leds': '\nneopixel:sb_leds'}, 'led_effect set_nozzle_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic         0  0     top        (0.5,  0.5, 0.5)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect set_logo_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic         0  0     top        (1.0,  1.0, 1.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'gcode_macro set_logo_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nSTOP_LED_EFFECTS', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=rainbow', 'description': 'G-Code macro'}, 'gcode_macro status_part_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_busy\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_heating\nSET_LED_EFFECT EFFECT=sb_nozzle_heating', 'description': 'G-Code macro'}, 'gcode_macro status_cooling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cooling\nSET_LED_EFFECT EFFECT=sb_nozzle_cooling', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_leveling\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_homing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cleaning\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_meshing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_calibrating_z\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_printing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'adxl345': {'axes_map': ['z', '-y', 'x'], 'rate': 3200, 'cs_pin': 'EBBCan:gpio1', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'EBBCan:gpio2', 'spi_software_miso_pin': 'EBBCan:gpio3', 'spi_software_mosi_pin': 'EBBCan:gpio0'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[100.0, 100.0, 20.0]], 'accel_chip': 'adxl345'}, 'input_shaper': {'shaper_type': '3hump_ei', 'shaper_type_x': '3hump_ei', 'damping_ratio_x': 0.1, 'shaper_freq_x': 45.0, 'shaper_type_y': '3hump_ei', 'damping_ratio_y': 0.1, 'shaper_freq_y': 0.0}, 'tmc2660 stepper_x': {'cs_pin': 'PD14', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PD6', 'dir_pin': '!PD11', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'EBBCan:gpio24', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2660 stepper_y': {'cs_pin': 'PC9', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PD7', 'dir_pin': '!PD12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'PA2', 'position_endstop': 0.0, 'position_min': -4.0, 'position_max': 225.0, 'homing_speed': 35.0, 'second_homing_speed': 17.5, 'homing_retract_speed': 35.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2660 stepper_z': {'cs_pin': 'PC10', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PD8', 'dir_pin': '!PD13', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -2.5, 'position_max': 230.0, 'homing_speed': 35.0, 'second_homing_speed': 17.5, 'homing_retract_speed': 35.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'adc_temperature my_thermistor': {'resistance1': 1000.0, 'temperature1': 0.0, 'temperature2': 80.0, 'resistance2': 1309.0}, 'tmc2209 extruder': {'uart_pin': 'EBBCan:gpio20', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan:gpio27', 'min_temp': 0.0, 'max_temp': 250.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 21.527, 'pid_ki': 1.063, 'pid_kd': 108.982, 'heater_pin': 'EBBCan:gpio7', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': '!EBBCan:gpio18', 'pressure_advance': 0.0, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'EBBCan:gpio19', 'rotation_distance': 21.63024711, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!EBBCan:gpio17'}, 'filament_switch_sensor extruder': {'switch_pin': 'EBBCan:gpio21', 'pause_on_runout': True, 'runout_gcode': '', 'pause_delay': 0.5, 'event_delay': 3.0}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'thermistor chamber_temp': {'temperature1': 25.0, 'resistance1': 10000.0, 'beta': 3950.0}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PC13', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'watermark', 'max_delta': 2.0, 'heater_pin': '!PA19', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan extruder_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'EBBCan:gpio13', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.25, 'off_below': 0.0, 'cycle_time': 0.08, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'EBBCan:gpio14'}, 'probe': {'z_offset': -1.5, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': '^EBBCan:gpio22', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 3, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.015, 'samples_tolerance_retries': 3}, 'homing_override': {'set_position_z': 0.0, 'axes': 'z', 'gcode': '\nstatus_homing\nG90\nG0 Z5 F500\nG28 X0 Y0\nG0 X150 Y100 F9000\nG28 Z0\nG0 Z5 F500\nstatus_ready'}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [6, 6], 'mesh_min': [25.0, 35.0], 'mesh_max': [225.0, 220.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 150.0, 'fade_start': 1.0, 'fade_end': 10.0, 'fade_target': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[-0.2875, -0.1125, -0.0625, -0.025, 0.1375, -0.1375], [-0.225, -0.1125, -0.0875, 0.0375, 0.1375, 0.2875], [-0.2875, -0.2, -0.0875, -0.0, 0.1375, 0.3], [-0.3375, -0.2, -0.1375, -0.0125, 0.125, 0.275], [-0.3, -0.1625, -0.0625, 0.0375, 0.1875, 0.3375], [-0.2125, -0.075, 0.025, 0.125, 0.275, 0.45]], 'min_x': 25.0, 'max_x': 225.0, 'min_y': 35.0, 'max_y': 220.0, 'x_count': 6, 'y_count': 6, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'bicubic', 'tension': 0.2}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\nM117 Homing...\nG28 Y0 X0 Z0\n\n\n\n\n\n\n\n\n\n\n\n\nSTATUS_HEATING\nM107\nM117 Heating bed\nM190 S{ params.BED }\nM117 Heating nozzle\nM109 S{target_extruder}\nstatus_ready\nG1 Z15.0 F600\nG1 X125 Y125 F3000\nG92 E0\nG1 F9000\nstatus_printing\nM117 Printing...', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\nstatus_busy\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\n\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y} F3600\nM117 Finished!\nstatus_off', 'description': 'G-Code macro'}, 'force_move': {'enable_force_move': True}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'max_accel_to_decel': 1500.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexz', 'max_z_velocity': 5.0, 'max_z_accel': 100.0}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-03-21 22:24:41,743 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-03-21 22:24:41,746 [printer.py:reinit()] - Klipper version: v0.12.0-114-ga77d0790-dirty
2024-03-21 22:24:41,747 [printer.py:reinit()] - # Extruders: 1
2024-03-21 22:24:41,747 [printer.py:reinit()] - # Temperature devices: 2
2024-03-21 22:24:41,747 [printer.py:reinit()] - # Fans: 2
2024-03-21 22:24:41,747 [printer.py:reinit()] - # Output pins: 0
2024-03-21 22:24:41,748 [printer.py:reinit()] - # Leds: 20
2024-03-21 22:24:41,748 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-03-21 22:24:41,783 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-03-21 22:24:41,788 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor mcu&fan&heater_fan extruder_fan&filament_switch_sensor extruder&neopixel sb_leds
2024-03-21 22:24:42,069 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-03-21 22:24:42,070 [screen.py:init_klipper()] - Printer initialized
2024-03-21 22:24:42,070 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2024-03-21 22:24:42,071 [printer.py:change_state()] - Adding callback for state: ready
2024-03-21 22:24:42,225 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-03-21 22:24:42,233 [screen.py:_load_panel()] - Loading panel: main_menu
2024-03-21 22:24:42,461 [main_menu.py:__init__()] - ### Making MainMenu
2024-03-21 22:24:42,490 [main_menu.py:add_device()] - Adding device: extruder
2024-03-21 22:24:42,499 [main_menu.py:add_device()] - Adding device: heater_bed
2024-03-21 22:24:42,507 [main_menu.py:add_device()] - Adding device: temperature_sensor mcu
2024-03-21 22:24:42,559 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-03-21 22:24:42,560 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-03-21 22:24:42,603 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor mcu', 'heater_bed', 'extruder']
2024-03-21 22:24:42,607 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-03-21 22:24:42,632 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-03-21 22:26:56,295 [screen.py:_load_panel()] - Loading panel: print
2024-03-21 22:26:56,345 [print.py:__init__()] - Thumbsize: 128.48275862068962
2024-03-21 22:26:56,352 [print.py:__init__()] - thumbs
2024-03-21 22:26:56,381 [KlippyWebsocket.py:get_dir_info()] - Sending server.files.get_directory  gcodes
2024-03-21 22:26:56,411 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > print
2024-03-21 22:26:56,545 [print.py:load_files()] - Loaded in 0.120 seconds
2024-03-21 22:27:01,193 [KlippyGtk.py:Dialog()] - Showing dialog Print fidget_cube_0.2mm_PLA_MK3S_1h39m.gcode (width=984, height=540)
2024-03-21 22:27:04,041 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2024-03-21 22:27:04,042 [print.py:confirm_print_response()] - Starting print: fidget_cube_0.2mm_PLA_MK3S_1h39m.gcode
2024-03-21 22:27:04,042 [KlippyWebsocket.py:print_start()] - Sending printer.print.start
2024-03-21 22:27:04,136 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2024-03-21 22:27:04,137 [printer.py:change_state()] - Adding callback for state: printing
2024-03-21 22:27:04,268 [screen.py:_load_panel()] - Loading panel: job_status
2024-03-21 22:27:04,981 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-03-21 22:27:05,003 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-03-21 22:27:05,060 [job_status.py:update_file_metadata()] - Update Metadata. File: fidget_cube_0.2mm_PLA_MK3S_1h39m.gcode Size: 3698343
2024-03-21 22:27:05,073 [job_status.py:show_file_thumbnail()] - fidget_cube_0.2mm_PLA_MK3S_1h39m.gcode
2024-03-21 23:08:59,720 [printer.py:change_state()] - Changing state from 'printing' to 'paused'
2024-03-21 23:08:59,721 [printer.py:change_state()] - Adding callback for state: paused
2024-03-21 23:08:59,735 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'paused'
2024-03-21 23:08:59,859 [files.py:remove_callback()] - callback not found <bound method Panel._callback of <panels.print.Panel object at 0x7f9cb4f3d0>>
2024-03-21 23:08:59,859 [screen.py:show_panel()] - Reinitializing panel
2024-03-21 23:09:00,287 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-03-21 23:09:00,308 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'paused'
2024-03-21 23:09:00,355 [job_status.py:update_file_metadata()] - Update Metadata. File: fidget_cube_0.2mm_PLA_MK3S_1h39m.gcode Size: 3698343
2024-03-21 23:09:00,368 [job_status.py:show_file_thumbnail()] - fidget_cube_0.2mm_PLA_MK3S_1h39m.gcode
2024-03-21 23:09:00,384 [screen.py:_load_panel()] - Loading panel: extrude
2024-03-21 23:09:00,618 [screen.py:attach_panel()] - Current panel hierarchy: job_status > extrude
2024-03-21 23:09:00,623 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: SET_FILAMENT_SENSOR SENSOR=extruder ENABLE=1
2024-03-21 23:09:00,627 [extrude.py:process_update()] - filament_switch_sensor extruder: {'filament_detected': False, 'enabled': True}
2024-03-21 23:12:27,774 [printer.py:change_state()] - Changing state from 'paused' to 'printing'
2024-03-21 23:12:27,774 [printer.py:change_state()] - Adding callback for state: printing
2024-03-21 23:12:27,830 [files.py:remove_callback()] - callback not found <bound method Panel._callback of <panels.print.Panel object at 0x7f9cb4f3d0>>
2024-03-21 23:12:27,830 [screen.py:show_panel()] - Reinitializing panel
2024-03-21 23:12:28,221 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-03-21 23:12:28,241 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-03-21 23:12:28,289 [job_status.py:update_file_metadata()] - Update Metadata. File: fidget_cube_0.2mm_PLA_MK3S_1h39m.gcode Size: 3698343
2024-03-21 23:12:28,303 [job_status.py:show_file_thumbnail()] - fidget_cube_0.2mm_PLA_MK3S_1h39m.gcode
2024-03-21 23:20:07,237 [printer.py:change_state()] - Changing state from 'printing' to 'paused'
2024-03-21 23:20:07,238 [printer.py:change_state()] - Adding callback for state: paused
2024-03-21 23:20:07,261 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'paused'
2024-03-21 23:20:07,370 [files.py:remove_callback()] - callback not found <bound method Panel._callback of <panels.print.Panel object at 0x7f9cb4f3d0>>
2024-03-21 23:20:07,371 [screen.py:show_panel()] - Reinitializing panel
2024-03-21 23:20:07,760 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-03-21 23:20:07,780 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'paused'
2024-03-21 23:20:07,824 [job_status.py:update_file_metadata()] - Update Metadata. File: fidget_cube_0.2mm_PLA_MK3S_1h39m.gcode Size: 3698343
2024-03-21 23:20:07,836 [job_status.py:show_file_thumbnail()] - fidget_cube_0.2mm_PLA_MK3S_1h39m.gcode
2024-03-21 23:20:07,853 [screen.py:show_panel()] - Reinitializing panel
2024-03-21 23:20:08,064 [screen.py:attach_panel()] - Current panel hierarchy: job_status > extrude
2024-03-21 23:20:08,069 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: SET_FILAMENT_SENSOR SENSOR=extruder ENABLE=1
2024-03-21 23:20:08,075 [extrude.py:process_update()] - filament_switch_sensor extruder: {'filament_detected': False, 'enabled': True}
2024-03-21 23:20:41,580 [printer.py:change_state()] - Changing state from 'paused' to 'printing'
2024-03-21 23:20:41,580 [printer.py:change_state()] - Adding callback for state: printing
2024-03-21 23:20:41,621 [files.py:remove_callback()] - callback not found <bound method Panel._callback of <panels.print.Panel object at 0x7f9cb4f3d0>>
2024-03-21 23:20:41,621 [screen.py:show_panel()] - Reinitializing panel
2024-03-21 23:20:42,008 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-03-21 23:20:42,027 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-03-21 23:20:42,074 [job_status.py:update_file_metadata()] - Update Metadata. File: fidget_cube_0.2mm_PLA_MK3S_1h39m.gcode Size: 3698343
2024-03-21 23:20:42,086 [job_status.py:show_file_thumbnail()] - fidget_cube_0.2mm_PLA_MK3S_1h39m.gcode
2024-03-21 23:27:04,239 [screen.py:show_screensaver()] - Showing Screensaver
2024-03-21 23:32:43,400 [printer.py:change_state()] - Changing state from 'printing' to 'paused'
2024-03-21 23:32:43,400 [printer.py:change_state()] - Adding callback for state: paused
2024-03-21 23:32:43,406 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'paused'
2024-03-21 23:32:43,412 [screen.py:close_screensaver()] - Closing Screensaver
2024-03-21 23:32:43,479 [files.py:remove_callback()] - callback not found <bound method Panel._callback of <panels.print.Panel object at 0x7f9cb4f3d0>>
2024-03-21 23:32:43,480 [screen.py:show_panel()] - Reinitializing panel
2024-03-21 23:32:43,793 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-03-21 23:32:43,814 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'paused'
2024-03-21 23:32:43,861 [job_status.py:update_file_metadata()] - Update Metadata. File: fidget_cube_0.2mm_PLA_MK3S_1h39m.gcode Size: 3698343
2024-03-21 23:32:43,873 [job_status.py:show_file_thumbnail()] - fidget_cube_0.2mm_PLA_MK3S_1h39m.gcode
2024-03-21 23:32:43,889 [screen.py:show_panel()] - Reinitializing panel
2024-03-21 23:32:44,102 [screen.py:attach_panel()] - Current panel hierarchy: job_status > extrude
2024-03-21 23:32:44,107 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: SET_FILAMENT_SENSOR SENSOR=extruder ENABLE=1
2024-03-21 23:32:44,110 [extrude.py:process_update()] - filament_switch_sensor extruder: {'filament_detected': False, 'enabled': True}
2024-03-21 23:32:58,719 [printer.py:change_state()] - Changing state from 'paused' to 'printing'
2024-03-21 23:32:58,719 [printer.py:change_state()] - Adding callback for state: printing
2024-03-21 23:32:58,761 [files.py:remove_callback()] - callback not found <bound method Panel._callback of <panels.print.Panel object at 0x7f9cb4f3d0>>
2024-03-21 23:32:58,762 [screen.py:show_panel()] - Reinitializing panel
2024-03-21 23:32:59,089 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-03-21 23:32:59,110 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-03-21 23:32:59,156 [job_status.py:update_file_metadata()] - Update Metadata. File: fidget_cube_0.2mm_PLA_MK3S_1h39m.gcode Size: 3698343
2024-03-21 23:32:59,168 [job_status.py:show_file_thumbnail()] - fidget_cube_0.2mm_PLA_MK3S_1h39m.gcode
2024-03-21 23:45:29,048 [printer.py:change_state()] - Changing state from 'printing' to 'paused'
2024-03-21 23:45:29,048 [printer.py:change_state()] - Adding callback for state: paused
2024-03-21 23:45:29,066 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'paused'
2024-03-21 23:45:29,183 [files.py:remove_callback()] - callback not found <bound method Panel._callback of <panels.print.Panel object at 0x7f9cb4f3d0>>
2024-03-21 23:45:29,184 [screen.py:show_panel()] - Reinitializing panel
2024-03-21 23:45:29,587 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-03-21 23:45:29,608 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'paused'
2024-03-21 23:45:29,653 [job_status.py:update_file_metadata()] - Update Metadata. File: fidget_cube_0.2mm_PLA_MK3S_1h39m.gcode Size: 3698343
2024-03-21 23:45:29,666 [job_status.py:show_file_thumbnail()] - fidget_cube_0.2mm_PLA_MK3S_1h39m.gcode
2024-03-21 23:45:29,682 [screen.py:show_panel()] - Reinitializing panel
2024-03-21 23:45:29,889 [screen.py:attach_panel()] - Current panel hierarchy: job_status > extrude
2024-03-21 23:45:29,895 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: SET_FILAMENT_SENSOR SENSOR=extruder ENABLE=1
2024-03-21 23:45:29,898 [extrude.py:process_update()] - filament_switch_sensor extruder: {'filament_detected': False, 'enabled': True}
2024-03-22 00:06:18,325 [screen.py:show_popup_message()] - echo: Restoring "extruder" temperature to 200.0°C, this may take some time
2024-03-22 00:07:59,406 [screen.py:show_popup_message()] - error: Must home axis first: 120.171 106.798 8.800 [3479.281]
2024-03-22 00:09:45,510 [screen.py:show_popup_message()] - error: Must home axis first: 120.171 106.798 8.800 [3480.281]
2024-03-22 00:15:59,837 [printer.py:change_state()] - Changing state from 'paused' to 'printing'
2024-03-22 00:15:59,837 [printer.py:change_state()] - Adding callback for state: printing
2024-03-22 00:15:59,880 [files.py:remove_callback()] - callback not found <bound method Panel._callback of <panels.print.Panel object at 0x7f9cb4f3d0>>
2024-03-22 00:15:59,881 [screen.py:show_panel()] - Reinitializing panel
2024-03-22 00:16:00,275 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-03-22 00:16:00,295 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-03-22 00:16:00,340 [job_status.py:update_file_metadata()] - Update Metadata. File: fidget_cube_0.2mm_PLA_MK3S_1h39m.gcode Size: 3698343
2024-03-22 00:16:00,353 [job_status.py:show_file_thumbnail()] - fidget_cube_0.2mm_PLA_MK3S_1h39m.gcode
2024-03-22 00:22:47,141 [printer.py:change_state()] - Changing state from 'printing' to 'paused'
2024-03-22 00:22:47,141 [printer.py:change_state()] - Adding callback for state: paused
2024-03-22 00:22:47,159 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'paused'
2024-03-22 00:22:47,297 [files.py:remove_callback()] - callback not found <bound method Panel._callback of <panels.print.Panel object at 0x7f9cb4f3d0>>
2024-03-22 00:22:47,298 [screen.py:show_panel()] - Reinitializing panel
2024-03-22 00:22:47,702 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-03-22 00:22:47,722 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'paused'
2024-03-22 00:22:47,767 [job_status.py:update_file_metadata()] - Update Metadata. File: fidget_cube_0.2mm_PLA_MK3S_1h39m.gcode Size: 3698343
2024-03-22 00:22:47,779 [job_status.py:show_file_thumbnail()] - fidget_cube_0.2mm_PLA_MK3S_1h39m.gcode
2024-03-22 00:22:47,797 [screen.py:show_panel()] - Reinitializing panel
2024-03-22 00:22:48,004 [screen.py:attach_panel()] - Current panel hierarchy: job_status > extrude
2024-03-22 00:22:48,010 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: SET_FILAMENT_SENSOR SENSOR=extruder ENABLE=1
2024-03-22 00:22:48,015 [extrude.py:process_update()] - filament_switch_sensor extruder: {'filament_detected': False, 'enabled': True}
2024-03-22 00:24:06,155 [printer.py:change_state()] - Changing state from 'paused' to 'printing'
2024-03-22 00:24:06,156 [printer.py:change_state()] - Adding callback for state: printing
2024-03-22 00:24:06,204 [files.py:remove_callback()] - callback not found <bound method Panel._callback of <panels.print.Panel object at 0x7f9cb4f3d0>>
2024-03-22 00:24:06,205 [screen.py:show_panel()] - Reinitializing panel
2024-03-22 00:24:06,593 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-03-22 00:24:06,614 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-03-22 00:24:06,660 [job_status.py:update_file_metadata()] - Update Metadata. File: fidget_cube_0.2mm_PLA_MK3S_1h39m.gcode Size: 3698343
2024-03-22 00:24:06,673 [job_status.py:show_file_thumbnail()] - fidget_cube_0.2mm_PLA_MK3S_1h39m.gcode
2024-03-22 00:32:44,215 [screen.py:show_screensaver()] - Showing Screensaver
2024-03-22 00:37:36,392 [printer.py:change_state()] - Changing state from 'printing' to 'paused'
2024-03-22 00:37:36,392 [printer.py:change_state()] - Adding callback for state: paused
2024-03-22 00:37:36,399 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'paused'
2024-03-22 00:37:36,406 [screen.py:close_screensaver()] - Closing Screensaver
2024-03-22 00:37:36,485 [files.py:remove_callback()] - callback not found <bound method Panel._callback of <panels.print.Panel object at 0x7f9cb4f3d0>>
2024-03-22 00:37:36,486 [screen.py:show_panel()] - Reinitializing panel
2024-03-22 00:37:36,906 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-03-22 00:37:36,927 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'paused'
2024-03-22 00:37:36,973 [job_status.py:update_file_metadata()] - Update Metadata. File: fidget_cube_0.2mm_PLA_MK3S_1h39m.gcode Size: 3698343
2024-03-22 00:37:36,987 [job_status.py:show_file_thumbnail()] - fidget_cube_0.2mm_PLA_MK3S_1h39m.gcode
2024-03-22 00:37:37,003 [screen.py:show_panel()] - Reinitializing panel
2024-03-22 00:37:37,210 [screen.py:attach_panel()] - Current panel hierarchy: job_status > extrude
2024-03-22 00:37:37,216 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: SET_FILAMENT_SENSOR SENSOR=extruder ENABLE=1
2024-03-22 00:37:37,221 [extrude.py:process_update()] - filament_switch_sensor extruder: {'filament_detected': False, 'enabled': True}
2024-03-22 00:45:09,888 [printer.py:change_state()] - Changing state from 'paused' to 'ready'
2024-03-22 00:45:09,888 [printer.py:change_state()] - Adding callback for state: ready
2024-03-22 01:37:37,215 [screen.py:show_screensaver()] - Showing Screensaver
2024-03-22 02:05:42,664 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: SET_FILAMENT_SENSOR SENSOR=extruder ENABLE=0
2024-03-22 02:05:42,668 [extrude.py:process_update()] - filament_switch_sensor extruder: {'filament_detected': False, 'enabled': False}
2024-03-22 02:07:33,470 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2024-03-22 02:07:33,471 [printer.py:change_state()] - Adding callback for state: printing
2024-03-22 02:07:33,474 [screen.py:close_screensaver()] - Closing Screensaver
2024-03-22 02:07:33,573 [files.py:remove_callback()] - callback not found <bound method Panel._callback of <panels.print.Panel object at 0x7f9cb4f3d0>>
2024-03-22 02:07:33,574 [screen.py:show_panel()] - Reinitializing panel
2024-03-22 02:07:33,972 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-03-22 02:07:33,993 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-03-22 02:07:34,038 [job_status.py:update_file_metadata()] - Update Metadata. File: fidget_cube_0.2mm_PLA_MK3S_1h39m.gcode Size: 3698313
2024-03-22 02:07:34,052 [job_status.py:show_file_thumbnail()] - fidget_cube_0.2mm_PLA_MK3S_1h39m.gcode
2024-03-22 02:33:05,591 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2024-03-22 02:33:05,592 [printer.py:change_state()] - Adding callback for state: ready
2024-03-22 02:33:05,616 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'cancelled'
2024-03-22 03:07:34,215 [screen.py:show_screensaver()] - Showing Screensaver
2024-03-22 03:16:19,145 [screen.py:close_screensaver()] - Closing Screensaver
2024-03-22 03:16:28,038 [job_status.py:close_panel()] - Closing job_status panel
2024-03-22 03:16:28,038 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-03-22 03:16:28,051 [files.py:remove_callback()] - callback not found <bound method Panel._callback of <panels.print.Panel object at 0x7f9cb4f3d0>>
2024-03-22 03:16:28,052 [screen.py:show_panel()] - Reinitializing panel
2024-03-22 03:16:28,290 [main_menu.py:__init__()] - ### Making MainMenu
2024-03-22 03:16:28,324 [main_menu.py:add_device()] - Adding device: extruder
2024-03-22 03:16:28,341 [main_menu.py:add_device()] - Adding device: heater_bed
2024-03-22 03:16:28,359 [main_menu.py:add_device()] - Adding device: temperature_sensor mcu
2024-03-22 03:16:28,474 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-03-22 03:16:45,493 [screen.py:show_panel()] - Reinitializing panel
2024-03-22 03:16:45,552 [print.py:__init__()] - Thumbsize: 128.48275862068962
2024-03-22 03:16:45,561 [print.py:__init__()] - thumbs
2024-03-22 03:16:45,584 [KlippyWebsocket.py:get_dir_info()] - Sending server.files.get_directory  gcodes
2024-03-22 03:16:45,647 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > print
2024-03-22 03:16:45,806 [print.py:load_files()] - Loaded in 0.132 seconds
2024-03-22 03:16:47,622 [screen.py:_menu_go_back()] - #### Menu go back
2024-03-22 03:16:47,951 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-03-22 03:18:05,326 [screen.py:_load_panel()] - Loading panel: shutdown
2024-03-22 03:18:05,694 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > shutdown
2024-03-22 03:18:08,767 [screen.py:_menu_go_back()] - #### Menu go back
2024-03-22 03:18:08,861 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-03-22 03:18:15,047 [heatergraph.py:event_cb()] - Graph area: 235.0 216.0
2024-03-22 03:27:08,976 [functions.py:log_start()] - --------------------KlipperScreen Log Start--------------------
2024-03-22 03:27:08,977 [functions.py:log_start()] - KlipperScreen Version: v0.3.9-50-gdaed9a0
2024-03-22 03:27:08,977 [functions.py:log_start()] - Python version: 3.11
2024-03-22 03:27:09,308 [config.py:get_config_file_location()] - Passed config (-c): .
2024-03-22 03:27:09,310 [config.py:__init__()] - Config path location: /home/pi/printer_data/config/KlipperScreen.conf
2024-03-22 03:27:09,360 [config.py:log_config()] -  ===== Config File =====

=======================
2024-03-22 03:27:09,366 [config.py:__init__()] - ====== Saved Def ======

[main]
use_dpms = False
print_sort_dir = date_desc

=======================
2024-03-22 03:27:09,368 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2024-03-22 03:27:09,568 [config.py:create_translations()] - Selected lang: None OS lang: en_GB
2024-03-22 03:27:09,568 [config.py:install_language()] - Using lang en
2024-03-22 03:27:09,587 [screen.py:__init__()] - Monitors: 1 using number: 0
2024-03-22 03:27:09,589 [screen.py:__init__()] - Wayland: False Display name: :100
2024-03-22 03:27:09,592 [screen.py:__init__()] - Screen resolution: 984x540
2024-03-22 03:27:09,593 [KlippyGtk.py:__init__()] - Font size: 18.6 (medium)
2024-03-22 03:27:10,712 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2024-03-22 03:27:10,712 [screen.py:set_screenblanking_timeout()] - Not using DPMS
2024-03-22 03:27:10,730 [screen.py:initial_connection()] - Default printer: None
2024-03-22 03:27:10,844 [screen.py:connect_printer()] - Connecting to printer: Printer
2024-03-22 03:27:10,845 [screen.py:_load_panel()] - Loading panel: splash_screen
2024-03-22 03:27:10,989 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-03-22 03:27:11,034 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-03-22 03:27:11,035 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-03-22 03:27:11,070 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/access/oneshot_token
2024-03-22 03:27:11,094 [KlippyWebsocket.py:connect()] - Starting websocket thread
2024-03-22 03:27:11,113 [_logging.py:info()] - Websocket connected
2024-03-22 03:27:11,114 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2024-03-22 03:27:11,997 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-03-22 03:27:12,022 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-03-22 03:27:12,052 [printer.py:configure_cameras()] - Cameras: []
2024-03-22 03:27:12,053 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'ready', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'octoprint_compat', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 3, 'moonraker_version': 'v0.8.0-318-g9813011', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-03-22 03:27:12,053 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-03-22 03:27:12,082 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-03-22 03:27:12,148 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set allow_park = client.park_at_cancel | default(false) | lower == \'true\' %}\n{% set retract = client.cancel_retract | default(5.0) | abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x | default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y | default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x | length > 0 or park_y | length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro | default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set idle_timeout = client.idle_timeout | default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE | default(1) | int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro | default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move | default(velocity) %}\n{% set runout_resume = True if client.runout_sensor | default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state | upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro | default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY | default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}"}, 'neopixel sb_leds': {'pin': 'EBBCan:gpio16', 'chain_count': '3', 'color_order': 'GRB', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0'}, 'led_effect sb_logo_busy': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (1,0,0)'}, 'led_effect sb_logo_cleaning': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.02, 0.5)'}, 'led_effect sb_logo_calibrating_z': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 0.35)'}, 'led_effect sb_logo_heating': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nbreathing  3 1 top (1, 0.18, 0)'}, 'led_effect sb_logo_cooling': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nbreathing  3 1 top (0, 0, 1)'}, 'led_effect sb_logo_homing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.6, 0.2)'}, 'led_effect sb_logo_leveling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.5, 0.1, 0.4)'}, 'led_effect sb_logo_meshing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.2, 1.0, 0.0)'}, 'led_effect sb_logo_printing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.3, 0.3, 0.0),(0.3, 0.1, 0.0)'}, 'led_effect sb_logo_standby': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.01, 0.01, 0.01)'}, 'led_effect sb_logo_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 1.0, 0.0)'}, 'led_effect sb_nozzle_heating': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (1.0, 0.18, 0.0, 0.0)'}, 'led_effect sb_nozzle_cooling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 1.0, 0.1)'}, 'led_effect sb_nozzle_standby': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.6, 0.0, 0.0, 0.0)'}, 'led_effect sb_nozzle_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.6, 1.0, 0.0, 0.1)'}, 'led_effect sb_critical_error': {'leds': '\nneopixel:sb_leds', 'layers': '\nstrobe         1  1.5   add        (1.0,  1.0, 1.0)\nbreathing      2  0     difference (0.95, 0.0, 0.0)\nstatic         1  0     top        (1.0,  0.0, 0.0)', 'autostart': 'false', 'frame_rate': '24', 'run_on_error': 'true'}, 'led_effect rainbow': {'leds': '\nneopixel:sb_leds', 'autostart': 'true', 'frame_rate': '24', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.0, 0.3, 0.0),(0.0, 0.0, 0.3)'}, 'led_effect set_nozzle_leds': {'leds': '\nneopixel:sb_leds (2,3)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nstatic         0  0     top        (0.5,  0.5, 0.5)'}, 'led_effect set_logo_leds': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nstatic         0  0     top        (1.0,  1.0, 1.0)'}, 'gcode_macro set_logo_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds STOP=1'}, 'gcode_macro set_logo_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1'}, 'gcode_macro status_off': {'gcode': '\nSTOP_LED_EFFECTS'}, 'gcode_macro status_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=rainbow'}, 'gcode_macro status_part_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready'}, 'gcode_macro status_busy': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_busy\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_heating\nSET_LED_EFFECT EFFECT=sb_nozzle_heating'}, 'gcode_macro status_cooling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cooling\nSET_LED_EFFECT EFFECT=sb_nozzle_cooling'}, 'gcode_macro status_leveling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_leveling\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_homing\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cleaning\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_meshing\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_calibrating_z\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_printing\nset_nozzle_leds_on'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_sam4e8e_00313753364B37373032303038303139-if00'}, 'mcu EBBCan': {'canbus_uuid': '8250861450f7'}, 'adxl345': {'cs_pin': 'EBBCan:gpio1', 'spi_software_sclk_pin': 'EBBCan:gpio2', 'spi_software_mosi_pin': 'EBBCan:gpio0', 'spi_software_miso_pin': 'EBBCan:gpio3', 'axes_map': 'z,-y,x'}, 'resonance_tester': {'probe_points': '100, 100, 20', 'accel_chip': 'adxl345'}, 'input_shaper': {'shaper_freq_x': '45', 'shaper_type': '3hump_ei'}, 'stepper_x': {'step_pin': 'PD6', 'dir_pin': '!PD11', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'EBBCan:gpio24', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '40'}, 'tmc2660 stepper_x': {'cs_pin': 'PD14', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'stepper_y': {'step_pin': 'PD7', 'dir_pin': '!PD12', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'PA2', 'position_endstop': '0', 'position_max': '225', 'position_min': '-4', 'homing_speed': '35', 'homing_retract_dist': '0'}, 'tmc2660 stepper_y': {'cs_pin': 'PC9', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'stepper_z': {'step_pin': 'PD8', 'dir_pin': '!PD13', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '230', 'position_min': '-2.5', 'homing_speed': '35.0'}, 'tmc2660 stepper_z': {'cs_pin': 'PC10', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'adc_temperature my_thermistor': {'temperature1': '0', 'resistance1': '1000', 'temperature2': '80', 'resistance2': '1309'}, 'extruder': {'step_pin': '!EBBCan:gpio18', 'dir_pin': 'EBBCan:gpio19', 'enable_pin': '!EBBCan:gpio17', 'microsteps': '32', 'rotation_distance': '21.63024711', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'gear_ratio': '50:10', 'heater_pin': 'EBBCan:gpio7', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'EBBCan:gpio27', 'control': 'pid', 'pid_kp': '21.527', 'pid_ki': '1.063', 'pid_kd': '108.982', 'min_temp': '0', 'max_temp': '250'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan:gpio20', 'run_current': '0.5', 'stealthchop_threshold': '999999'}, 'filament_switch_sensor extruder': {'pause_on_runout': 'True', 'switch_pin': 'EBBCan:gpio21'}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu'}, 'thermistor chamber_temp': {'temperature1': '25', 'resistance1': '10000', 'beta': '3950'}, 'heater_bed': {'heater_pin': '!PA19', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PC13', 'control': 'watermark', 'min_temp': '0', 'max_temp': '120'}, 'heater_fan extruder_fan': {'pin': 'EBBCan:gpio13', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'EBBCan:gpio14', 'cycle_time': '.08', 'kick_start_time': '.25'}, 'probe': {'pin': '^EBBCan:gpio22', 'x_offset': '0', 'y_offset': '0', 'samples': '3', 'samples_result': 'median', 'sample_retract_dist': '3', 'samples_tolerance': '0.015', 'samples_tolerance_retries': '3', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'z_offset': '-1.500'}, 'homing_override': {'axes': 'z', 'set_position_z': '0', 'gcode': '\nstatus_homing\nG90\nG0 Z5 F500\nG28 X0 Y0\nG0 X150 Y100 F9000\nG28 Z0\nG0 Z5 F500\nstatus_ready'}, 'bed_mesh': {'speed': '150', 'horizontal_move_z': '5', 'mesh_min': '25,35.0', 'mesh_max': '225.0,220', 'probe_count': '6,6', 'algorithm': 'bicubic', 'fade_start': '1', 'fade_end': '10', 'fade_target': '0'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\nM117 Homing...\nG28 Y0 X0 Z0\n\n\n\n\n\n\n\n\n\n\n\n\nSTATUS_HEATING\nM107\nM117 Heating bed\nM190 S{ params.BED }\nM117 Heating nozzle\nM109 S{target_extruder}\nstatus_ready\nG1 Z15.0 F600\nG1 X125 Y125 F3000\nG92 E0\nG1 F9000\nstatus_printing\nM117 Printing...'}, 'gcode_macro PRINT_END': {'gcode': '\nstatus_busy\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\n\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y} F3600\nM117 Finished!\nstatus_off'}, 'printer': {'kinematics': 'corexz', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '5', 'max_z_accel': '100'}, 'force_move': {'enable_force_move': 'true'}, 'exclude_object': {}, 'bed_mesh default': {'version': '1', 'points': '\n-0.287500, -0.112500, -0.062500, -0.025000, 0.137500, -0.137500\n-0.225000, -0.112500, -0.087500, 0.037500, 0.137500, 0.287500\n-0.287500, -0.200000, -0.087500, -0.000000, 0.137500, 0.300000\n-0.337500, -0.200000, -0.137500, -0.012500, 0.125000, 0.275000\n-0.300000, -0.162500, -0.062500, 0.037500, 0.187500, 0.337500\n-0.212500, -0.075000, 0.025000, 0.125000, 0.275000, 0.450000', 'x_count': '6', 'y_count': '6', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'bicubic', 'tension': '0.2', 'min_x': '25.0', 'max_x': '225.0', 'min_y': '35.0', 'max_y': '220.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_sam4e8e_00313753364B37373032303038303139-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu ebbcan': {'canbus_uuid': '8250861450f7', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set allow_park = client.park_at_cancel | default(false) | lower == \'true\' %}\n{% set retract = client.cancel_retract | default(5.0) | abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x | default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y | default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x | length > 0 or park_y | length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro | default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set idle_timeout = client.idle_timeout | default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE | default(1) | int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro | default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move | default(velocity) %}\n{% set runout_resume = True if client.runout_sensor | default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state | upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro | default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY | default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'neopixel sb_leds': {'pin': 'EBBCan:gpio16', 'chain_count': 3, 'color_order': ['GRB'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'led_effect sb_logo_busy': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1,0,0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_cleaning': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.02, 0.5)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_calibrating_z': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 0.35)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1, 0.18, 0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0, 0, 1)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_homing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.6, 0.2)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_leveling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.5, 0.1, 0.4)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_meshing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.2, 1.0, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_printing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.3, 0.3, 0.0),(0.3, 0.1, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_standby': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.01, 0.01, 0.01)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 1.0, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_nozzle_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1.0, 0.18, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 1.0, 0.1)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_standby': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.6, 0.0, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.6, 1.0, 0.0, 0.1)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_critical_error': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': True, 'endstops': '', 'layers': '\nstrobe         1  1.5   add        (1.0,  1.0, 1.0)\nbreathing      2  0     difference (0.95, 0.0, 0.0)\nstatic         1  0     top        (1.0,  0.0, 0.0)', 'leds': '\nneopixel:sb_leds'}, 'led_effect rainbow': {'frame_rate': 24.0, 'autostart': True, 'run_on_error': False, 'endstops': '', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.0, 0.3, 0.0),(0.0, 0.0, 0.3)', 'leds': '\nneopixel:sb_leds'}, 'led_effect set_nozzle_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic         0  0     top        (0.5,  0.5, 0.5)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect set_logo_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic         0  0     top        (1.0,  1.0, 1.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'gcode_macro set_logo_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nSTOP_LED_EFFECTS', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=rainbow', 'description': 'G-Code macro'}, 'gcode_macro status_part_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_busy\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_heating\nSET_LED_EFFECT EFFECT=sb_nozzle_heating', 'description': 'G-Code macro'}, 'gcode_macro status_cooling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cooling\nSET_LED_EFFECT EFFECT=sb_nozzle_cooling', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_leveling\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_homing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cleaning\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_meshing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_calibrating_z\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_printing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'adxl345': {'axes_map': ['z', '-y', 'x'], 'rate': 3200, 'cs_pin': 'EBBCan:gpio1', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'EBBCan:gpio2', 'spi_software_miso_pin': 'EBBCan:gpio3', 'spi_software_mosi_pin': 'EBBCan:gpio0'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[100.0, 100.0, 20.0]], 'accel_chip': 'adxl345'}, 'input_shaper': {'shaper_type': '3hump_ei', 'shaper_type_x': '3hump_ei', 'damping_ratio_x': 0.1, 'shaper_freq_x': 45.0, 'shaper_type_y': '3hump_ei', 'damping_ratio_y': 0.1, 'shaper_freq_y': 0.0}, 'tmc2660 stepper_x': {'cs_pin': 'PD14', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PD6', 'dir_pin': '!PD11', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'EBBCan:gpio24', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2660 stepper_y': {'cs_pin': 'PC9', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PD7', 'dir_pin': '!PD12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'PA2', 'position_endstop': 0.0, 'position_min': -4.0, 'position_max': 225.0, 'homing_speed': 35.0, 'second_homing_speed': 17.5, 'homing_retract_speed': 35.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2660 stepper_z': {'cs_pin': 'PC10', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PD8', 'dir_pin': '!PD13', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -2.5, 'position_max': 230.0, 'homing_speed': 35.0, 'second_homing_speed': 17.5, 'homing_retract_speed': 35.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'adc_temperature my_thermistor': {'resistance1': 1000.0, 'temperature1': 0.0, 'temperature2': 80.0, 'resistance2': 1309.0}, 'tmc2209 extruder': {'uart_pin': 'EBBCan:gpio20', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan:gpio27', 'min_temp': 0.0, 'max_temp': 250.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 21.527, 'pid_ki': 1.063, 'pid_kd': 108.982, 'heater_pin': 'EBBCan:gpio7', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': '!EBBCan:gpio18', 'pressure_advance': 0.0, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'EBBCan:gpio19', 'rotation_distance': 21.63024711, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!EBBCan:gpio17'}, 'filament_switch_sensor extruder': {'switch_pin': 'EBBCan:gpio21', 'pause_on_runout': True, 'runout_gcode': '', 'pause_delay': 0.5, 'event_delay': 3.0}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'thermistor chamber_temp': {'temperature1': 25.0, 'resistance1': 10000.0, 'beta': 3950.0}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PC13', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'watermark', 'max_delta': 2.0, 'heater_pin': '!PA19', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan extruder_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'EBBCan:gpio13', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.25, 'off_below': 0.0, 'cycle_time': 0.08, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'EBBCan:gpio14'}, 'probe': {'z_offset': -1.5, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': '^EBBCan:gpio22', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 3, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.015, 'samples_tolerance_retries': 3}, 'homing_override': {'set_position_z': 0.0, 'axes': 'z', 'gcode': '\nstatus_homing\nG90\nG0 Z5 F500\nG28 X0 Y0\nG0 X150 Y100 F9000\nG28 Z0\nG0 Z5 F500\nstatus_ready'}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [6, 6], 'mesh_min': [25.0, 35.0], 'mesh_max': [225.0, 220.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 150.0, 'fade_start': 1.0, 'fade_end': 10.0, 'fade_target': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[-0.2875, -0.1125, -0.0625, -0.025, 0.1375, -0.1375], [-0.225, -0.1125, -0.0875, 0.0375, 0.1375, 0.2875], [-0.2875, -0.2, -0.0875, -0.0, 0.1375, 0.3], [-0.3375, -0.2, -0.1375, -0.0125, 0.125, 0.275], [-0.3, -0.1625, -0.0625, 0.0375, 0.1875, 0.3375], [-0.2125, -0.075, 0.025, 0.125, 0.275, 0.45]], 'min_x': 25.0, 'max_x': 225.0, 'min_y': 35.0, 'max_y': 220.0, 'x_count': 6, 'y_count': 6, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'bicubic', 'tension': 0.2}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\nM117 Homing...\nG28 Y0 X0 Z0\n\n\n\n\n\n\n\n\n\n\n\n\nSTATUS_HEATING\nM107\nM117 Heating bed\nM190 S{ params.BED }\nM117 Heating nozzle\nM109 S{target_extruder}\nstatus_ready\nG1 Z15.0 F600\nG1 X125 Y125 F3000\nG92 E0\nG1 F9000\nstatus_printing\nM117 Printing...', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\nstatus_busy\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\n\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y} F3600\nM117 Finished!\nstatus_off', 'description': 'G-Code macro'}, 'force_move': {'enable_force_move': True}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'max_accel_to_decel': 1500.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexz', 'max_z_velocity': 5.0, 'max_z_accel': 100.0}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-03-22 03:27:12,154 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-03-22 03:27:12,158 [printer.py:reinit()] - Klipper version: v0.12.0-114-ga77d0790-dirty
2024-03-22 03:27:12,158 [printer.py:reinit()] - # Extruders: 1
2024-03-22 03:27:12,159 [printer.py:reinit()] - # Temperature devices: 2
2024-03-22 03:27:12,159 [printer.py:reinit()] - # Fans: 2
2024-03-22 03:27:12,159 [printer.py:reinit()] - # Output pins: 0
2024-03-22 03:27:12,160 [printer.py:reinit()] - # Leds: 20
2024-03-22 03:27:12,160 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-03-22 03:27:12,193 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-03-22 03:27:12,199 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor mcu&fan&heater_fan extruder_fan&filament_switch_sensor extruder&neopixel sb_leds
2024-03-22 03:27:12,479 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-03-22 03:27:12,479 [screen.py:init_klipper()] - Printer initialized
2024-03-22 03:27:12,480 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2024-03-22 03:27:12,480 [printer.py:change_state()] - Adding callback for state: ready
2024-03-22 03:27:12,851 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-03-22 03:27:12,862 [screen.py:_load_panel()] - Loading panel: main_menu
2024-03-22 03:27:13,097 [main_menu.py:__init__()] - ### Making MainMenu
2024-03-22 03:27:13,137 [main_menu.py:add_device()] - Adding device: extruder
2024-03-22 03:27:13,154 [main_menu.py:add_device()] - Adding device: heater_bed
2024-03-22 03:27:13,173 [main_menu.py:add_device()] - Adding device: temperature_sensor mcu
2024-03-22 03:27:13,286 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-03-22 03:27:13,289 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-03-22 03:27:13,359 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor mcu', 'heater_bed', 'extruder']
2024-03-22 03:27:13,362 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-03-22 03:27:13,389 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-03-22 04:28:41,831 [screen.py:show_screensaver()] - Showing Screensaver
2024-03-23 17:52:38,357 [functions.py:log_start()] - --------------------KlipperScreen Log Start--------------------
2024-03-23 17:52:38,358 [functions.py:log_start()] - KlipperScreen Version: v0.3.9-50-gdaed9a0
2024-03-23 17:52:38,358 [functions.py:log_start()] - Python version: 3.11
2024-03-23 17:52:38,620 [config.py:get_config_file_location()] - Passed config (-c): .
2024-03-23 17:52:38,621 [config.py:__init__()] - Config path location: /home/pi/printer_data/config/KlipperScreen.conf
2024-03-23 17:52:38,660 [config.py:log_config()] -  ===== Config File =====

=======================
2024-03-23 17:52:38,662 [config.py:__init__()] - ====== Saved Def ======

[main]
use_dpms = False
print_sort_dir = date_desc

=======================
2024-03-23 17:52:38,663 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2024-03-23 17:52:38,811 [config.py:create_translations()] - Selected lang: None OS lang: en_GB
2024-03-23 17:52:38,811 [config.py:install_language()] - Using lang en
2024-03-23 17:52:38,840 [screen.py:__init__()] - Monitors: 1 using number: 0
2024-03-23 17:52:38,841 [screen.py:__init__()] - Wayland: False Display name: :100
2024-03-23 17:52:38,844 [screen.py:__init__()] - Screen resolution: 984x540
2024-03-23 17:52:38,845 [KlippyGtk.py:__init__()] - Font size: 18.6 (medium)
2024-03-23 17:52:40,469 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2024-03-23 17:52:40,469 [screen.py:set_screenblanking_timeout()] - Not using DPMS
2024-03-23 17:52:40,479 [screen.py:initial_connection()] - Default printer: None
2024-03-23 17:52:40,546 [screen.py:connect_printer()] - Connecting to printer: Printer
2024-03-23 17:52:40,546 [screen.py:_load_panel()] - Loading panel: splash_screen
2024-03-23 17:52:40,644 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-03-23 17:52:40,662 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-03-23 17:52:40,662 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-03-23 17:52:40,688 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/access/oneshot_token
2024-03-23 17:52:40,700 [KlippyWebsocket.py:connect()] - Starting websocket thread
2024-03-23 17:52:40,710 [_logging.py:info()] - Websocket connected
2024-03-23 17:52:40,711 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2024-03-23 17:52:41,073 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-03-23 17:52:41,085 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-03-23 17:52:41,097 [printer.py:configure_cameras()] - Cameras: []
2024-03-23 17:52:41,097 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'ready', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'octoprint_compat', 'update_manager', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 3, 'moonraker_version': 'v0.8.0-318-g9813011', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-03-23 17:52:41,098 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-03-23 17:52:41,112 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-03-23 17:52:41,290 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set allow_park = client.park_at_cancel | default(false) | lower == \'true\' %}\n{% set retract = client.cancel_retract | default(5.0) | abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x | default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y | default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x | length > 0 or park_y | length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro | default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set idle_timeout = client.idle_timeout | default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE | default(1) | int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro | default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move | default(velocity) %}\n{% set runout_resume = True if client.runout_sensor | default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state | upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro | default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY | default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}"}, 'neopixel sb_leds': {'pin': 'EBBCan:gpio16', 'chain_count': '3', 'color_order': 'GRB', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0'}, 'led_effect sb_logo_busy': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (1,0,0)'}, 'led_effect sb_logo_cleaning': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.02, 0.5)'}, 'led_effect sb_logo_calibrating_z': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 0.35)'}, 'led_effect sb_logo_heating': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nbreathing  3 1 top (1, 0.18, 0)'}, 'led_effect sb_logo_cooling': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nbreathing  3 1 top (0, 0, 1)'}, 'led_effect sb_logo_homing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.6, 0.2)'}, 'led_effect sb_logo_leveling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.5, 0.1, 0.4)'}, 'led_effect sb_logo_meshing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.2, 1.0, 0.0)'}, 'led_effect sb_logo_printing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.3, 0.3, 0.0),(0.3, 0.1, 0.0)'}, 'led_effect sb_logo_standby': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.01, 0.01, 0.01)'}, 'led_effect sb_logo_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 1.0, 0.0)'}, 'led_effect sb_nozzle_heating': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (1.0, 0.18, 0.0, 0.0)'}, 'led_effect sb_nozzle_cooling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 1.0, 0.1)'}, 'led_effect sb_nozzle_standby': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.6, 0.0, 0.0, 0.0)'}, 'led_effect sb_nozzle_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.6, 1.0, 0.0, 0.1)'}, 'led_effect sb_critical_error': {'leds': '\nneopixel:sb_leds', 'layers': '\nstrobe         1  1.5   add        (1.0,  1.0, 1.0)\nbreathing      2  0     difference (0.95, 0.0, 0.0)\nstatic         1  0     top        (1.0,  0.0, 0.0)', 'autostart': 'false', 'frame_rate': '24', 'run_on_error': 'true'}, 'led_effect rainbow': {'leds': '\nneopixel:sb_leds', 'autostart': 'true', 'frame_rate': '24', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.0, 0.3, 0.0),(0.0, 0.0, 0.3)'}, 'led_effect set_nozzle_leds': {'leds': '\nneopixel:sb_leds (2,3)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nstatic         0  0     top        (0.5,  0.5, 0.5)'}, 'led_effect set_logo_leds': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nstatic         0  0     top        (1.0,  1.0, 1.0)'}, 'gcode_macro set_logo_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds STOP=1'}, 'gcode_macro set_logo_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1'}, 'gcode_macro status_off': {'gcode': '\nSTOP_LED_EFFECTS'}, 'gcode_macro status_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=rainbow'}, 'gcode_macro status_part_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready'}, 'gcode_macro status_busy': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_busy\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_heating\nSET_LED_EFFECT EFFECT=sb_nozzle_heating'}, 'gcode_macro status_cooling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cooling\nSET_LED_EFFECT EFFECT=sb_nozzle_cooling'}, 'gcode_macro status_leveling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_leveling\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_homing\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cleaning\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_meshing\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_calibrating_z\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_printing\nset_nozzle_leds_on'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_sam4e8e_00313753364B37373032303038303139-if00'}, 'mcu EBBCan': {'canbus_uuid': '8250861450f7'}, 'adxl345': {'cs_pin': 'EBBCan:gpio1', 'spi_software_sclk_pin': 'EBBCan:gpio2', 'spi_software_mosi_pin': 'EBBCan:gpio0', 'spi_software_miso_pin': 'EBBCan:gpio3', 'axes_map': 'z,-y,x'}, 'resonance_tester': {'probe_points': '100, 100, 20', 'accel_chip': 'adxl345'}, 'input_shaper': {'shaper_freq_x': '45', 'shaper_type': '3hump_ei'}, 'stepper_x': {'step_pin': 'PD6', 'dir_pin': '!PD11', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'EBBCan:gpio24', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '40'}, 'tmc2660 stepper_x': {'cs_pin': 'PD14', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'stepper_y': {'step_pin': 'PD7', 'dir_pin': '!PD12', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'PA2', 'position_endstop': '0', 'position_max': '225', 'position_min': '-4', 'homing_speed': '35', 'homing_retract_dist': '0'}, 'tmc2660 stepper_y': {'cs_pin': 'PC9', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'stepper_z': {'step_pin': 'PD8', 'dir_pin': '!PD13', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '230', 'position_min': '-2.5', 'homing_speed': '35.0'}, 'tmc2660 stepper_z': {'cs_pin': 'PC10', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'adc_temperature my_thermistor': {'temperature1': '0', 'resistance1': '1000', 'temperature2': '80', 'resistance2': '1309'}, 'extruder': {'step_pin': '!EBBCan:gpio18', 'dir_pin': 'EBBCan:gpio19', 'enable_pin': '!EBBCan:gpio17', 'microsteps': '32', 'rotation_distance': '21.63024711', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'gear_ratio': '50:10', 'heater_pin': 'EBBCan:gpio7', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'EBBCan:gpio27', 'control': 'pid', 'pid_kp': '21.527', 'pid_ki': '1.063', 'pid_kd': '108.982', 'min_temp': '0', 'max_temp': '250'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan:gpio20', 'run_current': '0.5', 'stealthchop_threshold': '999999'}, 'filament_switch_sensor extruder': {'pause_on_runout': 'True', 'switch_pin': 'EBBCan:gpio21'}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu'}, 'thermistor chamber_temp': {'temperature1': '25', 'resistance1': '10000', 'beta': '3950'}, 'heater_bed': {'heater_pin': '!PA19', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PC13', 'control': 'watermark', 'min_temp': '0', 'max_temp': '120'}, 'heater_fan extruder_fan': {'pin': 'EBBCan:gpio13', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'EBBCan:gpio14', 'cycle_time': '.08', 'kick_start_time': '.25'}, 'probe': {'pin': '^EBBCan:gpio22', 'x_offset': '0', 'y_offset': '0', 'samples': '3', 'samples_result': 'median', 'sample_retract_dist': '3', 'samples_tolerance': '0.015', 'samples_tolerance_retries': '3', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'z_offset': '-1.500'}, 'homing_override': {'axes': 'z', 'set_position_z': '0', 'gcode': '\nstatus_homing\nG90\nG0 Z5 F500\nG28 X0 Y0\nG0 X150 Y100 F9000\nG28 Z0\nG0 Z5 F500\nstatus_ready'}, 'bed_mesh': {'speed': '150', 'horizontal_move_z': '5', 'mesh_min': '25,35.0', 'mesh_max': '225.0,220', 'probe_count': '6,6', 'algorithm': 'bicubic', 'fade_start': '1', 'fade_end': '10', 'fade_target': '0'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\nM117 Homing...\nG28 Y0 X0 Z0\n\n\n\n\n\n\n\n\n\n\n\n\nSTATUS_HEATING\nM107\nM117 Heating bed\nM190 S{ params.BED }\nM117 Heating nozzle\nM109 S{target_extruder}\nstatus_ready\nG1 Z15.0 F600\nG1 X125 Y125 F3000\nG92 E0\nG1 F9000\nstatus_printing\nM117 Printing...'}, 'gcode_macro PRINT_END': {'gcode': '\nstatus_busy\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\n\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y} F3600\nM117 Finished!\nstatus_off'}, 'printer': {'kinematics': 'corexz', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '5', 'max_z_accel': '100'}, 'force_move': {'enable_force_move': 'true'}, 'exclude_object': {}, 'bed_mesh default': {'version': '1', 'points': '\n-0.287500, -0.112500, -0.062500, -0.025000, 0.137500, -0.137500\n-0.225000, -0.112500, -0.087500, 0.037500, 0.137500, 0.287500\n-0.287500, -0.200000, -0.087500, -0.000000, 0.137500, 0.300000\n-0.337500, -0.200000, -0.137500, -0.012500, 0.125000, 0.275000\n-0.300000, -0.162500, -0.062500, 0.037500, 0.187500, 0.337500\n-0.212500, -0.075000, 0.025000, 0.125000, 0.275000, 0.450000', 'x_count': '6', 'y_count': '6', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'bicubic', 'tension': '0.2', 'min_x': '25.0', 'max_x': '225.0', 'min_y': '35.0', 'max_y': '220.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_sam4e8e_00313753364B37373032303038303139-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu ebbcan': {'canbus_uuid': '8250861450f7', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set allow_park = client.park_at_cancel | default(false) | lower == \'true\' %}\n{% set retract = client.cancel_retract | default(5.0) | abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x | default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y | default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x | length > 0 or park_y | length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro | default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set idle_timeout = client.idle_timeout | default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE | default(1) | int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro | default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move | default(velocity) %}\n{% set runout_resume = True if client.runout_sensor | default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state | upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro | default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY | default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'neopixel sb_leds': {'pin': 'EBBCan:gpio16', 'chain_count': 3, 'color_order': ['GRB'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'led_effect sb_logo_busy': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1,0,0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_cleaning': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.02, 0.5)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_calibrating_z': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 0.35)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1, 0.18, 0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0, 0, 1)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_homing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.6, 0.2)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_leveling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.5, 0.1, 0.4)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_meshing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.2, 1.0, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_printing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.3, 0.3, 0.0),(0.3, 0.1, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_standby': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.01, 0.01, 0.01)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 1.0, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_nozzle_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1.0, 0.18, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 1.0, 0.1)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_standby': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.6, 0.0, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.6, 1.0, 0.0, 0.1)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_critical_error': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': True, 'endstops': '', 'layers': '\nstrobe         1  1.5   add        (1.0,  1.0, 1.0)\nbreathing      2  0     difference (0.95, 0.0, 0.0)\nstatic         1  0     top        (1.0,  0.0, 0.0)', 'leds': '\nneopixel:sb_leds'}, 'led_effect rainbow': {'frame_rate': 24.0, 'autostart': True, 'run_on_error': False, 'endstops': '', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.0, 0.3, 0.0),(0.0, 0.0, 0.3)', 'leds': '\nneopixel:sb_leds'}, 'led_effect set_nozzle_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic         0  0     top        (0.5,  0.5, 0.5)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect set_logo_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic         0  0     top        (1.0,  1.0, 1.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'gcode_macro set_logo_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nSTOP_LED_EFFECTS', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=rainbow', 'description': 'G-Code macro'}, 'gcode_macro status_part_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_busy\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_heating\nSET_LED_EFFECT EFFECT=sb_nozzle_heating', 'description': 'G-Code macro'}, 'gcode_macro status_cooling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cooling\nSET_LED_EFFECT EFFECT=sb_nozzle_cooling', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_leveling\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_homing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cleaning\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_meshing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_calibrating_z\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_printing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'adxl345': {'axes_map': ['z', '-y', 'x'], 'rate': 3200, 'cs_pin': 'EBBCan:gpio1', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'EBBCan:gpio2', 'spi_software_miso_pin': 'EBBCan:gpio3', 'spi_software_mosi_pin': 'EBBCan:gpio0'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[100.0, 100.0, 20.0]], 'accel_chip': 'adxl345'}, 'input_shaper': {'shaper_type': '3hump_ei', 'shaper_type_x': '3hump_ei', 'damping_ratio_x': 0.1, 'shaper_freq_x': 45.0, 'shaper_type_y': '3hump_ei', 'damping_ratio_y': 0.1, 'shaper_freq_y': 0.0}, 'tmc2660 stepper_x': {'cs_pin': 'PD14', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PD6', 'dir_pin': '!PD11', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'EBBCan:gpio24', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2660 stepper_y': {'cs_pin': 'PC9', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PD7', 'dir_pin': '!PD12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'PA2', 'position_endstop': 0.0, 'position_min': -4.0, 'position_max': 225.0, 'homing_speed': 35.0, 'second_homing_speed': 17.5, 'homing_retract_speed': 35.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2660 stepper_z': {'cs_pin': 'PC10', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PD8', 'dir_pin': '!PD13', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -2.5, 'position_max': 230.0, 'homing_speed': 35.0, 'second_homing_speed': 17.5, 'homing_retract_speed': 35.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'adc_temperature my_thermistor': {'resistance1': 1000.0, 'temperature1': 0.0, 'temperature2': 80.0, 'resistance2': 1309.0}, 'tmc2209 extruder': {'uart_pin': 'EBBCan:gpio20', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan:gpio27', 'min_temp': 0.0, 'max_temp': 250.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 21.527, 'pid_ki': 1.063, 'pid_kd': 108.982, 'heater_pin': 'EBBCan:gpio7', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': '!EBBCan:gpio18', 'pressure_advance': 0.0, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'EBBCan:gpio19', 'rotation_distance': 21.63024711, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!EBBCan:gpio17'}, 'filament_switch_sensor extruder': {'switch_pin': 'EBBCan:gpio21', 'pause_on_runout': True, 'runout_gcode': '', 'pause_delay': 0.5, 'event_delay': 3.0}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'thermistor chamber_temp': {'temperature1': 25.0, 'resistance1': 10000.0, 'beta': 3950.0}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PC13', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'watermark', 'max_delta': 2.0, 'heater_pin': '!PA19', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan extruder_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'EBBCan:gpio13', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.25, 'off_below': 0.0, 'cycle_time': 0.08, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'EBBCan:gpio14'}, 'probe': {'z_offset': -1.5, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': '^EBBCan:gpio22', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 3, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.015, 'samples_tolerance_retries': 3}, 'homing_override': {'set_position_z': 0.0, 'axes': 'z', 'gcode': '\nstatus_homing\nG90\nG0 Z5 F500\nG28 X0 Y0\nG0 X150 Y100 F9000\nG28 Z0\nG0 Z5 F500\nstatus_ready'}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [6, 6], 'mesh_min': [25.0, 35.0], 'mesh_max': [225.0, 220.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 150.0, 'fade_start': 1.0, 'fade_end': 10.0, 'fade_target': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[-0.2875, -0.1125, -0.0625, -0.025, 0.1375, -0.1375], [-0.225, -0.1125, -0.0875, 0.0375, 0.1375, 0.2875], [-0.2875, -0.2, -0.0875, -0.0, 0.1375, 0.3], [-0.3375, -0.2, -0.1375, -0.0125, 0.125, 0.275], [-0.3, -0.1625, -0.0625, 0.0375, 0.1875, 0.3375], [-0.2125, -0.075, 0.025, 0.125, 0.275, 0.45]], 'min_x': 25.0, 'max_x': 225.0, 'min_y': 35.0, 'max_y': 220.0, 'x_count': 6, 'y_count': 6, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'bicubic', 'tension': 0.2}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\nM117 Homing...\nG28 Y0 X0 Z0\n\n\n\n\n\n\n\n\n\n\n\n\nSTATUS_HEATING\nM107\nM117 Heating bed\nM190 S{ params.BED }\nM117 Heating nozzle\nM109 S{target_extruder}\nstatus_ready\nG1 Z15.0 F600\nG1 X125 Y125 F3000\nG92 E0\nG1 F9000\nstatus_printing\nM117 Printing...', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\nstatus_busy\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\n\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y} F3600\nM117 Finished!\nstatus_off', 'description': 'G-Code macro'}, 'force_move': {'enable_force_move': True}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'max_accel_to_decel': 1500.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexz', 'max_z_velocity': 5.0, 'max_z_accel': 100.0}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-03-23 17:52:41,293 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-03-23 17:52:41,294 [printer.py:reinit()] - Klipper version: v0.12.0-114-ga77d0790-dirty
2024-03-23 17:52:41,294 [printer.py:reinit()] - # Extruders: 1
2024-03-23 17:52:41,295 [printer.py:reinit()] - # Temperature devices: 2
2024-03-23 17:52:41,295 [printer.py:reinit()] - # Fans: 2
2024-03-23 17:52:41,295 [printer.py:reinit()] - # Output pins: 0
2024-03-23 17:52:41,295 [printer.py:reinit()] - # Leds: 20
2024-03-23 17:52:41,295 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-03-23 17:52:41,313 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-03-23 17:52:41,317 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor mcu&fan&heater_fan extruder_fan&filament_switch_sensor extruder&neopixel sb_leds
2024-03-23 17:52:41,595 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-03-23 17:52:41,595 [screen.py:init_klipper()] - Printer initialized
2024-03-23 17:52:41,595 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2024-03-23 17:52:41,596 [printer.py:change_state()] - Adding callback for state: ready
2024-03-23 17:52:41,726 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-03-23 17:52:41,730 [screen.py:_load_panel()] - Loading panel: main_menu
2024-03-23 17:52:41,869 [main_menu.py:__init__()] - ### Making MainMenu
2024-03-23 17:52:41,884 [main_menu.py:add_device()] - Adding device: extruder
2024-03-23 17:52:41,900 [main_menu.py:add_device()] - Adding device: heater_bed
2024-03-23 17:52:41,910 [main_menu.py:add_device()] - Adding device: temperature_sensor mcu
2024-03-23 17:52:41,961 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-03-23 17:52:41,962 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-03-23 17:52:41,990 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor mcu', 'heater_bed', 'extruder']
2024-03-23 17:52:41,992 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-03-23 17:52:42,004 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-03-23 17:53:52,093 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2024-03-23 17:53:52,093 [printer.py:change_state()] - Adding callback for state: printing
2024-03-23 17:53:52,107 [screen.py:_load_panel()] - Loading panel: job_status
2024-03-23 17:53:53,047 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-03-23 17:53:53,069 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-03-23 17:53:53,127 [job_status.py:update_file_metadata()] - Update Metadata. File: pa_pattern.gcode Size: 86249
2024-03-23 17:53:53,128 [job_status.py:show_file_thumbnail()] - pa_pattern.gcode
2024-03-23 17:53:53,129 [job_status.py:show_file_thumbnail()] - no pixbuf
2024-03-23 18:03:01,032 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2024-03-23 18:03:01,032 [printer.py:change_state()] - Adding callback for state: ready
2024-03-23 18:03:01,055 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'cancelled'
2024-03-23 18:06:58,332 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2024-03-23 18:06:58,333 [printer.py:change_state()] - Adding callback for state: printing
2024-03-23 18:06:58,354 [job_status.py:set_state()] - Changing job_status state from 'cancelled' to 'printing'
2024-03-23 18:06:58,371 [job_status.py:update_file_metadata()] - Update Metadata. File: pa_pattern(1).gcode Size: 86847
2024-03-23 18:06:58,373 [job_status.py:show_file_thumbnail()] - pa_pattern(1).gcode
2024-03-23 18:06:58,373 [job_status.py:show_file_thumbnail()] - no pixbuf
2024-03-23 18:06:58,475 [screen.py:show_panel()] - Reinitializing panel
2024-03-23 18:06:58,660 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-03-23 18:06:58,671 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-03-23 18:06:58,692 [job_status.py:update_file_metadata()] - Update Metadata. File: pa_pattern(1).gcode Size: 86847
2024-03-23 18:06:58,693 [job_status.py:show_file_thumbnail()] - pa_pattern(1).gcode
2024-03-23 18:06:58,693 [job_status.py:show_file_thumbnail()] - no pixbuf
2024-03-23 18:25:56,513 [screen.py:_load_panel()] - Loading panel: fine_tune
2024-03-23 18:25:56,699 [screen.py:attach_panel()] - Current panel hierarchy: job_status > fine_tune
2024-03-23 18:26:11,502 [screen.py:_menu_go_back()] - #### Menu go back
2024-03-23 18:26:11,818 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-03-23 18:26:11,848 [job_status.py:update_file_metadata()] - Update Metadata. File: pa_pattern(1).gcode Size: 86847
2024-03-23 18:26:11,849 [job_status.py:show_file_thumbnail()] - pa_pattern(1).gcode
2024-03-23 18:26:11,849 [job_status.py:show_file_thumbnail()] - no pixbuf
2024-03-23 18:31:48,994 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2024-03-23 18:31:48,995 [printer.py:change_state()] - Adding callback for state: ready
2024-03-23 18:31:49,017 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'complete'
2024-03-23 18:33:53,328 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2024-03-23 18:33:53,329 [printer.py:change_state()] - Adding callback for state: printing
2024-03-23 18:33:53,355 [job_status.py:set_state()] - Changing job_status state from 'complete' to 'printing'
2024-03-23 18:33:53,375 [job_status.py:update_file_metadata()] - Update Metadata. File: pa_pattern(2).gcode Size: 86292
2024-03-23 18:33:53,376 [job_status.py:show_file_thumbnail()] - pa_pattern(2).gcode
2024-03-23 18:33:53,377 [job_status.py:show_file_thumbnail()] - no pixbuf
2024-03-23 18:33:53,472 [screen.py:show_panel()] - Reinitializing panel
2024-03-23 18:33:53,864 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-03-23 18:33:53,886 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-03-23 18:33:53,930 [job_status.py:update_file_metadata()] - Update Metadata. File: pa_pattern(2).gcode Size: 86292
2024-03-23 18:33:53,930 [job_status.py:show_file_thumbnail()] - pa_pattern(2).gcode
2024-03-23 18:33:53,931 [job_status.py:show_file_thumbnail()] - no pixbuf
2024-03-23 18:55:45,889 [KlippyGtk.py:Dialog()] - Showing dialog Cancel (width=984, height=540)
2024-03-23 18:55:48,553 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2024-03-23 18:55:48,553 [job_status.py:cancel_confirm()] - Canceling print
2024-03-23 18:55:48,554 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'cancelling'
2024-03-23 18:55:48,560 [KlippyWebsocket.py:print_cancel()] - Sending printer.print.cancel
2024-03-23 18:55:49,183 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2024-03-23 18:55:49,183 [printer.py:change_state()] - Adding callback for state: ready
2024-03-23 18:55:49,194 [job_status.py:set_state()] - Changing job_status state from 'cancelling' to 'cancelled'
2024-03-23 18:55:55,562 [job_status.py:close_panel()] - Closing job_status panel
2024-03-23 18:55:55,562 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-03-23 18:55:55,572 [screen.py:show_panel()] - Reinitializing panel
2024-03-23 18:55:55,727 [main_menu.py:__init__()] - ### Making MainMenu
2024-03-23 18:55:55,743 [main_menu.py:add_device()] - Adding device: extruder
2024-03-23 18:55:55,752 [main_menu.py:add_device()] - Adding device: heater_bed
2024-03-23 18:55:55,761 [main_menu.py:add_device()] - Adding device: temperature_sensor mcu
2024-03-23 18:55:55,819 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-03-23 18:55:58,820 [screen.py:_load_panel()] - Loading panel: move
2024-03-23 18:55:58,958 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2024-03-23 18:56:06,088 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Z+25 F600'}
2024-03-23 18:56:06,360 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-03-23 18:56:09,088 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Z+25 F600'}
2024-03-23 18:56:09,318 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-03-23 18:56:11,734 [screen.py:_menu_go_back()] - #### Menu go back
2024-03-23 18:56:12,051 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-03-23 19:08:01,380 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2024-03-23 19:08:01,381 [printer.py:change_state()] - Adding callback for state: printing
2024-03-23 19:08:01,434 [screen.py:show_panel()] - Reinitializing panel
2024-03-23 19:08:01,659 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-03-23 19:08:01,669 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-03-23 19:08:01,688 [job_status.py:update_file_metadata()] - Update Metadata. File: pa_pattern(3).gcode Size: 83615
2024-03-23 19:08:01,688 [job_status.py:show_file_thumbnail()] - pa_pattern(3).gcode
2024-03-23 19:08:01,688 [job_status.py:show_file_thumbnail()] - no pixbuf
2024-03-23 19:26:05,655 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2024-03-23 19:26:05,655 [printer.py:change_state()] - Adding callback for state: ready
2024-03-23 19:26:05,685 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'complete'
2024-03-23 19:35:58,012 [printer.py:get_probe()] - Probe type: probe
2024-03-23 19:35:58,452 [KlippyGtk.py:Dialog()] - Showing dialog Save Z (width=984, height=540)
2024-03-23 19:36:06,683 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2024-03-23 19:36:06,683 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: Z_OFFSET_APPLY_PROBE
2024-03-23 19:36:06,685 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: SAVE_CONFIG
2024-03-23 19:36:06,836 [KlippyGtk.py:Dialog()] - Showing dialog KlipperScreen (width=984, height=540)
2024-03-23 19:36:07,873 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2024-03-23 19:36:07,874 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SAVE_CONFIG'}
2024-03-23 19:36:07,878 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-03-23 19:36:07,879 [printer.py:change_state()] - Adding callback for state: disconnected
2024-03-23 19:36:07,882 [screen.py:state_disconnected()] - ### Going to disconnected
2024-03-23 19:36:07,883 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-03-23 19:36:07,890 [screen.py:show_panel()] - Reinitializing panel
2024-03-23 19:36:08,080 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-03-23 19:36:11,356 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-03-23 19:36:11,369 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-03-23 19:36:11,380 [printer.py:configure_cameras()] - Cameras: []
2024-03-23 19:36:11,380 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'octoprint_compat', 'update_manager', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 3, 'moonraker_version': 'v0.8.0-318-g9813011', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-03-23 19:36:11,380 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-03-23 19:36:11,393 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-03-23 19:36:11,417 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set allow_park = client.park_at_cancel | default(false) | lower == \'true\' %}\n{% set retract = client.cancel_retract | default(5.0) | abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x | default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y | default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x | length > 0 or park_y | length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro | default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set idle_timeout = client.idle_timeout | default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE | default(1) | int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro | default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move | default(velocity) %}\n{% set runout_resume = True if client.runout_sensor | default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state | upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro | default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY | default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}"}, 'neopixel sb_leds': {'pin': 'EBBCan:gpio16', 'chain_count': '3', 'color_order': 'GRB', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0'}, 'led_effect sb_logo_busy': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (1,0,0)'}, 'led_effect sb_logo_cleaning': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.02, 0.5)'}, 'led_effect sb_logo_calibrating_z': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 0.35)'}, 'led_effect sb_logo_heating': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nbreathing  3 1 top (1, 0.18, 0)'}, 'led_effect sb_logo_cooling': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nbreathing  3 1 top (0, 0, 1)'}, 'led_effect sb_logo_homing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.6, 0.2)'}, 'led_effect sb_logo_leveling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.5, 0.1, 0.4)'}, 'led_effect sb_logo_meshing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.2, 1.0, 0.0)'}, 'led_effect sb_logo_printing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.3, 0.3, 0.0),(0.3, 0.1, 0.0)'}, 'led_effect sb_logo_standby': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.01, 0.01, 0.01)'}, 'led_effect sb_logo_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 1.0, 0.0)'}, 'led_effect sb_nozzle_heating': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (1.0, 0.18, 0.0, 0.0)'}, 'led_effect sb_nozzle_cooling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 1.0, 0.1)'}, 'led_effect sb_nozzle_standby': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.6, 0.0, 0.0, 0.0)'}, 'led_effect sb_nozzle_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.6, 1.0, 0.0, 0.1)'}, 'led_effect sb_critical_error': {'leds': '\nneopixel:sb_leds', 'layers': '\nstrobe         1  1.5   add        (1.0,  1.0, 1.0)\nbreathing      2  0     difference (0.95, 0.0, 0.0)\nstatic         1  0     top        (1.0,  0.0, 0.0)', 'autostart': 'false', 'frame_rate': '24', 'run_on_error': 'true'}, 'led_effect rainbow': {'leds': '\nneopixel:sb_leds', 'autostart': 'true', 'frame_rate': '24', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.0, 0.3, 0.0),(0.0, 0.0, 0.3)'}, 'led_effect set_nozzle_leds': {'leds': '\nneopixel:sb_leds (2,3)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nstatic         0  0     top        (0.5,  0.5, 0.5)'}, 'led_effect set_logo_leds': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nstatic         0  0     top        (1.0,  1.0, 1.0)'}, 'gcode_macro set_logo_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds STOP=1'}, 'gcode_macro set_logo_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1'}, 'gcode_macro status_off': {'gcode': '\nSTOP_LED_EFFECTS'}, 'gcode_macro status_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=rainbow'}, 'gcode_macro status_part_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready'}, 'gcode_macro status_busy': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_busy\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_heating\nSET_LED_EFFECT EFFECT=sb_nozzle_heating'}, 'gcode_macro status_cooling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cooling\nSET_LED_EFFECT EFFECT=sb_nozzle_cooling'}, 'gcode_macro status_leveling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_leveling\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_homing\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cleaning\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_meshing\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_calibrating_z\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_printing\nset_nozzle_leds_on'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_sam4e8e_00313753364B37373032303038303139-if00'}, 'mcu EBBCan': {'canbus_uuid': '8250861450f7'}, 'adxl345': {'cs_pin': 'EBBCan:gpio1', 'spi_software_sclk_pin': 'EBBCan:gpio2', 'spi_software_mosi_pin': 'EBBCan:gpio0', 'spi_software_miso_pin': 'EBBCan:gpio3', 'axes_map': 'z,-y,x'}, 'resonance_tester': {'probe_points': '100, 100, 20', 'accel_chip': 'adxl345'}, 'input_shaper': {'shaper_freq_x': '45', 'shaper_type': '3hump_ei'}, 'stepper_x': {'step_pin': 'PD6', 'dir_pin': '!PD11', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'EBBCan:gpio24', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '40'}, 'tmc2660 stepper_x': {'cs_pin': 'PD14', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'stepper_y': {'step_pin': 'PD7', 'dir_pin': '!PD12', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'PA2', 'position_endstop': '0', 'position_max': '225', 'position_min': '-4', 'homing_speed': '35', 'homing_retract_dist': '0'}, 'tmc2660 stepper_y': {'cs_pin': 'PC9', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'stepper_z': {'step_pin': 'PD8', 'dir_pin': '!PD13', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '230', 'position_min': '-2.5', 'homing_speed': '35.0'}, 'tmc2660 stepper_z': {'cs_pin': 'PC10', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'adc_temperature my_thermistor': {'temperature1': '0', 'resistance1': '1000', 'temperature2': '80', 'resistance2': '1309'}, 'extruder': {'step_pin': '!EBBCan:gpio18', 'dir_pin': 'EBBCan:gpio19', 'enable_pin': '!EBBCan:gpio17', 'microsteps': '32', 'rotation_distance': '21.63024711', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'pressure_advance': '0.065', 'pressure_advance_smooth_time': '0.04', 'gear_ratio': '50:10', 'heater_pin': 'EBBCan:gpio7', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'EBBCan:gpio27', 'control': 'pid', 'pid_kp': '21.527', 'pid_ki': '1.063', 'pid_kd': '108.982', 'min_temp': '0', 'max_temp': '250'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan:gpio20', 'run_current': '0.5', 'stealthchop_threshold': '999999'}, 'filament_switch_sensor extruder': {'pause_on_runout': 'True', 'switch_pin': 'EBBCan:gpio21'}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu'}, 'thermistor chamber_temp': {'temperature1': '25', 'resistance1': '10000', 'beta': '3950'}, 'heater_bed': {'heater_pin': '!PA19', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PC13', 'control': 'watermark', 'min_temp': '0', 'max_temp': '120'}, 'heater_fan extruder_fan': {'pin': 'EBBCan:gpio13', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'EBBCan:gpio14', 'cycle_time': '.08', 'kick_start_time': '.25'}, 'probe': {'pin': '^EBBCan:gpio22', 'x_offset': '0', 'y_offset': '0', 'samples': '3', 'samples_result': 'median', 'sample_retract_dist': '3', 'samples_tolerance': '0.015', 'samples_tolerance_retries': '3', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'z_offset': '-1.350'}, 'homing_override': {'axes': 'z', 'set_position_z': '0', 'gcode': '\nstatus_homing\nG90\nG0 Z5 F500\nG28 X0 Y0\nG0 X150 Y100 F9000\nG28 Z0\nG0 Z5 F500\nstatus_ready'}, 'bed_mesh': {'speed': '150', 'horizontal_move_z': '5', 'mesh_min': '25,35.0', 'mesh_max': '225.0,220', 'probe_count': '6,6', 'algorithm': 'bicubic', 'fade_start': '1', 'fade_end': '10', 'fade_target': '0'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\nM117 Homing...\nG28 Y0 X0 Z0\n\n\n\n\n\n\n\n\n\n\n\n\nSTATUS_HEATING\nM107\nM117 Heating bed\nM190 S{ params.BED }\nM117 Heating nozzle\nM109 S{target_extruder}\nstatus_ready\nG1 Z15.0 F600\nG1 X125 Y125 F3000\nG92 E0\nG1 F9000\nstatus_printing\nM117 Printing...'}, 'gcode_macro PRINT_END': {'gcode': '\nstatus_busy\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\n\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y} F3600\nM117 Finished!\nstatus_off'}, 'printer': {'kinematics': 'corexz', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '5', 'max_z_accel': '100'}, 'force_move': {'enable_force_move': 'true'}, 'exclude_object': {}, 'bed_mesh default': {'version': '1', 'points': '\n-0.287500, -0.112500, -0.062500, -0.025000, 0.137500, -0.137500\n-0.225000, -0.112500, -0.087500, 0.037500, 0.137500, 0.287500\n-0.287500, -0.200000, -0.087500, -0.000000, 0.137500, 0.300000\n-0.337500, -0.200000, -0.137500, -0.012500, 0.125000, 0.275000\n-0.300000, -0.162500, -0.062500, 0.037500, 0.187500, 0.337500\n-0.212500, -0.075000, 0.025000, 0.125000, 0.275000, 0.450000', 'x_count': '6', 'y_count': '6', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'bicubic', 'tension': '0.2', 'min_x': '25.0', 'max_x': '225.0', 'min_y': '35.0', 'max_y': '220.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_sam4e8e_00313753364B37373032303038303139-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu ebbcan': {'canbus_uuid': '8250861450f7', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set allow_park = client.park_at_cancel | default(false) | lower == \'true\' %}\n{% set retract = client.cancel_retract | default(5.0) | abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x | default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y | default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x | length > 0 or park_y | length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro | default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set idle_timeout = client.idle_timeout | default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE | default(1) | int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro | default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move | default(velocity) %}\n{% set runout_resume = True if client.runout_sensor | default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state | upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro | default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY | default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'neopixel sb_leds': {'pin': 'EBBCan:gpio16', 'chain_count': 3, 'color_order': ['GRB'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'led_effect sb_logo_busy': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1,0,0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_cleaning': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.02, 0.5)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_calibrating_z': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 0.35)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1, 0.18, 0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0, 0, 1)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_homing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.6, 0.2)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_leveling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.5, 0.1, 0.4)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_meshing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.2, 1.0, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_printing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.3, 0.3, 0.0),(0.3, 0.1, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_standby': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.01, 0.01, 0.01)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 1.0, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_nozzle_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1.0, 0.18, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 1.0, 0.1)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_standby': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.6, 0.0, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.6, 1.0, 0.0, 0.1)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_critical_error': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': True, 'endstops': '', 'layers': '\nstrobe         1  1.5   add        (1.0,  1.0, 1.0)\nbreathing      2  0     difference (0.95, 0.0, 0.0)\nstatic         1  0     top        (1.0,  0.0, 0.0)', 'leds': '\nneopixel:sb_leds'}, 'led_effect rainbow': {'frame_rate': 24.0, 'autostart': True, 'run_on_error': False, 'endstops': '', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.0, 0.3, 0.0),(0.0, 0.0, 0.3)', 'leds': '\nneopixel:sb_leds'}, 'led_effect set_nozzle_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic         0  0     top        (0.5,  0.5, 0.5)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect set_logo_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic         0  0     top        (1.0,  1.0, 1.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'gcode_macro set_logo_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nSTOP_LED_EFFECTS', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=rainbow', 'description': 'G-Code macro'}, 'gcode_macro status_part_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_busy\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_heating\nSET_LED_EFFECT EFFECT=sb_nozzle_heating', 'description': 'G-Code macro'}, 'gcode_macro status_cooling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cooling\nSET_LED_EFFECT EFFECT=sb_nozzle_cooling', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_leveling\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_homing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cleaning\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_meshing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_calibrating_z\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_printing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'adxl345': {'axes_map': ['z', '-y', 'x'], 'rate': 3200, 'cs_pin': 'EBBCan:gpio1', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'EBBCan:gpio2', 'spi_software_miso_pin': 'EBBCan:gpio3', 'spi_software_mosi_pin': 'EBBCan:gpio0'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[100.0, 100.0, 20.0]], 'accel_chip': 'adxl345'}, 'input_shaper': {'shaper_type': '3hump_ei', 'shaper_type_x': '3hump_ei', 'damping_ratio_x': 0.1, 'shaper_freq_x': 45.0, 'shaper_type_y': '3hump_ei', 'damping_ratio_y': 0.1, 'shaper_freq_y': 0.0}, 'tmc2660 stepper_x': {'cs_pin': 'PD14', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PD6', 'dir_pin': '!PD11', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'EBBCan:gpio24', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2660 stepper_y': {'cs_pin': 'PC9', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PD7', 'dir_pin': '!PD12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'PA2', 'position_endstop': 0.0, 'position_min': -4.0, 'position_max': 225.0, 'homing_speed': 35.0, 'second_homing_speed': 17.5, 'homing_retract_speed': 35.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2660 stepper_z': {'cs_pin': 'PC10', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PD8', 'dir_pin': '!PD13', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -2.5, 'position_max': 230.0, 'homing_speed': 35.0, 'second_homing_speed': 17.5, 'homing_retract_speed': 35.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'adc_temperature my_thermistor': {'resistance1': 1000.0, 'temperature1': 0.0, 'temperature2': 80.0, 'resistance2': 1309.0}, 'tmc2209 extruder': {'uart_pin': 'EBBCan:gpio20', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan:gpio27', 'min_temp': 0.0, 'max_temp': 250.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 21.527, 'pid_ki': 1.063, 'pid_kd': 108.982, 'heater_pin': 'EBBCan:gpio7', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': '!EBBCan:gpio18', 'pressure_advance': 0.065, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'EBBCan:gpio19', 'rotation_distance': 21.63024711, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!EBBCan:gpio17'}, 'filament_switch_sensor extruder': {'switch_pin': 'EBBCan:gpio21', 'pause_on_runout': True, 'runout_gcode': '', 'pause_delay': 0.5, 'event_delay': 3.0}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'thermistor chamber_temp': {'temperature1': 25.0, 'resistance1': 10000.0, 'beta': 3950.0}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PC13', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'watermark', 'max_delta': 2.0, 'heater_pin': '!PA19', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan extruder_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'EBBCan:gpio13', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.25, 'off_below': 0.0, 'cycle_time': 0.08, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'EBBCan:gpio14'}, 'probe': {'z_offset': -1.35, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': '^EBBCan:gpio22', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 3, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.015, 'samples_tolerance_retries': 3}, 'homing_override': {'set_position_z': 0.0, 'axes': 'z', 'gcode': '\nstatus_homing\nG90\nG0 Z5 F500\nG28 X0 Y0\nG0 X150 Y100 F9000\nG28 Z0\nG0 Z5 F500\nstatus_ready'}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [6, 6], 'mesh_min': [25.0, 35.0], 'mesh_max': [225.0, 220.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 150.0, 'fade_start': 1.0, 'fade_end': 10.0, 'fade_target': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[-0.2875, -0.1125, -0.0625, -0.025, 0.1375, -0.1375], [-0.225, -0.1125, -0.0875, 0.0375, 0.1375, 0.2875], [-0.2875, -0.2, -0.0875, -0.0, 0.1375, 0.3], [-0.3375, -0.2, -0.1375, -0.0125, 0.125, 0.275], [-0.3, -0.1625, -0.0625, 0.0375, 0.1875, 0.3375], [-0.2125, -0.075, 0.025, 0.125, 0.275, 0.45]], 'min_x': 25.0, 'max_x': 225.0, 'min_y': 35.0, 'max_y': 220.0, 'x_count': 6, 'y_count': 6, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'bicubic', 'tension': 0.2}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\nM117 Homing...\nG28 Y0 X0 Z0\n\n\n\n\n\n\n\n\n\n\n\n\nSTATUS_HEATING\nM107\nM117 Heating bed\nM190 S{ params.BED }\nM117 Heating nozzle\nM109 S{target_extruder}\nstatus_ready\nG1 Z15.0 F600\nG1 X125 Y125 F3000\nG92 E0\nG1 F9000\nstatus_printing\nM117 Printing...', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\nstatus_busy\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\n\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y} F3600\nM117 Finished!\nstatus_off', 'description': 'G-Code macro'}, 'force_move': {'enable_force_move': True}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'max_accel_to_decel': 1500.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexz', 'max_z_velocity': 5.0, 'max_z_accel': 100.0}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-03-23 19:36:11,422 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-03-23 19:36:11,423 [printer.py:reinit()] - Klipper version: v0.12.0-114-ga77d0790-dirty
2024-03-23 19:36:11,423 [printer.py:reinit()] - # Extruders: 1
2024-03-23 19:36:11,424 [printer.py:reinit()] - # Temperature devices: 2
2024-03-23 19:36:11,424 [printer.py:reinit()] - # Fans: 2
2024-03-23 19:36:11,424 [printer.py:reinit()] - # Output pins: 0
2024-03-23 19:36:11,424 [printer.py:reinit()] - # Leds: 20
2024-03-23 19:36:11,424 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-03-23 19:36:11,440 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-03-23 19:36:11,442 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor mcu&fan&heater_fan extruder_fan&filament_switch_sensor extruder&neopixel sb_leds
2024-03-23 19:36:11,702 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-03-23 19:36:11,702 [screen.py:init_klipper()] - Printer initialized
2024-03-23 19:36:11,702 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-03-23 19:36:11,703 [printer.py:change_state()] - Adding callback for state: startup
2024-03-23 19:36:11,915 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-03-23 19:36:11,916 [printer.py:change_state()] - Adding callback for state: ready
2024-03-23 19:36:11,918 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-03-23 19:36:11,925 [screen.py:show_panel()] - Reinitializing panel
2024-03-23 19:36:12,052 [main_menu.py:__init__()] - ### Making MainMenu
2024-03-23 19:36:12,067 [main_menu.py:add_device()] - Adding device: extruder
2024-03-23 19:36:12,075 [main_menu.py:add_device()] - Adding device: heater_bed
2024-03-23 19:36:12,085 [main_menu.py:add_device()] - Adding device: temperature_sensor mcu
2024-03-23 19:36:12,136 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-03-23 19:36:12,137 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-03-23 19:36:12,175 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor mcu', 'heater_bed', 'extruder']
2024-03-23 19:36:12,176 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-03-23 19:36:12,188 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-03-23 20:36:08,355 [screen.py:show_screensaver()] - Showing Screensaver
2024-03-24 04:19:05,336 [screen.py:close_screensaver()] - Closing Screensaver
2024-03-24 15:21:46,623 [functions.py:log_start()] - --------------------KlipperScreen Log Start--------------------
2024-03-24 15:21:46,624 [functions.py:log_start()] - KlipperScreen Version: v0.3.9-50-gdaed9a0
2024-03-24 15:21:46,624 [functions.py:log_start()] - Python version: 3.11
2024-03-24 15:21:46,884 [config.py:get_config_file_location()] - Passed config (-c): .
2024-03-24 15:21:46,884 [config.py:__init__()] - Config path location: /home/pi/printer_data/config/KlipperScreen.conf
2024-03-24 15:21:46,922 [config.py:log_config()] -  ===== Config File =====

=======================
2024-03-24 15:21:46,925 [config.py:__init__()] - ====== Saved Def ======

[main]
use_dpms = False
print_sort_dir = date_desc

=======================
2024-03-24 15:21:46,926 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2024-03-24 15:21:47,074 [config.py:create_translations()] - Selected lang: None OS lang: en_GB
2024-03-24 15:21:47,075 [config.py:install_language()] - Using lang en
2024-03-24 15:21:47,104 [screen.py:__init__()] - Monitors: 1 using number: 0
2024-03-24 15:21:47,106 [screen.py:__init__()] - Wayland: False Display name: :100
2024-03-24 15:21:47,109 [screen.py:__init__()] - Screen resolution: 984x540
2024-03-24 15:21:47,111 [KlippyGtk.py:__init__()] - Font size: 18.6 (medium)
2024-03-24 15:21:51,020 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2024-03-24 15:21:51,021 [screen.py:set_screenblanking_timeout()] - Not using DPMS
2024-03-24 15:21:51,036 [screen.py:initial_connection()] - Default printer: None
2024-03-24 15:21:51,129 [screen.py:connect_printer()] - Connecting to printer: Printer
2024-03-24 15:21:51,130 [screen.py:_load_panel()] - Loading panel: splash_screen
2024-03-24 15:21:51,228 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-03-24 15:21:51,247 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-03-24 15:21:51,247 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-03-24 15:21:51,274 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/access/oneshot_token
2024-03-24 15:21:51,288 [KlippyWebsocket.py:connect()] - Starting websocket thread
2024-03-24 15:21:51,300 [_logging.py:info()] - Websocket connected
2024-03-24 15:21:51,300 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2024-03-24 15:21:51,439 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-03-24 15:21:51,452 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-03-24 15:21:51,464 [printer.py:configure_cameras()] - Cameras: []
2024-03-24 15:21:51,464 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'ready', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'octoprint_compat', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-318-g9813011', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-03-24 15:21:51,464 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-03-24 15:21:51,477 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-03-24 15:21:51,576 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set allow_park = client.park_at_cancel | default(false) | lower == \'true\' %}\n{% set retract = client.cancel_retract | default(5.0) | abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x | default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y | default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x | length > 0 or park_y | length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro | default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set idle_timeout = client.idle_timeout | default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE | default(1) | int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro | default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move | default(velocity) %}\n{% set runout_resume = True if client.runout_sensor | default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state | upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro | default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY | default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}"}, 'neopixel sb_leds': {'pin': 'EBBCan:gpio16', 'chain_count': '3', 'color_order': 'GRB', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0'}, 'led_effect sb_logo_busy': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (1,0,0)'}, 'led_effect sb_logo_cleaning': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.02, 0.5)'}, 'led_effect sb_logo_calibrating_z': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 0.35)'}, 'led_effect sb_logo_heating': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nbreathing  3 1 top (1, 0.18, 0)'}, 'led_effect sb_logo_cooling': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nbreathing  3 1 top (0, 0, 1)'}, 'led_effect sb_logo_homing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.6, 0.2)'}, 'led_effect sb_logo_leveling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.5, 0.1, 0.4)'}, 'led_effect sb_logo_meshing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.2, 1.0, 0.0)'}, 'led_effect sb_logo_printing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.3, 0.3, 0.0),(0.3, 0.1, 0.0)'}, 'led_effect sb_logo_standby': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.01, 0.01, 0.01)'}, 'led_effect sb_logo_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 1.0, 0.0)'}, 'led_effect sb_nozzle_heating': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (1.0, 0.18, 0.0, 0.0)'}, 'led_effect sb_nozzle_cooling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 1.0, 0.1)'}, 'led_effect sb_nozzle_standby': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.6, 0.0, 0.0, 0.0)'}, 'led_effect sb_nozzle_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.6, 1.0, 0.0, 0.1)'}, 'led_effect sb_critical_error': {'leds': '\nneopixel:sb_leds', 'layers': '\nstrobe         1  1.5   add        (1.0,  1.0, 1.0)\nbreathing      2  0     difference (0.95, 0.0, 0.0)\nstatic         1  0     top        (1.0,  0.0, 0.0)', 'autostart': 'false', 'frame_rate': '24', 'run_on_error': 'true'}, 'led_effect rainbow': {'leds': '\nneopixel:sb_leds', 'autostart': 'true', 'frame_rate': '24', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.0, 0.3, 0.0),(0.0, 0.0, 0.3)'}, 'led_effect set_nozzle_leds': {'leds': '\nneopixel:sb_leds (2,3)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nstatic         0  0     top        (0.5,  0.5, 0.5)'}, 'led_effect set_logo_leds': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nstatic         0  0     top        (1.0,  1.0, 1.0)'}, 'gcode_macro set_logo_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds STOP=1'}, 'gcode_macro set_logo_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1'}, 'gcode_macro status_off': {'gcode': '\nSTOP_LED_EFFECTS'}, 'gcode_macro status_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=rainbow'}, 'gcode_macro status_part_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready'}, 'gcode_macro status_busy': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_busy\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_heating\nSET_LED_EFFECT EFFECT=sb_nozzle_heating'}, 'gcode_macro status_cooling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cooling\nSET_LED_EFFECT EFFECT=sb_nozzle_cooling'}, 'gcode_macro status_leveling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_leveling\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_homing\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cleaning\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_meshing\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_calibrating_z\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_printing\nset_nozzle_leds_on'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_sam4e8e_00313753364B37373032303038303139-if00'}, 'mcu EBBCan': {'canbus_uuid': '8250861450f7'}, 'adxl345': {'cs_pin': 'EBBCan:gpio1', 'spi_software_sclk_pin': 'EBBCan:gpio2', 'spi_software_mosi_pin': 'EBBCan:gpio0', 'spi_software_miso_pin': 'EBBCan:gpio3', 'axes_map': 'z,-y,x'}, 'resonance_tester': {'probe_points': '100, 100, 20', 'accel_chip': 'adxl345'}, 'input_shaper': {'shaper_freq_x': '45', 'shaper_type': '3hump_ei'}, 'stepper_x': {'step_pin': 'PD6', 'dir_pin': '!PD11', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'EBBCan:gpio24', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '40'}, 'tmc2660 stepper_x': {'cs_pin': 'PD14', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'stepper_y': {'step_pin': 'PD7', 'dir_pin': '!PD12', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'PA2', 'position_endstop': '0', 'position_max': '225', 'position_min': '-4', 'homing_speed': '35', 'homing_retract_dist': '0'}, 'tmc2660 stepper_y': {'cs_pin': 'PC9', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'stepper_z': {'step_pin': 'PD8', 'dir_pin': '!PD13', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '230', 'position_min': '-2.5', 'homing_speed': '35.0'}, 'tmc2660 stepper_z': {'cs_pin': 'PC10', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'adc_temperature my_thermistor': {'temperature1': '0', 'resistance1': '1000', 'temperature2': '80', 'resistance2': '1309'}, 'extruder': {'step_pin': '!EBBCan:gpio18', 'dir_pin': 'EBBCan:gpio19', 'enable_pin': '!EBBCan:gpio17', 'microsteps': '32', 'rotation_distance': '21.63024711', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'pressure_advance': '0.065', 'pressure_advance_smooth_time': '0.04', 'gear_ratio': '50:10', 'heater_pin': 'EBBCan:gpio7', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'EBBCan:gpio27', 'control': 'pid', 'pid_kp': '21.527', 'pid_ki': '1.063', 'pid_kd': '108.982', 'min_temp': '0', 'max_temp': '250'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan:gpio20', 'run_current': '0.5', 'stealthchop_threshold': '999999'}, 'filament_switch_sensor extruder': {'pause_on_runout': 'True', 'switch_pin': 'EBBCan:gpio21'}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu'}, 'thermistor chamber_temp': {'temperature1': '25', 'resistance1': '10000', 'beta': '3950'}, 'heater_bed': {'heater_pin': '!PA19', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PC13', 'control': 'watermark', 'min_temp': '0', 'max_temp': '120'}, 'heater_fan extruder_fan': {'pin': 'EBBCan:gpio13', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'EBBCan:gpio14', 'cycle_time': '.08', 'kick_start_time': '.25'}, 'probe': {'pin': '^EBBCan:gpio22', 'x_offset': '0', 'y_offset': '0', 'samples': '3', 'samples_result': 'median', 'sample_retract_dist': '3', 'samples_tolerance': '0.015', 'samples_tolerance_retries': '3', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'z_offset': '-1.350'}, 'homing_override': {'axes': 'z', 'set_position_z': '0', 'gcode': '\nstatus_homing\nG90\nG0 Z5 F500\nG28 X0 Y0\nG0 X150 Y100 F9000\nG28 Z0\nG0 Z5 F500\nstatus_ready'}, 'bed_mesh': {'speed': '150', 'horizontal_move_z': '5', 'mesh_min': '25,35.0', 'mesh_max': '225.0,220', 'probe_count': '6,6', 'algorithm': 'bicubic', 'fade_start': '1', 'fade_end': '10', 'fade_target': '0'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\nM117 Homing...\nG28 Y0 X0 Z0\n\n\n\n\n\n\n\n\n\n\n\n\nSTATUS_HEATING\nM107\nM117 Heating bed\nM190 S{ params.BED }\nM117 Heating nozzle\nM109 S{target_extruder}\nstatus_ready\nG1 Z15.0 F600\nG1 X125 Y125 F3000\nG92 E0\nG1 F9000\nstatus_printing\nM117 Printing...'}, 'gcode_macro PRINT_END': {'gcode': '\nstatus_busy\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\n\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y} F3600\nM117 Finished!\nstatus_off'}, 'printer': {'kinematics': 'corexz', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '5', 'max_z_accel': '100'}, 'force_move': {'enable_force_move': 'true'}, 'exclude_object': {}, 'bed_mesh default': {'version': '1', 'points': '\n-0.287500, -0.112500, -0.062500, -0.025000, 0.137500, -0.137500\n-0.225000, -0.112500, -0.087500, 0.037500, 0.137500, 0.287500\n-0.287500, -0.200000, -0.087500, -0.000000, 0.137500, 0.300000\n-0.337500, -0.200000, -0.137500, -0.012500, 0.125000, 0.275000\n-0.300000, -0.162500, -0.062500, 0.037500, 0.187500, 0.337500\n-0.212500, -0.075000, 0.025000, 0.125000, 0.275000, 0.450000', 'x_count': '6', 'y_count': '6', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'bicubic', 'tension': '0.2', 'min_x': '25.0', 'max_x': '225.0', 'min_y': '35.0', 'max_y': '220.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_sam4e8e_00313753364B37373032303038303139-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu ebbcan': {'canbus_uuid': '8250861450f7', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set allow_park = client.park_at_cancel | default(false) | lower == \'true\' %}\n{% set retract = client.cancel_retract | default(5.0) | abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x | default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y | default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x | length > 0 or park_y | length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro | default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set idle_timeout = client.idle_timeout | default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE | default(1) | int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro | default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move | default(velocity) %}\n{% set runout_resume = True if client.runout_sensor | default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state | upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro | default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY | default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'neopixel sb_leds': {'pin': 'EBBCan:gpio16', 'chain_count': 3, 'color_order': ['GRB'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'led_effect sb_logo_busy': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1,0,0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_cleaning': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.02, 0.5)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_calibrating_z': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 0.35)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1, 0.18, 0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0, 0, 1)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_homing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.6, 0.2)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_leveling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.5, 0.1, 0.4)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_meshing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.2, 1.0, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_printing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.3, 0.3, 0.0),(0.3, 0.1, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_standby': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.01, 0.01, 0.01)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 1.0, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_nozzle_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1.0, 0.18, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 1.0, 0.1)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_standby': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.6, 0.0, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.6, 1.0, 0.0, 0.1)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_critical_error': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': True, 'endstops': '', 'layers': '\nstrobe         1  1.5   add        (1.0,  1.0, 1.0)\nbreathing      2  0     difference (0.95, 0.0, 0.0)\nstatic         1  0     top        (1.0,  0.0, 0.0)', 'leds': '\nneopixel:sb_leds'}, 'led_effect rainbow': {'frame_rate': 24.0, 'autostart': True, 'run_on_error': False, 'endstops': '', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.0, 0.3, 0.0),(0.0, 0.0, 0.3)', 'leds': '\nneopixel:sb_leds'}, 'led_effect set_nozzle_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic         0  0     top        (0.5,  0.5, 0.5)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect set_logo_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic         0  0     top        (1.0,  1.0, 1.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'gcode_macro set_logo_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nSTOP_LED_EFFECTS', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=rainbow', 'description': 'G-Code macro'}, 'gcode_macro status_part_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_busy\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_heating\nSET_LED_EFFECT EFFECT=sb_nozzle_heating', 'description': 'G-Code macro'}, 'gcode_macro status_cooling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cooling\nSET_LED_EFFECT EFFECT=sb_nozzle_cooling', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_leveling\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_homing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cleaning\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_meshing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_calibrating_z\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_printing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'adxl345': {'axes_map': ['z', '-y', 'x'], 'rate': 3200, 'cs_pin': 'EBBCan:gpio1', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'EBBCan:gpio2', 'spi_software_miso_pin': 'EBBCan:gpio3', 'spi_software_mosi_pin': 'EBBCan:gpio0'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[100.0, 100.0, 20.0]], 'accel_chip': 'adxl345'}, 'input_shaper': {'shaper_type': '3hump_ei', 'shaper_type_x': '3hump_ei', 'damping_ratio_x': 0.1, 'shaper_freq_x': 45.0, 'shaper_type_y': '3hump_ei', 'damping_ratio_y': 0.1, 'shaper_freq_y': 0.0}, 'tmc2660 stepper_x': {'cs_pin': 'PD14', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PD6', 'dir_pin': '!PD11', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'EBBCan:gpio24', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2660 stepper_y': {'cs_pin': 'PC9', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PD7', 'dir_pin': '!PD12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'PA2', 'position_endstop': 0.0, 'position_min': -4.0, 'position_max': 225.0, 'homing_speed': 35.0, 'second_homing_speed': 17.5, 'homing_retract_speed': 35.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2660 stepper_z': {'cs_pin': 'PC10', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PD8', 'dir_pin': '!PD13', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -2.5, 'position_max': 230.0, 'homing_speed': 35.0, 'second_homing_speed': 17.5, 'homing_retract_speed': 35.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'adc_temperature my_thermistor': {'resistance1': 1000.0, 'temperature1': 0.0, 'temperature2': 80.0, 'resistance2': 1309.0}, 'tmc2209 extruder': {'uart_pin': 'EBBCan:gpio20', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan:gpio27', 'min_temp': 0.0, 'max_temp': 250.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 21.527, 'pid_ki': 1.063, 'pid_kd': 108.982, 'heater_pin': 'EBBCan:gpio7', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': '!EBBCan:gpio18', 'pressure_advance': 0.065, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'EBBCan:gpio19', 'rotation_distance': 21.63024711, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!EBBCan:gpio17'}, 'filament_switch_sensor extruder': {'switch_pin': 'EBBCan:gpio21', 'pause_on_runout': True, 'runout_gcode': '', 'pause_delay': 0.5, 'event_delay': 3.0}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'thermistor chamber_temp': {'temperature1': 25.0, 'resistance1': 10000.0, 'beta': 3950.0}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PC13', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'watermark', 'max_delta': 2.0, 'heater_pin': '!PA19', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan extruder_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'EBBCan:gpio13', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.25, 'off_below': 0.0, 'cycle_time': 0.08, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'EBBCan:gpio14'}, 'probe': {'z_offset': -1.35, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': '^EBBCan:gpio22', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 3, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.015, 'samples_tolerance_retries': 3}, 'homing_override': {'set_position_z': 0.0, 'axes': 'z', 'gcode': '\nstatus_homing\nG90\nG0 Z5 F500\nG28 X0 Y0\nG0 X150 Y100 F9000\nG28 Z0\nG0 Z5 F500\nstatus_ready'}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [6, 6], 'mesh_min': [25.0, 35.0], 'mesh_max': [225.0, 220.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 150.0, 'fade_start': 1.0, 'fade_end': 10.0, 'fade_target': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[-0.2875, -0.1125, -0.0625, -0.025, 0.1375, -0.1375], [-0.225, -0.1125, -0.0875, 0.0375, 0.1375, 0.2875], [-0.2875, -0.2, -0.0875, -0.0, 0.1375, 0.3], [-0.3375, -0.2, -0.1375, -0.0125, 0.125, 0.275], [-0.3, -0.1625, -0.0625, 0.0375, 0.1875, 0.3375], [-0.2125, -0.075, 0.025, 0.125, 0.275, 0.45]], 'min_x': 25.0, 'max_x': 225.0, 'min_y': 35.0, 'max_y': 220.0, 'x_count': 6, 'y_count': 6, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'bicubic', 'tension': 0.2}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\nM117 Homing...\nG28 Y0 X0 Z0\n\n\n\n\n\n\n\n\n\n\n\n\nSTATUS_HEATING\nM107\nM117 Heating bed\nM190 S{ params.BED }\nM117 Heating nozzle\nM109 S{target_extruder}\nstatus_ready\nG1 Z15.0 F600\nG1 X125 Y125 F3000\nG92 E0\nG1 F9000\nstatus_printing\nM117 Printing...', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\nstatus_busy\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\n\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y} F3600\nM117 Finished!\nstatus_off', 'description': 'G-Code macro'}, 'force_move': {'enable_force_move': True}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'max_accel_to_decel': 1500.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexz', 'max_z_velocity': 5.0, 'max_z_accel': 100.0}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-03-24 15:21:51,579 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-03-24 15:21:51,581 [printer.py:reinit()] - Klipper version: v0.12.0-114-ga77d0790-dirty
2024-03-24 15:21:51,581 [printer.py:reinit()] - # Extruders: 1
2024-03-24 15:21:51,581 [printer.py:reinit()] - # Temperature devices: 2
2024-03-24 15:21:51,581 [printer.py:reinit()] - # Fans: 2
2024-03-24 15:21:51,582 [printer.py:reinit()] - # Output pins: 0
2024-03-24 15:21:51,582 [printer.py:reinit()] - # Leds: 20
2024-03-24 15:21:51,582 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-03-24 15:21:51,600 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-03-24 15:21:51,602 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor mcu&fan&heater_fan extruder_fan&filament_switch_sensor extruder&neopixel sb_leds
2024-03-24 15:21:51,874 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-03-24 15:21:51,875 [screen.py:init_klipper()] - Printer initialized
2024-03-24 15:21:51,875 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2024-03-24 15:21:51,875 [printer.py:change_state()] - Adding callback for state: ready
2024-03-24 15:21:52,001 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-03-24 15:21:52,006 [screen.py:_load_panel()] - Loading panel: main_menu
2024-03-24 15:21:52,144 [main_menu.py:__init__()] - ### Making MainMenu
2024-03-24 15:21:52,159 [main_menu.py:add_device()] - Adding device: extruder
2024-03-24 15:21:52,175 [main_menu.py:add_device()] - Adding device: heater_bed
2024-03-24 15:21:52,185 [main_menu.py:add_device()] - Adding device: temperature_sensor mcu
2024-03-24 15:21:52,236 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-03-24 15:21:52,238 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-03-24 15:21:52,265 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor mcu', 'heater_bed', 'extruder']
2024-03-24 15:21:52,267 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-03-24 15:21:52,279 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-03-24 15:30:43,860 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2024-03-24 15:30:43,860 [printer.py:change_state()] - Adding callback for state: printing
2024-03-24 15:30:43,878 [screen.py:_load_panel()] - Loading panel: job_status
2024-03-24 15:30:44,678 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-03-24 15:30:44,688 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-03-24 15:30:44,713 [job_status.py:update_file_metadata()] - Update Metadata. File: fidget_cube_0.2mm_PLA_MK3S_1h39m.gcode Size: 3698313
2024-03-24 15:30:44,719 [job_status.py:show_file_thumbnail()] - fidget_cube_0.2mm_PLA_MK3S_1h39m.gcode
2024-03-24 15:42:52,133 [printer.py:change_state()] - Changing state from 'printing' to 'paused'
2024-03-24 15:42:52,133 [printer.py:change_state()] - Adding callback for state: paused
2024-03-24 15:42:52,145 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'paused'
2024-03-24 15:42:52,240 [screen.py:show_panel()] - Reinitializing panel
2024-03-24 15:42:52,652 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-03-24 15:42:52,673 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'paused'
2024-03-24 15:42:52,719 [job_status.py:update_file_metadata()] - Update Metadata. File: fidget_cube_0.2mm_PLA_MK3S_1h39m.gcode Size: 3698313
2024-03-24 15:42:52,731 [job_status.py:show_file_thumbnail()] - fidget_cube_0.2mm_PLA_MK3S_1h39m.gcode
2024-03-24 15:42:52,747 [screen.py:_load_panel()] - Loading panel: extrude
2024-03-24 15:42:52,975 [screen.py:attach_panel()] - Current panel hierarchy: job_status > extrude
2024-03-24 15:42:52,983 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: SET_FILAMENT_SENSOR SENSOR=extruder ENABLE=1
2024-03-24 15:42:52,985 [extrude.py:process_update()] - filament_switch_sensor extruder: {'filament_detected': False, 'enabled': True}
2024-03-24 15:43:03,156 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: SET_FILAMENT_SENSOR SENSOR=extruder ENABLE=0
2024-03-24 15:43:03,157 [extrude.py:process_update()] - filament_switch_sensor extruder: {'filament_detected': False, 'enabled': False}
2024-03-24 15:43:08,425 [printer.py:change_state()] - Changing state from 'paused' to 'printing'
2024-03-24 15:43:08,425 [printer.py:change_state()] - Adding callback for state: printing
2024-03-24 15:43:08,444 [screen.py:show_panel()] - Reinitializing panel
2024-03-24 15:43:08,829 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-03-24 15:43:08,848 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-03-24 15:43:08,892 [job_status.py:update_file_metadata()] - Update Metadata. File: fidget_cube_0.2mm_PLA_MK3S_1h39m.gcode Size: 3698313
2024-03-24 15:43:08,905 [job_status.py:show_file_thumbnail()] - fidget_cube_0.2mm_PLA_MK3S_1h39m.gcode
2024-03-24 16:21:50,894 [screen.py:show_screensaver()] - Showing Screensaver
2024-03-24 17:26:16,515 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2024-03-24 17:26:16,515 [printer.py:change_state()] - Adding callback for state: ready
2024-03-24 17:26:16,530 [screen.py:close_screensaver()] - Closing Screensaver
2024-03-24 17:26:16,583 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'complete'
2024-03-24 18:26:16,861 [screen.py:show_screensaver()] - Showing Screensaver
2024-03-24 18:43:35,348 [screen.py:close_screensaver()] - Closing Screensaver
2024-03-24 19:43:35,858 [screen.py:show_screensaver()] - Showing Screensaver
2024-03-24 22:53:38,886 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2024-03-24 22:53:38,886 [printer.py:change_state()] - Adding callback for state: printing
2024-03-24 22:53:38,896 [job_status.py:set_state()] - Changing job_status state from 'complete' to 'printing'
2024-03-24 22:53:38,899 [job_status.py:update_file_metadata()] - Update Metadata. File: 3DBenchy_0.2mm_PLA_MK3S_1h17m.gcode Size: 3762462
2024-03-24 22:53:38,911 [job_status.py:show_file_thumbnail()] - 3DBenchy_0.2mm_PLA_MK3S_1h17m.gcode
2024-03-24 22:53:38,921 [screen.py:close_screensaver()] - Closing Screensaver
2024-03-24 22:53:39,006 [screen.py:show_panel()] - Reinitializing panel
2024-03-24 22:53:39,406 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-03-24 22:53:39,429 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-03-24 22:53:39,474 [job_status.py:update_file_metadata()] - Update Metadata. File: 3DBenchy_0.2mm_PLA_MK3S_1h17m.gcode Size: 3762462
2024-03-24 22:53:39,486 [job_status.py:show_file_thumbnail()] - 3DBenchy_0.2mm_PLA_MK3S_1h17m.gcode
2024-03-24 22:56:40,733 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2024-03-24 22:56:40,734 [printer.py:change_state()] - Adding callback for state: ready
2024-03-24 22:56:40,760 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'cancelled'
2024-03-24 22:57:18,081 [job_status.py:set_state()] - Changing job_status state from 'cancelled' to 'standby'
2024-03-24 22:58:38,087 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2024-03-24 22:58:38,087 [printer.py:change_state()] - Adding callback for state: printing
2024-03-24 22:58:38,100 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-03-24 22:58:38,109 [job_status.py:update_file_metadata()] - Update Metadata. File: 3DBenchy_0.2mm_PLA_MK3S_1h17m.gcode Size: 3762462
2024-03-24 22:58:38,115 [job_status.py:show_file_thumbnail()] - 3DBenchy_0.2mm_PLA_MK3S_1h17m.gcode
2024-03-24 22:58:38,210 [screen.py:show_panel()] - Reinitializing panel
2024-03-24 22:58:38,510 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-03-24 22:58:38,531 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-03-24 22:58:38,580 [job_status.py:update_file_metadata()] - Update Metadata. File: 3DBenchy_0.2mm_PLA_MK3S_1h17m.gcode Size: 3762462
2024-03-24 22:58:38,593 [job_status.py:show_file_thumbnail()] - 3DBenchy_0.2mm_PLA_MK3S_1h17m.gcode
2024-03-24 23:00:30,345 [screen.py:_load_panel()] - Loading panel: fine_tune
2024-03-24 23:00:30,662 [screen.py:attach_panel()] - Current panel hierarchy: job_status > fine_tune
2024-03-24 23:04:41,482 [screen.py:_menu_go_back()] - #### Menu go back
2024-03-24 23:04:41,598 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-03-24 23:04:41,628 [job_status.py:update_file_metadata()] - Update Metadata. File: 3DBenchy_0.2mm_PLA_MK3S_1h17m.gcode Size: 3762462
2024-03-24 23:04:41,636 [job_status.py:show_file_thumbnail()] - 3DBenchy_0.2mm_PLA_MK3S_1h17m.gcode
2024-03-24 23:44:14,855 [printer.py:change_state()] - Changing state from 'printing' to 'shutdown'
2024-03-24 23:44:14,856 [printer.py:change_state()] - Adding callback for state: shutdown
2024-03-24 23:44:14,948 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-03-24 23:44:14,958 [screen.py:show_panel()] - Reinitializing panel
2024-03-24 23:44:15,112 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-03-24 23:44:29,227 [printer.py:change_state()] - Changing state from 'shutdown' to 'disconnected'
2024-03-24 23:44:29,227 [printer.py:change_state()] - Adding callback for state: disconnected
2024-03-24 23:44:29,228 [screen.py:state_disconnected()] - ### Going to disconnected
2024-03-24 23:44:29,229 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-03-24 23:44:29,231 [screen.py:show_panel()] - Reinitializing panel
2024-03-24 23:44:29,311 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-03-24 23:44:32,859 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-03-24 23:44:32,872 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-03-24 23:44:32,897 [printer.py:configure_cameras()] - Cameras: []
2024-03-24 23:44:32,897 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'octoprint_compat', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 3, 'moonraker_version': 'v0.8.0-318-g9813011', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-03-24 23:44:32,898 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-03-24 23:44:32,914 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-03-24 23:44:32,939 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set allow_park = client.park_at_cancel | default(false) | lower == \'true\' %}\n{% set retract = client.cancel_retract | default(5.0) | abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x | default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y | default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x | length > 0 or park_y | length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro | default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set idle_timeout = client.idle_timeout | default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE | default(1) | int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro | default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move | default(velocity) %}\n{% set runout_resume = True if client.runout_sensor | default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state | upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro | default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY | default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}"}, 'neopixel sb_leds': {'pin': 'EBBCan:gpio16', 'chain_count': '3', 'color_order': 'GRB', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0'}, 'led_effect sb_logo_busy': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (1,0,0)'}, 'led_effect sb_logo_cleaning': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.02, 0.5)'}, 'led_effect sb_logo_calibrating_z': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 0.35)'}, 'led_effect sb_logo_heating': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nbreathing  3 1 top (1, 0.18, 0)'}, 'led_effect sb_logo_cooling': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nbreathing  3 1 top (0, 0, 1)'}, 'led_effect sb_logo_homing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.6, 0.2)'}, 'led_effect sb_logo_leveling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.5, 0.1, 0.4)'}, 'led_effect sb_logo_meshing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.2, 1.0, 0.0)'}, 'led_effect sb_logo_printing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.3, 0.3, 0.0),(0.3, 0.1, 0.0)'}, 'led_effect sb_logo_standby': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.01, 0.01, 0.01)'}, 'led_effect sb_logo_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 1.0, 0.0)'}, 'led_effect sb_nozzle_heating': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (1.0, 0.18, 0.0, 0.0)'}, 'led_effect sb_nozzle_cooling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 1.0, 0.1)'}, 'led_effect sb_nozzle_standby': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.6, 0.0, 0.0, 0.0)'}, 'led_effect sb_nozzle_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.6, 1.0, 0.0, 0.1)'}, 'led_effect sb_critical_error': {'leds': '\nneopixel:sb_leds', 'layers': '\nstrobe         1  1.5   add        (1.0,  1.0, 1.0)\nbreathing      2  0     difference (0.95, 0.0, 0.0)\nstatic         1  0     top        (1.0,  0.0, 0.0)', 'autostart': 'false', 'frame_rate': '24', 'run_on_error': 'true'}, 'led_effect rainbow': {'leds': '\nneopixel:sb_leds', 'autostart': 'true', 'frame_rate': '24', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.0, 0.3, 0.0),(0.0, 0.0, 0.3)'}, 'led_effect set_nozzle_leds': {'leds': '\nneopixel:sb_leds (2,3)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nstatic         0  0     top        (0.5,  0.5, 0.5)'}, 'led_effect set_logo_leds': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nstatic         0  0     top        (1.0,  1.0, 1.0)'}, 'gcode_macro set_logo_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds STOP=1'}, 'gcode_macro set_logo_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1'}, 'gcode_macro status_off': {'gcode': '\nSTOP_LED_EFFECTS'}, 'gcode_macro status_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=rainbow'}, 'gcode_macro status_part_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready'}, 'gcode_macro status_busy': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_busy\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_heating\nSET_LED_EFFECT EFFECT=sb_nozzle_heating'}, 'gcode_macro status_cooling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cooling\nSET_LED_EFFECT EFFECT=sb_nozzle_cooling'}, 'gcode_macro status_leveling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_leveling\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_homing\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cleaning\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_meshing\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_calibrating_z\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_printing\nset_nozzle_leds_on'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_sam4e8e_00313753364B37373032303038303139-if00'}, 'mcu EBBCan': {'canbus_uuid': '8250861450f7'}, 'adxl345': {'cs_pin': 'EBBCan:gpio1', 'spi_software_sclk_pin': 'EBBCan:gpio2', 'spi_software_mosi_pin': 'EBBCan:gpio0', 'spi_software_miso_pin': 'EBBCan:gpio3', 'axes_map': 'z,-y,x'}, 'resonance_tester': {'probe_points': '100, 100, 20', 'accel_chip': 'adxl345'}, 'input_shaper': {'shaper_freq_x': '45', 'shaper_type': '3hump_ei'}, 'stepper_x': {'step_pin': 'PD6', 'dir_pin': '!PD11', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'EBBCan:gpio24', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '40'}, 'tmc2660 stepper_x': {'cs_pin': 'PD14', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'stepper_y': {'step_pin': 'PD7', 'dir_pin': '!PD12', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'PA2', 'position_endstop': '0', 'position_max': '225', 'position_min': '-4', 'homing_speed': '35', 'homing_retract_dist': '0'}, 'tmc2660 stepper_y': {'cs_pin': 'PC9', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'stepper_z': {'step_pin': 'PD8', 'dir_pin': '!PD13', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '230', 'position_min': '-2.5', 'homing_speed': '35.0'}, 'tmc2660 stepper_z': {'cs_pin': 'PC10', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'adc_temperature my_thermistor': {'temperature1': '0', 'resistance1': '1000', 'temperature2': '80', 'resistance2': '1309'}, 'extruder': {'step_pin': '!EBBCan:gpio18', 'dir_pin': 'EBBCan:gpio19', 'enable_pin': '!EBBCan:gpio17', 'microsteps': '32', 'rotation_distance': '21.63024711', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'pressure_advance': '0.065', 'pressure_advance_smooth_time': '0.04', 'gear_ratio': '50:10', 'heater_pin': 'EBBCan:gpio7', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'EBBCan:gpio27', 'control': 'pid', 'pid_kp': '21.527', 'pid_ki': '1.063', 'pid_kd': '108.982', 'min_temp': '0', 'max_temp': '250'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan:gpio20', 'run_current': '0.5', 'stealthchop_threshold': '999999'}, 'filament_switch_sensor extruder': {'pause_on_runout': 'True', 'switch_pin': 'EBBCan:gpio21'}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu'}, 'thermistor chamber_temp': {'temperature1': '25', 'resistance1': '10000', 'beta': '3950'}, 'heater_bed': {'heater_pin': '!PA19', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PC13', 'control': 'watermark', 'min_temp': '0', 'max_temp': '120'}, 'heater_fan extruder_fan': {'pin': 'EBBCan:gpio13', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'EBBCan:gpio14', 'cycle_time': '.08', 'kick_start_time': '.25'}, 'probe': {'pin': '^EBBCan:gpio22', 'x_offset': '0', 'y_offset': '0', 'samples': '3', 'samples_result': 'median', 'sample_retract_dist': '3', 'samples_tolerance': '0.015', 'samples_tolerance_retries': '3', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'z_offset': '-1.350'}, 'homing_override': {'axes': 'z', 'set_position_z': '0', 'gcode': '\nstatus_homing\nG90\nG0 Z5 F500\nG28 X0 Y0\nG0 X150 Y100 F9000\nG28 Z0\nG0 Z5 F500\nstatus_ready'}, 'bed_mesh': {'speed': '150', 'horizontal_move_z': '5', 'mesh_min': '25,35.0', 'mesh_max': '225.0,220', 'probe_count': '6,6', 'algorithm': 'bicubic', 'fade_start': '1', 'fade_end': '10', 'fade_target': '0'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\nM117 Homing...\nM109 S150\nG28 Y0 X0 Z0\n\n\n\n\n\n\n\n\n\n\n\n\nSTATUS_HEATING\nM107\nM117 Heating bed\nM190 S{ params.BED }\nM117 Heating nozzle\nM109 S{target_extruder}\nstatus_ready\nG1 Z15.0 F600\nG1 X125 Y125 F3000\nG92 E0\nG1 F9000\nstatus_printing\nM117 Printing...'}, 'gcode_macro PRINT_END': {'gcode': '\nstatus_busy\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\n\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y} F3600\nM117 Finished!\nstatus_off'}, 'printer': {'kinematics': 'corexz', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '5', 'max_z_accel': '100'}, 'force_move': {'enable_force_move': 'true'}, 'exclude_object': {}, 'bed_mesh default': {'version': '1', 'points': '\n-0.287500, -0.112500, -0.062500, -0.025000, 0.137500, -0.137500\n-0.225000, -0.112500, -0.087500, 0.037500, 0.137500, 0.287500\n-0.287500, -0.200000, -0.087500, -0.000000, 0.137500, 0.300000\n-0.337500, -0.200000, -0.137500, -0.012500, 0.125000, 0.275000\n-0.300000, -0.162500, -0.062500, 0.037500, 0.187500, 0.337500\n-0.212500, -0.075000, 0.025000, 0.125000, 0.275000, 0.450000', 'x_count': '6', 'y_count': '6', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'bicubic', 'tension': '0.2', 'min_x': '25.0', 'max_x': '225.0', 'min_y': '35.0', 'max_y': '220.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_sam4e8e_00313753364B37373032303038303139-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu ebbcan': {'canbus_uuid': '8250861450f7', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set allow_park = client.park_at_cancel | default(false) | lower == \'true\' %}\n{% set retract = client.cancel_retract | default(5.0) | abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x | default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y | default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x | length > 0 or park_y | length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro | default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set idle_timeout = client.idle_timeout | default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE | default(1) | int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro | default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move | default(velocity) %}\n{% set runout_resume = True if client.runout_sensor | default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state | upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro | default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY | default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'neopixel sb_leds': {'pin': 'EBBCan:gpio16', 'chain_count': 3, 'color_order': ['GRB'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'led_effect sb_logo_busy': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1,0,0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_cleaning': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.02, 0.5)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_calibrating_z': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 0.35)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1, 0.18, 0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0, 0, 1)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_homing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.6, 0.2)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_leveling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.5, 0.1, 0.4)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_meshing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.2, 1.0, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_printing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.3, 0.3, 0.0),(0.3, 0.1, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_standby': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.01, 0.01, 0.01)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 1.0, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_nozzle_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1.0, 0.18, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 1.0, 0.1)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_standby': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.6, 0.0, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.6, 1.0, 0.0, 0.1)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_critical_error': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': True, 'endstops': '', 'layers': '\nstrobe         1  1.5   add        (1.0,  1.0, 1.0)\nbreathing      2  0     difference (0.95, 0.0, 0.0)\nstatic         1  0     top        (1.0,  0.0, 0.0)', 'leds': '\nneopixel:sb_leds'}, 'led_effect rainbow': {'frame_rate': 24.0, 'autostart': True, 'run_on_error': False, 'endstops': '', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.0, 0.3, 0.0),(0.0, 0.0, 0.3)', 'leds': '\nneopixel:sb_leds'}, 'led_effect set_nozzle_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic         0  0     top        (0.5,  0.5, 0.5)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect set_logo_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic         0  0     top        (1.0,  1.0, 1.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'gcode_macro set_logo_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nSTOP_LED_EFFECTS', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=rainbow', 'description': 'G-Code macro'}, 'gcode_macro status_part_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_busy\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_heating\nSET_LED_EFFECT EFFECT=sb_nozzle_heating', 'description': 'G-Code macro'}, 'gcode_macro status_cooling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cooling\nSET_LED_EFFECT EFFECT=sb_nozzle_cooling', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_leveling\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_homing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cleaning\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_meshing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_calibrating_z\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_printing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'adxl345': {'axes_map': ['z', '-y', 'x'], 'rate': 3200, 'cs_pin': 'EBBCan:gpio1', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'EBBCan:gpio2', 'spi_software_miso_pin': 'EBBCan:gpio3', 'spi_software_mosi_pin': 'EBBCan:gpio0'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[100.0, 100.0, 20.0]], 'accel_chip': 'adxl345'}, 'input_shaper': {'shaper_type': '3hump_ei', 'shaper_type_x': '3hump_ei', 'damping_ratio_x': 0.1, 'shaper_freq_x': 45.0, 'shaper_type_y': '3hump_ei', 'damping_ratio_y': 0.1, 'shaper_freq_y': 0.0}, 'tmc2660 stepper_x': {'cs_pin': 'PD14', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PD6', 'dir_pin': '!PD11', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'EBBCan:gpio24', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2660 stepper_y': {'cs_pin': 'PC9', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PD7', 'dir_pin': '!PD12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'PA2', 'position_endstop': 0.0, 'position_min': -4.0, 'position_max': 225.0, 'homing_speed': 35.0, 'second_homing_speed': 17.5, 'homing_retract_speed': 35.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2660 stepper_z': {'cs_pin': 'PC10', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PD8', 'dir_pin': '!PD13', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -2.5, 'position_max': 230.0, 'homing_speed': 35.0, 'second_homing_speed': 17.5, 'homing_retract_speed': 35.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'adc_temperature my_thermistor': {'resistance1': 1000.0, 'temperature1': 0.0, 'temperature2': 80.0, 'resistance2': 1309.0}, 'tmc2209 extruder': {'uart_pin': 'EBBCan:gpio20', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan:gpio27', 'min_temp': 0.0, 'max_temp': 250.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 21.527, 'pid_ki': 1.063, 'pid_kd': 108.982, 'heater_pin': 'EBBCan:gpio7', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': '!EBBCan:gpio18', 'pressure_advance': 0.065, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'EBBCan:gpio19', 'rotation_distance': 21.63024711, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!EBBCan:gpio17'}, 'filament_switch_sensor extruder': {'switch_pin': 'EBBCan:gpio21', 'pause_on_runout': True, 'runout_gcode': '', 'pause_delay': 0.5, 'event_delay': 3.0}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'thermistor chamber_temp': {'temperature1': 25.0, 'resistance1': 10000.0, 'beta': 3950.0}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PC13', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'watermark', 'max_delta': 2.0, 'heater_pin': '!PA19', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan extruder_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'EBBCan:gpio13', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.25, 'off_below': 0.0, 'cycle_time': 0.08, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'EBBCan:gpio14'}, 'probe': {'z_offset': -1.35, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': '^EBBCan:gpio22', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 3, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.015, 'samples_tolerance_retries': 3}, 'homing_override': {'set_position_z': 0.0, 'axes': 'z', 'gcode': '\nstatus_homing\nG90\nG0 Z5 F500\nG28 X0 Y0\nG0 X150 Y100 F9000\nG28 Z0\nG0 Z5 F500\nstatus_ready'}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [6, 6], 'mesh_min': [25.0, 35.0], 'mesh_max': [225.0, 220.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 150.0, 'fade_start': 1.0, 'fade_end': 10.0, 'fade_target': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[-0.2875, -0.1125, -0.0625, -0.025, 0.1375, -0.1375], [-0.225, -0.1125, -0.0875, 0.0375, 0.1375, 0.2875], [-0.2875, -0.2, -0.0875, -0.0, 0.1375, 0.3], [-0.3375, -0.2, -0.1375, -0.0125, 0.125, 0.275], [-0.3, -0.1625, -0.0625, 0.0375, 0.1875, 0.3375], [-0.2125, -0.075, 0.025, 0.125, 0.275, 0.45]], 'min_x': 25.0, 'max_x': 225.0, 'min_y': 35.0, 'max_y': 220.0, 'x_count': 6, 'y_count': 6, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'bicubic', 'tension': 0.2}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\nM117 Homing...\nM109 S150\nG28 Y0 X0 Z0\n\n\n\n\n\n\n\n\n\n\n\n\nSTATUS_HEATING\nM107\nM117 Heating bed\nM190 S{ params.BED }\nM117 Heating nozzle\nM109 S{target_extruder}\nstatus_ready\nG1 Z15.0 F600\nG1 X125 Y125 F3000\nG92 E0\nG1 F9000\nstatus_printing\nM117 Printing...', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\nstatus_busy\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\n\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y} F3600\nM117 Finished!\nstatus_off', 'description': 'G-Code macro'}, 'force_move': {'enable_force_move': True}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'max_accel_to_decel': 1500.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexz', 'max_z_velocity': 5.0, 'max_z_accel': 100.0}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-03-24 23:44:32,943 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-03-24 23:44:32,945 [printer.py:reinit()] - Klipper version: v0.12.0-114-ga77d0790-dirty
2024-03-24 23:44:32,945 [printer.py:reinit()] - # Extruders: 1
2024-03-24 23:44:32,945 [printer.py:reinit()] - # Temperature devices: 2
2024-03-24 23:44:32,945 [printer.py:reinit()] - # Fans: 2
2024-03-24 23:44:32,945 [printer.py:reinit()] - # Output pins: 0
2024-03-24 23:44:32,945 [printer.py:reinit()] - # Leds: 20
2024-03-24 23:44:32,946 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-03-24 23:44:32,962 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-03-24 23:44:32,964 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor mcu&fan&heater_fan extruder_fan&filament_switch_sensor extruder&neopixel sb_leds
2024-03-24 23:44:33,266 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-03-24 23:44:33,266 [screen.py:init_klipper()] - Printer initialized
2024-03-24 23:44:33,267 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-03-24 23:44:33,267 [printer.py:change_state()] - Adding callback for state: startup
2024-03-24 23:46:03,964 [printer.py:change_state()] - Changing state from 'startup' to 'error'
2024-03-24 23:46:03,965 [printer.py:change_state()] - Adding callback for state: error
2024-03-24 23:46:03,969 [screen.py:show_panel()] - Reinitializing panel
2024-03-24 23:46:04,071 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-03-24 23:46:07,317 [printer.py:change_state()] - Changing state from 'error' to 'disconnected'
2024-03-24 23:46:07,317 [printer.py:change_state()] - Adding callback for state: disconnected
2024-03-24 23:46:07,320 [screen.py:state_disconnected()] - ### Going to disconnected
2024-03-24 23:46:07,320 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-03-24 23:46:07,322 [screen.py:show_panel()] - Reinitializing panel
2024-03-24 23:46:07,428 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-03-24 23:46:10,859 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-03-24 23:46:10,880 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-03-24 23:46:10,900 [printer.py:configure_cameras()] - Cameras: []
2024-03-24 23:46:10,900 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'octoprint_compat', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 3, 'moonraker_version': 'v0.8.0-318-g9813011', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-03-24 23:46:10,901 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-03-24 23:46:10,924 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-03-24 23:46:10,974 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set allow_park = client.park_at_cancel | default(false) | lower == \'true\' %}\n{% set retract = client.cancel_retract | default(5.0) | abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x | default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y | default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x | length > 0 or park_y | length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro | default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set idle_timeout = client.idle_timeout | default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE | default(1) | int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro | default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move | default(velocity) %}\n{% set runout_resume = True if client.runout_sensor | default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state | upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro | default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY | default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}"}, 'neopixel sb_leds': {'pin': 'EBBCan:gpio16', 'chain_count': '3', 'color_order': 'GRB', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0'}, 'led_effect sb_logo_busy': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (1,0,0)'}, 'led_effect sb_logo_cleaning': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.02, 0.5)'}, 'led_effect sb_logo_calibrating_z': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 0.35)'}, 'led_effect sb_logo_heating': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nbreathing  3 1 top (1, 0.18, 0)'}, 'led_effect sb_logo_cooling': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nbreathing  3 1 top (0, 0, 1)'}, 'led_effect sb_logo_homing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.6, 0.2)'}, 'led_effect sb_logo_leveling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.5, 0.1, 0.4)'}, 'led_effect sb_logo_meshing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.2, 1.0, 0.0)'}, 'led_effect sb_logo_printing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.3, 0.3, 0.0),(0.3, 0.1, 0.0)'}, 'led_effect sb_logo_standby': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.01, 0.01, 0.01)'}, 'led_effect sb_logo_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 1.0, 0.0)'}, 'led_effect sb_nozzle_heating': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (1.0, 0.18, 0.0, 0.0)'}, 'led_effect sb_nozzle_cooling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 1.0, 0.1)'}, 'led_effect sb_nozzle_standby': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.6, 0.0, 0.0, 0.0)'}, 'led_effect sb_nozzle_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.6, 1.0, 0.0, 0.1)'}, 'led_effect sb_critical_error': {'leds': '\nneopixel:sb_leds', 'layers': '\nstrobe         1  1.5   add        (1.0,  1.0, 1.0)\nbreathing      2  0     difference (0.95, 0.0, 0.0)\nstatic         1  0     top        (1.0,  0.0, 0.0)', 'autostart': 'false', 'frame_rate': '24', 'run_on_error': 'true'}, 'led_effect rainbow': {'leds': '\nneopixel:sb_leds', 'autostart': 'true', 'frame_rate': '24', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.0, 0.3, 0.0),(0.0, 0.0, 0.3)'}, 'led_effect set_nozzle_leds': {'leds': '\nneopixel:sb_leds (2,3)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nstatic         0  0     top        (0.5,  0.5, 0.5)'}, 'led_effect set_logo_leds': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nstatic         0  0     top        (1.0,  1.0, 1.0)'}, 'gcode_macro set_logo_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds STOP=1'}, 'gcode_macro set_logo_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1'}, 'gcode_macro status_off': {'gcode': '\nSTOP_LED_EFFECTS'}, 'gcode_macro status_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=rainbow'}, 'gcode_macro status_part_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready'}, 'gcode_macro status_busy': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_busy\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_heating\nSET_LED_EFFECT EFFECT=sb_nozzle_heating'}, 'gcode_macro status_cooling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cooling\nSET_LED_EFFECT EFFECT=sb_nozzle_cooling'}, 'gcode_macro status_leveling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_leveling\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_homing\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cleaning\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_meshing\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_calibrating_z\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_printing\nset_nozzle_leds_on'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_sam4e8e_00313753364B37373032303038303139-if00'}, 'mcu EBBCan': {'canbus_uuid': '8250861450f7'}, 'adxl345': {'cs_pin': 'EBBCan:gpio1', 'spi_software_sclk_pin': 'EBBCan:gpio2', 'spi_software_mosi_pin': 'EBBCan:gpio0', 'spi_software_miso_pin': 'EBBCan:gpio3', 'axes_map': 'z,-y,x'}, 'resonance_tester': {'probe_points': '100, 100, 20', 'accel_chip': 'adxl345'}, 'input_shaper': {'shaper_freq_x': '45', 'shaper_type': '3hump_ei'}, 'stepper_x': {'step_pin': 'PD6', 'dir_pin': '!PD11', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'EBBCan:gpio24', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '40'}, 'tmc2660 stepper_x': {'cs_pin': 'PD14', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'stepper_y': {'step_pin': 'PD7', 'dir_pin': '!PD12', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'PA2', 'position_endstop': '0', 'position_max': '225', 'position_min': '-4', 'homing_speed': '35', 'homing_retract_dist': '0'}, 'tmc2660 stepper_y': {'cs_pin': 'PC9', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'stepper_z': {'step_pin': 'PD8', 'dir_pin': '!PD13', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '230', 'position_min': '-2.5', 'homing_speed': '35.0'}, 'tmc2660 stepper_z': {'cs_pin': 'PC10', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'adc_temperature my_thermistor': {'temperature1': '0', 'resistance1': '1000', 'temperature2': '80', 'resistance2': '1309'}, 'extruder': {'step_pin': '!EBBCan:gpio18', 'dir_pin': 'EBBCan:gpio19', 'enable_pin': '!EBBCan:gpio17', 'microsteps': '32', 'rotation_distance': '21.63024711', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'pressure_advance': '0.065', 'pressure_advance_smooth_time': '0.04', 'gear_ratio': '50:10', 'heater_pin': 'EBBCan:gpio7', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'EBBCan:gpio27', 'control': 'pid', 'pid_kp': '21.527', 'pid_ki': '1.063', 'pid_kd': '108.982', 'min_temp': '0', 'max_temp': '250'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan:gpio20', 'run_current': '0.5', 'stealthchop_threshold': '999999'}, 'filament_switch_sensor extruder': {'pause_on_runout': 'True', 'switch_pin': 'EBBCan:gpio21'}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu'}, 'thermistor chamber_temp': {'temperature1': '25', 'resistance1': '10000', 'beta': '3950'}, 'heater_bed': {'heater_pin': '!PA19', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PC13', 'control': 'watermark', 'min_temp': '0', 'max_temp': '120'}, 'heater_fan extruder_fan': {'pin': 'EBBCan:gpio13', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'EBBCan:gpio14', 'cycle_time': '.08', 'kick_start_time': '.25'}, 'probe': {'pin': '^EBBCan:gpio22', 'x_offset': '0', 'y_offset': '0', 'samples': '3', 'samples_result': 'median', 'sample_retract_dist': '3', 'samples_tolerance': '0.015', 'samples_tolerance_retries': '3', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'z_offset': '-1.350'}, 'homing_override': {'axes': 'z', 'set_position_z': '0', 'gcode': '\nstatus_homing\nG90\nG0 Z5 F500\nG28 X0 Y0\nG0 X150 Y100 F9000\nG28 Z0\nG0 Z5 F500\nstatus_ready'}, 'bed_mesh': {'speed': '150', 'horizontal_move_z': '5', 'mesh_min': '25,35.0', 'mesh_max': '225.0,220', 'probe_count': '6,6', 'algorithm': 'bicubic', 'fade_start': '1', 'fade_end': '10', 'fade_target': '0'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\nM117 Homing...\nM109 S150\nG28 Y0 X0 Z0\n\n\n\n\n\n\n\n\n\n\n\n\nSTATUS_HEATING\nM107\nM117 Heating bed\nM190 S{ params.BED }\nM117 Heating nozzle\nM109 S{target_extruder}\nstatus_ready\nG1 Z15.0 F600\nG1 X125 Y125 F3000\nG92 E0\nG1 F9000\nstatus_printing\nM117 Printing...'}, 'gcode_macro PRINT_END': {'gcode': '\nstatus_busy\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\n\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y} F3600\nM117 Finished!\nstatus_off'}, 'printer': {'kinematics': 'corexz', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '5', 'max_z_accel': '100'}, 'force_move': {'enable_force_move': 'true'}, 'exclude_object': {}, 'bed_mesh default': {'version': '1', 'points': '\n-0.287500, -0.112500, -0.062500, -0.025000, 0.137500, -0.137500\n-0.225000, -0.112500, -0.087500, 0.037500, 0.137500, 0.287500\n-0.287500, -0.200000, -0.087500, -0.000000, 0.137500, 0.300000\n-0.337500, -0.200000, -0.137500, -0.012500, 0.125000, 0.275000\n-0.300000, -0.162500, -0.062500, 0.037500, 0.187500, 0.337500\n-0.212500, -0.075000, 0.025000, 0.125000, 0.275000, 0.450000', 'x_count': '6', 'y_count': '6', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'bicubic', 'tension': '0.2', 'min_x': '25.0', 'max_x': '225.0', 'min_y': '35.0', 'max_y': '220.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_sam4e8e_00313753364B37373032303038303139-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu ebbcan': {'canbus_uuid': '8250861450f7', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set allow_park = client.park_at_cancel | default(false) | lower == \'true\' %}\n{% set retract = client.cancel_retract | default(5.0) | abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x | default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y | default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x | length > 0 or park_y | length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro | default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set idle_timeout = client.idle_timeout | default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE | default(1) | int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro | default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move | default(velocity) %}\n{% set runout_resume = True if client.runout_sensor | default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state | upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro | default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY | default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'neopixel sb_leds': {'pin': 'EBBCan:gpio16', 'chain_count': 3, 'color_order': ['GRB'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'led_effect sb_logo_busy': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1,0,0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_cleaning': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.02, 0.5)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_calibrating_z': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 0.35)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1, 0.18, 0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0, 0, 1)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_homing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.6, 0.2)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_leveling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.5, 0.1, 0.4)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_meshing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.2, 1.0, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_printing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.3, 0.3, 0.0),(0.3, 0.1, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_standby': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.01, 0.01, 0.01)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 1.0, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_nozzle_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1.0, 0.18, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 1.0, 0.1)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_standby': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.6, 0.0, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.6, 1.0, 0.0, 0.1)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_critical_error': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': True, 'endstops': '', 'layers': '\nstrobe         1  1.5   add        (1.0,  1.0, 1.0)\nbreathing      2  0     difference (0.95, 0.0, 0.0)\nstatic         1  0     top        (1.0,  0.0, 0.0)', 'leds': '\nneopixel:sb_leds'}, 'led_effect rainbow': {'frame_rate': 24.0, 'autostart': True, 'run_on_error': False, 'endstops': '', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.0, 0.3, 0.0),(0.0, 0.0, 0.3)', 'leds': '\nneopixel:sb_leds'}, 'led_effect set_nozzle_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic         0  0     top        (0.5,  0.5, 0.5)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect set_logo_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic         0  0     top        (1.0,  1.0, 1.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'gcode_macro set_logo_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nSTOP_LED_EFFECTS', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=rainbow', 'description': 'G-Code macro'}, 'gcode_macro status_part_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_busy\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_heating\nSET_LED_EFFECT EFFECT=sb_nozzle_heating', 'description': 'G-Code macro'}, 'gcode_macro status_cooling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cooling\nSET_LED_EFFECT EFFECT=sb_nozzle_cooling', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_leveling\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_homing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cleaning\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_meshing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_calibrating_z\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_printing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'adxl345': {'axes_map': ['z', '-y', 'x'], 'rate': 3200, 'cs_pin': 'EBBCan:gpio1', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'EBBCan:gpio2', 'spi_software_miso_pin': 'EBBCan:gpio3', 'spi_software_mosi_pin': 'EBBCan:gpio0'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[100.0, 100.0, 20.0]], 'accel_chip': 'adxl345'}, 'input_shaper': {'shaper_type': '3hump_ei', 'shaper_type_x': '3hump_ei', 'damping_ratio_x': 0.1, 'shaper_freq_x': 45.0, 'shaper_type_y': '3hump_ei', 'damping_ratio_y': 0.1, 'shaper_freq_y': 0.0}, 'tmc2660 stepper_x': {'cs_pin': 'PD14', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PD6', 'dir_pin': '!PD11', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'EBBCan:gpio24', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2660 stepper_y': {'cs_pin': 'PC9', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PD7', 'dir_pin': '!PD12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'PA2', 'position_endstop': 0.0, 'position_min': -4.0, 'position_max': 225.0, 'homing_speed': 35.0, 'second_homing_speed': 17.5, 'homing_retract_speed': 35.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2660 stepper_z': {'cs_pin': 'PC10', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PD8', 'dir_pin': '!PD13', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -2.5, 'position_max': 230.0, 'homing_speed': 35.0, 'second_homing_speed': 17.5, 'homing_retract_speed': 35.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'adc_temperature my_thermistor': {'resistance1': 1000.0, 'temperature1': 0.0, 'temperature2': 80.0, 'resistance2': 1309.0}, 'tmc2209 extruder': {'uart_pin': 'EBBCan:gpio20', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan:gpio27', 'min_temp': 0.0, 'max_temp': 250.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 21.527, 'pid_ki': 1.063, 'pid_kd': 108.982, 'heater_pin': 'EBBCan:gpio7', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': '!EBBCan:gpio18', 'pressure_advance': 0.065, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'EBBCan:gpio19', 'rotation_distance': 21.63024711, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!EBBCan:gpio17'}, 'filament_switch_sensor extruder': {'switch_pin': 'EBBCan:gpio21', 'pause_on_runout': True, 'runout_gcode': '', 'pause_delay': 0.5, 'event_delay': 3.0}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'thermistor chamber_temp': {'temperature1': 25.0, 'resistance1': 10000.0, 'beta': 3950.0}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PC13', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'watermark', 'max_delta': 2.0, 'heater_pin': '!PA19', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan extruder_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'EBBCan:gpio13', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.25, 'off_below': 0.0, 'cycle_time': 0.08, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'EBBCan:gpio14'}, 'probe': {'z_offset': -1.35, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': '^EBBCan:gpio22', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 3, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.015, 'samples_tolerance_retries': 3}, 'homing_override': {'set_position_z': 0.0, 'axes': 'z', 'gcode': '\nstatus_homing\nG90\nG0 Z5 F500\nG28 X0 Y0\nG0 X150 Y100 F9000\nG28 Z0\nG0 Z5 F500\nstatus_ready'}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [6, 6], 'mesh_min': [25.0, 35.0], 'mesh_max': [225.0, 220.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 150.0, 'fade_start': 1.0, 'fade_end': 10.0, 'fade_target': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[-0.2875, -0.1125, -0.0625, -0.025, 0.1375, -0.1375], [-0.225, -0.1125, -0.0875, 0.0375, 0.1375, 0.2875], [-0.2875, -0.2, -0.0875, -0.0, 0.1375, 0.3], [-0.3375, -0.2, -0.1375, -0.0125, 0.125, 0.275], [-0.3, -0.1625, -0.0625, 0.0375, 0.1875, 0.3375], [-0.2125, -0.075, 0.025, 0.125, 0.275, 0.45]], 'min_x': 25.0, 'max_x': 225.0, 'min_y': 35.0, 'max_y': 220.0, 'x_count': 6, 'y_count': 6, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'bicubic', 'tension': 0.2}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\nM117 Homing...\nM109 S150\nG28 Y0 X0 Z0\n\n\n\n\n\n\n\n\n\n\n\n\nSTATUS_HEATING\nM107\nM117 Heating bed\nM190 S{ params.BED }\nM117 Heating nozzle\nM109 S{target_extruder}\nstatus_ready\nG1 Z15.0 F600\nG1 X125 Y125 F3000\nG92 E0\nG1 F9000\nstatus_printing\nM117 Printing...', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\nstatus_busy\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\n\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y} F3600\nM117 Finished!\nstatus_off', 'description': 'G-Code macro'}, 'force_move': {'enable_force_move': True}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'max_accel_to_decel': 1500.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexz', 'max_z_velocity': 5.0, 'max_z_accel': 100.0}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-03-24 23:46:10,981 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-03-24 23:46:10,984 [printer.py:reinit()] - Klipper version: v0.12.0-114-ga77d0790-dirty
2024-03-24 23:46:10,984 [printer.py:reinit()] - # Extruders: 1
2024-03-24 23:46:10,985 [printer.py:reinit()] - # Temperature devices: 2
2024-03-24 23:46:10,985 [printer.py:reinit()] - # Fans: 2
2024-03-24 23:46:10,986 [printer.py:reinit()] - # Output pins: 0
2024-03-24 23:46:10,986 [printer.py:reinit()] - # Leds: 20
2024-03-24 23:46:10,986 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-03-24 23:46:11,019 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-03-24 23:46:11,023 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor mcu&fan&heater_fan extruder_fan&filament_switch_sensor extruder&neopixel sb_leds
2024-03-24 23:46:11,290 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-03-24 23:46:11,290 [screen.py:init_klipper()] - Printer initialized
2024-03-24 23:46:11,291 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-03-24 23:46:11,291 [printer.py:change_state()] - Adding callback for state: startup
2024-03-24 23:47:41,218 [printer.py:change_state()] - Changing state from 'startup' to 'error'
2024-03-24 23:47:41,218 [printer.py:change_state()] - Adding callback for state: error
2024-03-24 23:47:41,222 [screen.py:show_panel()] - Reinitializing panel
2024-03-24 23:47:41,322 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-03-24 23:48:14,121 [printer.py:change_state()] - Changing state from 'error' to 'disconnected'
2024-03-24 23:48:14,122 [printer.py:change_state()] - Adding callback for state: disconnected
2024-03-24 23:48:14,123 [screen.py:state_disconnected()] - ### Going to disconnected
2024-03-24 23:48:14,123 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-03-24 23:48:14,128 [screen.py:show_panel()] - Reinitializing panel
2024-03-24 23:48:14,247 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-03-24 23:48:17,859 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-03-24 23:48:17,870 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-03-24 23:48:17,880 [printer.py:configure_cameras()] - Cameras: []
2024-03-24 23:48:17,880 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'octoprint_compat', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 3, 'moonraker_version': 'v0.8.0-318-g9813011', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-03-24 23:48:17,881 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-03-24 23:48:17,892 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-03-24 23:48:17,917 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set allow_park = client.park_at_cancel | default(false) | lower == \'true\' %}\n{% set retract = client.cancel_retract | default(5.0) | abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x | default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y | default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x | length > 0 or park_y | length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro | default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set idle_timeout = client.idle_timeout | default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE | default(1) | int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro | default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move | default(velocity) %}\n{% set runout_resume = True if client.runout_sensor | default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state | upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro | default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY | default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}"}, 'neopixel sb_leds': {'pin': 'EBBCan:gpio16', 'chain_count': '3', 'color_order': 'GRB', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0'}, 'led_effect sb_logo_busy': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (1,0,0)'}, 'led_effect sb_logo_cleaning': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.02, 0.5)'}, 'led_effect sb_logo_calibrating_z': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 0.35)'}, 'led_effect sb_logo_heating': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nbreathing  3 1 top (1, 0.18, 0)'}, 'led_effect sb_logo_cooling': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nbreathing  3 1 top (0, 0, 1)'}, 'led_effect sb_logo_homing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.6, 0.2)'}, 'led_effect sb_logo_leveling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.5, 0.1, 0.4)'}, 'led_effect sb_logo_meshing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.2, 1.0, 0.0)'}, 'led_effect sb_logo_printing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.3, 0.3, 0.0),(0.3, 0.1, 0.0)'}, 'led_effect sb_logo_standby': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.01, 0.01, 0.01)'}, 'led_effect sb_logo_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 1.0, 0.0)'}, 'led_effect sb_nozzle_heating': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (1.0, 0.18, 0.0, 0.0)'}, 'led_effect sb_nozzle_cooling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 1.0, 0.1)'}, 'led_effect sb_nozzle_standby': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.6, 0.0, 0.0, 0.0)'}, 'led_effect sb_nozzle_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.6, 1.0, 0.0, 0.1)'}, 'led_effect sb_critical_error': {'leds': '\nneopixel:sb_leds', 'layers': '\nstrobe         1  1.5   add        (1.0,  1.0, 1.0)\nbreathing      2  0     difference (0.95, 0.0, 0.0)\nstatic         1  0     top        (1.0,  0.0, 0.0)', 'autostart': 'false', 'frame_rate': '24', 'run_on_error': 'true'}, 'led_effect rainbow': {'leds': '\nneopixel:sb_leds', 'autostart': 'true', 'frame_rate': '24', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.0, 0.3, 0.0),(0.0, 0.0, 0.3)'}, 'led_effect set_nozzle_leds': {'leds': '\nneopixel:sb_leds (2,3)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nstatic         0  0     top        (0.5,  0.5, 0.5)'}, 'led_effect set_logo_leds': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nstatic         0  0     top        (1.0,  1.0, 1.0)'}, 'gcode_macro set_logo_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds STOP=1'}, 'gcode_macro set_logo_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1'}, 'gcode_macro status_off': {'gcode': '\nSTOP_LED_EFFECTS'}, 'gcode_macro status_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=rainbow'}, 'gcode_macro status_part_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready'}, 'gcode_macro status_busy': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_busy\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_heating\nSET_LED_EFFECT EFFECT=sb_nozzle_heating'}, 'gcode_macro status_cooling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cooling\nSET_LED_EFFECT EFFECT=sb_nozzle_cooling'}, 'gcode_macro status_leveling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_leveling\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_homing\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cleaning\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_meshing\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_calibrating_z\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_printing\nset_nozzle_leds_on'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_sam4e8e_00313753364B37373032303038303139-if00'}, 'mcu EBBCan': {'canbus_uuid': '8250861450f7'}, 'adxl345': {'cs_pin': 'EBBCan:gpio1', 'spi_software_sclk_pin': 'EBBCan:gpio2', 'spi_software_mosi_pin': 'EBBCan:gpio0', 'spi_software_miso_pin': 'EBBCan:gpio3', 'axes_map': 'z,-y,x'}, 'resonance_tester': {'probe_points': '100, 100, 20', 'accel_chip': 'adxl345'}, 'input_shaper': {'shaper_freq_x': '45', 'shaper_type': '3hump_ei'}, 'stepper_x': {'step_pin': 'PD6', 'dir_pin': '!PD11', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'EBBCan:gpio24', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '40'}, 'tmc2660 stepper_x': {'cs_pin': 'PD14', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'stepper_y': {'step_pin': 'PD7', 'dir_pin': '!PD12', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'PA2', 'position_endstop': '0', 'position_max': '225', 'position_min': '-4', 'homing_speed': '35', 'homing_retract_dist': '0'}, 'tmc2660 stepper_y': {'cs_pin': 'PC9', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'stepper_z': {'step_pin': 'PD8', 'dir_pin': '!PD13', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '230', 'position_min': '-2.5', 'homing_speed': '35.0'}, 'tmc2660 stepper_z': {'cs_pin': 'PC10', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'adc_temperature my_thermistor': {'temperature1': '0', 'resistance1': '1000', 'temperature2': '80', 'resistance2': '1309'}, 'extruder': {'step_pin': '!EBBCan:gpio18', 'dir_pin': 'EBBCan:gpio19', 'enable_pin': '!EBBCan:gpio17', 'microsteps': '32', 'rotation_distance': '21.63024711', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'pressure_advance': '0.065', 'pressure_advance_smooth_time': '0.04', 'gear_ratio': '50:10', 'heater_pin': 'EBBCan:gpio7', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'EBBCan:gpio27', 'control': 'pid', 'pid_kp': '21.527', 'pid_ki': '1.063', 'pid_kd': '108.982', 'min_temp': '0', 'max_temp': '250'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan:gpio20', 'run_current': '0.5', 'stealthchop_threshold': '999999'}, 'filament_switch_sensor extruder': {'pause_on_runout': 'True', 'switch_pin': 'EBBCan:gpio21'}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu'}, 'thermistor chamber_temp': {'temperature1': '25', 'resistance1': '10000', 'beta': '3950'}, 'heater_bed': {'heater_pin': '!PA19', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PC13', 'control': 'watermark', 'min_temp': '0', 'max_temp': '120'}, 'heater_fan extruder_fan': {'pin': 'EBBCan:gpio13', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'EBBCan:gpio14', 'cycle_time': '.08', 'kick_start_time': '.25'}, 'probe': {'pin': '^EBBCan:gpio22', 'x_offset': '0', 'y_offset': '0', 'samples': '3', 'samples_result': 'median', 'sample_retract_dist': '3', 'samples_tolerance': '0.015', 'samples_tolerance_retries': '3', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'z_offset': '-1.350'}, 'homing_override': {'axes': 'z', 'set_position_z': '0', 'gcode': '\nstatus_homing\nG90\nG0 Z5 F500\nG28 X0 Y0\nG0 X150 Y100 F9000\nG28 Z0\nG0 Z5 F500\nstatus_ready'}, 'bed_mesh': {'speed': '150', 'horizontal_move_z': '5', 'mesh_min': '25,35.0', 'mesh_max': '225.0,220', 'probe_count': '6,6', 'algorithm': 'bicubic', 'fade_start': '1', 'fade_end': '10', 'fade_target': '0'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\nM117 Homing...\nM109 S150\nG28 Y0 X0 Z0\n\n\n\n\n\n\n\n\n\n\n\n\nSTATUS_HEATING\nM107\nM117 Heating bed\nM190 S{ params.BED }\nM117 Heating nozzle\nM109 S{target_extruder}\nstatus_ready\nG1 Z15.0 F600\nG1 X125 Y125 F3000\nG92 E0\nG1 F9000\nstatus_printing\nM117 Printing...'}, 'gcode_macro PRINT_END': {'gcode': '\nstatus_busy\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\n\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y} F3600\nM117 Finished!\nstatus_off'}, 'printer': {'kinematics': 'corexz', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '5', 'max_z_accel': '100'}, 'force_move': {'enable_force_move': 'true'}, 'exclude_object': {}, 'bed_mesh default': {'version': '1', 'points': '\n-0.287500, -0.112500, -0.062500, -0.025000, 0.137500, -0.137500\n-0.225000, -0.112500, -0.087500, 0.037500, 0.137500, 0.287500\n-0.287500, -0.200000, -0.087500, -0.000000, 0.137500, 0.300000\n-0.337500, -0.200000, -0.137500, -0.012500, 0.125000, 0.275000\n-0.300000, -0.162500, -0.062500, 0.037500, 0.187500, 0.337500\n-0.212500, -0.075000, 0.025000, 0.125000, 0.275000, 0.450000', 'x_count': '6', 'y_count': '6', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'bicubic', 'tension': '0.2', 'min_x': '25.0', 'max_x': '225.0', 'min_y': '35.0', 'max_y': '220.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_sam4e8e_00313753364B37373032303038303139-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu ebbcan': {'canbus_uuid': '8250861450f7', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set allow_park = client.park_at_cancel | default(false) | lower == \'true\' %}\n{% set retract = client.cancel_retract | default(5.0) | abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x | default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y | default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x | length > 0 or park_y | length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro | default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set idle_timeout = client.idle_timeout | default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE | default(1) | int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro | default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move | default(velocity) %}\n{% set runout_resume = True if client.runout_sensor | default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state | upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro | default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY | default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'neopixel sb_leds': {'pin': 'EBBCan:gpio16', 'chain_count': 3, 'color_order': ['GRB'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'led_effect sb_logo_busy': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1,0,0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_cleaning': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.02, 0.5)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_calibrating_z': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 0.35)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1, 0.18, 0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0, 0, 1)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_homing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.6, 0.2)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_leveling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.5, 0.1, 0.4)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_meshing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.2, 1.0, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_printing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.3, 0.3, 0.0),(0.3, 0.1, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_standby': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.01, 0.01, 0.01)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 1.0, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_nozzle_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1.0, 0.18, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 1.0, 0.1)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_standby': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.6, 0.0, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.6, 1.0, 0.0, 0.1)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_critical_error': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': True, 'endstops': '', 'layers': '\nstrobe         1  1.5   add        (1.0,  1.0, 1.0)\nbreathing      2  0     difference (0.95, 0.0, 0.0)\nstatic         1  0     top        (1.0,  0.0, 0.0)', 'leds': '\nneopixel:sb_leds'}, 'led_effect rainbow': {'frame_rate': 24.0, 'autostart': True, 'run_on_error': False, 'endstops': '', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.0, 0.3, 0.0),(0.0, 0.0, 0.3)', 'leds': '\nneopixel:sb_leds'}, 'led_effect set_nozzle_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic         0  0     top        (0.5,  0.5, 0.5)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect set_logo_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic         0  0     top        (1.0,  1.0, 1.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'gcode_macro set_logo_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nSTOP_LED_EFFECTS', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=rainbow', 'description': 'G-Code macro'}, 'gcode_macro status_part_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_busy\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_heating\nSET_LED_EFFECT EFFECT=sb_nozzle_heating', 'description': 'G-Code macro'}, 'gcode_macro status_cooling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cooling\nSET_LED_EFFECT EFFECT=sb_nozzle_cooling', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_leveling\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_homing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cleaning\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_meshing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_calibrating_z\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_printing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'adxl345': {'axes_map': ['z', '-y', 'x'], 'rate': 3200, 'cs_pin': 'EBBCan:gpio1', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'EBBCan:gpio2', 'spi_software_miso_pin': 'EBBCan:gpio3', 'spi_software_mosi_pin': 'EBBCan:gpio0'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[100.0, 100.0, 20.0]], 'accel_chip': 'adxl345'}, 'input_shaper': {'shaper_type': '3hump_ei', 'shaper_type_x': '3hump_ei', 'damping_ratio_x': 0.1, 'shaper_freq_x': 45.0, 'shaper_type_y': '3hump_ei', 'damping_ratio_y': 0.1, 'shaper_freq_y': 0.0}, 'tmc2660 stepper_x': {'cs_pin': 'PD14', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PD6', 'dir_pin': '!PD11', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'EBBCan:gpio24', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2660 stepper_y': {'cs_pin': 'PC9', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PD7', 'dir_pin': '!PD12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'PA2', 'position_endstop': 0.0, 'position_min': -4.0, 'position_max': 225.0, 'homing_speed': 35.0, 'second_homing_speed': 17.5, 'homing_retract_speed': 35.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2660 stepper_z': {'cs_pin': 'PC10', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PD8', 'dir_pin': '!PD13', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -2.5, 'position_max': 230.0, 'homing_speed': 35.0, 'second_homing_speed': 17.5, 'homing_retract_speed': 35.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'adc_temperature my_thermistor': {'resistance1': 1000.0, 'temperature1': 0.0, 'temperature2': 80.0, 'resistance2': 1309.0}, 'tmc2209 extruder': {'uart_pin': 'EBBCan:gpio20', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan:gpio27', 'min_temp': 0.0, 'max_temp': 250.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 21.527, 'pid_ki': 1.063, 'pid_kd': 108.982, 'heater_pin': 'EBBCan:gpio7', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': '!EBBCan:gpio18', 'pressure_advance': 0.065, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'EBBCan:gpio19', 'rotation_distance': 21.63024711, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!EBBCan:gpio17'}, 'filament_switch_sensor extruder': {'switch_pin': 'EBBCan:gpio21', 'pause_on_runout': True, 'runout_gcode': '', 'pause_delay': 0.5, 'event_delay': 3.0}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'thermistor chamber_temp': {'temperature1': 25.0, 'resistance1': 10000.0, 'beta': 3950.0}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PC13', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'watermark', 'max_delta': 2.0, 'heater_pin': '!PA19', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan extruder_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'EBBCan:gpio13', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.25, 'off_below': 0.0, 'cycle_time': 0.08, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'EBBCan:gpio14'}, 'probe': {'z_offset': -1.35, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': '^EBBCan:gpio22', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 3, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.015, 'samples_tolerance_retries': 3}, 'homing_override': {'set_position_z': 0.0, 'axes': 'z', 'gcode': '\nstatus_homing\nG90\nG0 Z5 F500\nG28 X0 Y0\nG0 X150 Y100 F9000\nG28 Z0\nG0 Z5 F500\nstatus_ready'}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [6, 6], 'mesh_min': [25.0, 35.0], 'mesh_max': [225.0, 220.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 150.0, 'fade_start': 1.0, 'fade_end': 10.0, 'fade_target': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[-0.2875, -0.1125, -0.0625, -0.025, 0.1375, -0.1375], [-0.225, -0.1125, -0.0875, 0.0375, 0.1375, 0.2875], [-0.2875, -0.2, -0.0875, -0.0, 0.1375, 0.3], [-0.3375, -0.2, -0.1375, -0.0125, 0.125, 0.275], [-0.3, -0.1625, -0.0625, 0.0375, 0.1875, 0.3375], [-0.2125, -0.075, 0.025, 0.125, 0.275, 0.45]], 'min_x': 25.0, 'max_x': 225.0, 'min_y': 35.0, 'max_y': 220.0, 'x_count': 6, 'y_count': 6, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'bicubic', 'tension': 0.2}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\nM117 Homing...\nM109 S150\nG28 Y0 X0 Z0\n\n\n\n\n\n\n\n\n\n\n\n\nSTATUS_HEATING\nM107\nM117 Heating bed\nM190 S{ params.BED }\nM117 Heating nozzle\nM109 S{target_extruder}\nstatus_ready\nG1 Z15.0 F600\nG1 X125 Y125 F3000\nG92 E0\nG1 F9000\nstatus_printing\nM117 Printing...', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\nstatus_busy\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\n\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y} F3600\nM117 Finished!\nstatus_off', 'description': 'G-Code macro'}, 'force_move': {'enable_force_move': True}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'max_accel_to_decel': 1500.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexz', 'max_z_velocity': 5.0, 'max_z_accel': 100.0}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-03-24 23:48:17,920 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-03-24 23:48:17,922 [printer.py:reinit()] - Klipper version: v0.12.0-114-ga77d0790-dirty
2024-03-24 23:48:17,922 [printer.py:reinit()] - # Extruders: 1
2024-03-24 23:48:17,922 [printer.py:reinit()] - # Temperature devices: 2
2024-03-24 23:48:17,922 [printer.py:reinit()] - # Fans: 2
2024-03-24 23:48:17,922 [printer.py:reinit()] - # Output pins: 0
2024-03-24 23:48:17,922 [printer.py:reinit()] - # Leds: 20
2024-03-24 23:48:17,923 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-03-24 23:48:17,938 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-03-24 23:48:17,940 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor mcu&fan&heater_fan extruder_fan&filament_switch_sensor extruder&neopixel sb_leds
2024-03-24 23:48:18,212 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-03-24 23:48:18,212 [screen.py:init_klipper()] - Printer initialized
2024-03-24 23:48:18,213 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-03-24 23:48:18,213 [printer.py:change_state()] - Adding callback for state: startup
2024-03-24 23:49:47,947 [printer.py:change_state()] - Changing state from 'startup' to 'error'
2024-03-24 23:49:47,948 [printer.py:change_state()] - Adding callback for state: error
2024-03-24 23:49:47,952 [screen.py:show_panel()] - Reinitializing panel
2024-03-24 23:49:48,041 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-03-25 00:04:41,858 [screen.py:show_screensaver()] - Showing Screensaver
                                                                              2024-03-28 19:02:21,437 [functions.py:log_start()] - --------------------KlipperScreen Log Start--------------------
2024-03-28 19:02:21,437 [functions.py:log_start()] - KlipperScreen Version: v0.3.9-50-gdaed9a0
2024-03-28 19:02:21,437 [functions.py:log_start()] - Python version: 3.11
2024-03-28 19:02:21,706 [config.py:get_config_file_location()] - Passed config (-c): .
2024-03-28 19:02:21,707 [config.py:__init__()] - Config path location: /home/pi/printer_data/config/KlipperScreen.conf
2024-03-28 19:02:21,748 [config.py:log_config()] -  ===== Config File =====

=======================
2024-03-28 19:02:21,750 [config.py:__init__()] - ====== Saved Def ======

[main]
use_dpms = False
print_sort_dir = date_desc

=======================
2024-03-28 19:02:21,751 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2024-03-28 19:02:21,898 [config.py:create_translations()] - Selected lang: None OS lang: en_GB
2024-03-28 19:02:21,899 [config.py:install_language()] - Using lang en
2024-03-28 19:02:21,928 [screen.py:__init__()] - Monitors: 1 using number: 0
2024-03-28 19:02:21,930 [screen.py:__init__()] - Wayland: False Display name: :100
2024-03-28 19:02:21,932 [screen.py:__init__()] - Screen resolution: 984x540
2024-03-28 19:02:21,934 [KlippyGtk.py:__init__()] - Font size: 18.6 (medium)
2024-03-28 19:02:23,316 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2024-03-28 19:02:23,316 [screen.py:set_screenblanking_timeout()] - Not using DPMS
2024-03-28 19:02:23,325 [screen.py:initial_connection()] - Default printer: None
2024-03-28 19:02:23,393 [screen.py:connect_printer()] - Connecting to printer: Printer
2024-03-28 19:02:23,393 [screen.py:_load_panel()] - Loading panel: splash_screen
2024-03-28 19:02:23,491 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-03-28 19:02:23,509 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-03-28 19:02:23,509 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-03-28 19:02:23,535 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/access/oneshot_token
2024-03-28 19:02:23,548 [KlippyWebsocket.py:connect()] - Starting websocket thread
2024-03-28 19:02:23,558 [_logging.py:info()] - Websocket connected
2024-03-28 19:02:23,559 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2024-03-28 19:02:23,581 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-03-28 19:02:23,593 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-03-28 19:02:23,607 [printer.py:configure_cameras()] - Cameras: []
2024-03-28 19:02:23,608 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'ready', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'update_manager', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-318-g9813011', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-03-28 19:02:23,608 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-03-28 19:02:23,621 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-03-28 19:02:23,866 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set allow_park = client.park_at_cancel | default(false) | lower == \'true\' %}\n{% set retract = client.cancel_retract | default(5.0) | abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x | default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y | default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x | length > 0 or park_y | length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro | default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set idle_timeout = client.idle_timeout | default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE | default(1) | int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro | default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move | default(velocity) %}\n{% set runout_resume = True if client.runout_sensor | default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state | upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro | default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY | default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}"}, 'neopixel sb_leds': {'pin': 'EBBCan:gpio16', 'chain_count': '3', 'color_order': 'GRB', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0'}, 'led_effect sb_logo_busy': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (1,0,0)'}, 'led_effect sb_logo_cleaning': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.02, 0.5)'}, 'led_effect sb_logo_calibrating_z': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 0.35)'}, 'led_effect sb_logo_heating': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nbreathing  3 1 top (1, 0.18, 0)'}, 'led_effect sb_logo_cooling': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nbreathing  3 1 top (0, 0, 1)'}, 'led_effect sb_logo_homing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.6, 0.2)'}, 'led_effect sb_logo_leveling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.5, 0.1, 0.4)'}, 'led_effect sb_logo_meshing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.2, 1.0, 0.0)'}, 'led_effect sb_logo_printing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.3, 0.3, 0.0),(0.3, 0.1, 0.0)'}, 'led_effect sb_logo_standby': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.01, 0.01, 0.01)'}, 'led_effect sb_logo_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 1.0, 0.0)'}, 'led_effect sb_nozzle_heating': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (1.0, 0.18, 0.0, 0.0)'}, 'led_effect sb_nozzle_cooling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 1.0, 0.1)'}, 'led_effect sb_nozzle_standby': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.6, 0.0, 0.0, 0.0)'}, 'led_effect sb_nozzle_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.6, 1.0, 0.0, 0.1)'}, 'led_effect sb_critical_error': {'leds': '\nneopixel:sb_leds', 'layers': '\nstrobe         1  1.5   add        (1.0,  1.0, 1.0)\nbreathing      2  0     difference (0.95, 0.0, 0.0)\nstatic         1  0     top        (1.0,  0.0, 0.0)', 'autostart': 'false', 'frame_rate': '24', 'run_on_error': 'true'}, 'led_effect rainbow': {'leds': '\nneopixel:sb_leds', 'autostart': 'true', 'frame_rate': '24', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.0, 0.3, 0.0),(0.0, 0.0, 0.3)'}, 'led_effect set_nozzle_leds': {'leds': '\nneopixel:sb_leds (2,3)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nstatic         0  0     top        (0.5,  0.5, 0.5)'}, 'led_effect set_logo_leds': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nstatic         0  0     top        (1.0,  1.0, 1.0)'}, 'gcode_macro set_logo_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds STOP=1'}, 'gcode_macro set_logo_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1'}, 'gcode_macro status_off': {'gcode': '\nSTOP_LED_EFFECTS'}, 'gcode_macro status_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=rainbow'}, 'gcode_macro status_part_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready'}, 'gcode_macro status_busy': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_busy\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_heating\nSET_LED_EFFECT EFFECT=sb_nozzle_heating'}, 'gcode_macro status_cooling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cooling\nSET_LED_EFFECT EFFECT=sb_nozzle_cooling'}, 'gcode_macro status_leveling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_leveling\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_homing\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cleaning\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_meshing\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_calibrating_z\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_printing\nset_nozzle_leds_on'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_sam4e8e_00313753364B37373032303038303139-if00'}, 'mcu EBBCan': {'canbus_uuid': '8250861450f7'}, 'adxl345': {'cs_pin': 'EBBCan:gpio1', 'spi_software_sclk_pin': 'EBBCan:gpio2', 'spi_software_mosi_pin': 'EBBCan:gpio0', 'spi_software_miso_pin': 'EBBCan:gpio3', 'axes_map': 'z,-y,x'}, 'resonance_tester': {'probe_points': '100, 100, 20', 'accel_chip': 'adxl345'}, 'input_shaper': {'shaper_freq_x': '45', 'shaper_type': '3hump_ei'}, 'stepper_x': {'step_pin': 'PD6', 'dir_pin': '!PD11', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'EBBCan:gpio24', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '40'}, 'tmc2660 stepper_x': {'cs_pin': 'PD14', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'stepper_y': {'step_pin': 'PD7', 'dir_pin': '!PD12', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'PA2', 'position_endstop': '0', 'position_max': '225', 'position_min': '-4', 'homing_speed': '35', 'homing_retract_dist': '0'}, 'tmc2660 stepper_y': {'cs_pin': 'PC9', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'stepper_z': {'step_pin': 'PD8', 'dir_pin': '!PD13', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '230', 'position_min': '-2.5', 'homing_speed': '35.0'}, 'tmc2660 stepper_z': {'cs_pin': 'PC10', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'adc_temperature my_thermistor': {'temperature1': '0', 'resistance1': '1000', 'temperature2': '80', 'resistance2': '1309'}, 'extruder': {'step_pin': '!EBBCan:gpio18', 'dir_pin': 'EBBCan:gpio19', 'enable_pin': '!EBBCan:gpio17', 'microsteps': '32', 'rotation_distance': '21.63024711', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'pressure_advance': '0.065', 'pressure_advance_smooth_time': '0.02', 'gear_ratio': '50:10', 'heater_pin': 'EBBCan:gpio7', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'EBBCan:gpio27', 'control': 'pid', 'pid_kp': '21.527', 'pid_ki': '1.063', 'pid_kd': '108.982', 'min_temp': '0', 'max_temp': '250'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan:gpio20', 'run_current': '0.5', 'stealthchop_threshold': '999999'}, 'filament_switch_sensor extruder': {'pause_on_runout': 'True', 'switch_pin': 'EBBCan:gpio21'}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu'}, 'thermistor chamber_temp': {'temperature1': '25', 'resistance1': '10000', 'beta': '3950'}, 'heater_bed': {'heater_pin': '!PA19', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PC13', 'control': 'watermark', 'min_temp': '0', 'max_temp': '120'}, 'heater_fan extruder_fan': {'pin': 'EBBCan:gpio13', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'EBBCan:gpio14', 'cycle_time': '.08', 'kick_start_time': '.25'}, 'probe': {'pin': '^EBBCan:gpio22', 'x_offset': '0', 'y_offset': '0', 'samples': '3', 'samples_result': 'median', 'sample_retract_dist': '3', 'samples_tolerance': '0.015', 'samples_tolerance_retries': '3', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'z_offset': '-1.350'}, 'homing_override': {'axes': 'z', 'set_position_z': '0', 'gcode': '\nstatus_homing\nG90\nG0 Z5 F500\nG28 X0 Y0\nG0 X150 Y100 F9000\nG28 Z0\nG0 Z5 F500\nstatus_ready'}, 'bed_mesh': {'speed': '150', 'horizontal_move_z': '5', 'mesh_min': '25,35.0', 'mesh_max': '225.0,220', 'probe_count': '6,6', 'algorithm': 'bicubic', 'fade_start': '1', 'fade_end': '10', 'fade_target': '0'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\nM117 Homing...\nM109 S150\nG28 Y0 X0 Z0\n\n\n\n\n\n\n\n\n\n\n\n\nSTATUS_HEATING\nM107\nM117 Heating bed\nM190 S{ params.BED }\nM117 Heating nozzle\nM109 S{target_extruder}\nstatus_ready\nG1 Z15.0 F600\nG1 X125 Y125 F3000\nG92 E0\nG1 F9000\nstatus_printing\nM117 Printing...'}, 'gcode_macro PRINT_END': {'gcode': '\nstatus_busy\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\n\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y} F3600\nM117 Finished!\nstatus_off'}, 'printer': {'kinematics': 'corexz', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '5', 'max_z_accel': '100'}, 'force_move': {'enable_force_move': 'true'}, 'exclude_object': {}, 'bed_mesh default': {'version': '1', 'points': '\n-0.287500, -0.112500, -0.062500, -0.025000, 0.137500, -0.137500\n-0.225000, -0.112500, -0.087500, 0.037500, 0.137500, 0.287500\n-0.287500, -0.200000, -0.087500, -0.000000, 0.137500, 0.300000\n-0.337500, -0.200000, -0.137500, -0.012500, 0.125000, 0.275000\n-0.300000, -0.162500, -0.062500, 0.037500, 0.187500, 0.337500\n-0.212500, -0.075000, 0.025000, 0.125000, 0.275000, 0.450000', 'x_count': '6', 'y_count': '6', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'bicubic', 'tension': '0.2', 'min_x': '25.0', 'max_x': '225.0', 'min_y': '35.0', 'max_y': '220.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_sam4e8e_00313753364B37373032303038303139-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu ebbcan': {'canbus_uuid': '8250861450f7', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set allow_park = client.park_at_cancel | default(false) | lower == \'true\' %}\n{% set retract = client.cancel_retract | default(5.0) | abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x | default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y | default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x | length > 0 or park_y | length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro | default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set idle_timeout = client.idle_timeout | default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE | default(1) | int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro | default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move | default(velocity) %}\n{% set runout_resume = True if client.runout_sensor | default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state | upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro | default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY | default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'neopixel sb_leds': {'pin': 'EBBCan:gpio16', 'chain_count': 3, 'color_order': ['GRB'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'led_effect sb_logo_busy': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1,0,0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_cleaning': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.02, 0.5)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_calibrating_z': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 0.35)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1, 0.18, 0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0, 0, 1)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_homing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.6, 0.2)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_leveling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.5, 0.1, 0.4)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_meshing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.2, 1.0, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_printing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.3, 0.3, 0.0),(0.3, 0.1, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_standby': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.01, 0.01, 0.01)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 1.0, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_nozzle_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1.0, 0.18, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 1.0, 0.1)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_standby': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.6, 0.0, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.6, 1.0, 0.0, 0.1)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_critical_error': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': True, 'endstops': '', 'layers': '\nstrobe         1  1.5   add        (1.0,  1.0, 1.0)\nbreathing      2  0     difference (0.95, 0.0, 0.0)\nstatic         1  0     top        (1.0,  0.0, 0.0)', 'leds': '\nneopixel:sb_leds'}, 'led_effect rainbow': {'frame_rate': 24.0, 'autostart': True, 'run_on_error': False, 'endstops': '', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.0, 0.3, 0.0),(0.0, 0.0, 0.3)', 'leds': '\nneopixel:sb_leds'}, 'led_effect set_nozzle_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic         0  0     top        (0.5,  0.5, 0.5)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect set_logo_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic         0  0     top        (1.0,  1.0, 1.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'gcode_macro set_logo_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nSTOP_LED_EFFECTS', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=rainbow', 'description': 'G-Code macro'}, 'gcode_macro status_part_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_busy\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_heating\nSET_LED_EFFECT EFFECT=sb_nozzle_heating', 'description': 'G-Code macro'}, 'gcode_macro status_cooling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cooling\nSET_LED_EFFECT EFFECT=sb_nozzle_cooling', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_leveling\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_homing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cleaning\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_meshing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_calibrating_z\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_printing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'adxl345': {'axes_map': ['z', '-y', 'x'], 'rate': 3200, 'cs_pin': 'EBBCan:gpio1', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'EBBCan:gpio2', 'spi_software_miso_pin': 'EBBCan:gpio3', 'spi_software_mosi_pin': 'EBBCan:gpio0'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[100.0, 100.0, 20.0]], 'accel_chip': 'adxl345'}, 'input_shaper': {'shaper_type': '3hump_ei', 'shaper_type_x': '3hump_ei', 'damping_ratio_x': 0.1, 'shaper_freq_x': 45.0, 'shaper_type_y': '3hump_ei', 'damping_ratio_y': 0.1, 'shaper_freq_y': 0.0}, 'tmc2660 stepper_x': {'cs_pin': 'PD14', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PD6', 'dir_pin': '!PD11', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'EBBCan:gpio24', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2660 stepper_y': {'cs_pin': 'PC9', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PD7', 'dir_pin': '!PD12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'PA2', 'position_endstop': 0.0, 'position_min': -4.0, 'position_max': 225.0, 'homing_speed': 35.0, 'second_homing_speed': 17.5, 'homing_retract_speed': 35.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2660 stepper_z': {'cs_pin': 'PC10', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PD8', 'dir_pin': '!PD13', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -2.5, 'position_max': 230.0, 'homing_speed': 35.0, 'second_homing_speed': 17.5, 'homing_retract_speed': 35.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'adc_temperature my_thermistor': {'resistance1': 1000.0, 'temperature1': 0.0, 'temperature2': 80.0, 'resistance2': 1309.0}, 'tmc2209 extruder': {'uart_pin': 'EBBCan:gpio20', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan:gpio27', 'min_temp': 0.0, 'max_temp': 250.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 21.527, 'pid_ki': 1.063, 'pid_kd': 108.982, 'heater_pin': 'EBBCan:gpio7', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': '!EBBCan:gpio18', 'pressure_advance': 0.065, 'pressure_advance_smooth_time': 0.02, 'dir_pin': 'EBBCan:gpio19', 'rotation_distance': 21.63024711, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!EBBCan:gpio17'}, 'filament_switch_sensor extruder': {'switch_pin': 'EBBCan:gpio21', 'pause_on_runout': True, 'runout_gcode': '', 'pause_delay': 0.5, 'event_delay': 3.0}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'thermistor chamber_temp': {'temperature1': 25.0, 'resistance1': 10000.0, 'beta': 3950.0}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PC13', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'watermark', 'max_delta': 2.0, 'heater_pin': '!PA19', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan extruder_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'EBBCan:gpio13', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.25, 'off_below': 0.0, 'cycle_time': 0.08, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'EBBCan:gpio14'}, 'probe': {'z_offset': -1.35, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': '^EBBCan:gpio22', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 3, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.015, 'samples_tolerance_retries': 3}, 'homing_override': {'set_position_z': 0.0, 'axes': 'z', 'gcode': '\nstatus_homing\nG90\nG0 Z5 F500\nG28 X0 Y0\nG0 X150 Y100 F9000\nG28 Z0\nG0 Z5 F500\nstatus_ready'}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [6, 6], 'mesh_min': [25.0, 35.0], 'mesh_max': [225.0, 220.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 150.0, 'fade_start': 1.0, 'fade_end': 10.0, 'fade_target': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[-0.2875, -0.1125, -0.0625, -0.025, 0.1375, -0.1375], [-0.225, -0.1125, -0.0875, 0.0375, 0.1375, 0.2875], [-0.2875, -0.2, -0.0875, -0.0, 0.1375, 0.3], [-0.3375, -0.2, -0.1375, -0.0125, 0.125, 0.275], [-0.3, -0.1625, -0.0625, 0.0375, 0.1875, 0.3375], [-0.2125, -0.075, 0.025, 0.125, 0.275, 0.45]], 'min_x': 25.0, 'max_x': 225.0, 'min_y': 35.0, 'max_y': 220.0, 'x_count': 6, 'y_count': 6, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'bicubic', 'tension': 0.2}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\nM117 Homing...\nM109 S150\nG28 Y0 X0 Z0\n\n\n\n\n\n\n\n\n\n\n\n\nSTATUS_HEATING\nM107\nM117 Heating bed\nM190 S{ params.BED }\nM117 Heating nozzle\nM109 S{target_extruder}\nstatus_ready\nG1 Z15.0 F600\nG1 X125 Y125 F3000\nG92 E0\nG1 F9000\nstatus_printing\nM117 Printing...', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\nstatus_busy\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\n\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y} F3600\nM117 Finished!\nstatus_off', 'description': 'G-Code macro'}, 'force_move': {'enable_force_move': True}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'max_accel_to_decel': 1500.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexz', 'max_z_velocity': 5.0, 'max_z_accel': 100.0}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-03-28 19:02:23,869 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-03-28 19:02:23,871 [printer.py:reinit()] - Klipper version: v0.12.0-114-ga77d0790-dirty
2024-03-28 19:02:23,871 [printer.py:reinit()] - # Extruders: 1
2024-03-28 19:02:23,871 [printer.py:reinit()] - # Temperature devices: 2
2024-03-28 19:02:23,872 [printer.py:reinit()] - # Fans: 2
2024-03-28 19:02:23,872 [printer.py:reinit()] - # Output pins: 0
2024-03-28 19:02:23,872 [printer.py:reinit()] - # Leds: 20
2024-03-28 19:02:23,872 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-03-28 19:02:23,889 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-03-28 19:02:23,892 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor mcu&fan&heater_fan extruder_fan&filament_switch_sensor extruder&neopixel sb_leds
2024-03-28 19:02:24,169 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-03-28 19:02:24,170 [screen.py:init_klipper()] - Printer initialized
2024-03-28 19:02:24,170 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2024-03-28 19:02:24,170 [printer.py:change_state()] - Adding callback for state: ready
2024-03-28 19:02:24,304 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-03-28 19:02:24,309 [screen.py:_load_panel()] - Loading panel: main_menu
2024-03-28 19:02:24,449 [main_menu.py:__init__()] - ### Making MainMenu
2024-03-28 19:02:24,465 [main_menu.py:add_device()] - Adding device: extruder
2024-03-28 19:02:24,662 [main_menu.py:add_device()] - Adding device: heater_bed
2024-03-28 19:02:24,728 [main_menu.py:add_device()] - Adding device: temperature_sensor mcu
2024-03-28 19:02:24,779 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-03-28 19:02:24,781 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-03-28 19:02:24,812 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor mcu', 'heater_bed', 'extruder']
2024-03-28 19:02:24,815 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-03-28 19:02:24,827 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-03-28 19:08:28,898 [KlippyGtk.py:Dialog()] - Showing dialog Updating (width=984, height=540)
2024-03-28 19:24:35,351 [printer.py:change_state()] - Changing state from 'ready' to 'shutdown'
2024-03-28 19:24:35,351 [printer.py:change_state()] - Adding callback for state: shutdown
2024-03-28 19:24:35,392 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-03-28 19:24:35,395 [screen.py:show_panel()] - Reinitializing panel
2024-03-28 19:24:38,269 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-03-28 19:28:56,625 [printer.py:change_state()] - Changing state from 'shutdown' to 'disconnected'
2024-03-28 19:28:56,625 [printer.py:change_state()] - Adding callback for state: disconnected
2024-03-28 19:28:58,353 [screen.py:state_disconnected()] - ### Going to disconnected
2024-03-28 19:28:58,353 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-03-28 19:28:58,356 [screen.py:show_panel()] - Reinitializing panel
2024-03-28 19:28:58,426 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-03-28 19:29:02,364 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-03-28 19:29:02,374 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-03-28 19:29:02,384 [printer.py:configure_cameras()] - Cameras: []
2024-03-28 19:29:02,385 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'update_manager', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-318-g9813011', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-03-28 19:29:02,385 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-03-28 19:29:06,398 [KlippyRest.py:_do_request()] - host=127.0.0.1, port=7125>>Read timed out. read timeout=4
2024-03-28 19:29:09,856 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-03-28 19:29:09,869 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-03-28 19:29:09,879 [printer.py:configure_cameras()] - Cameras: []
2024-03-28 19:29:09,879 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'update_manager', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-318-g9813011', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-03-28 19:29:09,880 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-03-28 19:29:13,892 [KlippyRest.py:_do_request()] - host=127.0.0.1, port=7125>>Read timed out. read timeout=4
2024-03-28 19:29:16,857 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-03-28 19:29:16,867 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-03-28 19:29:16,877 [printer.py:configure_cameras()] - Cameras: []
2024-03-28 19:29:16,878 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'update_manager', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-318-g9813011', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-03-28 19:29:16,878 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-03-28 19:29:20,888 [KlippyRest.py:_do_request()] - host=127.0.0.1, port=7125>>Read timed out. read timeout=4
2024-03-28 19:29:23,857 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-03-28 19:29:23,873 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-03-28 19:29:23,890 [printer.py:configure_cameras()] - Cameras: []
2024-03-28 19:29:23,891 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'update_manager', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-318-g9813011', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-03-28 19:29:23,891 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-03-28 19:29:27,905 [KlippyRest.py:_do_request()] - host=127.0.0.1, port=7125>>Read timed out. read timeout=4
2024-03-28 19:29:30,857 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-03-28 19:29:30,868 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-03-28 19:29:30,883 [printer.py:configure_cameras()] - Cameras: []
2024-03-28 19:29:30,883 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'update_manager', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-318-g9813011', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-03-28 19:29:30,883 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-03-28 19:29:31,046 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-03-28 19:29:31,114 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set allow_park = client.park_at_cancel | default(false) | lower == \'true\' %}\n{% set retract = client.cancel_retract | default(5.0) | abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x | default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y | default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x | length > 0 or park_y | length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro | default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set idle_timeout = client.idle_timeout | default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE | default(1) | int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro | default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move | default(velocity) %}\n{% set runout_resume = True if client.runout_sensor | default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state | upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro | default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY | default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}"}, 'neopixel sb_leds': {'pin': 'EBBCan:gpio16', 'chain_count': '3', 'color_order': 'GRB', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0'}, 'led_effect sb_logo_busy': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (1,0,0)'}, 'led_effect sb_logo_cleaning': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.02, 0.5)'}, 'led_effect sb_logo_calibrating_z': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 0.35)'}, 'led_effect sb_logo_heating': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nbreathing  3 1 top (1, 0.18, 0)'}, 'led_effect sb_logo_cooling': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nbreathing  3 1 top (0, 0, 1)'}, 'led_effect sb_logo_homing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.6, 0.2)'}, 'led_effect sb_logo_leveling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.5, 0.1, 0.4)'}, 'led_effect sb_logo_meshing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.2, 1.0, 0.0)'}, 'led_effect sb_logo_printing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.3, 0.3, 0.0),(0.3, 0.1, 0.0)'}, 'led_effect sb_logo_standby': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.01, 0.01, 0.01)'}, 'led_effect sb_logo_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 1.0, 0.0)'}, 'led_effect sb_nozzle_heating': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (1.0, 0.18, 0.0, 0.0)'}, 'led_effect sb_nozzle_cooling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 1.0, 0.1)'}, 'led_effect sb_nozzle_standby': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.6, 0.0, 0.0, 0.0)'}, 'led_effect sb_nozzle_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.6, 1.0, 0.0, 0.1)'}, 'led_effect sb_critical_error': {'leds': '\nneopixel:sb_leds', 'layers': '\nstrobe         1  1.5   add        (1.0,  1.0, 1.0)\nbreathing      2  0     difference (0.95, 0.0, 0.0)\nstatic         1  0     top        (1.0,  0.0, 0.0)', 'autostart': 'false', 'frame_rate': '24', 'run_on_error': 'true'}, 'led_effect rainbow': {'leds': '\nneopixel:sb_leds', 'autostart': 'true', 'frame_rate': '24', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.0, 0.3, 0.0),(0.0, 0.0, 0.3)'}, 'led_effect set_nozzle_leds': {'leds': '\nneopixel:sb_leds (2,3)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nstatic         0  0     top        (0.5,  0.5, 0.5)'}, 'led_effect set_logo_leds': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nstatic         0  0     top        (1.0,  1.0, 1.0)'}, 'gcode_macro set_logo_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds STOP=1'}, 'gcode_macro set_logo_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1'}, 'gcode_macro status_off': {'gcode': '\nSTOP_LED_EFFECTS'}, 'gcode_macro status_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=rainbow'}, 'gcode_macro status_part_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready'}, 'gcode_macro status_busy': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_busy\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_heating\nSET_LED_EFFECT EFFECT=sb_nozzle_heating'}, 'gcode_macro status_cooling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cooling\nSET_LED_EFFECT EFFECT=sb_nozzle_cooling'}, 'gcode_macro status_leveling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_leveling\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_homing\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cleaning\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_meshing\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_calibrating_z\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_printing\nset_nozzle_leds_on'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_sam4e8e_00313753364B37373032303038303139-if00'}, 'mcu EBBCan': {'canbus_uuid': '8250861450f7'}, 'adxl345': {'cs_pin': 'EBBCan:gpio1', 'spi_software_sclk_pin': 'EBBCan:gpio2', 'spi_software_mosi_pin': 'EBBCan:gpio0', 'spi_software_miso_pin': 'EBBCan:gpio3', 'axes_map': 'z,-y,x'}, 'resonance_tester': {'probe_points': '100, 100, 20', 'accel_chip': 'adxl345'}, 'input_shaper': {'shaper_freq_x': '45', 'shaper_type': '3hump_ei'}, 'stepper_x': {'step_pin': 'PD6', 'dir_pin': '!PD11', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'EBBCan:gpio24', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '40'}, 'tmc2660 stepper_x': {'cs_pin': 'PD14', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'stepper_y': {'step_pin': 'PD7', 'dir_pin': '!PD12', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'PA2', 'position_endstop': '0', 'position_max': '225', 'position_min': '-4', 'homing_speed': '35', 'homing_retract_dist': '0'}, 'tmc2660 stepper_y': {'cs_pin': 'PC9', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'stepper_z': {'step_pin': 'PD8', 'dir_pin': '!PD13', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '230', 'position_min': '-2.5', 'homing_speed': '35.0'}, 'tmc2660 stepper_z': {'cs_pin': 'PC10', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'adc_temperature my_thermistor': {'temperature1': '0', 'resistance1': '1000', 'temperature2': '80', 'resistance2': '1309'}, 'extruder': {'step_pin': '!EBBCan:gpio18', 'dir_pin': 'EBBCan:gpio19', 'enable_pin': '!EBBCan:gpio17', 'microsteps': '32', 'rotation_distance': '21.63024711', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'pressure_advance': '0.065', 'pressure_advance_smooth_time': '0.02', 'gear_ratio': '50:10', 'heater_pin': 'EBBCan:gpio7', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'EBBCan:gpio27', 'control': 'pid', 'pid_kp': '21.527', 'pid_ki': '1.063', 'pid_kd': '108.982', 'min_temp': '0', 'max_temp': '250'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan:gpio20', 'run_current': '0.5', 'stealthchop_threshold': '999999'}, 'filament_switch_sensor extruder': {'pause_on_runout': 'True', 'switch_pin': 'EBBCan:gpio21'}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu'}, 'thermistor chamber_temp': {'temperature1': '25', 'resistance1': '10000', 'beta': '3950'}, 'heater_bed': {'heater_pin': '!PA19', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PC13', 'control': 'watermark', 'min_temp': '0', 'max_temp': '120'}, 'heater_fan extruder_fan': {'pin': 'EBBCan:gpio13', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'EBBCan:gpio14', 'cycle_time': '.08', 'kick_start_time': '.25'}, 'probe': {'pin': '^EBBCan:gpio22', 'x_offset': '0', 'y_offset': '0', 'samples': '3', 'samples_result': 'median', 'sample_retract_dist': '3', 'samples_tolerance': '0.015', 'samples_tolerance_retries': '3', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'z_offset': '-1.350'}, 'homing_override': {'axes': 'z', 'set_position_z': '0', 'gcode': '\nstatus_homing\nG90\nG0 Z5 F500\nG28 X0 Y0\nG0 X150 Y100 F9000\nG28 Z0\nG0 Z5 F500\nstatus_ready'}, 'bed_mesh': {'speed': '150', 'horizontal_move_z': '5', 'mesh_min': '25,35.0', 'mesh_max': '225.0,220', 'probe_count': '6,6', 'algorithm': 'bicubic', 'fade_start': '1', 'fade_end': '10', 'fade_target': '0'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\nM117 Homing...\nM109 S150\nG28 Y0 X0 Z0\n\n\n\n\n\n\n\n\n\n\n\n\nSTATUS_HEATING\nM107\nM117 Heating bed\nM190 S{ params.BED }\nM117 Heating nozzle\nM109 S{target_extruder}\nstatus_ready\nG1 Z15.0 F600\nG1 X125 Y125 F3000\nG92 E0\nG1 F9000\nstatus_printing\nM117 Printing...'}, 'gcode_macro PRINT_END': {'gcode': '\nstatus_busy\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\n\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y} F3600\nM117 Finished!\nstatus_off'}, 'printer': {'kinematics': 'corexz', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '5', 'max_z_accel': '100'}, 'force_move': {'enable_force_move': 'true'}, 'exclude_object': {}, 'bed_mesh default': {'version': '1', 'points': '\n-0.287500, -0.112500, -0.062500, -0.025000, 0.137500, -0.137500\n-0.225000, -0.112500, -0.087500, 0.037500, 0.137500, 0.287500\n-0.287500, -0.200000, -0.087500, -0.000000, 0.137500, 0.300000\n-0.337500, -0.200000, -0.137500, -0.012500, 0.125000, 0.275000\n-0.300000, -0.162500, -0.062500, 0.037500, 0.187500, 0.337500\n-0.212500, -0.075000, 0.025000, 0.125000, 0.275000, 0.450000', 'x_count': '6', 'y_count': '6', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'bicubic', 'tension': '0.2', 'min_x': '25.0', 'max_x': '225.0', 'min_y': '35.0', 'max_y': '220.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_sam4e8e_00313753364B37373032303038303139-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu ebbcan': {'canbus_uuid': '8250861450f7', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set allow_park = client.park_at_cancel | default(false) | lower == \'true\' %}\n{% set retract = client.cancel_retract | default(5.0) | abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x | default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y | default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x | length > 0 or park_y | length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro | default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set idle_timeout = client.idle_timeout | default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE | default(1) | int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro | default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move | default(velocity) %}\n{% set runout_resume = True if client.runout_sensor | default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state | upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro | default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY | default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'neopixel sb_leds': {'pin': 'EBBCan:gpio16', 'chain_count': 3, 'color_order': ['GRB'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'led_effect sb_logo_busy': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1,0,0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_cleaning': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.02, 0.5)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_calibrating_z': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 0.35)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1, 0.18, 0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0, 0, 1)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_homing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.6, 0.2)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_leveling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.5, 0.1, 0.4)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_meshing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.2, 1.0, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_printing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.3, 0.3, 0.0),(0.3, 0.1, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_standby': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.01, 0.01, 0.01)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 1.0, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_nozzle_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1.0, 0.18, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 1.0, 0.1)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_standby': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.6, 0.0, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.6, 1.0, 0.0, 0.1)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_critical_error': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': True, 'endstops': '', 'layers': '\nstrobe         1  1.5   add        (1.0,  1.0, 1.0)\nbreathing      2  0     difference (0.95, 0.0, 0.0)\nstatic         1  0     top        (1.0,  0.0, 0.0)', 'leds': '\nneopixel:sb_leds'}, 'led_effect rainbow': {'frame_rate': 24.0, 'autostart': True, 'run_on_error': False, 'endstops': '', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.0, 0.3, 0.0),(0.0, 0.0, 0.3)', 'leds': '\nneopixel:sb_leds'}, 'led_effect set_nozzle_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic         0  0     top        (0.5,  0.5, 0.5)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect set_logo_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic         0  0     top        (1.0,  1.0, 1.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'gcode_macro set_logo_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nSTOP_LED_EFFECTS', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=rainbow', 'description': 'G-Code macro'}, 'gcode_macro status_part_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_busy\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_heating\nSET_LED_EFFECT EFFECT=sb_nozzle_heating', 'description': 'G-Code macro'}, 'gcode_macro status_cooling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cooling\nSET_LED_EFFECT EFFECT=sb_nozzle_cooling', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_leveling\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_homing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cleaning\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_meshing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_calibrating_z\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_printing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'adxl345': {'axes_map': ['z', '-y', 'x'], 'rate': 3200, 'cs_pin': 'EBBCan:gpio1', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'EBBCan:gpio2', 'spi_software_miso_pin': 'EBBCan:gpio3', 'spi_software_mosi_pin': 'EBBCan:gpio0'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[100.0, 100.0, 20.0]], 'accel_chip': 'adxl345'}, 'input_shaper': {'shaper_type': '3hump_ei', 'shaper_type_x': '3hump_ei', 'damping_ratio_x': 0.1, 'shaper_freq_x': 45.0, 'shaper_type_y': '3hump_ei', 'damping_ratio_y': 0.1, 'shaper_freq_y': 0.0}, 'tmc2660 stepper_x': {'cs_pin': 'PD14', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PD6', 'dir_pin': '!PD11', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'EBBCan:gpio24', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2660 stepper_y': {'cs_pin': 'PC9', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PD7', 'dir_pin': '!PD12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'PA2', 'position_endstop': 0.0, 'position_min': -4.0, 'position_max': 225.0, 'homing_speed': 35.0, 'second_homing_speed': 17.5, 'homing_retract_speed': 35.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2660 stepper_z': {'cs_pin': 'PC10', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PD8', 'dir_pin': '!PD13', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -2.5, 'position_max': 230.0, 'homing_speed': 35.0, 'second_homing_speed': 17.5, 'homing_retract_speed': 35.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'adc_temperature my_thermistor': {'resistance1': 1000.0, 'temperature1': 0.0, 'temperature2': 80.0, 'resistance2': 1309.0}, 'tmc2209 extruder': {'uart_pin': 'EBBCan:gpio20', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan:gpio27', 'min_temp': 0.0, 'max_temp': 250.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 21.527, 'pid_ki': 1.063, 'pid_kd': 108.982, 'heater_pin': 'EBBCan:gpio7', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': '!EBBCan:gpio18', 'pressure_advance': 0.065, 'pressure_advance_smooth_time': 0.02, 'dir_pin': 'EBBCan:gpio19', 'rotation_distance': 21.63024711, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!EBBCan:gpio17'}, 'filament_switch_sensor extruder': {'switch_pin': 'EBBCan:gpio21', 'pause_on_runout': True, 'runout_gcode': '', 'pause_delay': 0.5, 'event_delay': 3.0}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'thermistor chamber_temp': {'temperature1': 25.0, 'resistance1': 10000.0, 'beta': 3950.0}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PC13', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'watermark', 'max_delta': 2.0, 'heater_pin': '!PA19', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan extruder_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'EBBCan:gpio13', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.25, 'off_below': 0.0, 'cycle_time': 0.08, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'EBBCan:gpio14'}, 'probe': {'z_offset': -1.35, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': '^EBBCan:gpio22', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 3, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.015, 'samples_tolerance_retries': 3}, 'homing_override': {'set_position_z': 0.0, 'axes': 'z', 'gcode': '\nstatus_homing\nG90\nG0 Z5 F500\nG28 X0 Y0\nG0 X150 Y100 F9000\nG28 Z0\nG0 Z5 F500\nstatus_ready'}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [6, 6], 'mesh_min': [25.0, 35.0], 'mesh_max': [225.0, 220.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 150.0, 'fade_start': 1.0, 'fade_end': 10.0, 'fade_target': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[-0.2875, -0.1125, -0.0625, -0.025, 0.1375, -0.1375], [-0.225, -0.1125, -0.0875, 0.0375, 0.1375, 0.2875], [-0.2875, -0.2, -0.0875, -0.0, 0.1375, 0.3], [-0.3375, -0.2, -0.1375, -0.0125, 0.125, 0.275], [-0.3, -0.1625, -0.0625, 0.0375, 0.1875, 0.3375], [-0.2125, -0.075, 0.025, 0.125, 0.275, 0.45]], 'min_x': 25.0, 'max_x': 225.0, 'min_y': 35.0, 'max_y': 220.0, 'x_count': 6, 'y_count': 6, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'bicubic', 'tension': 0.2}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\nM117 Homing...\nM109 S150\nG28 Y0 X0 Z0\n\n\n\n\n\n\n\n\n\n\n\n\nSTATUS_HEATING\nM107\nM117 Heating bed\nM190 S{ params.BED }\nM117 Heating nozzle\nM109 S{target_extruder}\nstatus_ready\nG1 Z15.0 F600\nG1 X125 Y125 F3000\nG92 E0\nG1 F9000\nstatus_printing\nM117 Printing...', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\nstatus_busy\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\n\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y} F3600\nM117 Finished!\nstatus_off', 'description': 'G-Code macro'}, 'force_move': {'enable_force_move': True}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexz', 'max_z_velocity': 5.0, 'max_z_accel': 100.0}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-03-28 19:29:31,117 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-03-28 19:29:31,119 [printer.py:reinit()] - Klipper version: v0.12.0-132-ge37b007f-dirty
2024-03-28 19:29:31,119 [printer.py:reinit()] - # Extruders: 1
2024-03-28 19:29:31,119 [printer.py:reinit()] - # Temperature devices: 2
2024-03-28 19:29:31,119 [printer.py:reinit()] - # Fans: 2
2024-03-28 19:29:31,120 [printer.py:reinit()] - # Output pins: 0
2024-03-28 19:29:31,120 [printer.py:reinit()] - # Leds: 20
2024-03-28 19:29:31,120 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-03-28 19:29:31,136 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-03-28 19:29:31,138 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor mcu&fan&heater_fan extruder_fan&filament_switch_sensor extruder&neopixel sb_leds
2024-03-28 19:29:31,411 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-03-28 19:29:31,411 [screen.py:init_klipper()] - Printer initialized
2024-03-28 19:29:31,411 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-03-28 19:29:31,412 [printer.py:change_state()] - Adding callback for state: startup
2024-03-28 19:29:33,974 [KlippyWebsocket.py:on_close()] - Server Shutdown
2024-03-28 19:29:33,981 [KlippyWebsocket.py:on_close()] - Moonraker Websocket Closed
2024-03-28 19:29:36,702 [base_panel.py:process_update()] - Update complete
2024-03-28 19:29:36,705 [screen.py:websocket_disconnected()] - ### websocket_disconnected
2024-03-28 19:29:36,708 [screen.py:show_panel()] - Reinitializing panel
2024-03-28 19:29:36,845 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-03-28 19:29:36,995 [screen.py:connect_printer()] - Connecting to printer: Printer
2024-03-28 19:29:36,998 [screen.py:show_panel()] - Reinitializing panel
2024-03-28 19:29:37,133 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-03-28 19:29:37,179 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-03-28 19:29:37,180 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-03-28 19:29:37,190 [KlippyRest.py:_do_request()] - host=127.0.0.1, port=7125>>Max retries exceeded with url>>Failed to establish a new connection>>[Errno 111] Connection refused
2024-03-28 19:29:47,857 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-03-28 19:29:47,858 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-03-28 19:29:47,870 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/access/oneshot_token
2024-03-28 19:29:47,882 [KlippyWebsocket.py:connect()] - Starting websocket thread
2024-03-28 19:29:47,892 [_logging.py:info()] - Websocket connected
2024-03-28 19:29:47,892 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2024-03-28 19:29:47,893 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-03-28 19:29:47,904 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-03-28 19:29:47,914 [printer.py:configure_cameras()] - Cameras: []
2024-03-28 19:29:47,914 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'octoprint_compat', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-03-28 19:29:47,915 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-03-28 19:29:47,926 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-03-28 19:29:47,950 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set allow_park = client.park_at_cancel | default(false) | lower == \'true\' %}\n{% set retract = client.cancel_retract | default(5.0) | abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x | default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y | default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x | length > 0 or park_y | length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro | default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set idle_timeout = client.idle_timeout | default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE | default(1) | int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro | default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move | default(velocity) %}\n{% set runout_resume = True if client.runout_sensor | default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state | upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro | default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY | default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}"}, 'neopixel sb_leds': {'pin': 'EBBCan:gpio16', 'chain_count': '3', 'color_order': 'GRB', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0'}, 'led_effect sb_logo_busy': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (1,0,0)'}, 'led_effect sb_logo_cleaning': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.02, 0.5)'}, 'led_effect sb_logo_calibrating_z': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 0.35)'}, 'led_effect sb_logo_heating': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nbreathing  3 1 top (1, 0.18, 0)'}, 'led_effect sb_logo_cooling': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nbreathing  3 1 top (0, 0, 1)'}, 'led_effect sb_logo_homing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.6, 0.2)'}, 'led_effect sb_logo_leveling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.5, 0.1, 0.4)'}, 'led_effect sb_logo_meshing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.2, 1.0, 0.0)'}, 'led_effect sb_logo_printing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.3, 0.3, 0.0),(0.3, 0.1, 0.0)'}, 'led_effect sb_logo_standby': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.01, 0.01, 0.01)'}, 'led_effect sb_logo_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 1.0, 0.0)'}, 'led_effect sb_nozzle_heating': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (1.0, 0.18, 0.0, 0.0)'}, 'led_effect sb_nozzle_cooling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 1.0, 0.1)'}, 'led_effect sb_nozzle_standby': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.6, 0.0, 0.0, 0.0)'}, 'led_effect sb_nozzle_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.6, 1.0, 0.0, 0.1)'}, 'led_effect sb_critical_error': {'leds': '\nneopixel:sb_leds', 'layers': '\nstrobe         1  1.5   add        (1.0,  1.0, 1.0)\nbreathing      2  0     difference (0.95, 0.0, 0.0)\nstatic         1  0     top        (1.0,  0.0, 0.0)', 'autostart': 'false', 'frame_rate': '24', 'run_on_error': 'true'}, 'led_effect rainbow': {'leds': '\nneopixel:sb_leds', 'autostart': 'true', 'frame_rate': '24', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.0, 0.3, 0.0),(0.0, 0.0, 0.3)'}, 'led_effect set_nozzle_leds': {'leds': '\nneopixel:sb_leds (2,3)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nstatic         0  0     top        (0.5,  0.5, 0.5)'}, 'led_effect set_logo_leds': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nstatic         0  0     top        (1.0,  1.0, 1.0)'}, 'gcode_macro set_logo_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds STOP=1'}, 'gcode_macro set_logo_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1'}, 'gcode_macro status_off': {'gcode': '\nSTOP_LED_EFFECTS'}, 'gcode_macro status_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=rainbow'}, 'gcode_macro status_part_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready'}, 'gcode_macro status_busy': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_busy\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_heating\nSET_LED_EFFECT EFFECT=sb_nozzle_heating'}, 'gcode_macro status_cooling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cooling\nSET_LED_EFFECT EFFECT=sb_nozzle_cooling'}, 'gcode_macro status_leveling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_leveling\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_homing\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cleaning\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_meshing\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_calibrating_z\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_printing\nset_nozzle_leds_on'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_sam4e8e_00313753364B37373032303038303139-if00'}, 'mcu EBBCan': {'canbus_uuid': '8250861450f7'}, 'adxl345': {'cs_pin': 'EBBCan:gpio1', 'spi_software_sclk_pin': 'EBBCan:gpio2', 'spi_software_mosi_pin': 'EBBCan:gpio0', 'spi_software_miso_pin': 'EBBCan:gpio3', 'axes_map': 'z,-y,x'}, 'resonance_tester': {'probe_points': '100, 100, 20', 'accel_chip': 'adxl345'}, 'input_shaper': {'shaper_freq_x': '45', 'shaper_type': '3hump_ei'}, 'stepper_x': {'step_pin': 'PD6', 'dir_pin': '!PD11', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'EBBCan:gpio24', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '40'}, 'tmc2660 stepper_x': {'cs_pin': 'PD14', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'stepper_y': {'step_pin': 'PD7', 'dir_pin': '!PD12', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'PA2', 'position_endstop': '0', 'position_max': '225', 'position_min': '-4', 'homing_speed': '35', 'homing_retract_dist': '0'}, 'tmc2660 stepper_y': {'cs_pin': 'PC9', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'stepper_z': {'step_pin': 'PD8', 'dir_pin': '!PD13', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '230', 'position_min': '-2.5', 'homing_speed': '35.0'}, 'tmc2660 stepper_z': {'cs_pin': 'PC10', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'adc_temperature my_thermistor': {'temperature1': '0', 'resistance1': '1000', 'temperature2': '80', 'resistance2': '1309'}, 'extruder': {'step_pin': '!EBBCan:gpio18', 'dir_pin': 'EBBCan:gpio19', 'enable_pin': '!EBBCan:gpio17', 'microsteps': '32', 'rotation_distance': '21.63024711', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'pressure_advance': '0.065', 'pressure_advance_smooth_time': '0.02', 'gear_ratio': '50:10', 'heater_pin': 'EBBCan:gpio7', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'EBBCan:gpio27', 'control': 'pid', 'pid_kp': '21.527', 'pid_ki': '1.063', 'pid_kd': '108.982', 'min_temp': '0', 'max_temp': '250'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan:gpio20', 'run_current': '0.5', 'stealthchop_threshold': '999999'}, 'filament_switch_sensor extruder': {'pause_on_runout': 'True', 'switch_pin': 'EBBCan:gpio21'}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu'}, 'thermistor chamber_temp': {'temperature1': '25', 'resistance1': '10000', 'beta': '3950'}, 'heater_bed': {'heater_pin': '!PA19', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PC13', 'control': 'watermark', 'min_temp': '0', 'max_temp': '120'}, 'heater_fan extruder_fan': {'pin': 'EBBCan:gpio13', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'EBBCan:gpio14', 'cycle_time': '.08', 'kick_start_time': '.25'}, 'probe': {'pin': '^EBBCan:gpio22', 'x_offset': '0', 'y_offset': '0', 'samples': '3', 'samples_result': 'median', 'sample_retract_dist': '3', 'samples_tolerance': '0.015', 'samples_tolerance_retries': '3', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'z_offset': '-1.350'}, 'homing_override': {'axes': 'z', 'set_position_z': '0', 'gcode': '\nstatus_homing\nG90\nG0 Z5 F500\nG28 X0 Y0\nG0 X150 Y100 F9000\nG28 Z0\nG0 Z5 F500\nstatus_ready'}, 'bed_mesh': {'speed': '150', 'horizontal_move_z': '5', 'mesh_min': '25,35.0', 'mesh_max': '225.0,220', 'probe_count': '6,6', 'algorithm': 'bicubic', 'fade_start': '1', 'fade_end': '10', 'fade_target': '0'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\nM117 Homing...\nM109 S150\nG28 Y0 X0 Z0\n\n\n\n\n\n\n\n\n\n\n\n\nSTATUS_HEATING\nM107\nM117 Heating bed\nM190 S{ params.BED }\nM117 Heating nozzle\nM109 S{target_extruder}\nstatus_ready\nG1 Z15.0 F600\nG1 X125 Y125 F3000\nG92 E0\nG1 F9000\nstatus_printing\nM117 Printing...'}, 'gcode_macro PRINT_END': {'gcode': '\nstatus_busy\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\n\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y} F3600\nM117 Finished!\nstatus_off'}, 'printer': {'kinematics': 'corexz', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '5', 'max_z_accel': '100'}, 'force_move': {'enable_force_move': 'true'}, 'exclude_object': {}, 'bed_mesh default': {'version': '1', 'points': '\n-0.287500, -0.112500, -0.062500, -0.025000, 0.137500, -0.137500\n-0.225000, -0.112500, -0.087500, 0.037500, 0.137500, 0.287500\n-0.287500, -0.200000, -0.087500, -0.000000, 0.137500, 0.300000\n-0.337500, -0.200000, -0.137500, -0.012500, 0.125000, 0.275000\n-0.300000, -0.162500, -0.062500, 0.037500, 0.187500, 0.337500\n-0.212500, -0.075000, 0.025000, 0.125000, 0.275000, 0.450000', 'x_count': '6', 'y_count': '6', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'bicubic', 'tension': '0.2', 'min_x': '25.0', 'max_x': '225.0', 'min_y': '35.0', 'max_y': '220.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_sam4e8e_00313753364B37373032303038303139-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu ebbcan': {'canbus_uuid': '8250861450f7', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set allow_park = client.park_at_cancel | default(false) | lower == \'true\' %}\n{% set retract = client.cancel_retract | default(5.0) | abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x | default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y | default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x | length > 0 or park_y | length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro | default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set idle_timeout = client.idle_timeout | default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE | default(1) | int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro | default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move | default(velocity) %}\n{% set runout_resume = True if client.runout_sensor | default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state | upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro | default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY | default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'neopixel sb_leds': {'pin': 'EBBCan:gpio16', 'chain_count': 3, 'color_order': ['GRB'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'led_effect sb_logo_busy': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1,0,0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_cleaning': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.02, 0.5)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_calibrating_z': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 0.35)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1, 0.18, 0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0, 0, 1)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_homing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.6, 0.2)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_leveling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.5, 0.1, 0.4)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_meshing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.2, 1.0, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_printing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.3, 0.3, 0.0),(0.3, 0.1, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_standby': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.01, 0.01, 0.01)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 1.0, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_nozzle_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1.0, 0.18, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 1.0, 0.1)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_standby': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.6, 0.0, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.6, 1.0, 0.0, 0.1)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_critical_error': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': True, 'endstops': '', 'layers': '\nstrobe         1  1.5   add        (1.0,  1.0, 1.0)\nbreathing      2  0     difference (0.95, 0.0, 0.0)\nstatic         1  0     top        (1.0,  0.0, 0.0)', 'leds': '\nneopixel:sb_leds'}, 'led_effect rainbow': {'frame_rate': 24.0, 'autostart': True, 'run_on_error': False, 'endstops': '', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.0, 0.3, 0.0),(0.0, 0.0, 0.3)', 'leds': '\nneopixel:sb_leds'}, 'led_effect set_nozzle_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic         0  0     top        (0.5,  0.5, 0.5)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect set_logo_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic         0  0     top        (1.0,  1.0, 1.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'gcode_macro set_logo_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nSTOP_LED_EFFECTS', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=rainbow', 'description': 'G-Code macro'}, 'gcode_macro status_part_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_busy\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_heating\nSET_LED_EFFECT EFFECT=sb_nozzle_heating', 'description': 'G-Code macro'}, 'gcode_macro status_cooling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cooling\nSET_LED_EFFECT EFFECT=sb_nozzle_cooling', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_leveling\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_homing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cleaning\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_meshing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_calibrating_z\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_printing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'adxl345': {'axes_map': ['z', '-y', 'x'], 'rate': 3200, 'cs_pin': 'EBBCan:gpio1', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'EBBCan:gpio2', 'spi_software_miso_pin': 'EBBCan:gpio3', 'spi_software_mosi_pin': 'EBBCan:gpio0'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[100.0, 100.0, 20.0]], 'accel_chip': 'adxl345'}, 'input_shaper': {'shaper_type': '3hump_ei', 'shaper_type_x': '3hump_ei', 'damping_ratio_x': 0.1, 'shaper_freq_x': 45.0, 'shaper_type_y': '3hump_ei', 'damping_ratio_y': 0.1, 'shaper_freq_y': 0.0}, 'tmc2660 stepper_x': {'cs_pin': 'PD14', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PD6', 'dir_pin': '!PD11', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'EBBCan:gpio24', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2660 stepper_y': {'cs_pin': 'PC9', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PD7', 'dir_pin': '!PD12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'PA2', 'position_endstop': 0.0, 'position_min': -4.0, 'position_max': 225.0, 'homing_speed': 35.0, 'second_homing_speed': 17.5, 'homing_retract_speed': 35.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2660 stepper_z': {'cs_pin': 'PC10', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PD8', 'dir_pin': '!PD13', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -2.5, 'position_max': 230.0, 'homing_speed': 35.0, 'second_homing_speed': 17.5, 'homing_retract_speed': 35.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'adc_temperature my_thermistor': {'resistance1': 1000.0, 'temperature1': 0.0, 'temperature2': 80.0, 'resistance2': 1309.0}, 'tmc2209 extruder': {'uart_pin': 'EBBCan:gpio20', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan:gpio27', 'min_temp': 0.0, 'max_temp': 250.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 21.527, 'pid_ki': 1.063, 'pid_kd': 108.982, 'heater_pin': 'EBBCan:gpio7', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': '!EBBCan:gpio18', 'pressure_advance': 0.065, 'pressure_advance_smooth_time': 0.02, 'dir_pin': 'EBBCan:gpio19', 'rotation_distance': 21.63024711, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!EBBCan:gpio17'}, 'filament_switch_sensor extruder': {'switch_pin': 'EBBCan:gpio21', 'pause_on_runout': True, 'runout_gcode': '', 'pause_delay': 0.5, 'event_delay': 3.0}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'thermistor chamber_temp': {'temperature1': 25.0, 'resistance1': 10000.0, 'beta': 3950.0}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PC13', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'watermark', 'max_delta': 2.0, 'heater_pin': '!PA19', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan extruder_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'EBBCan:gpio13', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.25, 'off_below': 0.0, 'cycle_time': 0.08, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'EBBCan:gpio14'}, 'probe': {'z_offset': -1.35, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': '^EBBCan:gpio22', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 3, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.015, 'samples_tolerance_retries': 3}, 'homing_override': {'set_position_z': 0.0, 'axes': 'z', 'gcode': '\nstatus_homing\nG90\nG0 Z5 F500\nG28 X0 Y0\nG0 X150 Y100 F9000\nG28 Z0\nG0 Z5 F500\nstatus_ready'}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [6, 6], 'mesh_min': [25.0, 35.0], 'mesh_max': [225.0, 220.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 150.0, 'fade_start': 1.0, 'fade_end': 10.0, 'fade_target': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[-0.2875, -0.1125, -0.0625, -0.025, 0.1375, -0.1375], [-0.225, -0.1125, -0.0875, 0.0375, 0.1375, 0.2875], [-0.2875, -0.2, -0.0875, -0.0, 0.1375, 0.3], [-0.3375, -0.2, -0.1375, -0.0125, 0.125, 0.275], [-0.3, -0.1625, -0.0625, 0.0375, 0.1875, 0.3375], [-0.2125, -0.075, 0.025, 0.125, 0.275, 0.45]], 'min_x': 25.0, 'max_x': 225.0, 'min_y': 35.0, 'max_y': 220.0, 'x_count': 6, 'y_count': 6, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'bicubic', 'tension': 0.2}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\nM117 Homing...\nM109 S150\nG28 Y0 X0 Z0\n\n\n\n\n\n\n\n\n\n\n\n\nSTATUS_HEATING\nM107\nM117 Heating bed\nM190 S{ params.BED }\nM117 Heating nozzle\nM109 S{target_extruder}\nstatus_ready\nG1 Z15.0 F600\nG1 X125 Y125 F3000\nG92 E0\nG1 F9000\nstatus_printing\nM117 Printing...', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\nstatus_busy\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\n\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y} F3600\nM117 Finished!\nstatus_off', 'description': 'G-Code macro'}, 'force_move': {'enable_force_move': True}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexz', 'max_z_velocity': 5.0, 'max_z_accel': 100.0}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-03-28 19:29:47,954 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-03-28 19:29:47,955 [printer.py:reinit()] - Klipper version: v0.12.0-132-ge37b007f-dirty
2024-03-28 19:29:47,955 [printer.py:reinit()] - # Extruders: 1
2024-03-28 19:29:47,955 [printer.py:reinit()] - # Temperature devices: 2
2024-03-28 19:29:47,956 [printer.py:reinit()] - # Fans: 2
2024-03-28 19:29:47,956 [printer.py:reinit()] - # Output pins: 0
2024-03-28 19:29:47,956 [printer.py:reinit()] - # Leds: 20
2024-03-28 19:29:47,956 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-03-28 19:29:47,970 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-03-28 19:29:47,972 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor mcu&fan&heater_fan extruder_fan&filament_switch_sensor extruder&neopixel sb_leds
2024-03-28 19:29:48,245 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-03-28 19:29:48,245 [screen.py:init_klipper()] - Printer initialized
2024-03-28 19:29:48,245 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-03-28 19:29:48,246 [printer.py:change_state()] - Adding callback for state: startup
2024-03-28 19:31:01,333 [printer.py:change_state()] - Changing state from 'startup' to 'error'
2024-03-28 19:31:01,334 [printer.py:change_state()] - Adding callback for state: error
2024-03-28 19:31:01,339 [screen.py:show_panel()] - Reinitializing panel
2024-03-28 19:31:01,444 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-03-28 19:34:00,642 [printer.py:change_state()] - Changing state from 'error' to 'disconnected'
2024-03-28 19:34:00,643 [printer.py:change_state()] - Adding callback for state: disconnected
2024-03-28 19:34:00,644 [screen.py:state_disconnected()] - ### Going to disconnected
2024-03-28 19:34:00,644 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-03-28 19:34:00,646 [screen.py:show_panel()] - Reinitializing panel
2024-03-28 19:34:00,741 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-03-28 19:34:03,857 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-03-28 19:34:03,868 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-03-28 19:34:03,878 [printer.py:configure_cameras()] - Cameras: []
2024-03-28 19:34:03,879 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'octoprint_compat', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-03-28 19:34:03,879 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-03-28 19:34:03,891 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-03-28 19:34:03,915 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set allow_park = client.park_at_cancel | default(false) | lower == \'true\' %}\n{% set retract = client.cancel_retract | default(5.0) | abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x | default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y | default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x | length > 0 or park_y | length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro | default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set idle_timeout = client.idle_timeout | default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE | default(1) | int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro | default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move | default(velocity) %}\n{% set runout_resume = True if client.runout_sensor | default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state | upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro | default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY | default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}"}, 'neopixel sb_leds': {'pin': 'EBBCan:gpio16', 'chain_count': '3', 'color_order': 'GRB', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0'}, 'led_effect sb_logo_busy': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (1,0,0)'}, 'led_effect sb_logo_cleaning': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.02, 0.5)'}, 'led_effect sb_logo_calibrating_z': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 0.35)'}, 'led_effect sb_logo_heating': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nbreathing  3 1 top (1, 0.18, 0)'}, 'led_effect sb_logo_cooling': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nbreathing  3 1 top (0, 0, 1)'}, 'led_effect sb_logo_homing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.6, 0.2)'}, 'led_effect sb_logo_leveling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.5, 0.1, 0.4)'}, 'led_effect sb_logo_meshing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.2, 1.0, 0.0)'}, 'led_effect sb_logo_printing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.3, 0.3, 0.0),(0.3, 0.1, 0.0)'}, 'led_effect sb_logo_standby': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.01, 0.01, 0.01)'}, 'led_effect sb_logo_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 1.0, 0.0)'}, 'led_effect sb_nozzle_heating': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (1.0, 0.18, 0.0, 0.0)'}, 'led_effect sb_nozzle_cooling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 1.0, 0.1)'}, 'led_effect sb_nozzle_standby': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.6, 0.0, 0.0, 0.0)'}, 'led_effect sb_nozzle_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.6, 1.0, 0.0, 0.1)'}, 'led_effect sb_critical_error': {'leds': '\nneopixel:sb_leds', 'layers': '\nstrobe         1  1.5   add        (1.0,  1.0, 1.0)\nbreathing      2  0     difference (0.95, 0.0, 0.0)\nstatic         1  0     top        (1.0,  0.0, 0.0)', 'autostart': 'false', 'frame_rate': '24', 'run_on_error': 'true'}, 'led_effect rainbow': {'leds': '\nneopixel:sb_leds', 'autostart': 'true', 'frame_rate': '24', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.0, 0.3, 0.0),(0.0, 0.0, 0.3)'}, 'led_effect set_nozzle_leds': {'leds': '\nneopixel:sb_leds (2,3)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nstatic         0  0     top        (0.5,  0.5, 0.5)'}, 'led_effect set_logo_leds': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nstatic         0  0     top        (1.0,  1.0, 1.0)'}, 'gcode_macro set_logo_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds STOP=1'}, 'gcode_macro set_logo_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1'}, 'gcode_macro status_off': {'gcode': '\nSTOP_LED_EFFECTS'}, 'gcode_macro status_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=rainbow'}, 'gcode_macro status_part_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready'}, 'gcode_macro status_busy': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_busy\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_heating\nSET_LED_EFFECT EFFECT=sb_nozzle_heating'}, 'gcode_macro status_cooling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cooling\nSET_LED_EFFECT EFFECT=sb_nozzle_cooling'}, 'gcode_macro status_leveling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_leveling\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_homing\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cleaning\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_meshing\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_calibrating_z\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_printing\nset_nozzle_leds_on'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_sam4e8e_00313753364B37373032303038303139-if00'}, 'mcu EBBCan': {'canbus_uuid': '8250861450f7'}, 'adxl345': {'cs_pin': 'EBBCan:gpio1', 'spi_software_sclk_pin': 'EBBCan:gpio2', 'spi_software_mosi_pin': 'EBBCan:gpio0', 'spi_software_miso_pin': 'EBBCan:gpio3', 'axes_map': 'z,-y,x'}, 'resonance_tester': {'probe_points': '100, 100, 20', 'accel_chip': 'adxl345'}, 'input_shaper': {'shaper_freq_x': '45', 'shaper_type': '3hump_ei'}, 'stepper_x': {'step_pin': 'PD6', 'dir_pin': '!PD11', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'EBBCan:gpio24', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '40'}, 'tmc2660 stepper_x': {'cs_pin': 'PD14', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'stepper_y': {'step_pin': 'PD7', 'dir_pin': '!PD12', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'PA2', 'position_endstop': '0', 'position_max': '225', 'position_min': '-4', 'homing_speed': '35', 'homing_retract_dist': '0'}, 'tmc2660 stepper_y': {'cs_pin': 'PC9', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'stepper_z': {'step_pin': 'PD8', 'dir_pin': '!PD13', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '230', 'position_min': '-2.5', 'homing_speed': '35.0'}, 'tmc2660 stepper_z': {'cs_pin': 'PC10', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'adc_temperature my_thermistor': {'temperature1': '0', 'resistance1': '1000', 'temperature2': '80', 'resistance2': '1309'}, 'extruder': {'step_pin': '!EBBCan:gpio18', 'dir_pin': 'EBBCan:gpio19', 'enable_pin': '!EBBCan:gpio17', 'microsteps': '32', 'rotation_distance': '21.63024711', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'pressure_advance': '0.065', 'pressure_advance_smooth_time': '0.02', 'gear_ratio': '50:10', 'heater_pin': 'EBBCan:gpio7', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'EBBCan:gpio27', 'control': 'pid', 'pid_kp': '21.527', 'pid_ki': '1.063', 'pid_kd': '108.982', 'min_temp': '0', 'max_temp': '250'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan:gpio20', 'run_current': '0.5', 'stealthchop_threshold': '999999'}, 'filament_switch_sensor extruder': {'pause_on_runout': 'True', 'switch_pin': 'EBBCan:gpio21'}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu'}, 'thermistor chamber_temp': {'temperature1': '25', 'resistance1': '10000', 'beta': '3950'}, 'heater_bed': {'heater_pin': '!PA19', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PC13', 'control': 'watermark', 'min_temp': '0', 'max_temp': '120'}, 'heater_fan extruder_fan': {'pin': 'EBBCan:gpio13', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'EBBCan:gpio14', 'cycle_time': '.08', 'kick_start_time': '.25'}, 'probe': {'pin': '^EBBCan:gpio22', 'x_offset': '0', 'y_offset': '0', 'samples': '3', 'samples_result': 'median', 'sample_retract_dist': '3', 'samples_tolerance': '0.015', 'samples_tolerance_retries': '3', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'z_offset': '-1.350'}, 'homing_override': {'axes': 'z', 'set_position_z': '0', 'gcode': '\nstatus_homing\nG90\nG0 Z5 F500\nG28 X0 Y0\nG0 X150 Y100 F9000\nG28 Z0\nG0 Z5 F500\nstatus_ready'}, 'bed_mesh': {'speed': '150', 'horizontal_move_z': '5', 'mesh_min': '25,35.0', 'mesh_max': '225.0,220', 'probe_count': '6,6', 'algorithm': 'bicubic', 'fade_start': '1', 'fade_end': '10', 'fade_target': '0'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\nM117 Homing...\nM109 S150\nG28 Y0 X0 Z0\n\n\n\n\n\n\n\n\n\n\n\n\nSTATUS_HEATING\nM107\nM117 Heating bed\nM190 S{ params.BED }\nM117 Heating nozzle\nM109 S{target_extruder}\nstatus_ready\nG1 Z15.0 F600\nG1 X125 Y125 F3000\nG92 E0\nG1 F9000\nstatus_printing\nM117 Printing...'}, 'gcode_macro PRINT_END': {'gcode': '\nstatus_busy\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\n\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y} F3600\nM117 Finished!\nstatus_off'}, 'printer': {'kinematics': 'corexz', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '5', 'max_z_accel': '100'}, 'force_move': {'enable_force_move': 'true'}, 'exclude_object': {}, 'bed_mesh default': {'version': '1', 'points': '\n-0.287500, -0.112500, -0.062500, -0.025000, 0.137500, -0.137500\n-0.225000, -0.112500, -0.087500, 0.037500, 0.137500, 0.287500\n-0.287500, -0.200000, -0.087500, -0.000000, 0.137500, 0.300000\n-0.337500, -0.200000, -0.137500, -0.012500, 0.125000, 0.275000\n-0.300000, -0.162500, -0.062500, 0.037500, 0.187500, 0.337500\n-0.212500, -0.075000, 0.025000, 0.125000, 0.275000, 0.450000', 'x_count': '6', 'y_count': '6', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'bicubic', 'tension': '0.2', 'min_x': '25.0', 'max_x': '225.0', 'min_y': '35.0', 'max_y': '220.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_sam4e8e_00313753364B37373032303038303139-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu ebbcan': {'canbus_uuid': '8250861450f7', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set allow_park = client.park_at_cancel | default(false) | lower == \'true\' %}\n{% set retract = client.cancel_retract | default(5.0) | abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x | default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y | default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x | length > 0 or park_y | length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro | default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set idle_timeout = client.idle_timeout | default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE | default(1) | int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro | default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move | default(velocity) %}\n{% set runout_resume = True if client.runout_sensor | default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state | upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro | default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY | default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'neopixel sb_leds': {'pin': 'EBBCan:gpio16', 'chain_count': 3, 'color_order': ['GRB'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'led_effect sb_logo_busy': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1,0,0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_cleaning': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.02, 0.5)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_calibrating_z': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 0.35)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1, 0.18, 0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0, 0, 1)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_homing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.6, 0.2)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_leveling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.5, 0.1, 0.4)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_meshing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.2, 1.0, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_printing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.3, 0.3, 0.0),(0.3, 0.1, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_standby': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.01, 0.01, 0.01)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 1.0, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_nozzle_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1.0, 0.18, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 1.0, 0.1)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_standby': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.6, 0.0, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.6, 1.0, 0.0, 0.1)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_critical_error': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': True, 'endstops': '', 'layers': '\nstrobe         1  1.5   add        (1.0,  1.0, 1.0)\nbreathing      2  0     difference (0.95, 0.0, 0.0)\nstatic         1  0     top        (1.0,  0.0, 0.0)', 'leds': '\nneopixel:sb_leds'}, 'led_effect rainbow': {'frame_rate': 24.0, 'autostart': True, 'run_on_error': False, 'endstops': '', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.0, 0.3, 0.0),(0.0, 0.0, 0.3)', 'leds': '\nneopixel:sb_leds'}, 'led_effect set_nozzle_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic         0  0     top        (0.5,  0.5, 0.5)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect set_logo_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic         0  0     top        (1.0,  1.0, 1.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'gcode_macro set_logo_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nSTOP_LED_EFFECTS', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=rainbow', 'description': 'G-Code macro'}, 'gcode_macro status_part_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_busy\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_heating\nSET_LED_EFFECT EFFECT=sb_nozzle_heating', 'description': 'G-Code macro'}, 'gcode_macro status_cooling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cooling\nSET_LED_EFFECT EFFECT=sb_nozzle_cooling', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_leveling\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_homing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cleaning\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_meshing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_calibrating_z\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_printing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'adxl345': {'axes_map': ['z', '-y', 'x'], 'rate': 3200, 'cs_pin': 'EBBCan:gpio1', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'EBBCan:gpio2', 'spi_software_miso_pin': 'EBBCan:gpio3', 'spi_software_mosi_pin': 'EBBCan:gpio0'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[100.0, 100.0, 20.0]], 'accel_chip': 'adxl345'}, 'input_shaper': {'shaper_type': '3hump_ei', 'shaper_type_x': '3hump_ei', 'damping_ratio_x': 0.1, 'shaper_freq_x': 45.0, 'shaper_type_y': '3hump_ei', 'damping_ratio_y': 0.1, 'shaper_freq_y': 0.0}, 'tmc2660 stepper_x': {'cs_pin': 'PD14', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PD6', 'dir_pin': '!PD11', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'EBBCan:gpio24', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2660 stepper_y': {'cs_pin': 'PC9', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PD7', 'dir_pin': '!PD12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'PA2', 'position_endstop': 0.0, 'position_min': -4.0, 'position_max': 225.0, 'homing_speed': 35.0, 'second_homing_speed': 17.5, 'homing_retract_speed': 35.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2660 stepper_z': {'cs_pin': 'PC10', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PD8', 'dir_pin': '!PD13', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -2.5, 'position_max': 230.0, 'homing_speed': 35.0, 'second_homing_speed': 17.5, 'homing_retract_speed': 35.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'adc_temperature my_thermistor': {'resistance1': 1000.0, 'temperature1': 0.0, 'temperature2': 80.0, 'resistance2': 1309.0}, 'tmc2209 extruder': {'uart_pin': 'EBBCan:gpio20', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan:gpio27', 'min_temp': 0.0, 'max_temp': 250.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 21.527, 'pid_ki': 1.063, 'pid_kd': 108.982, 'heater_pin': 'EBBCan:gpio7', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': '!EBBCan:gpio18', 'pressure_advance': 0.065, 'pressure_advance_smooth_time': 0.02, 'dir_pin': 'EBBCan:gpio19', 'rotation_distance': 21.63024711, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!EBBCan:gpio17'}, 'filament_switch_sensor extruder': {'switch_pin': 'EBBCan:gpio21', 'pause_on_runout': True, 'runout_gcode': '', 'pause_delay': 0.5, 'event_delay': 3.0}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'thermistor chamber_temp': {'temperature1': 25.0, 'resistance1': 10000.0, 'beta': 3950.0}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PC13', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'watermark', 'max_delta': 2.0, 'heater_pin': '!PA19', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan extruder_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'EBBCan:gpio13', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.25, 'off_below': 0.0, 'cycle_time': 0.08, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'EBBCan:gpio14'}, 'probe': {'z_offset': -1.35, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': '^EBBCan:gpio22', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 3, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.015, 'samples_tolerance_retries': 3}, 'homing_override': {'set_position_z': 0.0, 'axes': 'z', 'gcode': '\nstatus_homing\nG90\nG0 Z5 F500\nG28 X0 Y0\nG0 X150 Y100 F9000\nG28 Z0\nG0 Z5 F500\nstatus_ready'}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [6, 6], 'mesh_min': [25.0, 35.0], 'mesh_max': [225.0, 220.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 150.0, 'fade_start': 1.0, 'fade_end': 10.0, 'fade_target': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[-0.2875, -0.1125, -0.0625, -0.025, 0.1375, -0.1375], [-0.225, -0.1125, -0.0875, 0.0375, 0.1375, 0.2875], [-0.2875, -0.2, -0.0875, -0.0, 0.1375, 0.3], [-0.3375, -0.2, -0.1375, -0.0125, 0.125, 0.275], [-0.3, -0.1625, -0.0625, 0.0375, 0.1875, 0.3375], [-0.2125, -0.075, 0.025, 0.125, 0.275, 0.45]], 'min_x': 25.0, 'max_x': 225.0, 'min_y': 35.0, 'max_y': 220.0, 'x_count': 6, 'y_count': 6, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'bicubic', 'tension': 0.2}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\nM117 Homing...\nM109 S150\nG28 Y0 X0 Z0\n\n\n\n\n\n\n\n\n\n\n\n\nSTATUS_HEATING\nM107\nM117 Heating bed\nM190 S{ params.BED }\nM117 Heating nozzle\nM109 S{target_extruder}\nstatus_ready\nG1 Z15.0 F600\nG1 X125 Y125 F3000\nG92 E0\nG1 F9000\nstatus_printing\nM117 Printing...', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\nstatus_busy\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\n\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y} F3600\nM117 Finished!\nstatus_off', 'description': 'G-Code macro'}, 'force_move': {'enable_force_move': True}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexz', 'max_z_velocity': 5.0, 'max_z_accel': 100.0}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-03-28 19:34:03,918 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-03-28 19:34:03,920 [printer.py:reinit()] - Klipper version: v0.12.0-132-ge37b007f-dirty
2024-03-28 19:34:03,920 [printer.py:reinit()] - # Extruders: 1
2024-03-28 19:34:03,920 [printer.py:reinit()] - # Temperature devices: 2
2024-03-28 19:34:03,920 [printer.py:reinit()] - # Fans: 2
2024-03-28 19:34:03,920 [printer.py:reinit()] - # Output pins: 0
2024-03-28 19:34:03,921 [printer.py:reinit()] - # Leds: 20
2024-03-28 19:34:03,921 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-03-28 19:34:03,937 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-03-28 19:34:03,939 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor mcu&fan&heater_fan extruder_fan&filament_switch_sensor extruder&neopixel sb_leds
2024-03-28 19:34:04,210 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-03-28 19:34:04,210 [screen.py:init_klipper()] - Printer initialized
2024-03-28 19:34:04,211 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-03-28 19:34:04,211 [printer.py:change_state()] - Adding callback for state: startup
2024-03-28 19:34:56,145 [base_panel.py:finish_updating()] - Finishing update
2024-03-28 19:34:56,158 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2024-03-28 19:34:56,159 [screen.py:_menu_go_back()] - #### Menu go home
2024-03-28 19:34:56,160 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-03-28 19:41:55,321 [functions.py:log_start()] - --------------------KlipperScreen Log Start--------------------
2024-03-28 19:41:55,322 [functions.py:log_start()] - KlipperScreen Version: v0.3.9-50-gdaed9a0
2024-03-28 19:41:55,322 [functions.py:log_start()] - Python version: 3.11
2024-03-28 19:41:55,582 [config.py:get_config_file_location()] - Passed config (-c): .
2024-03-28 19:41:55,583 [config.py:__init__()] - Config path location: /home/pi/printer_data/config/KlipperScreen.conf
2024-03-28 19:41:55,621 [config.py:log_config()] -  ===== Config File =====

=======================
2024-03-28 19:41:55,623 [config.py:__init__()] - ====== Saved Def ======

[main]
use_dpms = False
print_sort_dir = date_desc

=======================
2024-03-28 19:41:55,624 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2024-03-28 19:41:55,768 [config.py:create_translations()] - Selected lang: None OS lang: en_GB
2024-03-28 19:41:55,769 [config.py:install_language()] - Using lang en
2024-03-28 19:41:55,797 [screen.py:__init__()] - Monitors: 1 using number: 0
2024-03-28 19:41:55,798 [screen.py:__init__()] - Wayland: False Display name: :100
2024-03-28 19:41:55,801 [screen.py:__init__()] - Screen resolution: 984x540
2024-03-28 19:41:55,802 [KlippyGtk.py:__init__()] - Font size: 18.6 (medium)
2024-03-28 19:41:57,500 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2024-03-28 19:41:57,500 [screen.py:set_screenblanking_timeout()] - Not using DPMS
2024-03-28 19:41:57,508 [screen.py:initial_connection()] - Default printer: None
2024-03-28 19:41:57,575 [screen.py:connect_printer()] - Connecting to printer: Printer
2024-03-28 19:41:57,576 [screen.py:_load_panel()] - Loading panel: splash_screen
2024-03-28 19:41:57,673 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-03-28 19:41:57,691 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-03-28 19:41:57,691 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-03-28 19:41:57,718 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/access/oneshot_token
2024-03-28 19:41:57,730 [KlippyWebsocket.py:connect()] - Starting websocket thread
2024-03-28 19:41:57,740 [_logging.py:info()] - Websocket connected
2024-03-28 19:41:57,741 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2024-03-28 19:41:58,637 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-03-28 19:41:58,652 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-03-28 19:41:58,663 [printer.py:configure_cameras()] - Cameras: []
2024-03-28 19:41:58,664 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'ready', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'octoprint_compat', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-03-28 19:41:58,664 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-03-28 19:41:58,677 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-03-28 19:41:58,909 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set allow_park = client.park_at_cancel | default(false) | lower == \'true\' %}\n{% set retract = client.cancel_retract | default(5.0) | abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x | default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y | default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x | length > 0 or park_y | length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro | default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set idle_timeout = client.idle_timeout | default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE | default(1) | int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro | default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move | default(velocity) %}\n{% set runout_resume = True if client.runout_sensor | default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state | upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro | default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY | default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}"}, 'neopixel sb_leds': {'pin': 'EBBCan:gpio16', 'chain_count': '3', 'color_order': 'GRB', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0'}, 'led_effect sb_logo_busy': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (1,0,0)'}, 'led_effect sb_logo_cleaning': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.02, 0.5)'}, 'led_effect sb_logo_calibrating_z': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 0.35)'}, 'led_effect sb_logo_heating': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nbreathing  3 1 top (1, 0.18, 0)'}, 'led_effect sb_logo_cooling': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nbreathing  3 1 top (0, 0, 1)'}, 'led_effect sb_logo_homing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.6, 0.2)'}, 'led_effect sb_logo_leveling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.5, 0.1, 0.4)'}, 'led_effect sb_logo_meshing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.2, 1.0, 0.0)'}, 'led_effect sb_logo_printing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.3, 0.3, 0.0),(0.3, 0.1, 0.0)'}, 'led_effect sb_logo_standby': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.01, 0.01, 0.01)'}, 'led_effect sb_logo_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 1.0, 0.0)'}, 'led_effect sb_nozzle_heating': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (1.0, 0.18, 0.0, 0.0)'}, 'led_effect sb_nozzle_cooling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 1.0, 0.1)'}, 'led_effect sb_nozzle_standby': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.6, 0.0, 0.0, 0.0)'}, 'led_effect sb_nozzle_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.6, 1.0, 0.0, 0.1)'}, 'led_effect sb_critical_error': {'leds': '\nneopixel:sb_leds', 'layers': '\nstrobe         1  1.5   add        (1.0,  1.0, 1.0)\nbreathing      2  0     difference (0.95, 0.0, 0.0)\nstatic         1  0     top        (1.0,  0.0, 0.0)', 'autostart': 'false', 'frame_rate': '24', 'run_on_error': 'true'}, 'led_effect rainbow': {'leds': '\nneopixel:sb_leds', 'autostart': 'true', 'frame_rate': '24', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.0, 0.3, 0.0),(0.0, 0.0, 0.3)'}, 'led_effect set_nozzle_leds': {'leds': '\nneopixel:sb_leds (2,3)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nstatic         0  0     top        (0.5,  0.5, 0.5)'}, 'led_effect set_logo_leds': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nstatic         0  0     top        (1.0,  1.0, 1.0)'}, 'gcode_macro set_logo_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds STOP=1'}, 'gcode_macro set_logo_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1'}, 'gcode_macro status_off': {'gcode': '\nSTOP_LED_EFFECTS'}, 'gcode_macro status_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=rainbow'}, 'gcode_macro status_part_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready'}, 'gcode_macro status_busy': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_busy\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_heating\nSET_LED_EFFECT EFFECT=sb_nozzle_heating'}, 'gcode_macro status_cooling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cooling\nSET_LED_EFFECT EFFECT=sb_nozzle_cooling'}, 'gcode_macro status_leveling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_leveling\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_homing\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cleaning\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_meshing\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_calibrating_z\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_printing\nset_nozzle_leds_on'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_sam4e8e_00313753364B37373032303038303139-if00'}, 'mcu EBBCan': {'canbus_uuid': '8250861450f7'}, 'adxl345': {'cs_pin': 'EBBCan:gpio1', 'spi_software_sclk_pin': 'EBBCan:gpio2', 'spi_software_mosi_pin': 'EBBCan:gpio0', 'spi_software_miso_pin': 'EBBCan:gpio3', 'axes_map': 'z,-y,x'}, 'resonance_tester': {'probe_points': '100, 100, 20', 'accel_chip': 'adxl345'}, 'input_shaper': {'shaper_freq_x': '45', 'shaper_type': '3hump_ei'}, 'stepper_x': {'step_pin': 'PD6', 'dir_pin': '!PD11', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'EBBCan:gpio24', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '40'}, 'tmc2660 stepper_x': {'cs_pin': 'PD14', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'stepper_y': {'step_pin': 'PD7', 'dir_pin': '!PD12', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'PA2', 'position_endstop': '0', 'position_max': '225', 'position_min': '-4', 'homing_speed': '35', 'homing_retract_dist': '0'}, 'tmc2660 stepper_y': {'cs_pin': 'PC9', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'stepper_z': {'step_pin': 'PD8', 'dir_pin': '!PD13', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '230', 'position_min': '-2.5', 'homing_speed': '35.0'}, 'tmc2660 stepper_z': {'cs_pin': 'PC10', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'adc_temperature my_thermistor': {'temperature1': '0', 'resistance1': '1000', 'temperature2': '80', 'resistance2': '1309'}, 'extruder': {'step_pin': '!EBBCan:gpio18', 'dir_pin': 'EBBCan:gpio19', 'enable_pin': '!EBBCan:gpio17', 'microsteps': '32', 'rotation_distance': '21.63024711', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'pressure_advance': '0.065', 'pressure_advance_smooth_time': '0.02', 'gear_ratio': '50:10', 'heater_pin': 'EBBCan:gpio7', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'EBBCan:gpio27', 'control': 'pid', 'pid_kp': '21.527', 'pid_ki': '1.063', 'pid_kd': '108.982', 'min_temp': '0', 'max_temp': '250'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan:gpio20', 'run_current': '0.5', 'stealthchop_threshold': '999999'}, 'filament_switch_sensor extruder': {'pause_on_runout': 'True', 'switch_pin': 'EBBCan:gpio21'}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu'}, 'thermistor chamber_temp': {'temperature1': '25', 'resistance1': '10000', 'beta': '3950'}, 'heater_bed': {'heater_pin': '!PA19', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PC13', 'control': 'watermark', 'min_temp': '0', 'max_temp': '120'}, 'heater_fan extruder_fan': {'pin': 'EBBCan:gpio13', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'EBBCan:gpio14', 'cycle_time': '.08', 'kick_start_time': '.25'}, 'probe': {'pin': '^EBBCan:gpio22', 'x_offset': '0', 'y_offset': '0', 'samples': '3', 'samples_result': 'median', 'sample_retract_dist': '3', 'samples_tolerance': '0.015', 'samples_tolerance_retries': '3', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'z_offset': '-1.350'}, 'homing_override': {'axes': 'z', 'set_position_z': '0', 'gcode': '\nstatus_homing\nG90\nG0 Z5 F500\nG28 X0 Y0\nG0 X150 Y100 F9000\nG28 Z0\nG0 Z5 F500\nstatus_ready'}, 'bed_mesh': {'speed': '150', 'horizontal_move_z': '5', 'mesh_min': '25,35.0', 'mesh_max': '225.0,220', 'probe_count': '6,6', 'algorithm': 'bicubic', 'fade_start': '1', 'fade_end': '10', 'fade_target': '0'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\nM117 Homing...\nM109 S150\nG28 Y0 X0 Z0\n\n\n\n\n\n\n\n\n\n\n\n\nSTATUS_HEATING\nM107\nM117 Heating bed\nM190 S{ params.BED }\nM117 Heating nozzle\nM109 S{target_extruder}\nstatus_ready\nG1 Z15.0 F600\nG1 X125 Y125 F3000\nG92 E0\nG1 F9000\nstatus_printing\nM117 Printing...'}, 'gcode_macro PRINT_END': {'gcode': '\nstatus_busy\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\n\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y} F3600\nM117 Finished!\nstatus_off'}, 'printer': {'kinematics': 'corexz', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '5', 'max_z_accel': '100'}, 'force_move': {'enable_force_move': 'true'}, 'exclude_object': {}, 'bed_mesh default': {'version': '1', 'points': '\n-0.287500, -0.112500, -0.062500, -0.025000, 0.137500, -0.137500\n-0.225000, -0.112500, -0.087500, 0.037500, 0.137500, 0.287500\n-0.287500, -0.200000, -0.087500, -0.000000, 0.137500, 0.300000\n-0.337500, -0.200000, -0.137500, -0.012500, 0.125000, 0.275000\n-0.300000, -0.162500, -0.062500, 0.037500, 0.187500, 0.337500\n-0.212500, -0.075000, 0.025000, 0.125000, 0.275000, 0.450000', 'x_count': '6', 'y_count': '6', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'bicubic', 'tension': '0.2', 'min_x': '25.0', 'max_x': '225.0', 'min_y': '35.0', 'max_y': '220.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_sam4e8e_00313753364B37373032303038303139-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu ebbcan': {'canbus_uuid': '8250861450f7', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set allow_park = client.park_at_cancel | default(false) | lower == \'true\' %}\n{% set retract = client.cancel_retract | default(5.0) | abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x | default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y | default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x | length > 0 or park_y | length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro | default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set idle_timeout = client.idle_timeout | default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE | default(1) | int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro | default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move | default(velocity) %}\n{% set runout_resume = True if client.runout_sensor | default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state | upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro | default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY | default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'neopixel sb_leds': {'pin': 'EBBCan:gpio16', 'chain_count': 3, 'color_order': ['GRB'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'led_effect sb_logo_busy': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1,0,0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_cleaning': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.02, 0.5)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_calibrating_z': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 0.35)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1, 0.18, 0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0, 0, 1)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_homing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.6, 0.2)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_leveling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.5, 0.1, 0.4)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_meshing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.2, 1.0, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_printing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.3, 0.3, 0.0),(0.3, 0.1, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_standby': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.01, 0.01, 0.01)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 1.0, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_nozzle_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1.0, 0.18, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 1.0, 0.1)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_standby': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.6, 0.0, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.6, 1.0, 0.0, 0.1)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_critical_error': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': True, 'endstops': '', 'layers': '\nstrobe         1  1.5   add        (1.0,  1.0, 1.0)\nbreathing      2  0     difference (0.95, 0.0, 0.0)\nstatic         1  0     top        (1.0,  0.0, 0.0)', 'leds': '\nneopixel:sb_leds'}, 'led_effect rainbow': {'frame_rate': 24.0, 'autostart': True, 'run_on_error': False, 'endstops': '', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.0, 0.3, 0.0),(0.0, 0.0, 0.3)', 'leds': '\nneopixel:sb_leds'}, 'led_effect set_nozzle_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic         0  0     top        (0.5,  0.5, 0.5)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect set_logo_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic         0  0     top        (1.0,  1.0, 1.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'gcode_macro set_logo_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nSTOP_LED_EFFECTS', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=rainbow', 'description': 'G-Code macro'}, 'gcode_macro status_part_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_busy\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_heating\nSET_LED_EFFECT EFFECT=sb_nozzle_heating', 'description': 'G-Code macro'}, 'gcode_macro status_cooling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cooling\nSET_LED_EFFECT EFFECT=sb_nozzle_cooling', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_leveling\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_homing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cleaning\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_meshing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_calibrating_z\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_printing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'adxl345': {'axes_map': ['z', '-y', 'x'], 'rate': 3200, 'cs_pin': 'EBBCan:gpio1', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'EBBCan:gpio2', 'spi_software_miso_pin': 'EBBCan:gpio3', 'spi_software_mosi_pin': 'EBBCan:gpio0'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[100.0, 100.0, 20.0]], 'accel_chip': 'adxl345'}, 'input_shaper': {'shaper_type': '3hump_ei', 'shaper_type_x': '3hump_ei', 'damping_ratio_x': 0.1, 'shaper_freq_x': 45.0, 'shaper_type_y': '3hump_ei', 'damping_ratio_y': 0.1, 'shaper_freq_y': 0.0}, 'tmc2660 stepper_x': {'cs_pin': 'PD14', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PD6', 'dir_pin': '!PD11', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'EBBCan:gpio24', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2660 stepper_y': {'cs_pin': 'PC9', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PD7', 'dir_pin': '!PD12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'PA2', 'position_endstop': 0.0, 'position_min': -4.0, 'position_max': 225.0, 'homing_speed': 35.0, 'second_homing_speed': 17.5, 'homing_retract_speed': 35.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2660 stepper_z': {'cs_pin': 'PC10', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PD8', 'dir_pin': '!PD13', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -2.5, 'position_max': 230.0, 'homing_speed': 35.0, 'second_homing_speed': 17.5, 'homing_retract_speed': 35.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'adc_temperature my_thermistor': {'resistance1': 1000.0, 'temperature1': 0.0, 'temperature2': 80.0, 'resistance2': 1309.0}, 'tmc2209 extruder': {'uart_pin': 'EBBCan:gpio20', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan:gpio27', 'min_temp': 0.0, 'max_temp': 250.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 21.527, 'pid_ki': 1.063, 'pid_kd': 108.982, 'heater_pin': 'EBBCan:gpio7', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': '!EBBCan:gpio18', 'pressure_advance': 0.065, 'pressure_advance_smooth_time': 0.02, 'dir_pin': 'EBBCan:gpio19', 'rotation_distance': 21.63024711, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!EBBCan:gpio17'}, 'filament_switch_sensor extruder': {'switch_pin': 'EBBCan:gpio21', 'pause_on_runout': True, 'runout_gcode': '', 'pause_delay': 0.5, 'event_delay': 3.0}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'thermistor chamber_temp': {'temperature1': 25.0, 'resistance1': 10000.0, 'beta': 3950.0}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PC13', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'watermark', 'max_delta': 2.0, 'heater_pin': '!PA19', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan extruder_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'EBBCan:gpio13', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.25, 'off_below': 0.0, 'cycle_time': 0.08, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'EBBCan:gpio14'}, 'probe': {'z_offset': -1.35, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': '^EBBCan:gpio22', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 3, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.015, 'samples_tolerance_retries': 3}, 'homing_override': {'set_position_z': 0.0, 'axes': 'z', 'gcode': '\nstatus_homing\nG90\nG0 Z5 F500\nG28 X0 Y0\nG0 X150 Y100 F9000\nG28 Z0\nG0 Z5 F500\nstatus_ready'}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [6, 6], 'mesh_min': [25.0, 35.0], 'mesh_max': [225.0, 220.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 150.0, 'fade_start': 1.0, 'fade_end': 10.0, 'fade_target': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[-0.2875, -0.1125, -0.0625, -0.025, 0.1375, -0.1375], [-0.225, -0.1125, -0.0875, 0.0375, 0.1375, 0.2875], [-0.2875, -0.2, -0.0875, -0.0, 0.1375, 0.3], [-0.3375, -0.2, -0.1375, -0.0125, 0.125, 0.275], [-0.3, -0.1625, -0.0625, 0.0375, 0.1875, 0.3375], [-0.2125, -0.075, 0.025, 0.125, 0.275, 0.45]], 'min_x': 25.0, 'max_x': 225.0, 'min_y': 35.0, 'max_y': 220.0, 'x_count': 6, 'y_count': 6, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'bicubic', 'tension': 0.2}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\nM117 Homing...\nM109 S150\nG28 Y0 X0 Z0\n\n\n\n\n\n\n\n\n\n\n\n\nSTATUS_HEATING\nM107\nM117 Heating bed\nM190 S{ params.BED }\nM117 Heating nozzle\nM109 S{target_extruder}\nstatus_ready\nG1 Z15.0 F600\nG1 X125 Y125 F3000\nG92 E0\nG1 F9000\nstatus_printing\nM117 Printing...', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\nstatus_busy\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\n\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y} F3600\nM117 Finished!\nstatus_off', 'description': 'G-Code macro'}, 'force_move': {'enable_force_move': True}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexz', 'max_z_velocity': 5.0, 'max_z_accel': 100.0}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-03-28 19:41:58,912 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-03-28 19:41:58,914 [printer.py:reinit()] - Klipper version: v0.12.0-132-ge37b007f-dirty
2024-03-28 19:41:58,914 [printer.py:reinit()] - # Extruders: 1
2024-03-28 19:41:58,914 [printer.py:reinit()] - # Temperature devices: 2
2024-03-28 19:41:58,914 [printer.py:reinit()] - # Fans: 2
2024-03-28 19:41:58,915 [printer.py:reinit()] - # Output pins: 0
2024-03-28 19:41:58,915 [printer.py:reinit()] - # Leds: 20
2024-03-28 19:41:58,915 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-03-28 19:41:58,933 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-03-28 19:41:58,935 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor mcu&fan&heater_fan extruder_fan&filament_switch_sensor extruder&neopixel sb_leds
2024-03-28 19:41:59,204 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-03-28 19:41:59,204 [screen.py:init_klipper()] - Printer initialized
2024-03-28 19:41:59,204 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2024-03-28 19:41:59,204 [printer.py:change_state()] - Adding callback for state: ready
2024-03-28 19:41:59,309 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-03-28 19:41:59,313 [screen.py:_load_panel()] - Loading panel: main_menu
2024-03-28 19:42:02,327 [main_menu.py:__init__()] - ### Making MainMenu
2024-03-28 19:42:02,342 [main_menu.py:add_device()] - Adding device: extruder
2024-03-28 19:42:02,359 [main_menu.py:add_device()] - Adding device: heater_bed
2024-03-28 19:42:02,369 [main_menu.py:add_device()] - Adding device: temperature_sensor mcu
2024-03-28 19:42:02,420 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-03-28 19:42:02,422 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-03-28 19:42:02,449 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor mcu', 'heater_bed', 'extruder']
2024-03-28 19:42:02,451 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-03-28 19:42:02,463 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-03-28 19:42:38,261 [functions.py:log_start()] - --------------------KlipperScreen Log Start--------------------
2024-03-28 19:42:38,261 [functions.py:log_start()] - KlipperScreen Version: v0.3.9-50-gdaed9a0
2024-03-28 19:42:38,261 [functions.py:log_start()] - Python version: 3.11
2024-03-28 19:42:38,409 [config.py:get_config_file_location()] - Passed config (-c): .
2024-03-28 19:42:38,410 [config.py:__init__()] - Config path location: /home/pi/printer_data/config/KlipperScreen.conf
2024-03-28 19:42:38,435 [config.py:log_config()] -  ===== Config File =====

=======================
2024-03-28 19:42:38,437 [config.py:__init__()] - ====== Saved Def ======

[main]
use_dpms = False
print_sort_dir = date_desc

=======================
2024-03-28 19:42:38,438 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2024-03-28 19:42:38,546 [config.py:create_translations()] - Selected lang: None OS lang: en_GB
2024-03-28 19:42:38,549 [config.py:install_language()] - Using lang en
2024-03-28 19:42:38,569 [screen.py:__init__()] - Monitors: 1 using number: 0
2024-03-28 19:42:38,570 [screen.py:__init__()] - Wayland: False Display name: :100
2024-03-28 19:42:38,574 [screen.py:__init__()] - Screen resolution: 984x540
2024-03-28 19:42:38,575 [KlippyGtk.py:__init__()] - Font size: 18.6 (medium)
2024-03-28 19:42:39,510 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2024-03-28 19:42:39,511 [screen.py:set_screenblanking_timeout()] - Not using DPMS
2024-03-28 19:42:39,526 [screen.py:initial_connection()] - Default printer: None
2024-03-28 19:42:39,620 [screen.py:connect_printer()] - Connecting to printer: Printer
2024-03-28 19:42:39,621 [screen.py:_load_panel()] - Loading panel: splash_screen
2024-03-28 19:42:39,690 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-03-28 19:42:39,709 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-03-28 19:42:39,710 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-03-28 19:42:39,728 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/access/oneshot_token
2024-03-28 19:42:39,740 [KlippyWebsocket.py:connect()] - Starting websocket thread
2024-03-28 19:42:39,751 [_logging.py:info()] - Websocket connected
2024-03-28 19:42:39,752 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2024-03-28 19:42:39,771 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-03-28 19:42:39,784 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-03-28 19:42:39,795 [printer.py:configure_cameras()] - Cameras: []
2024-03-28 19:42:39,796 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'ready', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'octoprint_compat', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-03-28 19:42:39,796 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-03-28 19:42:39,809 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-03-28 19:42:40,004 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set allow_park = client.park_at_cancel | default(false) | lower == \'true\' %}\n{% set retract = client.cancel_retract | default(5.0) | abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x | default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y | default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x | length > 0 or park_y | length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro | default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set idle_timeout = client.idle_timeout | default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE | default(1) | int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro | default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move | default(velocity) %}\n{% set runout_resume = True if client.runout_sensor | default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state | upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro | default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY | default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}"}, 'neopixel sb_leds': {'pin': 'EBBCan:gpio16', 'chain_count': '3', 'color_order': 'GRB', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0'}, 'led_effect sb_logo_busy': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (1,0,0)'}, 'led_effect sb_logo_cleaning': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.02, 0.5)'}, 'led_effect sb_logo_calibrating_z': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 0.35)'}, 'led_effect sb_logo_heating': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nbreathing  3 1 top (1, 0.18, 0)'}, 'led_effect sb_logo_cooling': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nbreathing  3 1 top (0, 0, 1)'}, 'led_effect sb_logo_homing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.6, 0.2)'}, 'led_effect sb_logo_leveling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.5, 0.1, 0.4)'}, 'led_effect sb_logo_meshing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.2, 1.0, 0.0)'}, 'led_effect sb_logo_printing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.3, 0.3, 0.0),(0.3, 0.1, 0.0)'}, 'led_effect sb_logo_standby': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.01, 0.01, 0.01)'}, 'led_effect sb_logo_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 1.0, 0.0)'}, 'led_effect sb_nozzle_heating': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (1.0, 0.18, 0.0, 0.0)'}, 'led_effect sb_nozzle_cooling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 1.0, 0.1)'}, 'led_effect sb_nozzle_standby': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.6, 0.0, 0.0, 0.0)'}, 'led_effect sb_nozzle_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.6, 1.0, 0.0, 0.1)'}, 'led_effect sb_critical_error': {'leds': '\nneopixel:sb_leds', 'layers': '\nstrobe         1  1.5   add        (1.0,  1.0, 1.0)\nbreathing      2  0     difference (0.95, 0.0, 0.0)\nstatic         1  0     top        (1.0,  0.0, 0.0)', 'autostart': 'false', 'frame_rate': '24', 'run_on_error': 'true'}, 'led_effect rainbow': {'leds': '\nneopixel:sb_leds', 'autostart': 'true', 'frame_rate': '24', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.0, 0.3, 0.0),(0.0, 0.0, 0.3)'}, 'led_effect set_nozzle_leds': {'leds': '\nneopixel:sb_leds (2,3)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nstatic         0  0     top        (0.5,  0.5, 0.5)'}, 'led_effect set_logo_leds': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nstatic         0  0     top        (1.0,  1.0, 1.0)'}, 'gcode_macro set_logo_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds STOP=1'}, 'gcode_macro set_logo_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1'}, 'gcode_macro status_off': {'gcode': '\nSTOP_LED_EFFECTS'}, 'gcode_macro status_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=rainbow'}, 'gcode_macro status_part_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready'}, 'gcode_macro status_busy': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_busy\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_heating\nSET_LED_EFFECT EFFECT=sb_nozzle_heating'}, 'gcode_macro status_cooling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cooling\nSET_LED_EFFECT EFFECT=sb_nozzle_cooling'}, 'gcode_macro status_leveling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_leveling\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_homing\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cleaning\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_meshing\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_calibrating_z\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_printing\nset_nozzle_leds_on'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_sam4e8e_00313753364B37373032303038303139-if00'}, 'mcu EBBCan': {'canbus_uuid': '8250861450f7'}, 'adxl345': {'cs_pin': 'EBBCan:gpio1', 'spi_software_sclk_pin': 'EBBCan:gpio2', 'spi_software_mosi_pin': 'EBBCan:gpio0', 'spi_software_miso_pin': 'EBBCan:gpio3', 'axes_map': 'z,-y,x'}, 'resonance_tester': {'probe_points': '100, 100, 20', 'accel_chip': 'adxl345'}, 'input_shaper': {'shaper_freq_x': '45', 'shaper_type': '3hump_ei'}, 'stepper_x': {'step_pin': 'PD6', 'dir_pin': '!PD11', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'EBBCan:gpio24', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '40'}, 'tmc2660 stepper_x': {'cs_pin': 'PD14', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'stepper_y': {'step_pin': 'PD7', 'dir_pin': '!PD12', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'PA2', 'position_endstop': '0', 'position_max': '225', 'position_min': '-4', 'homing_speed': '35', 'homing_retract_dist': '0'}, 'tmc2660 stepper_y': {'cs_pin': 'PC9', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'stepper_z': {'step_pin': 'PD8', 'dir_pin': '!PD13', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '230', 'position_min': '-2.5', 'homing_speed': '35.0'}, 'tmc2660 stepper_z': {'cs_pin': 'PC10', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'adc_temperature my_thermistor': {'temperature1': '0', 'resistance1': '1000', 'temperature2': '80', 'resistance2': '1309'}, 'extruder': {'step_pin': '!EBBCan:gpio18', 'dir_pin': 'EBBCan:gpio19', 'enable_pin': '!EBBCan:gpio17', 'microsteps': '32', 'rotation_distance': '21.63024711', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'pressure_advance': '0.065', 'pressure_advance_smooth_time': '0.02', 'gear_ratio': '50:10', 'heater_pin': 'EBBCan:gpio7', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'EBBCan:gpio27', 'control': 'pid', 'pid_kp': '21.527', 'pid_ki': '1.063', 'pid_kd': '108.982', 'min_temp': '0', 'max_temp': '250'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan:gpio20', 'run_current': '0.5', 'stealthchop_threshold': '999999'}, 'filament_switch_sensor extruder': {'pause_on_runout': 'True', 'switch_pin': 'EBBCan:gpio21'}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu'}, 'thermistor chamber_temp': {'temperature1': '25', 'resistance1': '10000', 'beta': '3950'}, 'heater_bed': {'heater_pin': '!PA19', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PC13', 'control': 'watermark', 'min_temp': '0', 'max_temp': '120'}, 'heater_fan extruder_fan': {'pin': 'EBBCan:gpio13', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'EBBCan:gpio14', 'cycle_time': '.08', 'kick_start_time': '.25'}, 'probe': {'pin': '^EBBCan:gpio22', 'x_offset': '0', 'y_offset': '0', 'samples': '3', 'samples_result': 'median', 'sample_retract_dist': '3', 'samples_tolerance': '0.015', 'samples_tolerance_retries': '3', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'z_offset': '-1.350'}, 'homing_override': {'axes': 'z', 'set_position_z': '0', 'gcode': '\nstatus_homing\nG90\nG0 Z5 F500\nG28 X0 Y0\nG0 X150 Y100 F9000\nG28 Z0\nG0 Z5 F500\nstatus_ready'}, 'bed_mesh': {'speed': '150', 'horizontal_move_z': '5', 'mesh_min': '25,35.0', 'mesh_max': '225.0,220', 'probe_count': '6,6', 'algorithm': 'bicubic', 'fade_start': '1', 'fade_end': '10', 'fade_target': '0'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\nM117 Homing...\nM109 S150\nG28 Y0 X0 Z0\n\n\n\n\n\n\n\n\n\n\n\n\nSTATUS_HEATING\nM107\nM117 Heating bed\nM190 S{ params.BED }\nM117 Heating nozzle\nM109 S{target_extruder}\nstatus_ready\nG1 Z15.0 F600\nG1 X125 Y125 F3000\nG92 E0\nG1 F9000\nstatus_printing\nM117 Printing...'}, 'gcode_macro PRINT_END': {'gcode': '\nstatus_busy\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\n\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y} F3600\nM117 Finished!\nstatus_off'}, 'printer': {'kinematics': 'corexz', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '5', 'max_z_accel': '100'}, 'force_move': {'enable_force_move': 'true'}, 'exclude_object': {}, 'bed_mesh default': {'version': '1', 'points': '\n-0.287500, -0.112500, -0.062500, -0.025000, 0.137500, -0.137500\n-0.225000, -0.112500, -0.087500, 0.037500, 0.137500, 0.287500\n-0.287500, -0.200000, -0.087500, -0.000000, 0.137500, 0.300000\n-0.337500, -0.200000, -0.137500, -0.012500, 0.125000, 0.275000\n-0.300000, -0.162500, -0.062500, 0.037500, 0.187500, 0.337500\n-0.212500, -0.075000, 0.025000, 0.125000, 0.275000, 0.450000', 'x_count': '6', 'y_count': '6', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'bicubic', 'tension': '0.2', 'min_x': '25.0', 'max_x': '225.0', 'min_y': '35.0', 'max_y': '220.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_sam4e8e_00313753364B37373032303038303139-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu ebbcan': {'canbus_uuid': '8250861450f7', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set allow_park = client.park_at_cancel | default(false) | lower == \'true\' %}\n{% set retract = client.cancel_retract | default(5.0) | abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x | default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y | default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x | length > 0 or park_y | length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro | default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set idle_timeout = client.idle_timeout | default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE | default(1) | int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro | default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move | default(velocity) %}\n{% set runout_resume = True if client.runout_sensor | default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state | upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro | default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY | default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'neopixel sb_leds': {'pin': 'EBBCan:gpio16', 'chain_count': 3, 'color_order': ['GRB'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'led_effect sb_logo_busy': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1,0,0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_cleaning': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.02, 0.5)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_calibrating_z': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 0.35)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1, 0.18, 0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0, 0, 1)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_homing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.6, 0.2)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_leveling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.5, 0.1, 0.4)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_meshing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.2, 1.0, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_printing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.3, 0.3, 0.0),(0.3, 0.1, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_standby': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.01, 0.01, 0.01)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 1.0, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_nozzle_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1.0, 0.18, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 1.0, 0.1)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_standby': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.6, 0.0, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.6, 1.0, 0.0, 0.1)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_critical_error': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': True, 'endstops': '', 'layers': '\nstrobe         1  1.5   add        (1.0,  1.0, 1.0)\nbreathing      2  0     difference (0.95, 0.0, 0.0)\nstatic         1  0     top        (1.0,  0.0, 0.0)', 'leds': '\nneopixel:sb_leds'}, 'led_effect rainbow': {'frame_rate': 24.0, 'autostart': True, 'run_on_error': False, 'endstops': '', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.0, 0.3, 0.0),(0.0, 0.0, 0.3)', 'leds': '\nneopixel:sb_leds'}, 'led_effect set_nozzle_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic         0  0     top        (0.5,  0.5, 0.5)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect set_logo_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic         0  0     top        (1.0,  1.0, 1.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'gcode_macro set_logo_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nSTOP_LED_EFFECTS', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=rainbow', 'description': 'G-Code macro'}, 'gcode_macro status_part_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_busy\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_heating\nSET_LED_EFFECT EFFECT=sb_nozzle_heating', 'description': 'G-Code macro'}, 'gcode_macro status_cooling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cooling\nSET_LED_EFFECT EFFECT=sb_nozzle_cooling', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_leveling\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_homing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cleaning\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_meshing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_calibrating_z\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_printing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'adxl345': {'axes_map': ['z', '-y', 'x'], 'rate': 3200, 'cs_pin': 'EBBCan:gpio1', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'EBBCan:gpio2', 'spi_software_miso_pin': 'EBBCan:gpio3', 'spi_software_mosi_pin': 'EBBCan:gpio0'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[100.0, 100.0, 20.0]], 'accel_chip': 'adxl345'}, 'input_shaper': {'shaper_type': '3hump_ei', 'shaper_type_x': '3hump_ei', 'damping_ratio_x': 0.1, 'shaper_freq_x': 45.0, 'shaper_type_y': '3hump_ei', 'damping_ratio_y': 0.1, 'shaper_freq_y': 0.0}, 'tmc2660 stepper_x': {'cs_pin': 'PD14', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PD6', 'dir_pin': '!PD11', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'EBBCan:gpio24', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2660 stepper_y': {'cs_pin': 'PC9', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PD7', 'dir_pin': '!PD12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'PA2', 'position_endstop': 0.0, 'position_min': -4.0, 'position_max': 225.0, 'homing_speed': 35.0, 'second_homing_speed': 17.5, 'homing_retract_speed': 35.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2660 stepper_z': {'cs_pin': 'PC10', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PD8', 'dir_pin': '!PD13', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -2.5, 'position_max': 230.0, 'homing_speed': 35.0, 'second_homing_speed': 17.5, 'homing_retract_speed': 35.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'adc_temperature my_thermistor': {'resistance1': 1000.0, 'temperature1': 0.0, 'temperature2': 80.0, 'resistance2': 1309.0}, 'tmc2209 extruder': {'uart_pin': 'EBBCan:gpio20', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan:gpio27', 'min_temp': 0.0, 'max_temp': 250.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 21.527, 'pid_ki': 1.063, 'pid_kd': 108.982, 'heater_pin': 'EBBCan:gpio7', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': '!EBBCan:gpio18', 'pressure_advance': 0.065, 'pressure_advance_smooth_time': 0.02, 'dir_pin': 'EBBCan:gpio19', 'rotation_distance': 21.63024711, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!EBBCan:gpio17'}, 'filament_switch_sensor extruder': {'switch_pin': 'EBBCan:gpio21', 'pause_on_runout': True, 'runout_gcode': '', 'pause_delay': 0.5, 'event_delay': 3.0}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'thermistor chamber_temp': {'temperature1': 25.0, 'resistance1': 10000.0, 'beta': 3950.0}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PC13', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'watermark', 'max_delta': 2.0, 'heater_pin': '!PA19', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan extruder_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'EBBCan:gpio13', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.25, 'off_below': 0.0, 'cycle_time': 0.08, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'EBBCan:gpio14'}, 'probe': {'z_offset': -1.35, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': '^EBBCan:gpio22', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 3, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.015, 'samples_tolerance_retries': 3}, 'homing_override': {'set_position_z': 0.0, 'axes': 'z', 'gcode': '\nstatus_homing\nG90\nG0 Z5 F500\nG28 X0 Y0\nG0 X150 Y100 F9000\nG28 Z0\nG0 Z5 F500\nstatus_ready'}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [6, 6], 'mesh_min': [25.0, 35.0], 'mesh_max': [225.0, 220.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 150.0, 'fade_start': 1.0, 'fade_end': 10.0, 'fade_target': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[-0.2875, -0.1125, -0.0625, -0.025, 0.1375, -0.1375], [-0.225, -0.1125, -0.0875, 0.0375, 0.1375, 0.2875], [-0.2875, -0.2, -0.0875, -0.0, 0.1375, 0.3], [-0.3375, -0.2, -0.1375, -0.0125, 0.125, 0.275], [-0.3, -0.1625, -0.0625, 0.0375, 0.1875, 0.3375], [-0.2125, -0.075, 0.025, 0.125, 0.275, 0.45]], 'min_x': 25.0, 'max_x': 225.0, 'min_y': 35.0, 'max_y': 220.0, 'x_count': 6, 'y_count': 6, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'bicubic', 'tension': 0.2}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\nM117 Homing...\nM109 S150\nG28 Y0 X0 Z0\n\n\n\n\n\n\n\n\n\n\n\n\nSTATUS_HEATING\nM107\nM117 Heating bed\nM190 S{ params.BED }\nM117 Heating nozzle\nM109 S{target_extruder}\nstatus_ready\nG1 Z15.0 F600\nG1 X125 Y125 F3000\nG92 E0\nG1 F9000\nstatus_printing\nM117 Printing...', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\nstatus_busy\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\n\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y} F3600\nM117 Finished!\nstatus_off', 'description': 'G-Code macro'}, 'force_move': {'enable_force_move': True}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexz', 'max_z_velocity': 5.0, 'max_z_accel': 100.0}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-03-28 19:42:40,007 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-03-28 19:42:40,009 [printer.py:reinit()] - Klipper version: v0.12.0-132-ge37b007f-dirty
2024-03-28 19:42:40,009 [printer.py:reinit()] - # Extruders: 1
2024-03-28 19:42:40,009 [printer.py:reinit()] - # Temperature devices: 2
2024-03-28 19:42:40,010 [printer.py:reinit()] - # Fans: 2
2024-03-28 19:42:40,010 [printer.py:reinit()] - # Output pins: 0
2024-03-28 19:42:40,010 [printer.py:reinit()] - # Leds: 20
2024-03-28 19:42:40,010 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-03-28 19:42:40,029 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-03-28 19:42:40,031 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor mcu&fan&heater_fan extruder_fan&filament_switch_sensor extruder&neopixel sb_leds
2024-03-28 19:42:40,306 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-03-28 19:42:40,306 [screen.py:init_klipper()] - Printer initialized
2024-03-28 19:42:40,306 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2024-03-28 19:42:40,306 [printer.py:change_state()] - Adding callback for state: ready
2024-03-28 19:42:40,380 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-03-28 19:42:40,384 [screen.py:_load_panel()] - Loading panel: main_menu
2024-03-28 19:42:40,493 [main_menu.py:__init__()] - ### Making MainMenu
2024-03-28 19:42:40,510 [main_menu.py:add_device()] - Adding device: extruder
2024-03-28 19:42:40,519 [main_menu.py:add_device()] - Adding device: heater_bed
2024-03-28 19:42:40,529 [main_menu.py:add_device()] - Adding device: temperature_sensor mcu
2024-03-28 19:42:40,582 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-03-28 19:42:40,584 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-03-28 19:42:40,612 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor mcu', 'heater_bed', 'extruder']
2024-03-28 19:42:40,614 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-03-28 19:42:40,626 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-03-28 19:53:14,914 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-03-28 19:53:14,915 [printer.py:change_state()] - Adding callback for state: disconnected
2024-03-28 19:53:14,915 [screen.py:state_disconnected()] - ### Going to disconnected
2024-03-28 19:53:14,916 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-03-28 19:53:14,923 [screen.py:show_panel()] - Reinitializing panel
2024-03-28 19:53:15,036 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-03-28 19:53:18,732 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-03-28 19:53:18,742 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-03-28 19:53:18,753 [printer.py:configure_cameras()] - Cameras: []
2024-03-28 19:53:18,754 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'ready', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'octoprint_compat', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-03-28 19:53:18,754 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-03-28 19:53:18,766 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-03-28 19:53:18,797 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set allow_park = client.park_at_cancel | default(false) | lower == \'true\' %}\n{% set retract = client.cancel_retract | default(5.0) | abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x | default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y | default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x | length > 0 or park_y | length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro | default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set idle_timeout = client.idle_timeout | default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE | default(1) | int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro | default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move | default(velocity) %}\n{% set runout_resume = True if client.runout_sensor | default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state | upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro | default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY | default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}"}, 'neopixel sb_leds': {'pin': 'EBBCan:gpio16', 'chain_count': '3', 'color_order': 'GRB', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0'}, 'led_effect sb_logo_busy': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (1,0,0)'}, 'led_effect sb_logo_cleaning': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.02, 0.5)'}, 'led_effect sb_logo_calibrating_z': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 0.35)'}, 'led_effect sb_logo_heating': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nbreathing  3 1 top (1, 0.18, 0)'}, 'led_effect sb_logo_cooling': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nbreathing  3 1 top (0, 0, 1)'}, 'led_effect sb_logo_homing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.6, 0.2)'}, 'led_effect sb_logo_leveling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.5, 0.1, 0.4)'}, 'led_effect sb_logo_meshing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.2, 1.0, 0.0)'}, 'led_effect sb_logo_printing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.3, 0.3, 0.0),(0.3, 0.1, 0.0)'}, 'led_effect sb_logo_standby': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.01, 0.01, 0.01)'}, 'led_effect sb_logo_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 1.0, 0.0)'}, 'led_effect sb_nozzle_heating': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (1.0, 0.18, 0.0, 0.0)'}, 'led_effect sb_nozzle_cooling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 1.0, 0.1)'}, 'led_effect sb_nozzle_standby': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.6, 0.0, 0.0, 0.0)'}, 'led_effect sb_nozzle_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.6, 1.0, 0.0, 0.1)'}, 'led_effect sb_critical_error': {'leds': '\nneopixel:sb_leds', 'layers': '\nstrobe         1  1.5   add        (1.0,  1.0, 1.0)\nbreathing      2  0     difference (0.95, 0.0, 0.0)\nstatic         1  0     top        (1.0,  0.0, 0.0)', 'autostart': 'false', 'frame_rate': '24', 'run_on_error': 'true'}, 'led_effect rainbow': {'leds': '\nneopixel:sb_leds', 'autostart': 'true', 'frame_rate': '24', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.0, 0.3, 0.0),(0.0, 0.0, 0.3)'}, 'led_effect set_nozzle_leds': {'leds': '\nneopixel:sb_leds (2,3)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nstatic         0  0     top        (0.5,  0.5, 0.5)'}, 'led_effect set_logo_leds': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nstatic         0  0     top        (1.0,  1.0, 1.0)'}, 'gcode_macro set_logo_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds STOP=1'}, 'gcode_macro set_logo_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1'}, 'gcode_macro status_off': {'gcode': '\nSTOP_LED_EFFECTS'}, 'gcode_macro status_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=rainbow'}, 'gcode_macro status_part_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready'}, 'gcode_macro status_busy': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_busy\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_heating\nSET_LED_EFFECT EFFECT=sb_nozzle_heating'}, 'gcode_macro status_cooling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cooling\nSET_LED_EFFECT EFFECT=sb_nozzle_cooling'}, 'gcode_macro status_leveling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_leveling\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_homing\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cleaning\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_meshing\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_calibrating_z\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_printing\nset_nozzle_leds_on'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_sam4e8e_00313753364B37373032303038303139-if00'}, 'mcu EBBCan': {'canbus_uuid': '8250861450f7'}, 'adxl345': {'cs_pin': 'EBBCan:gpio1', 'spi_software_sclk_pin': 'EBBCan:gpio2', 'spi_software_mosi_pin': 'EBBCan:gpio0', 'spi_software_miso_pin': 'EBBCan:gpio3', 'axes_map': 'z,-y,x'}, 'resonance_tester': {'probe_points': '100, 100, 20', 'accel_chip': 'adxl345'}, 'input_shaper': {'shaper_freq_x': '45', 'shaper_type': '3hump_ei'}, 'stepper_x': {'step_pin': 'PD6', 'dir_pin': '!PD11', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'EBBCan:gpio24', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '40'}, 'tmc2660 stepper_x': {'cs_pin': 'PD14', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'stepper_y': {'step_pin': 'PD7', 'dir_pin': '!PD12', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'PA2', 'position_endstop': '0', 'position_max': '225', 'position_min': '-4', 'homing_speed': '35', 'homing_retract_dist': '0'}, 'tmc2660 stepper_y': {'cs_pin': 'PC9', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'stepper_z': {'step_pin': 'PD8', 'dir_pin': '!PD13', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '230', 'position_min': '-2.5', 'homing_speed': '35.0'}, 'tmc2660 stepper_z': {'cs_pin': 'PC10', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'adc_temperature my_thermistor': {'temperature1': '0', 'resistance1': '1000', 'temperature2': '80', 'resistance2': '1309'}, 'extruder': {'step_pin': '!EBBCan:gpio18', 'dir_pin': 'EBBCan:gpio19', 'enable_pin': '!EBBCan:gpio17', 'microsteps': '32', 'rotation_distance': '21.63024711', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'pressure_advance': '0.065', 'pressure_advance_smooth_time': '0.02', 'gear_ratio': '50:10', 'heater_pin': 'EBBCan:gpio7', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'EBBCan:gpio27', 'control': 'pid', 'pid_kp': '21.527', 'pid_ki': '1.063', 'pid_kd': '108.982', 'min_temp': '0', 'max_temp': '250'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan:gpio20', 'run_current': '0.5', 'stealthchop_threshold': '999999'}, 'filament_switch_sensor extruder': {'pause_on_runout': 'True', 'switch_pin': 'EBBCan:gpio21'}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu'}, 'thermistor chamber_temp': {'temperature1': '25', 'resistance1': '10000', 'beta': '3950'}, 'heater_bed': {'heater_pin': '!PA19', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PC13', 'control': 'watermark', 'min_temp': '0', 'max_temp': '120'}, 'heater_fan extruder_fan': {'pin': 'EBBCan:gpio13', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'EBBCan:gpio14', 'cycle_time': '.08', 'kick_start_time': '.25'}, 'probe': {'pin': '^EBBCan:gpio22', 'x_offset': '0', 'y_offset': '0', 'samples': '3', 'samples_result': 'median', 'sample_retract_dist': '3', 'samples_tolerance': '0.015', 'samples_tolerance_retries': '3', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'z_offset': '-1.350'}, 'homing_override': {'axes': 'z', 'set_position_z': '0', 'gcode': '\nstatus_homing\nG90\nG0 Z5 F500\nG28 X0 Y0\nG0 X150 Y100 F9000\nG28 Z0\nG0 Z5 F500\nstatus_ready'}, 'bed_mesh': {'speed': '150', 'horizontal_move_z': '5', 'mesh_min': '25,35.0', 'mesh_max': '225.0,220', 'probe_count': '6,6', 'algorithm': 'bicubic', 'fade_start': '1', 'fade_end': '10', 'fade_target': '0'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\nM117 Homing...\nM109 S150\nG28 Y0 X0 Z0\n\n\n\n\n\n\n\n\n\n\n\n\nSTATUS_HEATING\nM107\nM117 Heating bed\nM190 S{ params.BED }\nM117 Heating nozzle\nM109 S{target_extruder}\nstatus_ready\nG1 Z15.0 F600\nG1 X125 Y125 F3000\nG92 E0\nG1 F9000\nstatus_printing\nM117 Printing...'}, 'gcode_macro PRINT_END': {'gcode': '\nstatus_busy\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\n\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y} F3600\nM117 Finished!\nstatus_off'}, 'printer': {'kinematics': 'corexz', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '5', 'max_z_accel': '100'}, 'force_move': {'enable_force_move': 'true'}, 'exclude_object': {}, 'bed_mesh default': {'version': '1', 'points': '\n-0.287500, -0.112500, -0.062500, -0.025000, 0.137500, -0.137500\n-0.225000, -0.112500, -0.087500, 0.037500, 0.137500, 0.287500\n-0.287500, -0.200000, -0.087500, -0.000000, 0.137500, 0.300000\n-0.337500, -0.200000, -0.137500, -0.012500, 0.125000, 0.275000\n-0.300000, -0.162500, -0.062500, 0.037500, 0.187500, 0.337500\n-0.212500, -0.075000, 0.025000, 0.125000, 0.275000, 0.450000', 'x_count': '6', 'y_count': '6', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'bicubic', 'tension': '0.2', 'min_x': '25.0', 'max_x': '225.0', 'min_y': '35.0', 'max_y': '220.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_sam4e8e_00313753364B37373032303038303139-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu ebbcan': {'canbus_uuid': '8250861450f7', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set allow_park = client.park_at_cancel | default(false) | lower == \'true\' %}\n{% set retract = client.cancel_retract | default(5.0) | abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x | default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y | default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x | length > 0 or park_y | length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro | default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set idle_timeout = client.idle_timeout | default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE | default(1) | int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro | default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move | default(velocity) %}\n{% set runout_resume = True if client.runout_sensor | default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state | upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro | default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY | default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'neopixel sb_leds': {'pin': 'EBBCan:gpio16', 'chain_count': 3, 'color_order': ['GRB'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'led_effect sb_logo_busy': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1,0,0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_cleaning': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.02, 0.5)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_calibrating_z': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 0.35)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1, 0.18, 0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0, 0, 1)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_homing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.6, 0.2)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_leveling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.5, 0.1, 0.4)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_meshing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.2, 1.0, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_printing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.3, 0.3, 0.0),(0.3, 0.1, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_standby': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.01, 0.01, 0.01)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 1.0, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_nozzle_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1.0, 0.18, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 1.0, 0.1)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_standby': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.6, 0.0, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.6, 1.0, 0.0, 0.1)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_critical_error': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': True, 'endstops': '', 'layers': '\nstrobe         1  1.5   add        (1.0,  1.0, 1.0)\nbreathing      2  0     difference (0.95, 0.0, 0.0)\nstatic         1  0     top        (1.0,  0.0, 0.0)', 'leds': '\nneopixel:sb_leds'}, 'led_effect rainbow': {'frame_rate': 24.0, 'autostart': True, 'run_on_error': False, 'endstops': '', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.0, 0.3, 0.0),(0.0, 0.0, 0.3)', 'leds': '\nneopixel:sb_leds'}, 'led_effect set_nozzle_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic         0  0     top        (0.5,  0.5, 0.5)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect set_logo_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic         0  0     top        (1.0,  1.0, 1.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'gcode_macro set_logo_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nSTOP_LED_EFFECTS', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=rainbow', 'description': 'G-Code macro'}, 'gcode_macro status_part_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_busy\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_heating\nSET_LED_EFFECT EFFECT=sb_nozzle_heating', 'description': 'G-Code macro'}, 'gcode_macro status_cooling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cooling\nSET_LED_EFFECT EFFECT=sb_nozzle_cooling', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_leveling\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_homing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cleaning\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_meshing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_calibrating_z\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_printing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'adxl345': {'axes_map': ['z', '-y', 'x'], 'rate': 3200, 'cs_pin': 'EBBCan:gpio1', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'EBBCan:gpio2', 'spi_software_miso_pin': 'EBBCan:gpio3', 'spi_software_mosi_pin': 'EBBCan:gpio0'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[100.0, 100.0, 20.0]], 'accel_chip': 'adxl345'}, 'input_shaper': {'shaper_type': '3hump_ei', 'shaper_type_x': '3hump_ei', 'damping_ratio_x': 0.1, 'shaper_freq_x': 45.0, 'shaper_type_y': '3hump_ei', 'damping_ratio_y': 0.1, 'shaper_freq_y': 0.0}, 'tmc2660 stepper_x': {'cs_pin': 'PD14', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PD6', 'dir_pin': '!PD11', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'EBBCan:gpio24', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2660 stepper_y': {'cs_pin': 'PC9', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PD7', 'dir_pin': '!PD12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'PA2', 'position_endstop': 0.0, 'position_min': -4.0, 'position_max': 225.0, 'homing_speed': 35.0, 'second_homing_speed': 17.5, 'homing_retract_speed': 35.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2660 stepper_z': {'cs_pin': 'PC10', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PD8', 'dir_pin': '!PD13', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -2.5, 'position_max': 230.0, 'homing_speed': 35.0, 'second_homing_speed': 17.5, 'homing_retract_speed': 35.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'adc_temperature my_thermistor': {'resistance1': 1000.0, 'temperature1': 0.0, 'temperature2': 80.0, 'resistance2': 1309.0}, 'tmc2209 extruder': {'uart_pin': 'EBBCan:gpio20', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan:gpio27', 'min_temp': 0.0, 'max_temp': 250.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 21.527, 'pid_ki': 1.063, 'pid_kd': 108.982, 'heater_pin': 'EBBCan:gpio7', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': '!EBBCan:gpio18', 'pressure_advance': 0.065, 'pressure_advance_smooth_time': 0.02, 'dir_pin': 'EBBCan:gpio19', 'rotation_distance': 21.63024711, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!EBBCan:gpio17'}, 'filament_switch_sensor extruder': {'switch_pin': 'EBBCan:gpio21', 'pause_on_runout': True, 'runout_gcode': '', 'pause_delay': 0.5, 'event_delay': 3.0}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'thermistor chamber_temp': {'temperature1': 25.0, 'resistance1': 10000.0, 'beta': 3950.0}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PC13', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'watermark', 'max_delta': 2.0, 'heater_pin': '!PA19', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan extruder_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'EBBCan:gpio13', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.25, 'off_below': 0.0, 'cycle_time': 0.08, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'EBBCan:gpio14'}, 'probe': {'z_offset': -1.35, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': '^EBBCan:gpio22', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 3, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.015, 'samples_tolerance_retries': 3}, 'homing_override': {'set_position_z': 0.0, 'axes': 'z', 'gcode': '\nstatus_homing\nG90\nG0 Z5 F500\nG28 X0 Y0\nG0 X150 Y100 F9000\nG28 Z0\nG0 Z5 F500\nstatus_ready'}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [6, 6], 'mesh_min': [25.0, 35.0], 'mesh_max': [225.0, 220.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 150.0, 'fade_start': 1.0, 'fade_end': 10.0, 'fade_target': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[-0.2875, -0.1125, -0.0625, -0.025, 0.1375, -0.1375], [-0.225, -0.1125, -0.0875, 0.0375, 0.1375, 0.2875], [-0.2875, -0.2, -0.0875, -0.0, 0.1375, 0.3], [-0.3375, -0.2, -0.1375, -0.0125, 0.125, 0.275], [-0.3, -0.1625, -0.0625, 0.0375, 0.1875, 0.3375], [-0.2125, -0.075, 0.025, 0.125, 0.275, 0.45]], 'min_x': 25.0, 'max_x': 225.0, 'min_y': 35.0, 'max_y': 220.0, 'x_count': 6, 'y_count': 6, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'bicubic', 'tension': 0.2}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\nM117 Homing...\nM109 S150\nG28 Y0 X0 Z0\n\n\n\n\n\n\n\n\n\n\n\n\nSTATUS_HEATING\nM107\nM117 Heating bed\nM190 S{ params.BED }\nM117 Heating nozzle\nM109 S{target_extruder}\nstatus_ready\nG1 Z15.0 F600\nG1 X125 Y125 F3000\nG92 E0\nG1 F9000\nstatus_printing\nM117 Printing...', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\nstatus_busy\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\n\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y} F3600\nM117 Finished!\nstatus_off', 'description': 'G-Code macro'}, 'force_move': {'enable_force_move': True}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexz', 'max_z_velocity': 5.0, 'max_z_accel': 100.0}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-03-28 19:53:18,801 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-03-28 19:53:18,803 [printer.py:reinit()] - Klipper version: v0.12.0-132-ge37b007f-dirty
2024-03-28 19:53:18,803 [printer.py:reinit()] - # Extruders: 1
2024-03-28 19:53:18,803 [printer.py:reinit()] - # Temperature devices: 2
2024-03-28 19:53:18,803 [printer.py:reinit()] - # Fans: 2
2024-03-28 19:53:18,804 [printer.py:reinit()] - # Output pins: 0
2024-03-28 19:53:18,804 [printer.py:reinit()] - # Leds: 20
2024-03-28 19:53:18,804 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-03-28 19:53:18,820 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-03-28 19:53:18,822 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor mcu&fan&heater_fan extruder_fan&filament_switch_sensor extruder&neopixel sb_leds
2024-03-28 19:53:19,088 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-03-28 19:53:19,088 [screen.py:init_klipper()] - Printer initialized
2024-03-28 19:53:19,088 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2024-03-28 19:53:19,089 [printer.py:change_state()] - Adding callback for state: ready
2024-03-28 19:53:19,090 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-03-28 19:53:19,094 [screen.py:show_panel()] - Reinitializing panel
2024-03-28 19:53:19,200 [main_menu.py:__init__()] - ### Making MainMenu
2024-03-28 19:53:19,215 [main_menu.py:add_device()] - Adding device: extruder
2024-03-28 19:53:19,225 [main_menu.py:add_device()] - Adding device: heater_bed
2024-03-28 19:53:19,234 [main_menu.py:add_device()] - Adding device: temperature_sensor mcu
2024-03-28 19:53:19,292 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-03-28 19:53:19,293 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-03-28 19:53:19,330 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor mcu', 'heater_bed', 'extruder']
2024-03-28 19:53:19,331 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-03-28 19:53:19,344 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-03-28 20:20:54,362 [screen.py:_load_panel()] - Loading panel: move
2024-03-28 20:20:54,539 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2024-03-28 20:21:02,544 [functions.py:log_start()] - --------------------KlipperScreen Log Start--------------------
2024-03-28 20:21:02,545 [functions.py:log_start()] - KlipperScreen Version: v0.3.9-50-gdaed9a0
2024-03-28 20:21:02,545 [functions.py:log_start()] - Python version: 3.11
2024-03-28 20:21:02,683 [config.py:get_config_file_location()] - Passed config (-c): .
2024-03-28 20:21:02,684 [config.py:__init__()] - Config path location: /home/pi/printer_data/config/KlipperScreen.conf
2024-03-28 20:21:02,708 [config.py:log_config()] -  ===== Config File =====

=======================
2024-03-28 20:21:02,710 [config.py:__init__()] - ====== Saved Def ======

[main]
use_dpms = False
print_sort_dir = date_desc

=======================
2024-03-28 20:21:02,711 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2024-03-28 20:21:02,821 [config.py:create_translations()] - Selected lang: None OS lang: en_GB
2024-03-28 20:21:02,821 [config.py:install_language()] - Using lang en
2024-03-28 20:21:02,840 [screen.py:__init__()] - Monitors: 1 using number: 0
2024-03-28 20:21:02,841 [screen.py:__init__()] - Wayland: False Display name: :100
2024-03-28 20:21:02,845 [screen.py:__init__()] - Screen resolution: 984x540
2024-03-28 20:21:02,847 [KlippyGtk.py:__init__()] - Font size: 18.6 (medium)
2024-03-28 20:21:03,400 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2024-03-28 20:21:03,401 [screen.py:set_screenblanking_timeout()] - Not using DPMS
2024-03-28 20:21:03,409 [screen.py:initial_connection()] - Default printer: None
2024-03-28 20:21:03,476 [screen.py:connect_printer()] - Connecting to printer: Printer
2024-03-28 20:21:03,476 [screen.py:_load_panel()] - Loading panel: splash_screen
2024-03-28 20:21:03,545 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-03-28 20:21:03,563 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-03-28 20:21:03,564 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-03-28 20:21:03,581 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/access/oneshot_token
2024-03-28 20:21:03,593 [KlippyWebsocket.py:connect()] - Starting websocket thread
2024-03-28 20:21:03,601 [_logging.py:info()] - Websocket connected
2024-03-28 20:21:03,602 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2024-03-28 20:21:03,619 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-03-28 20:21:03,630 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-03-28 20:21:03,641 [printer.py:configure_cameras()] - Cameras: []
2024-03-28 20:21:03,642 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'ready', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'octoprint_compat', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-03-28 20:21:03,642 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-03-28 20:21:03,656 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-03-28 20:21:03,729 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set allow_park = client.park_at_cancel | default(false) | lower == \'true\' %}\n{% set retract = client.cancel_retract | default(5.0) | abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x | default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y | default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x | length > 0 or park_y | length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro | default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set idle_timeout = client.idle_timeout | default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE | default(1) | int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro | default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move | default(velocity) %}\n{% set runout_resume = True if client.runout_sensor | default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state | upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro | default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY | default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}"}, 'neopixel sb_leds': {'pin': 'EBBCan:gpio16', 'chain_count': '3', 'color_order': 'GRB', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0'}, 'led_effect sb_logo_busy': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (1,0,0)'}, 'led_effect sb_logo_cleaning': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.02, 0.5)'}, 'led_effect sb_logo_calibrating_z': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 0.35)'}, 'led_effect sb_logo_heating': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nbreathing  3 1 top (1, 0.18, 0)'}, 'led_effect sb_logo_cooling': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nbreathing  3 1 top (0, 0, 1)'}, 'led_effect sb_logo_homing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.6, 0.2)'}, 'led_effect sb_logo_leveling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.5, 0.1, 0.4)'}, 'led_effect sb_logo_meshing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.2, 1.0, 0.0)'}, 'led_effect sb_logo_printing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.3, 0.3, 0.0),(0.3, 0.1, 0.0)'}, 'led_effect sb_logo_standby': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.01, 0.01, 0.01)'}, 'led_effect sb_logo_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 1.0, 0.0)'}, 'led_effect sb_nozzle_heating': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (1.0, 0.18, 0.0, 0.0)'}, 'led_effect sb_nozzle_cooling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 1.0, 0.1)'}, 'led_effect sb_nozzle_standby': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.6, 0.0, 0.0, 0.0)'}, 'led_effect sb_nozzle_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.6, 1.0, 0.0, 0.1)'}, 'led_effect sb_critical_error': {'leds': '\nneopixel:sb_leds', 'layers': '\nstrobe         1  1.5   add        (1.0,  1.0, 1.0)\nbreathing      2  0     difference (0.95, 0.0, 0.0)\nstatic         1  0     top        (1.0,  0.0, 0.0)', 'autostart': 'false', 'frame_rate': '24', 'run_on_error': 'true'}, 'led_effect rainbow': {'leds': '\nneopixel:sb_leds', 'autostart': 'true', 'frame_rate': '24', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.0, 0.3, 0.0),(0.0, 0.0, 0.3)'}, 'led_effect set_nozzle_leds': {'leds': '\nneopixel:sb_leds (2,3)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nstatic         0  0     top        (0.5,  0.5, 0.5)'}, 'led_effect set_logo_leds': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nstatic         0  0     top        (1.0,  1.0, 1.0)'}, 'gcode_macro set_logo_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds STOP=1'}, 'gcode_macro set_logo_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1'}, 'gcode_macro status_off': {'gcode': '\nSTOP_LED_EFFECTS'}, 'gcode_macro status_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=rainbow'}, 'gcode_macro status_part_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready'}, 'gcode_macro status_busy': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_busy\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_heating\nSET_LED_EFFECT EFFECT=sb_nozzle_heating'}, 'gcode_macro status_cooling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cooling\nSET_LED_EFFECT EFFECT=sb_nozzle_cooling'}, 'gcode_macro status_leveling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_leveling\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_homing\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cleaning\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_meshing\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_calibrating_z\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_printing\nset_nozzle_leds_on'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_sam4e8e_00313753364B37373032303038303139-if00'}, 'mcu EBBCan': {'canbus_uuid': '8250861450f7'}, 'adxl345': {'cs_pin': 'EBBCan:gpio1', 'spi_software_sclk_pin': 'EBBCan:gpio2', 'spi_software_mosi_pin': 'EBBCan:gpio0', 'spi_software_miso_pin': 'EBBCan:gpio3', 'axes_map': 'z,-y,x'}, 'resonance_tester': {'probe_points': '100, 100, 20', 'accel_chip': 'adxl345'}, 'input_shaper': {'shaper_freq_x': '45', 'shaper_type': '3hump_ei'}, 'stepper_x': {'step_pin': 'PD6', 'dir_pin': '!PD11', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'EBBCan:gpio24', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '40'}, 'tmc2660 stepper_x': {'cs_pin': 'PD14', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'stepper_y': {'step_pin': 'PD7', 'dir_pin': '!PD12', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'PA2', 'position_endstop': '0', 'position_max': '225', 'position_min': '-4', 'homing_speed': '35', 'homing_retract_dist': '0'}, 'tmc2660 stepper_y': {'cs_pin': 'PC9', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'stepper_z': {'step_pin': 'PD8', 'dir_pin': '!PD13', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '230', 'position_min': '-2.5', 'homing_speed': '35.0'}, 'tmc2660 stepper_z': {'cs_pin': 'PC10', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'adc_temperature my_thermistor': {'temperature1': '0', 'resistance1': '1000', 'temperature2': '80', 'resistance2': '1309'}, 'extruder': {'step_pin': '!EBBCan:gpio18', 'dir_pin': 'EBBCan:gpio19', 'enable_pin': '!EBBCan:gpio17', 'microsteps': '32', 'rotation_distance': '21.63024711', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'pressure_advance': '0.065', 'pressure_advance_smooth_time': '0.02', 'gear_ratio': '50:10', 'heater_pin': 'EBBCan:gpio7', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'EBBCan:gpio27', 'control': 'pid', 'pid_kp': '21.527', 'pid_ki': '1.063', 'pid_kd': '108.982', 'min_temp': '0', 'max_temp': '250'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan:gpio20', 'run_current': '0.5', 'stealthchop_threshold': '999999'}, 'filament_switch_sensor extruder': {'pause_on_runout': 'True', 'switch_pin': 'EBBCan:gpio21'}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu'}, 'thermistor chamber_temp': {'temperature1': '25', 'resistance1': '10000', 'beta': '3950'}, 'heater_bed': {'heater_pin': '!PA19', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PC13', 'control': 'watermark', 'min_temp': '0', 'max_temp': '120'}, 'heater_fan extruder_fan': {'pin': 'EBBCan:gpio13', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'EBBCan:gpio14', 'cycle_time': '.08', 'kick_start_time': '.25'}, 'probe': {'pin': '^EBBCan:gpio22', 'x_offset': '0', 'y_offset': '0', 'samples': '3', 'samples_result': 'median', 'sample_retract_dist': '3', 'samples_tolerance': '0.015', 'samples_tolerance_retries': '3', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'z_offset': '-1.350'}, 'homing_override': {'axes': 'z', 'set_position_z': '0', 'gcode': '\nstatus_homing\nG90\nG0 Z5 F500\nG28 X0 Y0\nG0 X150 Y100 F9000\nG28 Z0\nG0 Z5 F500\nstatus_ready'}, 'bed_mesh': {'speed': '150', 'horizontal_move_z': '5', 'mesh_min': '25,35.0', 'mesh_max': '225.0,220', 'probe_count': '6,6', 'algorithm': 'bicubic', 'fade_start': '1', 'fade_end': '10', 'fade_target': '0'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\nM117 Homing...\nM109 S150\nG28 Y0 X0 Z0\n\n\n\n\n\n\n\n\n\n\n\n\nSTATUS_HEATING\nM107\nM117 Heating bed\nM190 S{ params.BED }\nM117 Heating nozzle\nM109 S{target_extruder}\nstatus_ready\nG1 Z15.0 F600\nG1 X125 Y125 F3000\nG92 E0\nG1 F9000\nstatus_printing\nM117 Printing...'}, 'gcode_macro PRINT_END': {'gcode': '\nstatus_busy\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\n\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y} F3600\nM117 Finished!\nstatus_off'}, 'printer': {'kinematics': 'corexz', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '5', 'max_z_accel': '100'}, 'force_move': {'enable_force_move': 'true'}, 'exclude_object': {}, 'bed_mesh default': {'version': '1', 'points': '\n-0.287500, -0.112500, -0.062500, -0.025000, 0.137500, -0.137500\n-0.225000, -0.112500, -0.087500, 0.037500, 0.137500, 0.287500\n-0.287500, -0.200000, -0.087500, -0.000000, 0.137500, 0.300000\n-0.337500, -0.200000, -0.137500, -0.012500, 0.125000, 0.275000\n-0.300000, -0.162500, -0.062500, 0.037500, 0.187500, 0.337500\n-0.212500, -0.075000, 0.025000, 0.125000, 0.275000, 0.450000', 'x_count': '6', 'y_count': '6', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'bicubic', 'tension': '0.2', 'min_x': '25.0', 'max_x': '225.0', 'min_y': '35.0', 'max_y': '220.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_sam4e8e_00313753364B37373032303038303139-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu ebbcan': {'canbus_uuid': '8250861450f7', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set allow_park = client.park_at_cancel | default(false) | lower == \'true\' %}\n{% set retract = client.cancel_retract | default(5.0) | abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x | default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y | default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x | length > 0 or park_y | length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro | default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set idle_timeout = client.idle_timeout | default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE | default(1) | int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro | default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move | default(velocity) %}\n{% set runout_resume = True if client.runout_sensor | default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state | upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro | default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY | default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'neopixel sb_leds': {'pin': 'EBBCan:gpio16', 'chain_count': 3, 'color_order': ['GRB'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'led_effect sb_logo_busy': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1,0,0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_cleaning': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.02, 0.5)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_calibrating_z': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 0.35)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1, 0.18, 0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0, 0, 1)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_homing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.6, 0.2)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_leveling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.5, 0.1, 0.4)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_meshing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.2, 1.0, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_printing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.3, 0.3, 0.0),(0.3, 0.1, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_standby': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.01, 0.01, 0.01)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 1.0, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_nozzle_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1.0, 0.18, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 1.0, 0.1)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_standby': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.6, 0.0, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.6, 1.0, 0.0, 0.1)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_critical_error': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': True, 'endstops': '', 'layers': '\nstrobe         1  1.5   add        (1.0,  1.0, 1.0)\nbreathing      2  0     difference (0.95, 0.0, 0.0)\nstatic         1  0     top        (1.0,  0.0, 0.0)', 'leds': '\nneopixel:sb_leds'}, 'led_effect rainbow': {'frame_rate': 24.0, 'autostart': True, 'run_on_error': False, 'endstops': '', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.0, 0.3, 0.0),(0.0, 0.0, 0.3)', 'leds': '\nneopixel:sb_leds'}, 'led_effect set_nozzle_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic         0  0     top        (0.5,  0.5, 0.5)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect set_logo_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic         0  0     top        (1.0,  1.0, 1.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'gcode_macro set_logo_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nSTOP_LED_EFFECTS', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=rainbow', 'description': 'G-Code macro'}, 'gcode_macro status_part_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_busy\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_heating\nSET_LED_EFFECT EFFECT=sb_nozzle_heating', 'description': 'G-Code macro'}, 'gcode_macro status_cooling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cooling\nSET_LED_EFFECT EFFECT=sb_nozzle_cooling', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_leveling\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_homing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cleaning\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_meshing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_calibrating_z\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_printing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'adxl345': {'axes_map': ['z', '-y', 'x'], 'rate': 3200, 'cs_pin': 'EBBCan:gpio1', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'EBBCan:gpio2', 'spi_software_miso_pin': 'EBBCan:gpio3', 'spi_software_mosi_pin': 'EBBCan:gpio0'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[100.0, 100.0, 20.0]], 'accel_chip': 'adxl345'}, 'input_shaper': {'shaper_type': '3hump_ei', 'shaper_type_x': '3hump_ei', 'damping_ratio_x': 0.1, 'shaper_freq_x': 45.0, 'shaper_type_y': '3hump_ei', 'damping_ratio_y': 0.1, 'shaper_freq_y': 0.0}, 'tmc2660 stepper_x': {'cs_pin': 'PD14', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PD6', 'dir_pin': '!PD11', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'EBBCan:gpio24', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2660 stepper_y': {'cs_pin': 'PC9', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PD7', 'dir_pin': '!PD12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'PA2', 'position_endstop': 0.0, 'position_min': -4.0, 'position_max': 225.0, 'homing_speed': 35.0, 'second_homing_speed': 17.5, 'homing_retract_speed': 35.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2660 stepper_z': {'cs_pin': 'PC10', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PD8', 'dir_pin': '!PD13', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -2.5, 'position_max': 230.0, 'homing_speed': 35.0, 'second_homing_speed': 17.5, 'homing_retract_speed': 35.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'adc_temperature my_thermistor': {'resistance1': 1000.0, 'temperature1': 0.0, 'temperature2': 80.0, 'resistance2': 1309.0}, 'tmc2209 extruder': {'uart_pin': 'EBBCan:gpio20', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan:gpio27', 'min_temp': 0.0, 'max_temp': 250.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 21.527, 'pid_ki': 1.063, 'pid_kd': 108.982, 'heater_pin': 'EBBCan:gpio7', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': '!EBBCan:gpio18', 'pressure_advance': 0.065, 'pressure_advance_smooth_time': 0.02, 'dir_pin': 'EBBCan:gpio19', 'rotation_distance': 21.63024711, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!EBBCan:gpio17'}, 'filament_switch_sensor extruder': {'switch_pin': 'EBBCan:gpio21', 'pause_on_runout': True, 'runout_gcode': '', 'pause_delay': 0.5, 'event_delay': 3.0}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'thermistor chamber_temp': {'temperature1': 25.0, 'resistance1': 10000.0, 'beta': 3950.0}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PC13', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'watermark', 'max_delta': 2.0, 'heater_pin': '!PA19', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan extruder_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'EBBCan:gpio13', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.25, 'off_below': 0.0, 'cycle_time': 0.08, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'EBBCan:gpio14'}, 'probe': {'z_offset': -1.35, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': '^EBBCan:gpio22', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 3, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.015, 'samples_tolerance_retries': 3}, 'homing_override': {'set_position_z': 0.0, 'axes': 'z', 'gcode': '\nstatus_homing\nG90\nG0 Z5 F500\nG28 X0 Y0\nG0 X150 Y100 F9000\nG28 Z0\nG0 Z5 F500\nstatus_ready'}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [6, 6], 'mesh_min': [25.0, 35.0], 'mesh_max': [225.0, 220.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 150.0, 'fade_start': 1.0, 'fade_end': 10.0, 'fade_target': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[-0.2875, -0.1125, -0.0625, -0.025, 0.1375, -0.1375], [-0.225, -0.1125, -0.0875, 0.0375, 0.1375, 0.2875], [-0.2875, -0.2, -0.0875, -0.0, 0.1375, 0.3], [-0.3375, -0.2, -0.1375, -0.0125, 0.125, 0.275], [-0.3, -0.1625, -0.0625, 0.0375, 0.1875, 0.3375], [-0.2125, -0.075, 0.025, 0.125, 0.275, 0.45]], 'min_x': 25.0, 'max_x': 225.0, 'min_y': 35.0, 'max_y': 220.0, 'x_count': 6, 'y_count': 6, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'bicubic', 'tension': 0.2}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\nM117 Homing...\nM109 S150\nG28 Y0 X0 Z0\n\n\n\n\n\n\n\n\n\n\n\n\nSTATUS_HEATING\nM107\nM117 Heating bed\nM190 S{ params.BED }\nM117 Heating nozzle\nM109 S{target_extruder}\nstatus_ready\nG1 Z15.0 F600\nG1 X125 Y125 F3000\nG92 E0\nG1 F9000\nstatus_printing\nM117 Printing...', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\nstatus_busy\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\n\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y} F3600\nM117 Finished!\nstatus_off', 'description': 'G-Code macro'}, 'force_move': {'enable_force_move': True}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexz', 'max_z_velocity': 5.0, 'max_z_accel': 100.0}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-03-28 20:21:03,732 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-03-28 20:21:03,734 [printer.py:reinit()] - Klipper version: v0.12.0-132-ge37b007f-dirty
2024-03-28 20:21:03,734 [printer.py:reinit()] - # Extruders: 1
2024-03-28 20:21:03,734 [printer.py:reinit()] - # Temperature devices: 2
2024-03-28 20:21:03,734 [printer.py:reinit()] - # Fans: 2
2024-03-28 20:21:03,735 [printer.py:reinit()] - # Output pins: 0
2024-03-28 20:21:03,735 [printer.py:reinit()] - # Leds: 20
2024-03-28 20:21:03,735 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-03-28 20:21:03,753 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-03-28 20:21:03,755 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor mcu&fan&heater_fan extruder_fan&filament_switch_sensor extruder&neopixel sb_leds
2024-03-28 20:21:04,038 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-03-28 20:21:04,038 [screen.py:init_klipper()] - Printer initialized
2024-03-28 20:21:04,039 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2024-03-28 20:21:04,039 [printer.py:change_state()] - Adding callback for state: ready
2024-03-28 20:21:04,205 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-03-28 20:21:04,209 [screen.py:_load_panel()] - Loading panel: main_menu
2024-03-28 20:21:04,324 [main_menu.py:__init__()] - ### Making MainMenu
2024-03-28 20:21:04,343 [main_menu.py:add_device()] - Adding device: extruder
2024-03-28 20:21:04,352 [main_menu.py:add_device()] - Adding device: heater_bed
2024-03-28 20:21:04,361 [main_menu.py:add_device()] - Adding device: temperature_sensor mcu
2024-03-28 20:21:04,412 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-03-28 20:21:04,414 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-03-28 20:21:04,448 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor mcu', 'heater_bed', 'extruder']
2024-03-28 20:21:04,450 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-03-28 20:21:04,462 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-03-28 20:21:08,055 [screen.py:_load_panel()] - Loading panel: move
2024-03-28 20:21:08,214 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2024-03-28 20:21:09,870 [screen.py:_load_panel()] - Loading panel: menu
2024-03-28 20:21:10,023 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move > menu
2024-03-28 20:21:10,044 [menu.py:arrangeMenuItems()] - X > homing quad_gantry_level
2024-03-28 20:21:10,048 [menu.py:arrangeMenuItems()] - X > homing Z-Tilt
2024-03-28 20:21:12,846 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G28'}
2024-03-28 20:21:29,034 [functions.py:log_start()] - --------------------KlipperScreen Log Start--------------------
2024-03-28 20:21:29,035 [functions.py:log_start()] - KlipperScreen Version: v0.3.9-50-gdaed9a0
2024-03-28 20:21:29,035 [functions.py:log_start()] - Python version: 3.11
2024-03-28 20:21:29,182 [config.py:get_config_file_location()] - Passed config (-c): .
2024-03-28 20:21:29,183 [config.py:__init__()] - Config path location: /home/pi/printer_data/config/KlipperScreen.conf
2024-03-28 20:21:29,209 [config.py:log_config()] -  ===== Config File =====

=======================
2024-03-28 20:21:29,212 [config.py:__init__()] - ====== Saved Def ======

[main]
use_dpms = False
print_sort_dir = date_desc

=======================
2024-03-28 20:21:29,213 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2024-03-28 20:21:29,329 [config.py:create_translations()] - Selected lang: None OS lang: en_GB
2024-03-28 20:21:29,330 [config.py:install_language()] - Using lang en
2024-03-28 20:21:29,351 [screen.py:__init__()] - Monitors: 1 using number: 0
2024-03-28 20:21:29,352 [screen.py:__init__()] - Wayland: False Display name: :100
2024-03-28 20:21:29,355 [screen.py:__init__()] - Screen resolution: 984x540
2024-03-28 20:21:29,356 [KlippyGtk.py:__init__()] - Font size: 18.6 (medium)
2024-03-28 20:21:30,365 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2024-03-28 20:21:30,365 [screen.py:set_screenblanking_timeout()] - Not using DPMS
2024-03-28 20:21:30,374 [screen.py:initial_connection()] - Default printer: None
2024-03-28 20:21:30,446 [screen.py:connect_printer()] - Connecting to printer: Printer
2024-03-28 20:21:30,446 [screen.py:_load_panel()] - Loading panel: splash_screen
2024-03-28 20:21:30,519 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-03-28 20:21:30,540 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-03-28 20:21:30,541 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-03-28 20:21:30,560 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/access/oneshot_token
2024-03-28 20:21:30,573 [KlippyWebsocket.py:connect()] - Starting websocket thread
2024-03-28 20:21:30,583 [_logging.py:info()] - Websocket connected
2024-03-28 20:21:30,583 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2024-03-28 20:21:30,596 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-03-28 20:21:30,609 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-03-28 20:21:30,621 [printer.py:configure_cameras()] - Cameras: []
2024-03-28 20:21:30,622 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'ready', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'octoprint_compat', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-03-28 20:21:30,622 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-03-28 20:21:30,637 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-03-28 20:21:30,795 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set allow_park = client.park_at_cancel | default(false) | lower == \'true\' %}\n{% set retract = client.cancel_retract | default(5.0) | abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x | default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y | default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x | length > 0 or park_y | length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro | default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set idle_timeout = client.idle_timeout | default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE | default(1) | int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro | default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move | default(velocity) %}\n{% set runout_resume = True if client.runout_sensor | default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state | upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro | default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY | default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}"}, 'neopixel sb_leds': {'pin': 'EBBCan:gpio16', 'chain_count': '3', 'color_order': 'GRB', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0'}, 'led_effect sb_logo_busy': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (1,0,0)'}, 'led_effect sb_logo_cleaning': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.02, 0.5)'}, 'led_effect sb_logo_calibrating_z': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 0.35)'}, 'led_effect sb_logo_heating': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nbreathing  3 1 top (1, 0.18, 0)'}, 'led_effect sb_logo_cooling': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nbreathing  3 1 top (0, 0, 1)'}, 'led_effect sb_logo_homing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.6, 0.2)'}, 'led_effect sb_logo_leveling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.5, 0.1, 0.4)'}, 'led_effect sb_logo_meshing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.2, 1.0, 0.0)'}, 'led_effect sb_logo_printing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.3, 0.3, 0.0),(0.3, 0.1, 0.0)'}, 'led_effect sb_logo_standby': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.01, 0.01, 0.01)'}, 'led_effect sb_logo_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 1.0, 0.0)'}, 'led_effect sb_nozzle_heating': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (1.0, 0.18, 0.0, 0.0)'}, 'led_effect sb_nozzle_cooling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 1.0, 0.1)'}, 'led_effect sb_nozzle_standby': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.6, 0.0, 0.0, 0.0)'}, 'led_effect sb_nozzle_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.6, 1.0, 0.0, 0.1)'}, 'led_effect sb_critical_error': {'leds': '\nneopixel:sb_leds', 'layers': '\nstrobe         1  1.5   add        (1.0,  1.0, 1.0)\nbreathing      2  0     difference (0.95, 0.0, 0.0)\nstatic         1  0     top        (1.0,  0.0, 0.0)', 'autostart': 'false', 'frame_rate': '24', 'run_on_error': 'true'}, 'led_effect rainbow': {'leds': '\nneopixel:sb_leds', 'autostart': 'true', 'frame_rate': '24', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.0, 0.3, 0.0),(0.0, 0.0, 0.3)'}, 'led_effect set_nozzle_leds': {'leds': '\nneopixel:sb_leds (2,3)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nstatic         0  0     top        (0.5,  0.5, 0.5)'}, 'led_effect set_logo_leds': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nstatic         0  0     top        (1.0,  1.0, 1.0)'}, 'gcode_macro set_logo_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds STOP=1'}, 'gcode_macro set_logo_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1'}, 'gcode_macro status_off': {'gcode': '\nSTOP_LED_EFFECTS'}, 'gcode_macro status_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=rainbow'}, 'gcode_macro status_part_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready'}, 'gcode_macro status_busy': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_busy\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_heating\nSET_LED_EFFECT EFFECT=sb_nozzle_heating'}, 'gcode_macro status_cooling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cooling\nSET_LED_EFFECT EFFECT=sb_nozzle_cooling'}, 'gcode_macro status_leveling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_leveling\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_homing\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cleaning\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_meshing\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_calibrating_z\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_printing\nset_nozzle_leds_on'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_sam4e8e_00313753364B37373032303038303139-if00'}, 'mcu EBBCan': {'canbus_uuid': '8250861450f7'}, 'adxl345': {'cs_pin': 'EBBCan:gpio1', 'spi_software_sclk_pin': 'EBBCan:gpio2', 'spi_software_mosi_pin': 'EBBCan:gpio0', 'spi_software_miso_pin': 'EBBCan:gpio3', 'axes_map': 'z,-y,x'}, 'resonance_tester': {'probe_points': '100, 100, 20', 'accel_chip': 'adxl345'}, 'input_shaper': {'shaper_freq_x': '45', 'shaper_type': '3hump_ei'}, 'stepper_x': {'step_pin': 'PD6', 'dir_pin': '!PD11', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'EBBCan:gpio24', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '40'}, 'tmc2660 stepper_x': {'cs_pin': 'PD14', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'stepper_y': {'step_pin': 'PD7', 'dir_pin': '!PD12', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'PA2', 'position_endstop': '0', 'position_max': '225', 'position_min': '-4', 'homing_speed': '35', 'homing_retract_dist': '0'}, 'tmc2660 stepper_y': {'cs_pin': 'PC9', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'stepper_z': {'step_pin': 'PD8', 'dir_pin': '!PD13', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '230', 'position_min': '-2.5', 'homing_speed': '35.0'}, 'tmc2660 stepper_z': {'cs_pin': 'PC10', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'adc_temperature my_thermistor': {'temperature1': '0', 'resistance1': '1000', 'temperature2': '80', 'resistance2': '1309'}, 'extruder': {'step_pin': '!EBBCan:gpio18', 'dir_pin': 'EBBCan:gpio19', 'enable_pin': '!EBBCan:gpio17', 'microsteps': '32', 'rotation_distance': '21.63024711', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'pressure_advance': '0.065', 'pressure_advance_smooth_time': '0.02', 'gear_ratio': '50:10', 'heater_pin': 'EBBCan:gpio7', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'EBBCan:gpio27', 'control': 'pid', 'pid_kp': '21.527', 'pid_ki': '1.063', 'pid_kd': '108.982', 'min_temp': '0', 'max_temp': '250'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan:gpio20', 'run_current': '0.5', 'stealthchop_threshold': '999999'}, 'filament_switch_sensor extruder': {'pause_on_runout': 'True', 'switch_pin': 'EBBCan:gpio21'}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu'}, 'thermistor chamber_temp': {'temperature1': '25', 'resistance1': '10000', 'beta': '3950'}, 'heater_bed': {'heater_pin': '!PA19', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PC13', 'control': 'watermark', 'min_temp': '0', 'max_temp': '120'}, 'heater_fan extruder_fan': {'pin': 'EBBCan:gpio13', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'EBBCan:gpio14', 'cycle_time': '.08', 'kick_start_time': '.25'}, 'probe': {'pin': '^EBBCan:gpio22', 'x_offset': '0', 'y_offset': '0', 'samples': '3', 'samples_result': 'median', 'sample_retract_dist': '3', 'samples_tolerance': '0.015', 'samples_tolerance_retries': '3', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'z_offset': '-1.350'}, 'homing_override': {'axes': 'z', 'set_position_z': '0', 'gcode': '\nstatus_homing\nG90\nG0 Z5 F500\nG28 X0 Y0\nG0 X150 Y100 F9000\nG28 Z0\nG0 Z5 F500\nstatus_ready'}, 'bed_mesh': {'speed': '150', 'horizontal_move_z': '5', 'mesh_min': '25,35.0', 'mesh_max': '225.0,220', 'probe_count': '6,6', 'algorithm': 'bicubic', 'fade_start': '1', 'fade_end': '10', 'fade_target': '0'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\nM117 Homing...\nM109 S150\nG28 Y0 X0 Z0\n\n\n\n\n\n\n\n\n\n\n\n\nSTATUS_HEATING\nM107\nM117 Heating bed\nM190 S{ params.BED }\nM117 Heating nozzle\nM109 S{target_extruder}\nstatus_ready\nG1 Z15.0 F600\nG1 X125 Y125 F3000\nG92 E0\nG1 F9000\nstatus_printing\nM117 Printing...'}, 'gcode_macro PRINT_END': {'gcode': '\nstatus_busy\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\n\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y} F3600\nM117 Finished!\nstatus_off'}, 'printer': {'kinematics': 'corexz', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '5', 'max_z_accel': '100'}, 'force_move': {'enable_force_move': 'true'}, 'exclude_object': {}, 'bed_mesh default': {'version': '1', 'points': '\n-0.287500, -0.112500, -0.062500, -0.025000, 0.137500, -0.137500\n-0.225000, -0.112500, -0.087500, 0.037500, 0.137500, 0.287500\n-0.287500, -0.200000, -0.087500, -0.000000, 0.137500, 0.300000\n-0.337500, -0.200000, -0.137500, -0.012500, 0.125000, 0.275000\n-0.300000, -0.162500, -0.062500, 0.037500, 0.187500, 0.337500\n-0.212500, -0.075000, 0.025000, 0.125000, 0.275000, 0.450000', 'x_count': '6', 'y_count': '6', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'bicubic', 'tension': '0.2', 'min_x': '25.0', 'max_x': '225.0', 'min_y': '35.0', 'max_y': '220.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_sam4e8e_00313753364B37373032303038303139-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu ebbcan': {'canbus_uuid': '8250861450f7', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set allow_park = client.park_at_cancel | default(false) | lower == \'true\' %}\n{% set retract = client.cancel_retract | default(5.0) | abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x | default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y | default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x | length > 0 or park_y | length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro | default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set idle_timeout = client.idle_timeout | default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE | default(1) | int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro | default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move | default(velocity) %}\n{% set runout_resume = True if client.runout_sensor | default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state | upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro | default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY | default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'neopixel sb_leds': {'pin': 'EBBCan:gpio16', 'chain_count': 3, 'color_order': ['GRB'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'led_effect sb_logo_busy': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1,0,0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_cleaning': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.02, 0.5)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_calibrating_z': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 0.35)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1, 0.18, 0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0, 0, 1)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_homing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.6, 0.2)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_leveling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.5, 0.1, 0.4)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_meshing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.2, 1.0, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_printing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.3, 0.3, 0.0),(0.3, 0.1, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_standby': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.01, 0.01, 0.01)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 1.0, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_nozzle_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1.0, 0.18, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 1.0, 0.1)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_standby': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.6, 0.0, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.6, 1.0, 0.0, 0.1)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_critical_error': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': True, 'endstops': '', 'layers': '\nstrobe         1  1.5   add        (1.0,  1.0, 1.0)\nbreathing      2  0     difference (0.95, 0.0, 0.0)\nstatic         1  0     top        (1.0,  0.0, 0.0)', 'leds': '\nneopixel:sb_leds'}, 'led_effect rainbow': {'frame_rate': 24.0, 'autostart': True, 'run_on_error': False, 'endstops': '', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.0, 0.3, 0.0),(0.0, 0.0, 0.3)', 'leds': '\nneopixel:sb_leds'}, 'led_effect set_nozzle_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic         0  0     top        (0.5,  0.5, 0.5)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect set_logo_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic         0  0     top        (1.0,  1.0, 1.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'gcode_macro set_logo_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nSTOP_LED_EFFECTS', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=rainbow', 'description': 'G-Code macro'}, 'gcode_macro status_part_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_busy\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_heating\nSET_LED_EFFECT EFFECT=sb_nozzle_heating', 'description': 'G-Code macro'}, 'gcode_macro status_cooling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cooling\nSET_LED_EFFECT EFFECT=sb_nozzle_cooling', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_leveling\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_homing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cleaning\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_meshing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_calibrating_z\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_printing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'adxl345': {'axes_map': ['z', '-y', 'x'], 'rate': 3200, 'cs_pin': 'EBBCan:gpio1', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'EBBCan:gpio2', 'spi_software_miso_pin': 'EBBCan:gpio3', 'spi_software_mosi_pin': 'EBBCan:gpio0'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[100.0, 100.0, 20.0]], 'accel_chip': 'adxl345'}, 'input_shaper': {'shaper_type': '3hump_ei', 'shaper_type_x': '3hump_ei', 'damping_ratio_x': 0.1, 'shaper_freq_x': 45.0, 'shaper_type_y': '3hump_ei', 'damping_ratio_y': 0.1, 'shaper_freq_y': 0.0}, 'tmc2660 stepper_x': {'cs_pin': 'PD14', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PD6', 'dir_pin': '!PD11', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'EBBCan:gpio24', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2660 stepper_y': {'cs_pin': 'PC9', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PD7', 'dir_pin': '!PD12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'PA2', 'position_endstop': 0.0, 'position_min': -4.0, 'position_max': 225.0, 'homing_speed': 35.0, 'second_homing_speed': 17.5, 'homing_retract_speed': 35.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2660 stepper_z': {'cs_pin': 'PC10', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PD8', 'dir_pin': '!PD13', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -2.5, 'position_max': 230.0, 'homing_speed': 35.0, 'second_homing_speed': 17.5, 'homing_retract_speed': 35.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'adc_temperature my_thermistor': {'resistance1': 1000.0, 'temperature1': 0.0, 'temperature2': 80.0, 'resistance2': 1309.0}, 'tmc2209 extruder': {'uart_pin': 'EBBCan:gpio20', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan:gpio27', 'min_temp': 0.0, 'max_temp': 250.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 21.527, 'pid_ki': 1.063, 'pid_kd': 108.982, 'heater_pin': 'EBBCan:gpio7', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': '!EBBCan:gpio18', 'pressure_advance': 0.065, 'pressure_advance_smooth_time': 0.02, 'dir_pin': 'EBBCan:gpio19', 'rotation_distance': 21.63024711, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!EBBCan:gpio17'}, 'filament_switch_sensor extruder': {'switch_pin': 'EBBCan:gpio21', 'pause_on_runout': True, 'runout_gcode': '', 'pause_delay': 0.5, 'event_delay': 3.0}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'thermistor chamber_temp': {'temperature1': 25.0, 'resistance1': 10000.0, 'beta': 3950.0}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PC13', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'watermark', 'max_delta': 2.0, 'heater_pin': '!PA19', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan extruder_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'EBBCan:gpio13', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.25, 'off_below': 0.0, 'cycle_time': 0.08, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'EBBCan:gpio14'}, 'probe': {'z_offset': -1.35, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': '^EBBCan:gpio22', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 3, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.015, 'samples_tolerance_retries': 3}, 'homing_override': {'set_position_z': 0.0, 'axes': 'z', 'gcode': '\nstatus_homing\nG90\nG0 Z5 F500\nG28 X0 Y0\nG0 X150 Y100 F9000\nG28 Z0\nG0 Z5 F500\nstatus_ready'}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [6, 6], 'mesh_min': [25.0, 35.0], 'mesh_max': [225.0, 220.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 150.0, 'fade_start': 1.0, 'fade_end': 10.0, 'fade_target': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[-0.2875, -0.1125, -0.0625, -0.025, 0.1375, -0.1375], [-0.225, -0.1125, -0.0875, 0.0375, 0.1375, 0.2875], [-0.2875, -0.2, -0.0875, -0.0, 0.1375, 0.3], [-0.3375, -0.2, -0.1375, -0.0125, 0.125, 0.275], [-0.3, -0.1625, -0.0625, 0.0375, 0.1875, 0.3375], [-0.2125, -0.075, 0.025, 0.125, 0.275, 0.45]], 'min_x': 25.0, 'max_x': 225.0, 'min_y': 35.0, 'max_y': 220.0, 'x_count': 6, 'y_count': 6, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'bicubic', 'tension': 0.2}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\nM117 Homing...\nM109 S150\nG28 Y0 X0 Z0\n\n\n\n\n\n\n\n\n\n\n\n\nSTATUS_HEATING\nM107\nM117 Heating bed\nM190 S{ params.BED }\nM117 Heating nozzle\nM109 S{target_extruder}\nstatus_ready\nG1 Z15.0 F600\nG1 X125 Y125 F3000\nG92 E0\nG1 F9000\nstatus_printing\nM117 Printing...', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\nstatus_busy\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\n\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y} F3600\nM117 Finished!\nstatus_off', 'description': 'G-Code macro'}, 'force_move': {'enable_force_move': True}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexz', 'max_z_velocity': 5.0, 'max_z_accel': 100.0}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-03-28 20:21:30,798 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-03-28 20:21:30,800 [printer.py:reinit()] - Klipper version: v0.12.0-132-ge37b007f-dirty
2024-03-28 20:21:30,800 [printer.py:reinit()] - # Extruders: 1
2024-03-28 20:21:30,800 [printer.py:reinit()] - # Temperature devices: 2
2024-03-28 20:21:30,801 [printer.py:reinit()] - # Fans: 2
2024-03-28 20:21:30,801 [printer.py:reinit()] - # Output pins: 0
2024-03-28 20:21:30,801 [printer.py:reinit()] - # Leds: 20
2024-03-28 20:21:30,801 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-03-28 20:21:30,820 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-03-28 20:21:30,822 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor mcu&fan&heater_fan extruder_fan&filament_switch_sensor extruder&neopixel sb_leds
2024-03-28 20:21:31,097 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-03-28 20:21:31,098 [screen.py:init_klipper()] - Printer initialized
2024-03-28 20:21:31,098 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2024-03-28 20:21:31,098 [printer.py:change_state()] - Adding callback for state: ready
2024-03-28 20:21:31,208 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-03-28 20:21:31,212 [screen.py:_load_panel()] - Loading panel: main_menu
2024-03-28 20:21:31,321 [main_menu.py:__init__()] - ### Making MainMenu
2024-03-28 20:21:31,336 [main_menu.py:add_device()] - Adding device: extruder
2024-03-28 20:21:31,346 [main_menu.py:add_device()] - Adding device: heater_bed
2024-03-28 20:21:31,356 [main_menu.py:add_device()] - Adding device: temperature_sensor mcu
2024-03-28 20:21:31,407 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-03-28 20:21:31,409 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-03-28 20:21:31,443 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor mcu', 'heater_bed', 'extruder']
2024-03-28 20:21:31,445 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-03-28 20:21:31,457 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-03-28 20:21:42,691 [screen.py:_load_panel()] - Loading panel: move
2024-03-28 20:21:42,851 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2024-03-28 20:21:49,686 [screen_panel.py:load_menu()] - loading menu options
2024-03-28 20:21:55,006 [screen_panel.py:unload_menu()] - self.menu: ['move_menu', 'options_menu']
2024-03-28 20:21:56,919 [screen.py:_menu_go_back()] - #### Menu go back
2024-03-28 20:21:57,190 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-03-28 20:21:59,170 [screen.py:_go_to_submenu()] - #### Go to submenu more
2024-03-28 20:21:59,170 [screen.py:_go_to_submenu()] - #### Menu __main
2024-03-28 20:21:59,178 [screen.py:_load_panel()] - Loading panel: menu
2024-03-28 20:21:59,590 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more
2024-03-28 20:21:59,599 [menu.py:arrangeMenuItems()] - X > more bedlevel
2024-03-28 20:21:59,613 [menu.py:arrangeMenuItems()] - X > more retraction
2024-03-28 20:21:59,630 [menu.py:arrangeMenuItems()] - X > more pins
2024-03-28 20:21:59,634 [menu.py:arrangeMenuItems()] - X > more power
2024-03-28 20:21:59,639 [menu.py:arrangeMenuItems()] - X > more camera
2024-03-28 20:21:59,659 [menu.py:arrangeMenuItems()] - X > more spoolman
2024-03-28 20:22:08,529 [screen.py:_load_panel()] - Loading panel: bed_mesh
2024-03-28 20:22:08,790 [bed_mesh.py:add_profile()] - Adding Profile: default
2024-03-28 20:22:08,844 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more > bed_mesh
2024-03-28 20:22:08,845 [bed_mesh.py:activate_mesh()] - Clearing active profile
2024-03-28 20:22:08,846 [bed_mesh.py:activate_mesh()] - Clearing active profile
2024-03-28 20:22:13,457 [screen.py:show_popup_message()] - echo: Calibrating
2024-03-28 20:22:13,509 [screen.py:_send_action()] - printer.gcode.script: {'script': 'BED_MESH_CALIBRATE'}
2024-03-28 20:22:13,513 [printer.py:get_probe()] - Probe type: probe
2024-03-28 20:26:12,978 [KlippyGtk.py:Dialog()] - Showing dialog KlipperScreen (width=984, height=540)
2024-03-28 20:26:12,981 [bed_mesh.py:activate_mesh()] - Active None changing to default
2024-03-28 20:30:41,566 [functions.py:log_start()] - --------------------KlipperScreen Log Start--------------------
2024-03-28 20:30:41,567 [functions.py:log_start()] - KlipperScreen Version: v0.3.9-50-gdaed9a0
2024-03-28 20:30:41,567 [functions.py:log_start()] - Python version: 3.11
2024-03-28 20:30:41,705 [config.py:get_config_file_location()] - Passed config (-c): .
2024-03-28 20:30:41,706 [config.py:__init__()] - Config path location: /home/pi/printer_data/config/KlipperScreen.conf
2024-03-28 20:30:41,730 [config.py:log_config()] -  ===== Config File =====

=======================
2024-03-28 20:30:41,733 [config.py:__init__()] - ====== Saved Def ======

[main]
use_dpms = False
print_sort_dir = date_desc

=======================
2024-03-28 20:30:41,734 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2024-03-28 20:30:41,843 [config.py:create_translations()] - Selected lang: None OS lang: en_GB
2024-03-28 20:30:41,843 [config.py:install_language()] - Using lang en
2024-03-28 20:30:41,863 [screen.py:__init__()] - Monitors: 1 using number: 0
2024-03-28 20:30:41,864 [screen.py:__init__()] - Wayland: False Display name: :100
2024-03-28 20:30:41,867 [screen.py:__init__()] - Screen resolution: 984x540
2024-03-28 20:30:41,869 [KlippyGtk.py:__init__()] - Font size: 18.6 (medium)
2024-03-28 20:31:52,366 [functions.py:log_start()] - --------------------KlipperScreen Log Start--------------------
2024-03-28 20:31:52,366 [functions.py:log_start()] - KlipperScreen Version: v0.3.9-50-gdaed9a0
2024-03-28 20:31:52,366 [functions.py:log_start()] - Python version: 3.11
2024-03-28 20:31:52,506 [config.py:get_config_file_location()] - Passed config (-c): .
2024-03-28 20:31:52,507 [config.py:__init__()] - Config path location: /home/pi/printer_data/config/KlipperScreen.conf
2024-03-28 20:31:52,532 [config.py:log_config()] -  ===== Config File =====

=======================
2024-03-28 20:31:52,534 [config.py:__init__()] - ====== Saved Def ======

[main]
use_dpms = False
print_sort_dir = date_desc

=======================
2024-03-28 20:31:52,535 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2024-03-28 20:31:52,642 [config.py:create_translations()] - Selected lang: None OS lang: en_GB
2024-03-28 20:31:52,643 [config.py:install_language()] - Using lang en
2024-03-28 20:31:52,662 [screen.py:__init__()] - Monitors: 1 using number: 0
2024-03-28 20:31:52,664 [screen.py:__init__()] - Wayland: False Display name: :100
2024-03-28 20:31:52,667 [screen.py:__init__()] - Screen resolution: 984x540
2024-03-28 20:31:52,668 [KlippyGtk.py:__init__()] - Font size: 18.6 (medium)
2024-03-28 20:31:53,247 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2024-03-28 20:31:53,247 [screen.py:set_screenblanking_timeout()] - Not using DPMS
2024-03-28 20:31:53,256 [screen.py:initial_connection()] - Default printer: None
2024-03-28 20:31:53,322 [screen.py:connect_printer()] - Connecting to printer: Printer
2024-03-28 20:31:53,322 [screen.py:_load_panel()] - Loading panel: splash_screen
2024-03-28 20:31:53,404 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-03-28 20:31:53,432 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-03-28 20:31:53,432 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-03-28 20:31:53,456 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/access/oneshot_token
2024-03-28 20:31:53,471 [KlippyWebsocket.py:connect()] - Starting websocket thread
2024-03-28 20:31:53,482 [_logging.py:info()] - Websocket connected
2024-03-28 20:31:53,482 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2024-03-28 20:31:53,495 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-03-28 20:31:53,508 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-03-28 20:31:53,519 [printer.py:configure_cameras()] - Cameras: []
2024-03-28 20:31:53,520 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'ready', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'octoprint_compat', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-03-28 20:31:53,520 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-03-28 20:31:53,533 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-03-28 20:31:53,740 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set allow_park = client.park_at_cancel | default(false) | lower == \'true\' %}\n{% set retract = client.cancel_retract | default(5.0) | abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x | default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y | default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x | length > 0 or park_y | length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro | default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set idle_timeout = client.idle_timeout | default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE | default(1) | int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro | default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move | default(velocity) %}\n{% set runout_resume = True if client.runout_sensor | default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state | upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro | default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY | default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}"}, 'neopixel sb_leds': {'pin': 'EBBCan:gpio16', 'chain_count': '3', 'color_order': 'GRB', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0'}, 'led_effect sb_logo_busy': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (1,0,0)'}, 'led_effect sb_logo_cleaning': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.02, 0.5)'}, 'led_effect sb_logo_calibrating_z': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 0.35)'}, 'led_effect sb_logo_heating': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nbreathing  3 1 top (1, 0.18, 0)'}, 'led_effect sb_logo_cooling': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nbreathing  3 1 top (0, 0, 1)'}, 'led_effect sb_logo_homing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.6, 0.2)'}, 'led_effect sb_logo_leveling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.5, 0.1, 0.4)'}, 'led_effect sb_logo_meshing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.2, 1.0, 0.0)'}, 'led_effect sb_logo_printing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.3, 0.3, 0.0),(0.3, 0.1, 0.0)'}, 'led_effect sb_logo_standby': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.01, 0.01, 0.01)'}, 'led_effect sb_logo_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 1.0, 0.0)'}, 'led_effect sb_nozzle_heating': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (1.0, 0.18, 0.0, 0.0)'}, 'led_effect sb_nozzle_cooling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 1.0, 0.1)'}, 'led_effect sb_nozzle_standby': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.6, 0.0, 0.0, 0.0)'}, 'led_effect sb_nozzle_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.6, 1.0, 0.0, 0.1)'}, 'led_effect sb_critical_error': {'leds': '\nneopixel:sb_leds', 'layers': '\nstrobe         1  1.5   add        (1.0,  1.0, 1.0)\nbreathing      2  0     difference (0.95, 0.0, 0.0)\nstatic         1  0     top        (1.0,  0.0, 0.0)', 'autostart': 'false', 'frame_rate': '24', 'run_on_error': 'true'}, 'led_effect rainbow': {'leds': '\nneopixel:sb_leds', 'autostart': 'true', 'frame_rate': '24', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.0, 0.3, 0.0),(0.0, 0.0, 0.3)'}, 'led_effect set_nozzle_leds': {'leds': '\nneopixel:sb_leds (2,3)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nstatic         0  0     top        (0.5,  0.5, 0.5)'}, 'led_effect set_logo_leds': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nstatic         0  0     top        (1.0,  1.0, 1.0)'}, 'gcode_macro set_logo_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds STOP=1'}, 'gcode_macro set_logo_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1'}, 'gcode_macro status_off': {'gcode': '\nSTOP_LED_EFFECTS'}, 'gcode_macro status_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=rainbow'}, 'gcode_macro status_part_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready'}, 'gcode_macro status_busy': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_busy\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_heating\nSET_LED_EFFECT EFFECT=sb_nozzle_heating'}, 'gcode_macro status_cooling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cooling\nSET_LED_EFFECT EFFECT=sb_nozzle_cooling'}, 'gcode_macro status_leveling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_leveling\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_homing\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cleaning\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_meshing\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_calibrating_z\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_printing\nset_nozzle_leds_on'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_sam4e8e_00313753364B37373032303038303139-if00'}, 'mcu EBBCan': {'canbus_uuid': '8250861450f7'}, 'adxl345': {'cs_pin': 'EBBCan:gpio1', 'spi_software_sclk_pin': 'EBBCan:gpio2', 'spi_software_mosi_pin': 'EBBCan:gpio0', 'spi_software_miso_pin': 'EBBCan:gpio3', 'axes_map': 'z,-y,x'}, 'resonance_tester': {'probe_points': '100, 100, 20', 'accel_chip': 'adxl345'}, 'input_shaper': {'shaper_freq_x': '45', 'shaper_type': '3hump_ei'}, 'stepper_x': {'step_pin': 'PD6', 'dir_pin': '!PD11', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'EBBCan:gpio24', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '40'}, 'tmc2660 stepper_x': {'cs_pin': 'PD14', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'stepper_y': {'step_pin': 'PD7', 'dir_pin': '!PD12', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'PA2', 'position_endstop': '0', 'position_max': '225', 'position_min': '-4', 'homing_speed': '35', 'homing_retract_dist': '0'}, 'tmc2660 stepper_y': {'cs_pin': 'PC9', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'stepper_z': {'step_pin': 'PD8', 'dir_pin': '!PD13', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '230', 'position_min': '-2.5', 'homing_speed': '35.0'}, 'tmc2660 stepper_z': {'cs_pin': 'PC10', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'adc_temperature my_thermistor': {'temperature1': '0', 'resistance1': '1000', 'temperature2': '80', 'resistance2': '1309'}, 'extruder': {'step_pin': '!EBBCan:gpio18', 'dir_pin': 'EBBCan:gpio19', 'enable_pin': '!EBBCan:gpio17', 'microsteps': '32', 'rotation_distance': '21.63024711', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'pressure_advance': '0.065', 'pressure_advance_smooth_time': '0.02', 'gear_ratio': '50:10', 'heater_pin': 'EBBCan:gpio7', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'EBBCan:gpio27', 'control': 'pid', 'pid_kp': '21.527', 'pid_ki': '1.063', 'pid_kd': '108.982', 'min_temp': '0', 'max_temp': '250'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan:gpio20', 'run_current': '0.5', 'stealthchop_threshold': '999999'}, 'filament_switch_sensor extruder': {'pause_on_runout': 'True', 'switch_pin': 'EBBCan:gpio21'}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu'}, 'thermistor chamber_temp': {'temperature1': '25', 'resistance1': '10000', 'beta': '3950'}, 'heater_bed': {'heater_pin': '!PA19', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PC13', 'control': 'watermark', 'min_temp': '0', 'max_temp': '120'}, 'heater_fan extruder_fan': {'pin': 'EBBCan:gpio13', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'EBBCan:gpio14', 'cycle_time': '.08', 'kick_start_time': '.25'}, 'probe': {'pin': '^EBBCan:gpio22', 'x_offset': '0', 'y_offset': '0', 'samples': '3', 'samples_result': 'median', 'sample_retract_dist': '3', 'samples_tolerance': '0.015', 'samples_tolerance_retries': '3', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'z_offset': '-1.350'}, 'homing_override': {'axes': 'z', 'set_position_z': '0', 'gcode': '\nstatus_homing\nG90\nG0 Z5 F500\nG28 X0 Y0\nG0 X150 Y100 F9000\nG28 Z0\nG0 Z5 F500\nstatus_ready'}, 'bed_mesh': {'speed': '150', 'horizontal_move_z': '5', 'mesh_min': '25,35.0', 'mesh_max': '225.0,220', 'probe_count': '6,6', 'algorithm': 'bicubic', 'fade_start': '1', 'fade_end': '10', 'fade_target': '0'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\nM117 Homing...\nM109 S150\nG28 Y0 X0 Z0\n\n\n\n\n\n\n\n\n\n\n\n\nSTATUS_HEATING\nM107\nM117 Heating bed\nM190 S{ params.BED }\nM117 Heating nozzle\nM109 S{target_extruder}\nstatus_ready\nG1 Z15.0 F600\nG1 X125 Y125 F3000\nG92 E0\nG1 F9000\nstatus_printing\nM117 Printing...'}, 'gcode_macro PRINT_END': {'gcode': '\nstatus_busy\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\n\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y} F3600\nM117 Finished!\nstatus_off'}, 'printer': {'kinematics': 'corexz', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '5', 'max_z_accel': '100'}, 'force_move': {'enable_force_move': 'true'}, 'exclude_object': {}, 'bed_mesh default': {'version': '1', 'points': '\n-0.287500, -0.112500, -0.062500, -0.025000, 0.137500, -0.137500\n-0.225000, -0.112500, -0.087500, 0.037500, 0.137500, 0.287500\n-0.287500, -0.200000, -0.087500, -0.000000, 0.137500, 0.300000\n-0.337500, -0.200000, -0.137500, -0.012500, 0.125000, 0.275000\n-0.300000, -0.162500, -0.062500, 0.037500, 0.187500, 0.337500\n-0.212500, -0.075000, 0.025000, 0.125000, 0.275000, 0.450000', 'x_count': '6', 'y_count': '6', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'bicubic', 'tension': '0.2', 'min_x': '25.0', 'max_x': '225.0', 'min_y': '35.0', 'max_y': '220.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_sam4e8e_00313753364B37373032303038303139-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu ebbcan': {'canbus_uuid': '8250861450f7', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set allow_park = client.park_at_cancel | default(false) | lower == \'true\' %}\n{% set retract = client.cancel_retract | default(5.0) | abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x | default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y | default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x | length > 0 or park_y | length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro | default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set idle_timeout = client.idle_timeout | default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE | default(1) | int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro | default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move | default(velocity) %}\n{% set runout_resume = True if client.runout_sensor | default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state | upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro | default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY | default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'neopixel sb_leds': {'pin': 'EBBCan:gpio16', 'chain_count': 3, 'color_order': ['GRB'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'led_effect sb_logo_busy': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1,0,0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_cleaning': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.02, 0.5)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_calibrating_z': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 0.35)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1, 0.18, 0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0, 0, 1)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_homing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.6, 0.2)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_leveling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.5, 0.1, 0.4)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_meshing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.2, 1.0, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_printing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.3, 0.3, 0.0),(0.3, 0.1, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_standby': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.01, 0.01, 0.01)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 1.0, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_nozzle_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1.0, 0.18, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 1.0, 0.1)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_standby': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.6, 0.0, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.6, 1.0, 0.0, 0.1)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_critical_error': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': True, 'endstops': '', 'layers': '\nstrobe         1  1.5   add        (1.0,  1.0, 1.0)\nbreathing      2  0     difference (0.95, 0.0, 0.0)\nstatic         1  0     top        (1.0,  0.0, 0.0)', 'leds': '\nneopixel:sb_leds'}, 'led_effect rainbow': {'frame_rate': 24.0, 'autostart': True, 'run_on_error': False, 'endstops': '', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.0, 0.3, 0.0),(0.0, 0.0, 0.3)', 'leds': '\nneopixel:sb_leds'}, 'led_effect set_nozzle_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic         0  0     top        (0.5,  0.5, 0.5)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect set_logo_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic         0  0     top        (1.0,  1.0, 1.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'gcode_macro set_logo_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nSTOP_LED_EFFECTS', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=rainbow', 'description': 'G-Code macro'}, 'gcode_macro status_part_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_busy\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_heating\nSET_LED_EFFECT EFFECT=sb_nozzle_heating', 'description': 'G-Code macro'}, 'gcode_macro status_cooling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cooling\nSET_LED_EFFECT EFFECT=sb_nozzle_cooling', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_leveling\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_homing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cleaning\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_meshing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_calibrating_z\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_printing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'adxl345': {'axes_map': ['z', '-y', 'x'], 'rate': 3200, 'cs_pin': 'EBBCan:gpio1', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'EBBCan:gpio2', 'spi_software_miso_pin': 'EBBCan:gpio3', 'spi_software_mosi_pin': 'EBBCan:gpio0'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[100.0, 100.0, 20.0]], 'accel_chip': 'adxl345'}, 'input_shaper': {'shaper_type': '3hump_ei', 'shaper_type_x': '3hump_ei', 'damping_ratio_x': 0.1, 'shaper_freq_x': 45.0, 'shaper_type_y': '3hump_ei', 'damping_ratio_y': 0.1, 'shaper_freq_y': 0.0}, 'tmc2660 stepper_x': {'cs_pin': 'PD14', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PD6', 'dir_pin': '!PD11', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'EBBCan:gpio24', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2660 stepper_y': {'cs_pin': 'PC9', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PD7', 'dir_pin': '!PD12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'PA2', 'position_endstop': 0.0, 'position_min': -4.0, 'position_max': 225.0, 'homing_speed': 35.0, 'second_homing_speed': 17.5, 'homing_retract_speed': 35.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2660 stepper_z': {'cs_pin': 'PC10', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PD8', 'dir_pin': '!PD13', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -2.5, 'position_max': 230.0, 'homing_speed': 35.0, 'second_homing_speed': 17.5, 'homing_retract_speed': 35.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'adc_temperature my_thermistor': {'resistance1': 1000.0, 'temperature1': 0.0, 'temperature2': 80.0, 'resistance2': 1309.0}, 'tmc2209 extruder': {'uart_pin': 'EBBCan:gpio20', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan:gpio27', 'min_temp': 0.0, 'max_temp': 250.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 21.527, 'pid_ki': 1.063, 'pid_kd': 108.982, 'heater_pin': 'EBBCan:gpio7', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': '!EBBCan:gpio18', 'pressure_advance': 0.065, 'pressure_advance_smooth_time': 0.02, 'dir_pin': 'EBBCan:gpio19', 'rotation_distance': 21.63024711, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!EBBCan:gpio17'}, 'filament_switch_sensor extruder': {'switch_pin': 'EBBCan:gpio21', 'pause_on_runout': True, 'runout_gcode': '', 'pause_delay': 0.5, 'event_delay': 3.0}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'thermistor chamber_temp': {'temperature1': 25.0, 'resistance1': 10000.0, 'beta': 3950.0}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PC13', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'watermark', 'max_delta': 2.0, 'heater_pin': '!PA19', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan extruder_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'EBBCan:gpio13', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.25, 'off_below': 0.0, 'cycle_time': 0.08, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'EBBCan:gpio14'}, 'probe': {'z_offset': -1.35, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': '^EBBCan:gpio22', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 3, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.015, 'samples_tolerance_retries': 3}, 'homing_override': {'set_position_z': 0.0, 'axes': 'z', 'gcode': '\nstatus_homing\nG90\nG0 Z5 F500\nG28 X0 Y0\nG0 X150 Y100 F9000\nG28 Z0\nG0 Z5 F500\nstatus_ready'}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [6, 6], 'mesh_min': [25.0, 35.0], 'mesh_max': [225.0, 220.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 150.0, 'fade_start': 1.0, 'fade_end': 10.0, 'fade_target': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[-0.2875, -0.1125, -0.0625, -0.025, 0.1375, -0.1375], [-0.225, -0.1125, -0.0875, 0.0375, 0.1375, 0.2875], [-0.2875, -0.2, -0.0875, -0.0, 0.1375, 0.3], [-0.3375, -0.2, -0.1375, -0.0125, 0.125, 0.275], [-0.3, -0.1625, -0.0625, 0.0375, 0.1875, 0.3375], [-0.2125, -0.075, 0.025, 0.125, 0.275, 0.45]], 'min_x': 25.0, 'max_x': 225.0, 'min_y': 35.0, 'max_y': 220.0, 'x_count': 6, 'y_count': 6, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'bicubic', 'tension': 0.2}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\nM117 Homing...\nM109 S150\nG28 Y0 X0 Z0\n\n\n\n\n\n\n\n\n\n\n\n\nSTATUS_HEATING\nM107\nM117 Heating bed\nM190 S{ params.BED }\nM117 Heating nozzle\nM109 S{target_extruder}\nstatus_ready\nG1 Z15.0 F600\nG1 X125 Y125 F3000\nG92 E0\nG1 F9000\nstatus_printing\nM117 Printing...', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\nstatus_busy\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\n\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y} F3600\nM117 Finished!\nstatus_off', 'description': 'G-Code macro'}, 'force_move': {'enable_force_move': True}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexz', 'max_z_velocity': 5.0, 'max_z_accel': 100.0}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': True, 'save_config_pending_items': {'bed_mesh default': {'version': '1', 'points': '\n  -0.100000, -0.025000, 0.012500, 0.037500, 0.125000, 0.212500\n  -0.187500, -0.100000, -0.025000, 0.025000, 0.100000, 0.212500\n  -0.262500, -0.162500, -0.075000, -0.012500, 0.075000, 0.187500\n  -0.262500, -0.162500, -0.087500, -0.000000, 0.100000, 0.237500\n  -0.200000, -0.100000, -0.012500, 0.062500, 0.200000, 0.350000\n  -0.225000, -0.075000, -0.000000, 0.087500, 0.225000, 0.387500', 'x_count': '6', 'y_count': '6', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'bicubic', 'tension': '0.2', 'min_x': '25.0', 'max_x': '225.0', 'min_y': '35.0', 'max_y': '220.0'}}}}
2024-03-28 20:31:53,743 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-03-28 20:31:53,745 [printer.py:reinit()] - Klipper version: v0.12.0-132-ge37b007f-dirty
2024-03-28 20:31:53,745 [printer.py:reinit()] - # Extruders: 1
2024-03-28 20:31:53,745 [printer.py:reinit()] - # Temperature devices: 2
2024-03-28 20:31:53,745 [printer.py:reinit()] - # Fans: 2
2024-03-28 20:31:53,745 [printer.py:reinit()] - # Output pins: 0
2024-03-28 20:31:53,746 [printer.py:reinit()] - # Leds: 20
2024-03-28 20:31:53,746 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-03-28 20:31:53,765 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-03-28 20:31:53,767 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor mcu&fan&heater_fan extruder_fan&filament_switch_sensor extruder&neopixel sb_leds
2024-03-28 20:31:54,045 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-03-28 20:31:54,045 [screen.py:init_klipper()] - Printer initialized
2024-03-28 20:31:54,046 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2024-03-28 20:31:54,046 [printer.py:change_state()] - Adding callback for state: ready
2024-03-28 20:31:54,148 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-03-28 20:31:54,152 [screen.py:_load_panel()] - Loading panel: main_menu
2024-03-28 20:31:54,269 [main_menu.py:__init__()] - ### Making MainMenu
2024-03-28 20:31:54,284 [main_menu.py:add_device()] - Adding device: extruder
2024-03-28 20:31:54,292 [main_menu.py:add_device()] - Adding device: heater_bed
2024-03-28 20:31:54,302 [main_menu.py:add_device()] - Adding device: temperature_sensor mcu
2024-03-28 20:31:54,354 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-03-28 20:31:54,355 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-03-28 20:31:54,388 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor mcu', 'heater_bed', 'extruder']
2024-03-28 20:31:54,390 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-03-28 20:31:54,403 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-03-28 20:32:49,536 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2024-03-28 20:32:49,536 [printer.py:change_state()] - Adding callback for state: printing
2024-03-28 20:32:49,560 [screen.py:_load_panel()] - Loading panel: job_status
2024-03-28 20:32:50,180 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-03-28 20:32:50,190 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-03-28 20:32:50,215 [job_status.py:update_file_metadata()] - Update Metadata. File: 3DBenchy_0.2mm_PLA_MK3S_1h17m.gcode Size: 3762462
2024-03-28 20:32:50,221 [job_status.py:show_file_thumbnail()] - 3DBenchy_0.2mm_PLA_MK3S_1h17m.gcode
2024-03-28 21:31:53,732 [screen.py:show_screensaver()] - Showing Screensaver
2024-03-28 22:04:42,969 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2024-03-28 22:04:42,969 [printer.py:change_state()] - Adding callback for state: ready
2024-03-28 22:04:42,979 [screen.py:close_screensaver()] - Closing Screensaver
2024-03-28 22:04:43,010 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'complete'
2024-03-28 23:04:43,732 [screen.py:show_screensaver()] - Showing Screensaver
2024-03-28 23:58:23,886 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-03-28 23:58:23,886 [printer.py:change_state()] - Adding callback for state: disconnected
2024-03-28 23:58:23,887 [screen.py:state_disconnected()] - ### Going to disconnected
2024-03-28 23:58:23,887 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-03-28 23:58:23,887 [screen.py:close_screensaver()] - Closing Screensaver
2024-03-28 23:58:23,917 [screen.py:show_panel()] - Reinitializing panel
2024-03-28 23:58:23,990 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-03-28 23:58:27,732 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-03-28 23:58:27,744 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-03-28 23:58:27,754 [printer.py:configure_cameras()] - Cameras: []
2024-03-28 23:58:27,755 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'ready', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'octoprint_compat', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-03-28 23:58:27,755 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-03-28 23:58:27,776 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-03-28 23:58:28,048 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set allow_park = client.park_at_cancel | default(false) | lower == \'true\' %}\n{% set retract = client.cancel_retract | default(5.0) | abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x | default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y | default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x | length > 0 or park_y | length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro | default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set idle_timeout = client.idle_timeout | default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE | default(1) | int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro | default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move | default(velocity) %}\n{% set runout_resume = True if client.runout_sensor | default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state | upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro | default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY | default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}"}, 'neopixel sb_leds': {'pin': 'EBBCan:gpio16', 'chain_count': '3', 'color_order': 'GRB', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0'}, 'led_effect sb_logo_busy': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (1,0,0)'}, 'led_effect sb_logo_cleaning': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.02, 0.5)'}, 'led_effect sb_logo_calibrating_z': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 0.35)'}, 'led_effect sb_logo_heating': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nbreathing  3 1 top (1, 0.18, 0)'}, 'led_effect sb_logo_cooling': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nbreathing  3 1 top (0, 0, 1)'}, 'led_effect sb_logo_homing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.6, 0.2)'}, 'led_effect sb_logo_leveling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.5, 0.1, 0.4)'}, 'led_effect sb_logo_meshing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.2, 1.0, 0.0)'}, 'led_effect sb_logo_printing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.3, 0.3, 0.0),(0.3, 0.1, 0.0)'}, 'led_effect sb_logo_standby': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.01, 0.01, 0.01)'}, 'led_effect sb_logo_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 1.0, 0.0)'}, 'led_effect sb_nozzle_heating': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (1.0, 0.18, 0.0, 0.0)'}, 'led_effect sb_nozzle_cooling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 1.0, 0.1)'}, 'led_effect sb_nozzle_standby': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.6, 0.0, 0.0, 0.0)'}, 'led_effect sb_nozzle_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.6, 1.0, 0.0, 0.1)'}, 'led_effect sb_critical_error': {'leds': '\nneopixel:sb_leds', 'layers': '\nstrobe         1  1.5   add        (1.0,  1.0, 1.0)\nbreathing      2  0     difference (0.95, 0.0, 0.0)\nstatic         1  0     top        (1.0,  0.0, 0.0)', 'autostart': 'false', 'frame_rate': '24', 'run_on_error': 'true'}, 'led_effect rainbow': {'leds': '\nneopixel:sb_leds', 'autostart': 'true', 'frame_rate': '24', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.0, 0.3, 0.0),(0.0, 0.0, 0.3)'}, 'led_effect set_nozzle_leds': {'leds': '\nneopixel:sb_leds (2,3)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nstatic         0  0     top        (0.5,  0.5, 0.5)'}, 'led_effect set_logo_leds': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nstatic         0  0     top        (1.0,  1.0, 1.0)'}, 'gcode_macro set_logo_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds STOP=1'}, 'gcode_macro set_logo_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1'}, 'gcode_macro status_off': {'gcode': '\nSTOP_LED_EFFECTS'}, 'gcode_macro status_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=rainbow'}, 'gcode_macro status_part_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready'}, 'gcode_macro status_busy': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_busy\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_heating\nSET_LED_EFFECT EFFECT=sb_nozzle_heating'}, 'gcode_macro status_cooling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cooling\nSET_LED_EFFECT EFFECT=sb_nozzle_cooling'}, 'gcode_macro status_leveling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_leveling\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_homing\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cleaning\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_meshing\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_calibrating_z\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_printing\nset_nozzle_leds_on'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_sam4e8e_00313753364B37373032303038303139-if00'}, 'mcu EBBCan': {'canbus_uuid': '8250861450f7'}, 'adxl345': {'cs_pin': 'EBBCan:gpio1', 'spi_software_sclk_pin': 'EBBCan:gpio2', 'spi_software_mosi_pin': 'EBBCan:gpio0', 'spi_software_miso_pin': 'EBBCan:gpio3', 'axes_map': 'z,-y,x'}, 'resonance_tester': {'probe_points': '100, 100, 20', 'accel_chip': 'adxl345'}, 'input_shaper': {'shaper_freq_x': '45', 'shaper_type': '3hump_ei'}, 'stepper_x': {'step_pin': 'PD6', 'dir_pin': '!PD11', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'EBBCan:gpio24', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '40'}, 'tmc2660 stepper_x': {'cs_pin': 'PD14', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'stepper_y': {'step_pin': 'PD7', 'dir_pin': '!PD12', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'PA2', 'position_endstop': '0', 'position_max': '225', 'position_min': '-4', 'homing_speed': '35', 'homing_retract_dist': '0'}, 'tmc2660 stepper_y': {'cs_pin': 'PC9', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'stepper_z': {'step_pin': 'PD8', 'dir_pin': '!PD13', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '230', 'position_min': '-2.5', 'homing_speed': '35.0'}, 'tmc2660 stepper_z': {'cs_pin': 'PC10', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'adc_temperature my_thermistor': {'temperature1': '0', 'resistance1': '1000', 'temperature2': '80', 'resistance2': '1309'}, 'extruder': {'step_pin': '!EBBCan:gpio18', 'dir_pin': 'EBBCan:gpio19', 'enable_pin': '!EBBCan:gpio17', 'microsteps': '32', 'rotation_distance': '21.63024711', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'pressure_advance': '0.065', 'pressure_advance_smooth_time': '0.02', 'gear_ratio': '50:10', 'heater_pin': 'EBBCan:gpio7', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'EBBCan:gpio27', 'control': 'pid', 'pid_kp': '21.527', 'pid_ki': '1.063', 'pid_kd': '108.982', 'min_temp': '0', 'max_temp': '250'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan:gpio20', 'run_current': '0.5', 'stealthchop_threshold': '999999'}, 'filament_switch_sensor extruder': {'pause_on_runout': 'True', 'switch_pin': 'EBBCan:gpio21'}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu'}, 'thermistor chamber_temp': {'temperature1': '25', 'resistance1': '10000', 'beta': '3950'}, 'heater_bed': {'heater_pin': '!PA19', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PC13', 'control': 'watermark', 'min_temp': '0', 'max_temp': '120'}, 'heater_fan extruder_fan': {'pin': 'EBBCan:gpio13', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'EBBCan:gpio14', 'cycle_time': '.08', 'kick_start_time': '.25'}, 'probe': {'pin': '^EBBCan:gpio22', 'x_offset': '0', 'y_offset': '0', 'samples': '3', 'samples_result': 'median', 'sample_retract_dist': '3', 'samples_tolerance': '0.015', 'samples_tolerance_retries': '3', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'z_offset': '-1.350'}, 'homing_override': {'axes': 'z', 'set_position_z': '0', 'gcode': '\nstatus_homing\nG90\nG0 Z5 F500\nG28 X0 Y0\nG0 X150 Y100 F9000\nG28 Z0\nG0 Z5 F500\nstatus_ready'}, 'bed_mesh': {'speed': '150', 'horizontal_move_z': '5', 'mesh_min': '25,35.0', 'mesh_max': '225.0,220', 'probe_count': '6,6', 'algorithm': 'bicubic', 'fade_start': '1', 'fade_end': '10', 'fade_target': '0'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\nM117 Homing...\nM109 S150\nG28 Y0 X0 Z0\n\n\n\n\n\n\n\n\n\n\n\n\nSTATUS_HEATING\nM107\nM117 Heating bed\nM190 S{ params.BED }\nM117 Heating nozzle\nM109 S{target_extruder}\nstatus_ready\nG1 Z15.0 F600\nG1 X125 Y125 F3000\nG92 E0\nG1 F9000\nstatus_printing\nM117 Printing...'}, 'gcode_macro PRINT_END': {'gcode': '\nstatus_busy\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\n\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y} F3600\nM117 Finished!\nstatus_off'}, 'printer': {'kinematics': 'corexz', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '5', 'max_z_accel': '100'}, 'force_move': {'enable_force_move': 'true'}, 'exclude_object': {}, 'bed_mesh default': {'version': '1', 'points': '\n-0.100000, -0.025000, 0.012500, 0.037500, 0.125000, 0.212500\n-0.187500, -0.100000, -0.025000, 0.025000, 0.100000, 0.212500\n-0.262500, -0.162500, -0.075000, -0.012500, 0.075000, 0.187500\n-0.262500, -0.162500, -0.087500, -0.000000, 0.100000, 0.237500\n-0.200000, -0.100000, -0.012500, 0.062500, 0.200000, 0.350000\n-0.225000, -0.075000, -0.000000, 0.087500, 0.225000, 0.387500', 'x_count': '6', 'y_count': '6', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'bicubic', 'tension': '0.2', 'min_x': '25.0', 'max_x': '225.0', 'min_y': '35.0', 'max_y': '220.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_sam4e8e_00313753364B37373032303038303139-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu ebbcan': {'canbus_uuid': '8250861450f7', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set allow_park = client.park_at_cancel | default(false) | lower == \'true\' %}\n{% set retract = client.cancel_retract | default(5.0) | abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x | default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y | default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x | length > 0 or park_y | length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro | default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set idle_timeout = client.idle_timeout | default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE | default(1) | int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro | default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move | default(velocity) %}\n{% set runout_resume = True if client.runout_sensor | default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state | upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro | default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY | default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'neopixel sb_leds': {'pin': 'EBBCan:gpio16', 'chain_count': 3, 'color_order': ['GRB'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'led_effect sb_logo_busy': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1,0,0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_cleaning': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.02, 0.5)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_calibrating_z': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 0.35)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1, 0.18, 0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0, 0, 1)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_homing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.6, 0.2)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_leveling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.5, 0.1, 0.4)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_meshing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.2, 1.0, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_printing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.3, 0.3, 0.0),(0.3, 0.1, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_standby': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.01, 0.01, 0.01)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 1.0, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_nozzle_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1.0, 0.18, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 1.0, 0.1)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_standby': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.6, 0.0, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.6, 1.0, 0.0, 0.1)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_critical_error': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': True, 'endstops': '', 'layers': '\nstrobe         1  1.5   add        (1.0,  1.0, 1.0)\nbreathing      2  0     difference (0.95, 0.0, 0.0)\nstatic         1  0     top        (1.0,  0.0, 0.0)', 'leds': '\nneopixel:sb_leds'}, 'led_effect rainbow': {'frame_rate': 24.0, 'autostart': True, 'run_on_error': False, 'endstops': '', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.0, 0.3, 0.0),(0.0, 0.0, 0.3)', 'leds': '\nneopixel:sb_leds'}, 'led_effect set_nozzle_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic         0  0     top        (0.5,  0.5, 0.5)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect set_logo_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic         0  0     top        (1.0,  1.0, 1.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'gcode_macro set_logo_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nSTOP_LED_EFFECTS', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=rainbow', 'description': 'G-Code macro'}, 'gcode_macro status_part_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_busy\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_heating\nSET_LED_EFFECT EFFECT=sb_nozzle_heating', 'description': 'G-Code macro'}, 'gcode_macro status_cooling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cooling\nSET_LED_EFFECT EFFECT=sb_nozzle_cooling', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_leveling\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_homing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cleaning\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_meshing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_calibrating_z\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_printing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'adxl345': {'axes_map': ['z', '-y', 'x'], 'rate': 3200, 'cs_pin': 'EBBCan:gpio1', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'EBBCan:gpio2', 'spi_software_miso_pin': 'EBBCan:gpio3', 'spi_software_mosi_pin': 'EBBCan:gpio0'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[100.0, 100.0, 20.0]], 'accel_chip': 'adxl345'}, 'input_shaper': {'shaper_type': '3hump_ei', 'shaper_type_x': '3hump_ei', 'damping_ratio_x': 0.1, 'shaper_freq_x': 45.0, 'shaper_type_y': '3hump_ei', 'damping_ratio_y': 0.1, 'shaper_freq_y': 0.0}, 'tmc2660 stepper_x': {'cs_pin': 'PD14', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PD6', 'dir_pin': '!PD11', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'EBBCan:gpio24', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2660 stepper_y': {'cs_pin': 'PC9', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PD7', 'dir_pin': '!PD12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'PA2', 'position_endstop': 0.0, 'position_min': -4.0, 'position_max': 225.0, 'homing_speed': 35.0, 'second_homing_speed': 17.5, 'homing_retract_speed': 35.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2660 stepper_z': {'cs_pin': 'PC10', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PD8', 'dir_pin': '!PD13', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -2.5, 'position_max': 230.0, 'homing_speed': 35.0, 'second_homing_speed': 17.5, 'homing_retract_speed': 35.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'adc_temperature my_thermistor': {'resistance1': 1000.0, 'temperature1': 0.0, 'temperature2': 80.0, 'resistance2': 1309.0}, 'tmc2209 extruder': {'uart_pin': 'EBBCan:gpio20', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan:gpio27', 'min_temp': 0.0, 'max_temp': 250.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 21.527, 'pid_ki': 1.063, 'pid_kd': 108.982, 'heater_pin': 'EBBCan:gpio7', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': '!EBBCan:gpio18', 'pressure_advance': 0.065, 'pressure_advance_smooth_time': 0.02, 'dir_pin': 'EBBCan:gpio19', 'rotation_distance': 21.63024711, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!EBBCan:gpio17'}, 'filament_switch_sensor extruder': {'switch_pin': 'EBBCan:gpio21', 'pause_on_runout': True, 'runout_gcode': '', 'pause_delay': 0.5, 'event_delay': 3.0}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'thermistor chamber_temp': {'temperature1': 25.0, 'resistance1': 10000.0, 'beta': 3950.0}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PC13', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'watermark', 'max_delta': 2.0, 'heater_pin': '!PA19', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan extruder_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'EBBCan:gpio13', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.25, 'off_below': 0.0, 'cycle_time': 0.08, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'EBBCan:gpio14'}, 'probe': {'z_offset': -1.35, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': '^EBBCan:gpio22', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 3, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.015, 'samples_tolerance_retries': 3}, 'homing_override': {'set_position_z': 0.0, 'axes': 'z', 'gcode': '\nstatus_homing\nG90\nG0 Z5 F500\nG28 X0 Y0\nG0 X150 Y100 F9000\nG28 Z0\nG0 Z5 F500\nstatus_ready'}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [6, 6], 'mesh_min': [25.0, 35.0], 'mesh_max': [225.0, 220.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 150.0, 'fade_start': 1.0, 'fade_end': 10.0, 'fade_target': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[-0.1, -0.025, 0.0125, 0.0375, 0.125, 0.2125], [-0.1875, -0.1, -0.025, 0.025, 0.1, 0.2125], [-0.2625, -0.1625, -0.075, -0.0125, 0.075, 0.1875], [-0.2625, -0.1625, -0.0875, -0.0, 0.1, 0.2375], [-0.2, -0.1, -0.0125, 0.0625, 0.2, 0.35], [-0.225, -0.075, -0.0, 0.0875, 0.225, 0.3875]], 'min_x': 25.0, 'max_x': 225.0, 'min_y': 35.0, 'max_y': 220.0, 'x_count': 6, 'y_count': 6, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'bicubic', 'tension': 0.2}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\nM117 Homing...\nM109 S150\nG28 Y0 X0 Z0\n\n\n\n\n\n\n\n\n\n\n\n\nSTATUS_HEATING\nM107\nM117 Heating bed\nM190 S{ params.BED }\nM117 Heating nozzle\nM109 S{target_extruder}\nstatus_ready\nG1 Z15.0 F600\nG1 X125 Y125 F3000\nG92 E0\nG1 F9000\nstatus_printing\nM117 Printing...', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\nstatus_busy\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\n\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y} F3600\nM117 Finished!\nstatus_off', 'description': 'G-Code macro'}, 'force_move': {'enable_force_move': True}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexz', 'max_z_velocity': 5.0, 'max_z_accel': 100.0}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-03-28 23:58:28,057 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-03-28 23:58:28,061 [printer.py:reinit()] - Klipper version: v0.12.0-132-ge37b007f-dirty
2024-03-28 23:58:28,061 [printer.py:reinit()] - # Extruders: 1
2024-03-28 23:58:28,062 [printer.py:reinit()] - # Temperature devices: 2
2024-03-28 23:58:28,062 [printer.py:reinit()] - # Fans: 2
2024-03-28 23:58:28,062 [printer.py:reinit()] - # Output pins: 0
2024-03-28 23:58:28,063 [printer.py:reinit()] - # Leds: 20
2024-03-28 23:58:28,063 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-03-28 23:58:28,094 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-03-28 23:58:28,098 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor mcu&fan&heater_fan extruder_fan&filament_switch_sensor extruder&neopixel sb_leds
2024-03-28 23:58:28,290 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-03-28 23:58:28,290 [screen.py:init_klipper()] - Printer initialized
2024-03-28 23:58:28,290 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2024-03-28 23:58:28,291 [printer.py:change_state()] - Adding callback for state: ready
2024-03-28 23:58:28,292 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-03-28 23:58:28,297 [screen.py:show_panel()] - Reinitializing panel
2024-03-28 23:58:28,407 [main_menu.py:__init__()] - ### Making MainMenu
2024-03-28 23:58:28,422 [main_menu.py:add_device()] - Adding device: extruder
2024-03-28 23:58:28,431 [main_menu.py:add_device()] - Adding device: heater_bed
2024-03-28 23:58:28,440 [main_menu.py:add_device()] - Adding device: temperature_sensor mcu
2024-03-28 23:58:28,491 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-03-28 23:58:28,492 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-03-28 23:58:28,526 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor mcu', 'heater_bed', 'extruder']
2024-03-28 23:58:28,528 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-03-28 23:58:28,541 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-03-29 00:58:23,731 [screen.py:show_screensaver()] - Showing Screensaver
2024-03-29 03:13:54,621 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2024-03-29 03:13:54,622 [printer.py:change_state()] - Adding callback for state: printing
2024-03-29 03:13:54,630 [screen.py:close_screensaver()] - Closing Screensaver
2024-03-29 03:13:54,694 [screen.py:show_panel()] - Reinitializing panel
2024-03-29 03:13:54,886 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-03-29 03:13:54,895 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-03-29 03:13:54,914 [job_status.py:update_file_metadata()] - Update Metadata. File: fidget_cube_0.2mm_PLA_MK3S_1h39m.gcode Size: 3698313
2024-03-29 03:13:54,920 [job_status.py:show_file_thumbnail()] - fidget_cube_0.2mm_PLA_MK3S_1h39m.gcode
2024-03-29 03:45:02,996 [printer.py:change_state()] - Changing state from 'printing' to 'paused'
2024-03-29 03:45:02,997 [printer.py:change_state()] - Adding callback for state: paused
2024-03-29 03:45:03,008 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'paused'
2024-03-29 03:45:03,102 [screen.py:show_panel()] - Reinitializing panel
2024-03-29 03:45:03,303 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-03-29 03:45:03,312 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'paused'
2024-03-29 03:45:03,332 [job_status.py:update_file_metadata()] - Update Metadata. File: fidget_cube_0.2mm_PLA_MK3S_1h39m.gcode Size: 3698313
2024-03-29 03:45:03,338 [job_status.py:show_file_thumbnail()] - fidget_cube_0.2mm_PLA_MK3S_1h39m.gcode
2024-03-29 03:45:03,345 [screen.py:_load_panel()] - Loading panel: extrude
2024-03-29 03:45:03,460 [screen.py:attach_panel()] - Current panel hierarchy: job_status > extrude
2024-03-29 03:45:03,463 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: SET_FILAMENT_SENSOR SENSOR=extruder ENABLE=1
2024-03-29 03:45:03,465 [extrude.py:process_update()] - filament_switch_sensor extruder: {'filament_detected': False, 'enabled': True}
2024-03-29 03:46:02,900 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: SET_FILAMENT_SENSOR SENSOR=extruder ENABLE=0
2024-03-29 03:46:02,903 [extrude.py:process_update()] - filament_switch_sensor extruder: {'filament_detected': False, 'enabled': False}
2024-03-29 03:46:14,171 [printer.py:change_state()] - Changing state from 'paused' to 'printing'
2024-03-29 03:46:14,172 [printer.py:change_state()] - Adding callback for state: printing
2024-03-29 03:46:14,187 [screen.py:show_panel()] - Reinitializing panel
2024-03-29 03:46:14,418 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-03-29 03:46:14,428 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-03-29 03:46:14,447 [job_status.py:update_file_metadata()] - Update Metadata. File: fidget_cube_0.2mm_PLA_MK3S_1h39m.gcode Size: 3698313
2024-03-29 03:46:14,453 [job_status.py:show_file_thumbnail()] - fidget_cube_0.2mm_PLA_MK3S_1h39m.gcode
2024-03-29 04:13:54,732 [screen.py:show_screensaver()] - Showing Screensaver
2024-03-29 04:33:07,325 [screen.py:close_screensaver()] - Closing Screensaver
2024-03-29 05:09:21,158 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2024-03-29 05:09:21,158 [printer.py:change_state()] - Adding callback for state: ready
2024-03-29 05:09:21,187 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'complete'
2024-03-29 05:11:33,070 [functions.py:log_start()] - --------------------KlipperScreen Log Start--------------------
2024-03-29 05:11:33,070 [functions.py:log_start()] - KlipperScreen Version: v0.3.9-50-gdaed9a0
2024-03-29 05:11:33,071 [functions.py:log_start()] - Python version: 3.11
2024-03-29 05:11:33,208 [config.py:get_config_file_location()] - Passed config (-c): .
2024-03-29 05:11:33,209 [config.py:__init__()] - Config path location: /home/pi/printer_data/config/KlipperScreen.conf
2024-03-29 05:11:33,233 [config.py:log_config()] -  ===== Config File =====

=======================
2024-03-29 05:11:33,235 [config.py:__init__()] - ====== Saved Def ======

[main]
use_dpms = False
print_sort_dir = date_desc

=======================
2024-03-29 05:11:33,236 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2024-03-29 05:11:33,341 [config.py:create_translations()] - Selected lang: None OS lang: en_GB
2024-03-29 05:11:33,344 [config.py:install_language()] - Using lang en
2024-03-29 05:11:33,363 [screen.py:__init__()] - Monitors: 1 using number: 0
2024-03-29 05:11:33,364 [screen.py:__init__()] - Wayland: False Display name: :100
2024-03-29 05:11:33,367 [screen.py:__init__()] - Screen resolution: 984x540
2024-03-29 05:11:33,368 [KlippyGtk.py:__init__()] - Font size: 18.6 (medium)
2024-03-29 05:11:33,909 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2024-03-29 05:11:33,910 [screen.py:set_screenblanking_timeout()] - Not using DPMS
2024-03-29 05:11:33,918 [screen.py:initial_connection()] - Default printer: None
2024-03-29 05:11:33,985 [screen.py:connect_printer()] - Connecting to printer: Printer
2024-03-29 05:11:33,985 [screen.py:_load_panel()] - Loading panel: splash_screen
2024-03-29 05:11:34,053 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-03-29 05:11:34,071 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-03-29 05:11:34,071 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-03-29 05:11:34,089 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/access/oneshot_token
2024-03-29 05:11:34,101 [KlippyWebsocket.py:connect()] - Starting websocket thread
2024-03-29 05:11:34,110 [_logging.py:info()] - Websocket connected
2024-03-29 05:11:34,110 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2024-03-29 05:11:34,169 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-03-29 05:11:34,180 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-03-29 05:11:34,192 [printer.py:configure_cameras()] - Cameras: []
2024-03-29 05:11:34,192 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'ready', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'octoprint_compat', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-03-29 05:11:34,192 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-03-29 05:11:34,205 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-03-29 05:11:34,267 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set allow_park = client.park_at_cancel | default(false) | lower == \'true\' %}\n{% set retract = client.cancel_retract | default(5.0) | abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x | default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y | default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x | length > 0 or park_y | length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro | default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set idle_timeout = client.idle_timeout | default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE | default(1) | int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro | default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move | default(velocity) %}\n{% set runout_resume = True if client.runout_sensor | default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state | upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro | default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY | default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}"}, 'neopixel sb_leds': {'pin': 'EBBCan:gpio16', 'chain_count': '3', 'color_order': 'GRB', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0'}, 'led_effect sb_logo_busy': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (1,0,0)'}, 'led_effect sb_logo_cleaning': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.02, 0.5)'}, 'led_effect sb_logo_calibrating_z': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 0.35)'}, 'led_effect sb_logo_heating': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nbreathing  3 1 top (1, 0.18, 0)'}, 'led_effect sb_logo_cooling': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nbreathing  3 1 top (0, 0, 1)'}, 'led_effect sb_logo_homing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.6, 0.2)'}, 'led_effect sb_logo_leveling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.5, 0.1, 0.4)'}, 'led_effect sb_logo_meshing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.2, 1.0, 0.0)'}, 'led_effect sb_logo_printing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.3, 0.3, 0.0),(0.3, 0.1, 0.0)'}, 'led_effect sb_logo_standby': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.01, 0.01, 0.01)'}, 'led_effect sb_logo_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 1.0, 0.0)'}, 'led_effect sb_nozzle_heating': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (1.0, 0.18, 0.0, 0.0)'}, 'led_effect sb_nozzle_cooling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 1.0, 0.1)'}, 'led_effect sb_nozzle_standby': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.6, 0.0, 0.0, 0.0)'}, 'led_effect sb_nozzle_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.6, 1.0, 0.0, 0.1)'}, 'led_effect sb_critical_error': {'leds': '\nneopixel:sb_leds', 'layers': '\nstrobe         1  1.5   add        (1.0,  1.0, 1.0)\nbreathing      2  0     difference (0.95, 0.0, 0.0)\nstatic         1  0     top        (1.0,  0.0, 0.0)', 'autostart': 'false', 'frame_rate': '24', 'run_on_error': 'true'}, 'led_effect rainbow': {'leds': '\nneopixel:sb_leds', 'autostart': 'true', 'frame_rate': '24', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.0, 0.3, 0.0),(0.0, 0.0, 0.3)'}, 'led_effect set_nozzle_leds': {'leds': '\nneopixel:sb_leds (2,3)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nstatic         0  0     top        (0.5,  0.5, 0.5)'}, 'led_effect set_logo_leds': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nstatic         0  0     top        (1.0,  1.0, 1.0)'}, 'gcode_macro set_logo_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds STOP=1'}, 'gcode_macro set_logo_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1'}, 'gcode_macro status_off': {'gcode': '\nSTOP_LED_EFFECTS'}, 'gcode_macro status_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=rainbow'}, 'gcode_macro status_part_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready'}, 'gcode_macro status_busy': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_busy\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_heating\nSET_LED_EFFECT EFFECT=sb_nozzle_heating'}, 'gcode_macro status_cooling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cooling\nSET_LED_EFFECT EFFECT=sb_nozzle_cooling'}, 'gcode_macro status_leveling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_leveling\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_homing\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cleaning\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_meshing\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_calibrating_z\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_printing\nset_nozzle_leds_on'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_sam4e8e_00313753364B37373032303038303139-if00'}, 'mcu EBBCan': {'canbus_uuid': '8250861450f7'}, 'adxl345': {'cs_pin': 'EBBCan:gpio1', 'spi_software_sclk_pin': 'EBBCan:gpio2', 'spi_software_mosi_pin': 'EBBCan:gpio0', 'spi_software_miso_pin': 'EBBCan:gpio3', 'axes_map': 'z,-y,x'}, 'resonance_tester': {'probe_points': '100, 100, 20', 'accel_chip': 'adxl345'}, 'input_shaper': {'shaper_freq_x': '45', 'shaper_type': '3hump_ei'}, 'stepper_x': {'step_pin': 'PD6', 'dir_pin': '!PD11', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'EBBCan:gpio24', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '40'}, 'tmc2660 stepper_x': {'cs_pin': 'PD14', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'stepper_y': {'step_pin': 'PD7', 'dir_pin': '!PD12', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'PA2', 'position_endstop': '0', 'position_max': '225', 'position_min': '-4', 'homing_speed': '35', 'homing_retract_dist': '0'}, 'tmc2660 stepper_y': {'cs_pin': 'PC9', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'stepper_z': {'step_pin': 'PD8', 'dir_pin': '!PD13', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '230', 'position_min': '-2.5', 'homing_speed': '35.0'}, 'tmc2660 stepper_z': {'cs_pin': 'PC10', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'adc_temperature my_thermistor': {'temperature1': '0', 'resistance1': '1000', 'temperature2': '80', 'resistance2': '1309'}, 'extruder': {'step_pin': '!EBBCan:gpio18', 'dir_pin': 'EBBCan:gpio19', 'enable_pin': '!EBBCan:gpio17', 'microsteps': '32', 'rotation_distance': '21.63024711', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'pressure_advance': '0.065', 'pressure_advance_smooth_time': '0.02', 'gear_ratio': '50:10', 'heater_pin': 'EBBCan:gpio7', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'EBBCan:gpio27', 'control': 'pid', 'pid_kp': '21.527', 'pid_ki': '1.063', 'pid_kd': '108.982', 'min_temp': '0', 'max_temp': '250'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan:gpio20', 'run_current': '0.5', 'stealthchop_threshold': '999999'}, 'filament_switch_sensor extruder': {'pause_on_runout': 'True', 'switch_pin': 'EBBCan:gpio21'}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu'}, 'thermistor chamber_temp': {'temperature1': '25', 'resistance1': '10000', 'beta': '3950'}, 'heater_bed': {'heater_pin': '!PA19', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PC13', 'control': 'watermark', 'min_temp': '0', 'max_temp': '120'}, 'heater_fan extruder_fan': {'pin': 'EBBCan:gpio13', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'EBBCan:gpio14', 'cycle_time': '.08', 'kick_start_time': '.25'}, 'probe': {'pin': '^EBBCan:gpio22', 'x_offset': '0', 'y_offset': '0', 'samples': '3', 'samples_result': 'median', 'sample_retract_dist': '3', 'samples_tolerance': '0.015', 'samples_tolerance_retries': '3', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'z_offset': '-1.350'}, 'homing_override': {'axes': 'z', 'set_position_z': '0', 'gcode': '\nstatus_homing\nG90\nG0 Z5 F500\nG28 X0 Y0\nG0 X150 Y100 F9000\nG28 Z0\nG0 Z5 F500\nstatus_ready'}, 'bed_mesh': {'speed': '150', 'horizontal_move_z': '5', 'mesh_min': '25,35.0', 'mesh_max': '225.0,220', 'probe_count': '6,6', 'algorithm': 'bicubic', 'fade_start': '1', 'fade_end': '10', 'fade_target': '0'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\nM117 Homing...\nM109 S150\nG28 Y0 X0 Z0\n\n\n\n\n\n\n\n\n\n\n\n\nSTATUS_HEATING\nM107\nM117 Heating bed\nM190 S{ params.BED }\nM117 Heating nozzle\nM109 S{target_extruder}\nstatus_ready\nG1 Z15.0 F600\nG1 X125 Y125 F3000\nG92 E0\nG1 F9000\nstatus_printing\nM117 Printing...'}, 'gcode_macro PRINT_END': {'gcode': '\nstatus_busy\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\n\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y} F3600\nM117 Finished!\nstatus_off'}, 'printer': {'kinematics': 'corexz', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '5', 'max_z_accel': '100'}, 'force_move': {'enable_force_move': 'true'}, 'exclude_object': {}, 'bed_mesh default': {'version': '1', 'points': '\n-0.100000, -0.025000, 0.012500, 0.037500, 0.125000, 0.212500\n-0.187500, -0.100000, -0.025000, 0.025000, 0.100000, 0.212500\n-0.262500, -0.162500, -0.075000, -0.012500, 0.075000, 0.187500\n-0.262500, -0.162500, -0.087500, -0.000000, 0.100000, 0.237500\n-0.200000, -0.100000, -0.012500, 0.062500, 0.200000, 0.350000\n-0.225000, -0.075000, -0.000000, 0.087500, 0.225000, 0.387500', 'x_count': '6', 'y_count': '6', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'bicubic', 'tension': '0.2', 'min_x': '25.0', 'max_x': '225.0', 'min_y': '35.0', 'max_y': '220.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_sam4e8e_00313753364B37373032303038303139-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu ebbcan': {'canbus_uuid': '8250861450f7', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set allow_park = client.park_at_cancel | default(false) | lower == \'true\' %}\n{% set retract = client.cancel_retract | default(5.0) | abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x | default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y | default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x | length > 0 or park_y | length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro | default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set idle_timeout = client.idle_timeout | default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE | default(1) | int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro | default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move | default(velocity) %}\n{% set runout_resume = True if client.runout_sensor | default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state | upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro | default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY | default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'neopixel sb_leds': {'pin': 'EBBCan:gpio16', 'chain_count': 3, 'color_order': ['GRB'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'led_effect sb_logo_busy': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1,0,0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_cleaning': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.02, 0.5)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_calibrating_z': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 0.35)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1, 0.18, 0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0, 0, 1)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_homing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.6, 0.2)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_leveling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.5, 0.1, 0.4)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_meshing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.2, 1.0, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_printing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.3, 0.3, 0.0),(0.3, 0.1, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_standby': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.01, 0.01, 0.01)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 1.0, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_nozzle_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1.0, 0.18, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 1.0, 0.1)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_standby': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.6, 0.0, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.6, 1.0, 0.0, 0.1)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_critical_error': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': True, 'endstops': '', 'layers': '\nstrobe         1  1.5   add        (1.0,  1.0, 1.0)\nbreathing      2  0     difference (0.95, 0.0, 0.0)\nstatic         1  0     top        (1.0,  0.0, 0.0)', 'leds': '\nneopixel:sb_leds'}, 'led_effect rainbow': {'frame_rate': 24.0, 'autostart': True, 'run_on_error': False, 'endstops': '', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.0, 0.3, 0.0),(0.0, 0.0, 0.3)', 'leds': '\nneopixel:sb_leds'}, 'led_effect set_nozzle_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic         0  0     top        (0.5,  0.5, 0.5)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect set_logo_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic         0  0     top        (1.0,  1.0, 1.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'gcode_macro set_logo_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nSTOP_LED_EFFECTS', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=rainbow', 'description': 'G-Code macro'}, 'gcode_macro status_part_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_busy\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_heating\nSET_LED_EFFECT EFFECT=sb_nozzle_heating', 'description': 'G-Code macro'}, 'gcode_macro status_cooling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cooling\nSET_LED_EFFECT EFFECT=sb_nozzle_cooling', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_leveling\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_homing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cleaning\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_meshing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_calibrating_z\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_printing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'adxl345': {'axes_map': ['z', '-y', 'x'], 'rate': 3200, 'cs_pin': 'EBBCan:gpio1', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'EBBCan:gpio2', 'spi_software_miso_pin': 'EBBCan:gpio3', 'spi_software_mosi_pin': 'EBBCan:gpio0'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[100.0, 100.0, 20.0]], 'accel_chip': 'adxl345'}, 'input_shaper': {'shaper_type': '3hump_ei', 'shaper_type_x': '3hump_ei', 'damping_ratio_x': 0.1, 'shaper_freq_x': 45.0, 'shaper_type_y': '3hump_ei', 'damping_ratio_y': 0.1, 'shaper_freq_y': 0.0}, 'tmc2660 stepper_x': {'cs_pin': 'PD14', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PD6', 'dir_pin': '!PD11', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'EBBCan:gpio24', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2660 stepper_y': {'cs_pin': 'PC9', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PD7', 'dir_pin': '!PD12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'PA2', 'position_endstop': 0.0, 'position_min': -4.0, 'position_max': 225.0, 'homing_speed': 35.0, 'second_homing_speed': 17.5, 'homing_retract_speed': 35.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2660 stepper_z': {'cs_pin': 'PC10', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PD8', 'dir_pin': '!PD13', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -2.5, 'position_max': 230.0, 'homing_speed': 35.0, 'second_homing_speed': 17.5, 'homing_retract_speed': 35.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'adc_temperature my_thermistor': {'resistance1': 1000.0, 'temperature1': 0.0, 'temperature2': 80.0, 'resistance2': 1309.0}, 'tmc2209 extruder': {'uart_pin': 'EBBCan:gpio20', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan:gpio27', 'min_temp': 0.0, 'max_temp': 250.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 21.527, 'pid_ki': 1.063, 'pid_kd': 108.982, 'heater_pin': 'EBBCan:gpio7', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': '!EBBCan:gpio18', 'pressure_advance': 0.065, 'pressure_advance_smooth_time': 0.02, 'dir_pin': 'EBBCan:gpio19', 'rotation_distance': 21.63024711, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!EBBCan:gpio17'}, 'filament_switch_sensor extruder': {'switch_pin': 'EBBCan:gpio21', 'pause_on_runout': True, 'runout_gcode': '', 'pause_delay': 0.5, 'event_delay': 3.0}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'thermistor chamber_temp': {'temperature1': 25.0, 'resistance1': 10000.0, 'beta': 3950.0}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PC13', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'watermark', 'max_delta': 2.0, 'heater_pin': '!PA19', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan extruder_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'EBBCan:gpio13', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.25, 'off_below': 0.0, 'cycle_time': 0.08, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'EBBCan:gpio14'}, 'probe': {'z_offset': -1.35, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': '^EBBCan:gpio22', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 3, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.015, 'samples_tolerance_retries': 3}, 'homing_override': {'set_position_z': 0.0, 'axes': 'z', 'gcode': '\nstatus_homing\nG90\nG0 Z5 F500\nG28 X0 Y0\nG0 X150 Y100 F9000\nG28 Z0\nG0 Z5 F500\nstatus_ready'}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [6, 6], 'mesh_min': [25.0, 35.0], 'mesh_max': [225.0, 220.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 150.0, 'fade_start': 1.0, 'fade_end': 10.0, 'fade_target': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[-0.1, -0.025, 0.0125, 0.0375, 0.125, 0.2125], [-0.1875, -0.1, -0.025, 0.025, 0.1, 0.2125], [-0.2625, -0.1625, -0.075, -0.0125, 0.075, 0.1875], [-0.2625, -0.1625, -0.0875, -0.0, 0.1, 0.2375], [-0.2, -0.1, -0.0125, 0.0625, 0.2, 0.35], [-0.225, -0.075, -0.0, 0.0875, 0.225, 0.3875]], 'min_x': 25.0, 'max_x': 225.0, 'min_y': 35.0, 'max_y': 220.0, 'x_count': 6, 'y_count': 6, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'bicubic', 'tension': 0.2}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\nM117 Homing...\nM109 S150\nG28 Y0 X0 Z0\n\n\n\n\n\n\n\n\n\n\n\n\nSTATUS_HEATING\nM107\nM117 Heating bed\nM190 S{ params.BED }\nM117 Heating nozzle\nM109 S{target_extruder}\nstatus_ready\nG1 Z15.0 F600\nG1 X125 Y125 F3000\nG92 E0\nG1 F9000\nstatus_printing\nM117 Printing...', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\nstatus_busy\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\n\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y} F3600\nM117 Finished!\nstatus_off', 'description': 'G-Code macro'}, 'force_move': {'enable_force_move': True}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexz', 'max_z_velocity': 5.0, 'max_z_accel': 100.0}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-03-29 05:11:34,270 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-03-29 05:11:34,272 [printer.py:reinit()] - Klipper version: v0.12.0-132-ge37b007f-dirty
2024-03-29 05:11:34,272 [printer.py:reinit()] - # Extruders: 1
2024-03-29 05:11:34,272 [printer.py:reinit()] - # Temperature devices: 2
2024-03-29 05:11:34,272 [printer.py:reinit()] - # Fans: 2
2024-03-29 05:11:34,272 [printer.py:reinit()] - # Output pins: 0
2024-03-29 05:11:34,272 [printer.py:reinit()] - # Leds: 20
2024-03-29 05:11:34,273 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-03-29 05:11:34,291 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-03-29 05:11:34,293 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor mcu&fan&heater_fan extruder_fan&filament_switch_sensor extruder&neopixel sb_leds
2024-03-29 05:11:34,573 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-03-29 05:11:34,573 [screen.py:init_klipper()] - Printer initialized
2024-03-29 05:11:34,573 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2024-03-29 05:11:34,573 [printer.py:change_state()] - Adding callback for state: ready
2024-03-29 05:11:34,693 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-03-29 05:11:34,698 [screen.py:_load_panel()] - Loading panel: main_menu
2024-03-29 05:11:34,812 [main_menu.py:__init__()] - ### Making MainMenu
2024-03-29 05:11:34,827 [main_menu.py:add_device()] - Adding device: extruder
2024-03-29 05:11:34,836 [main_menu.py:add_device()] - Adding device: heater_bed
2024-03-29 05:11:34,845 [main_menu.py:add_device()] - Adding device: temperature_sensor mcu
2024-03-29 05:11:34,897 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-03-29 05:11:34,898 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-03-29 05:11:34,934 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor mcu', 'heater_bed', 'extruder']
2024-03-29 05:11:34,936 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-03-29 05:11:34,948 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-03-29 05:11:44,769 [functions.py:log_start()] - --------------------KlipperScreen Log Start--------------------
2024-03-29 05:11:44,769 [functions.py:log_start()] - KlipperScreen Version: v0.3.9-50-gdaed9a0
2024-03-29 05:11:44,770 [functions.py:log_start()] - Python version: 3.11
2024-03-29 05:11:44,913 [config.py:get_config_file_location()] - Passed config (-c): .
2024-03-29 05:11:44,914 [config.py:__init__()] - Config path location: /home/pi/printer_data/config/KlipperScreen.conf
2024-03-29 05:11:44,939 [config.py:log_config()] -  ===== Config File =====

=======================
2024-03-29 05:11:44,941 [config.py:__init__()] - ====== Saved Def ======

[main]
use_dpms = False
print_sort_dir = date_desc

=======================
2024-03-29 05:11:44,942 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2024-03-29 05:11:45,046 [config.py:create_translations()] - Selected lang: None OS lang: en_GB
2024-03-29 05:11:45,050 [config.py:install_language()] - Using lang en
2024-03-29 05:11:45,069 [screen.py:__init__()] - Monitors: 1 using number: 0
2024-03-29 05:11:45,070 [screen.py:__init__()] - Wayland: False Display name: :100
2024-03-29 05:11:45,073 [screen.py:__init__()] - Screen resolution: 984x540
2024-03-29 05:11:45,074 [KlippyGtk.py:__init__()] - Font size: 18.6 (medium)
2024-03-29 05:11:45,671 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2024-03-29 05:11:45,671 [screen.py:set_screenblanking_timeout()] - Not using DPMS
2024-03-29 05:11:45,679 [screen.py:initial_connection()] - Default printer: None
2024-03-29 05:11:45,749 [screen.py:connect_printer()] - Connecting to printer: Printer
2024-03-29 05:11:45,749 [screen.py:_load_panel()] - Loading panel: splash_screen
2024-03-29 05:11:45,818 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-03-29 05:11:45,836 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-03-29 05:11:45,836 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-03-29 05:11:45,853 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/access/oneshot_token
2024-03-29 05:11:45,865 [KlippyWebsocket.py:connect()] - Starting websocket thread
2024-03-29 05:11:45,874 [_logging.py:info()] - Websocket connected
2024-03-29 05:11:45,874 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2024-03-29 05:11:45,885 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-03-29 05:11:45,897 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-03-29 05:11:45,909 [printer.py:configure_cameras()] - Cameras: []
2024-03-29 05:11:45,909 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'ready', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'octoprint_compat', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-03-29 05:11:45,909 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-03-29 05:11:45,922 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-03-29 05:11:46,051 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set allow_park = client.park_at_cancel | default(false) | lower == \'true\' %}\n{% set retract = client.cancel_retract | default(5.0) | abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x | default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y | default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x | length > 0 or park_y | length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro | default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set idle_timeout = client.idle_timeout | default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE | default(1) | int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro | default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move | default(velocity) %}\n{% set runout_resume = True if client.runout_sensor | default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state | upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro | default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY | default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}"}, 'neopixel sb_leds': {'pin': 'EBBCan:gpio16', 'chain_count': '3', 'color_order': 'GRB', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0'}, 'led_effect sb_logo_busy': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (1,0,0)'}, 'led_effect sb_logo_cleaning': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.02, 0.5)'}, 'led_effect sb_logo_calibrating_z': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 0.35)'}, 'led_effect sb_logo_heating': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nbreathing  3 1 top (1, 0.18, 0)'}, 'led_effect sb_logo_cooling': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nbreathing  3 1 top (0, 0, 1)'}, 'led_effect sb_logo_homing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.6, 0.2)'}, 'led_effect sb_logo_leveling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.5, 0.1, 0.4)'}, 'led_effect sb_logo_meshing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.2, 1.0, 0.0)'}, 'led_effect sb_logo_printing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.3, 0.3, 0.0),(0.3, 0.1, 0.0)'}, 'led_effect sb_logo_standby': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.01, 0.01, 0.01)'}, 'led_effect sb_logo_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 1.0, 0.0)'}, 'led_effect sb_nozzle_heating': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (1.0, 0.18, 0.0, 0.0)'}, 'led_effect sb_nozzle_cooling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 1.0, 0.1)'}, 'led_effect sb_nozzle_standby': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.6, 0.0, 0.0, 0.0)'}, 'led_effect sb_nozzle_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.6, 1.0, 0.0, 0.1)'}, 'led_effect sb_critical_error': {'leds': '\nneopixel:sb_leds', 'layers': '\nstrobe         1  1.5   add        (1.0,  1.0, 1.0)\nbreathing      2  0     difference (0.95, 0.0, 0.0)\nstatic         1  0     top        (1.0,  0.0, 0.0)', 'autostart': 'false', 'frame_rate': '24', 'run_on_error': 'true'}, 'led_effect rainbow': {'leds': '\nneopixel:sb_leds', 'autostart': 'true', 'frame_rate': '24', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.0, 0.3, 0.0),(0.0, 0.0, 0.3)'}, 'led_effect set_nozzle_leds': {'leds': '\nneopixel:sb_leds (2,3)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nstatic         0  0     top        (0.5,  0.5, 0.5)'}, 'led_effect set_logo_leds': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nstatic         0  0     top        (1.0,  1.0, 1.0)'}, 'gcode_macro set_logo_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds STOP=1'}, 'gcode_macro set_logo_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1'}, 'gcode_macro status_off': {'gcode': '\nSTOP_LED_EFFECTS'}, 'gcode_macro status_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=rainbow'}, 'gcode_macro status_part_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready'}, 'gcode_macro status_busy': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_busy\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_heating\nSET_LED_EFFECT EFFECT=sb_nozzle_heating'}, 'gcode_macro status_cooling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cooling\nSET_LED_EFFECT EFFECT=sb_nozzle_cooling'}, 'gcode_macro status_leveling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_leveling\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_homing\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cleaning\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_meshing\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_calibrating_z\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_printing\nset_nozzle_leds_on'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_sam4e8e_00313753364B37373032303038303139-if00'}, 'mcu EBBCan': {'canbus_uuid': '8250861450f7'}, 'adxl345': {'cs_pin': 'EBBCan:gpio1', 'spi_software_sclk_pin': 'EBBCan:gpio2', 'spi_software_mosi_pin': 'EBBCan:gpio0', 'spi_software_miso_pin': 'EBBCan:gpio3', 'axes_map': 'z,-y,x'}, 'resonance_tester': {'probe_points': '100, 100, 20', 'accel_chip': 'adxl345'}, 'input_shaper': {'shaper_freq_x': '45', 'shaper_type': '3hump_ei'}, 'stepper_x': {'step_pin': 'PD6', 'dir_pin': '!PD11', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'EBBCan:gpio24', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '40'}, 'tmc2660 stepper_x': {'cs_pin': 'PD14', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'stepper_y': {'step_pin': 'PD7', 'dir_pin': '!PD12', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'PA2', 'position_endstop': '0', 'position_max': '225', 'position_min': '-4', 'homing_speed': '35', 'homing_retract_dist': '0'}, 'tmc2660 stepper_y': {'cs_pin': 'PC9', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'stepper_z': {'step_pin': 'PD8', 'dir_pin': '!PD13', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '230', 'position_min': '-2.5', 'homing_speed': '35.0'}, 'tmc2660 stepper_z': {'cs_pin': 'PC10', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'adc_temperature my_thermistor': {'temperature1': '0', 'resistance1': '1000', 'temperature2': '80', 'resistance2': '1309'}, 'extruder': {'step_pin': '!EBBCan:gpio18', 'dir_pin': 'EBBCan:gpio19', 'enable_pin': '!EBBCan:gpio17', 'microsteps': '32', 'rotation_distance': '21.63024711', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'pressure_advance': '0.065', 'pressure_advance_smooth_time': '0.02', 'gear_ratio': '50:10', 'heater_pin': 'EBBCan:gpio7', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'EBBCan:gpio27', 'control': 'pid', 'pid_kp': '21.527', 'pid_ki': '1.063', 'pid_kd': '108.982', 'min_temp': '0', 'max_temp': '250'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan:gpio20', 'run_current': '0.5', 'stealthchop_threshold': '999999'}, 'filament_switch_sensor extruder': {'pause_on_runout': 'True', 'switch_pin': 'EBBCan:gpio21'}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu'}, 'thermistor chamber_temp': {'temperature1': '25', 'resistance1': '10000', 'beta': '3950'}, 'heater_bed': {'heater_pin': '!PA19', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PC13', 'control': 'watermark', 'min_temp': '0', 'max_temp': '120'}, 'heater_fan extruder_fan': {'pin': 'EBBCan:gpio13', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'EBBCan:gpio14', 'cycle_time': '.08', 'kick_start_time': '.25'}, 'probe': {'pin': '^EBBCan:gpio22', 'x_offset': '0', 'y_offset': '0', 'samples': '3', 'samples_result': 'median', 'sample_retract_dist': '3', 'samples_tolerance': '0.015', 'samples_tolerance_retries': '3', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'z_offset': '-1.350'}, 'homing_override': {'axes': 'z', 'set_position_z': '0', 'gcode': '\nstatus_homing\nG90\nG0 Z5 F500\nG28 X0 Y0\nG0 X150 Y100 F9000\nG28 Z0\nG0 Z5 F500\nstatus_ready'}, 'bed_mesh': {'speed': '150', 'horizontal_move_z': '5', 'mesh_min': '25,35.0', 'mesh_max': '225.0,220', 'probe_count': '6,6', 'algorithm': 'bicubic', 'fade_start': '1', 'fade_end': '10', 'fade_target': '0'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\nM117 Homing...\nM109 S150\nG28 Y0 X0 Z0\n\n\n\n\n\n\n\n\n\n\n\n\nSTATUS_HEATING\nM107\nM117 Heating bed\nM190 S{ params.BED }\nM117 Heating nozzle\nM109 S{target_extruder}\nstatus_ready\nG1 Z15.0 F600\nG1 X125 Y125 F3000\nG92 E0\nG1 F9000\nstatus_printing\nM117 Printing...'}, 'gcode_macro PRINT_END': {'gcode': '\nstatus_busy\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\n\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y} F3600\nM117 Finished!\nstatus_off'}, 'printer': {'kinematics': 'corexz', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '5', 'max_z_accel': '100'}, 'force_move': {'enable_force_move': 'true'}, 'exclude_object': {}, 'bed_mesh default': {'version': '1', 'points': '\n-0.100000, -0.025000, 0.012500, 0.037500, 0.125000, 0.212500\n-0.187500, -0.100000, -0.025000, 0.025000, 0.100000, 0.212500\n-0.262500, -0.162500, -0.075000, -0.012500, 0.075000, 0.187500\n-0.262500, -0.162500, -0.087500, -0.000000, 0.100000, 0.237500\n-0.200000, -0.100000, -0.012500, 0.062500, 0.200000, 0.350000\n-0.225000, -0.075000, -0.000000, 0.087500, 0.225000, 0.387500', 'x_count': '6', 'y_count': '6', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'bicubic', 'tension': '0.2', 'min_x': '25.0', 'max_x': '225.0', 'min_y': '35.0', 'max_y': '220.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_sam4e8e_00313753364B37373032303038303139-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu ebbcan': {'canbus_uuid': '8250861450f7', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set allow_park = client.park_at_cancel | default(false) | lower == \'true\' %}\n{% set retract = client.cancel_retract | default(5.0) | abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x | default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y | default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x | length > 0 or park_y | length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro | default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set idle_timeout = client.idle_timeout | default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE | default(1) | int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro | default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move | default(velocity) %}\n{% set runout_resume = True if client.runout_sensor | default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state | upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro | default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY | default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'neopixel sb_leds': {'pin': 'EBBCan:gpio16', 'chain_count': 3, 'color_order': ['GRB'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'led_effect sb_logo_busy': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1,0,0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_cleaning': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.02, 0.5)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_calibrating_z': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 0.35)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1, 0.18, 0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0, 0, 1)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_homing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.6, 0.2)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_leveling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.5, 0.1, 0.4)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_meshing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.2, 1.0, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_printing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.3, 0.3, 0.0),(0.3, 0.1, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_standby': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.01, 0.01, 0.01)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 1.0, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_nozzle_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1.0, 0.18, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 1.0, 0.1)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_standby': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.6, 0.0, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.6, 1.0, 0.0, 0.1)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_critical_error': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': True, 'endstops': '', 'layers': '\nstrobe         1  1.5   add        (1.0,  1.0, 1.0)\nbreathing      2  0     difference (0.95, 0.0, 0.0)\nstatic         1  0     top        (1.0,  0.0, 0.0)', 'leds': '\nneopixel:sb_leds'}, 'led_effect rainbow': {'frame_rate': 24.0, 'autostart': True, 'run_on_error': False, 'endstops': '', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.0, 0.3, 0.0),(0.0, 0.0, 0.3)', 'leds': '\nneopixel:sb_leds'}, 'led_effect set_nozzle_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic         0  0     top        (0.5,  0.5, 0.5)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect set_logo_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic         0  0     top        (1.0,  1.0, 1.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'gcode_macro set_logo_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nSTOP_LED_EFFECTS', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=rainbow', 'description': 'G-Code macro'}, 'gcode_macro status_part_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_busy\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_heating\nSET_LED_EFFECT EFFECT=sb_nozzle_heating', 'description': 'G-Code macro'}, 'gcode_macro status_cooling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cooling\nSET_LED_EFFECT EFFECT=sb_nozzle_cooling', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_leveling\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_homing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cleaning\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_meshing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_calibrating_z\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_printing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'adxl345': {'axes_map': ['z', '-y', 'x'], 'rate': 3200, 'cs_pin': 'EBBCan:gpio1', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'EBBCan:gpio2', 'spi_software_miso_pin': 'EBBCan:gpio3', 'spi_software_mosi_pin': 'EBBCan:gpio0'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[100.0, 100.0, 20.0]], 'accel_chip': 'adxl345'}, 'input_shaper': {'shaper_type': '3hump_ei', 'shaper_type_x': '3hump_ei', 'damping_ratio_x': 0.1, 'shaper_freq_x': 45.0, 'shaper_type_y': '3hump_ei', 'damping_ratio_y': 0.1, 'shaper_freq_y': 0.0}, 'tmc2660 stepper_x': {'cs_pin': 'PD14', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PD6', 'dir_pin': '!PD11', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'EBBCan:gpio24', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2660 stepper_y': {'cs_pin': 'PC9', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PD7', 'dir_pin': '!PD12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'PA2', 'position_endstop': 0.0, 'position_min': -4.0, 'position_max': 225.0, 'homing_speed': 35.0, 'second_homing_speed': 17.5, 'homing_retract_speed': 35.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2660 stepper_z': {'cs_pin': 'PC10', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PD8', 'dir_pin': '!PD13', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -2.5, 'position_max': 230.0, 'homing_speed': 35.0, 'second_homing_speed': 17.5, 'homing_retract_speed': 35.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'adc_temperature my_thermistor': {'resistance1': 1000.0, 'temperature1': 0.0, 'temperature2': 80.0, 'resistance2': 1309.0}, 'tmc2209 extruder': {'uart_pin': 'EBBCan:gpio20', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan:gpio27', 'min_temp': 0.0, 'max_temp': 250.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 21.527, 'pid_ki': 1.063, 'pid_kd': 108.982, 'heater_pin': 'EBBCan:gpio7', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': '!EBBCan:gpio18', 'pressure_advance': 0.065, 'pressure_advance_smooth_time': 0.02, 'dir_pin': 'EBBCan:gpio19', 'rotation_distance': 21.63024711, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!EBBCan:gpio17'}, 'filament_switch_sensor extruder': {'switch_pin': 'EBBCan:gpio21', 'pause_on_runout': True, 'runout_gcode': '', 'pause_delay': 0.5, 'event_delay': 3.0}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'thermistor chamber_temp': {'temperature1': 25.0, 'resistance1': 10000.0, 'beta': 3950.0}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PC13', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'watermark', 'max_delta': 2.0, 'heater_pin': '!PA19', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan extruder_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'EBBCan:gpio13', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.25, 'off_below': 0.0, 'cycle_time': 0.08, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'EBBCan:gpio14'}, 'probe': {'z_offset': -1.35, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': '^EBBCan:gpio22', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 3, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.015, 'samples_tolerance_retries': 3}, 'homing_override': {'set_position_z': 0.0, 'axes': 'z', 'gcode': '\nstatus_homing\nG90\nG0 Z5 F500\nG28 X0 Y0\nG0 X150 Y100 F9000\nG28 Z0\nG0 Z5 F500\nstatus_ready'}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [6, 6], 'mesh_min': [25.0, 35.0], 'mesh_max': [225.0, 220.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 150.0, 'fade_start': 1.0, 'fade_end': 10.0, 'fade_target': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[-0.1, -0.025, 0.0125, 0.0375, 0.125, 0.2125], [-0.1875, -0.1, -0.025, 0.025, 0.1, 0.2125], [-0.2625, -0.1625, -0.075, -0.0125, 0.075, 0.1875], [-0.2625, -0.1625, -0.0875, -0.0, 0.1, 0.2375], [-0.2, -0.1, -0.0125, 0.0625, 0.2, 0.35], [-0.225, -0.075, -0.0, 0.0875, 0.225, 0.3875]], 'min_x': 25.0, 'max_x': 225.0, 'min_y': 35.0, 'max_y': 220.0, 'x_count': 6, 'y_count': 6, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'bicubic', 'tension': 0.2}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\nM117 Homing...\nM109 S150\nG28 Y0 X0 Z0\n\n\n\n\n\n\n\n\n\n\n\n\nSTATUS_HEATING\nM107\nM117 Heating bed\nM190 S{ params.BED }\nM117 Heating nozzle\nM109 S{target_extruder}\nstatus_ready\nG1 Z15.0 F600\nG1 X125 Y125 F3000\nG92 E0\nG1 F9000\nstatus_printing\nM117 Printing...', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\nstatus_busy\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\n\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y} F3600\nM117 Finished!\nstatus_off', 'description': 'G-Code macro'}, 'force_move': {'enable_force_move': True}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexz', 'max_z_velocity': 5.0, 'max_z_accel': 100.0}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-03-29 05:11:46,054 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-03-29 05:11:46,055 [printer.py:reinit()] - Klipper version: v0.12.0-132-ge37b007f-dirty
2024-03-29 05:11:46,055 [printer.py:reinit()] - # Extruders: 1
2024-03-29 05:11:46,056 [printer.py:reinit()] - # Temperature devices: 2
2024-03-29 05:11:46,056 [printer.py:reinit()] - # Fans: 2
2024-03-29 05:11:46,056 [printer.py:reinit()] - # Output pins: 0
2024-03-29 05:11:46,056 [printer.py:reinit()] - # Leds: 20
2024-03-29 05:11:46,056 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-03-29 05:11:46,074 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-03-29 05:11:46,077 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor mcu&fan&heater_fan extruder_fan&filament_switch_sensor extruder&neopixel sb_leds
2024-03-29 05:11:46,358 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-03-29 05:11:46,359 [screen.py:init_klipper()] - Printer initialized
2024-03-29 05:11:46,359 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2024-03-29 05:11:46,359 [printer.py:change_state()] - Adding callback for state: ready
2024-03-29 05:11:46,485 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-03-29 05:11:46,489 [screen.py:_load_panel()] - Loading panel: main_menu
2024-03-29 05:11:46,598 [main_menu.py:__init__()] - ### Making MainMenu
2024-03-29 05:11:46,613 [main_menu.py:add_device()] - Adding device: extruder
2024-03-29 05:11:46,621 [main_menu.py:add_device()] - Adding device: heater_bed
2024-03-29 05:11:46,630 [main_menu.py:add_device()] - Adding device: temperature_sensor mcu
2024-03-29 05:11:46,680 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-03-29 05:11:46,682 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-03-29 05:11:46,718 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor mcu', 'heater_bed', 'extruder']
2024-03-29 05:11:46,720 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-03-29 05:11:46,732 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-03-29 05:11:50,414 [screen.py:_load_panel()] - Loading panel: shutdown
2024-03-29 05:11:50,552 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > shutdown
2024-03-29 05:11:53,623 [shutdown.py:reboot_poweroff()] - http://127.0.0.1:7125
2024-03-29 05:11:54,056 [KlippyGtk.py:Dialog()] - Showing dialog Shutdown (width=984, height=540)
2024-03-29 05:11:57,276 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2024-04-10 23:30:45,210 [functions.py:log_start()] - --------------------KlipperScreen Log Start--------------------
2024-04-10 23:30:45,210 [functions.py:log_start()] - KlipperScreen Version: v0.3.9-50-gdaed9a0
2024-04-10 23:30:45,210 [functions.py:log_start()] - Python version: 3.11
2024-04-10 23:30:45,467 [config.py:get_config_file_location()] - Passed config (-c): .
2024-04-10 23:30:45,467 [config.py:__init__()] - Config path location: /home/pi/printer_data/config/KlipperScreen.conf
2024-04-10 23:30:45,506 [config.py:log_config()] -  ===== Config File =====

=======================
2024-04-10 23:30:45,508 [config.py:__init__()] - ====== Saved Def ======

[main]
use_dpms = False
print_sort_dir = date_desc

=======================
2024-04-10 23:30:45,509 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2024-04-10 23:30:45,653 [config.py:create_translations()] - Selected lang: None OS lang: en_GB
2024-04-10 23:30:45,653 [config.py:install_language()] - Using lang en
2024-04-10 23:30:45,682 [screen.py:__init__()] - Monitors: 1 using number: 0
2024-04-10 23:30:45,684 [screen.py:__init__()] - Wayland: False Display name: :100
2024-04-10 23:30:45,686 [screen.py:__init__()] - Screen resolution: 984x540
2024-04-10 23:30:45,688 [KlippyGtk.py:__init__()] - Font size: 18.6 (medium)
2024-04-10 23:30:47,441 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2024-04-10 23:30:47,442 [screen.py:set_screenblanking_timeout()] - Not using DPMS
2024-04-10 23:30:47,450 [screen.py:initial_connection()] - Default printer: None
2024-04-10 23:30:47,517 [screen.py:connect_printer()] - Connecting to printer: Printer
2024-04-10 23:30:47,518 [screen.py:_load_panel()] - Loading panel: splash_screen
2024-04-10 23:30:51,674 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-04-10 23:30:51,703 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-04-10 23:30:51,703 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-10 23:30:52,200 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/access/oneshot_token
2024-04-10 23:30:52,224 [KlippyWebsocket.py:connect()] - Starting websocket thread
2024-04-10 23:30:52,237 [_logging.py:info()] - Websocket connected
2024-04-10 23:30:52,238 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2024-04-10 23:30:52,757 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-10 23:30:52,776 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-04-10 23:30:52,794 [printer.py:configure_cameras()] - Cameras: []
2024-04-10 23:30:52,794 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'octoprint_compat', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-04-10 23:30:52,795 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-04-10 23:30:52,814 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-04-10 23:30:52,850 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set allow_park = client.park_at_cancel | default(false) | lower == \'true\' %}\n{% set retract = client.cancel_retract | default(5.0) | abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x | default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y | default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x | length > 0 or park_y | length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro | default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set idle_timeout = client.idle_timeout | default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE | default(1) | int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro | default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move | default(velocity) %}\n{% set runout_resume = True if client.runout_sensor | default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state | upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro | default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY | default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}"}, 'neopixel sb_leds': {'pin': 'EBBCan:gpio16', 'chain_count': '3', 'color_order': 'GRB', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0'}, 'led_effect sb_logo_busy': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (1,0,0)'}, 'led_effect sb_logo_cleaning': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.02, 0.5)'}, 'led_effect sb_logo_calibrating_z': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 0.35)'}, 'led_effect sb_logo_heating': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nbreathing  3 1 top (1, 0.18, 0)'}, 'led_effect sb_logo_cooling': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nbreathing  3 1 top (0, 0, 1)'}, 'led_effect sb_logo_homing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.6, 0.2)'}, 'led_effect sb_logo_leveling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.5, 0.1, 0.4)'}, 'led_effect sb_logo_meshing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.2, 1.0, 0.0)'}, 'led_effect sb_logo_printing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.3, 0.3, 0.0),(0.3, 0.1, 0.0)'}, 'led_effect sb_logo_standby': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.01, 0.01, 0.01)'}, 'led_effect sb_logo_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 1.0, 0.0)'}, 'led_effect sb_nozzle_heating': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (1.0, 0.18, 0.0, 0.0)'}, 'led_effect sb_nozzle_cooling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 1.0, 0.1)'}, 'led_effect sb_nozzle_standby': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.6, 0.0, 0.0, 0.0)'}, 'led_effect sb_nozzle_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.6, 1.0, 0.0, 0.1)'}, 'led_effect sb_critical_error': {'leds': '\nneopixel:sb_leds', 'layers': '\nstrobe         1  1.5   add        (1.0,  1.0, 1.0)\nbreathing      2  0     difference (0.95, 0.0, 0.0)\nstatic         1  0     top        (1.0,  0.0, 0.0)', 'autostart': 'false', 'frame_rate': '24', 'run_on_error': 'true'}, 'led_effect rainbow': {'leds': '\nneopixel:sb_leds', 'autostart': 'true', 'frame_rate': '24', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.0, 0.3, 0.0),(0.0, 0.0, 0.3)'}, 'led_effect set_nozzle_leds': {'leds': '\nneopixel:sb_leds (2,3)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nstatic         0  0     top        (0.5,  0.5, 0.5)'}, 'led_effect set_logo_leds': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nstatic         0  0     top        (1.0,  1.0, 1.0)'}, 'gcode_macro set_logo_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds STOP=1'}, 'gcode_macro set_logo_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1'}, 'gcode_macro status_off': {'gcode': '\nSTOP_LED_EFFECTS'}, 'gcode_macro status_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=rainbow'}, 'gcode_macro status_part_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready'}, 'gcode_macro status_busy': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_busy\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_heating\nSET_LED_EFFECT EFFECT=sb_nozzle_heating'}, 'gcode_macro status_cooling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cooling\nSET_LED_EFFECT EFFECT=sb_nozzle_cooling'}, 'gcode_macro status_leveling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_leveling\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_homing\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cleaning\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_meshing\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_calibrating_z\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_printing\nset_nozzle_leds_on'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_sam4e8e_00313753364B37373032303038303139-if00'}, 'mcu EBBCan': {'canbus_uuid': '8250861450f7'}, 'adxl345': {'cs_pin': 'EBBCan:gpio1', 'spi_software_sclk_pin': 'EBBCan:gpio2', 'spi_software_mosi_pin': 'EBBCan:gpio0', 'spi_software_miso_pin': 'EBBCan:gpio3', 'axes_map': 'z,-y,x'}, 'resonance_tester': {'probe_points': '100, 100, 20', 'accel_chip': 'adxl345'}, 'input_shaper': {'shaper_freq_x': '45', 'shaper_type': '3hump_ei'}, 'stepper_x': {'step_pin': 'PD6', 'dir_pin': '!PD11', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'EBBCan:gpio24', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '40'}, 'tmc2660 stepper_x': {'cs_pin': 'PD14', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'stepper_y': {'step_pin': 'PD7', 'dir_pin': '!PD12', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'PA2', 'position_endstop': '0', 'position_max': '225', 'position_min': '-4', 'homing_speed': '35', 'homing_retract_dist': '0'}, 'tmc2660 stepper_y': {'cs_pin': 'PC9', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'stepper_z': {'step_pin': 'PD8', 'dir_pin': '!PD13', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '230', 'position_min': '-2.5', 'homing_speed': '35.0'}, 'tmc2660 stepper_z': {'cs_pin': 'PC10', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'adc_temperature my_thermistor': {'temperature1': '0', 'resistance1': '1000', 'temperature2': '80', 'resistance2': '1309'}, 'extruder': {'step_pin': '!EBBCan:gpio18', 'dir_pin': 'EBBCan:gpio19', 'enable_pin': '!EBBCan:gpio17', 'microsteps': '32', 'rotation_distance': '21.63024711', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'pressure_advance': '0.065', 'pressure_advance_smooth_time': '0.02', 'gear_ratio': '50:10', 'heater_pin': 'EBBCan:gpio7', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'EBBCan:gpio27', 'control': 'pid', 'pid_kp': '21.527', 'pid_ki': '1.063', 'pid_kd': '108.982', 'min_temp': '0', 'max_temp': '250'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan:gpio20', 'run_current': '0.5', 'stealthchop_threshold': '999999'}, 'filament_switch_sensor extruder': {'pause_on_runout': 'True', 'switch_pin': 'EBBCan:gpio21'}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu'}, 'thermistor chamber_temp': {'temperature1': '25', 'resistance1': '10000', 'beta': '3950'}, 'heater_bed': {'heater_pin': '!PA19', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PC13', 'control': 'watermark', 'min_temp': '0', 'max_temp': '120'}, 'heater_fan extruder_fan': {'pin': 'EBBCan:gpio13', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'EBBCan:gpio14', 'cycle_time': '.08', 'kick_start_time': '.25'}, 'probe': {'pin': '^EBBCan:gpio22', 'x_offset': '0', 'y_offset': '0', 'samples': '3', 'samples_result': 'median', 'sample_retract_dist': '3', 'samples_tolerance': '0.015', 'samples_tolerance_retries': '3', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'z_offset': '-1.350'}, 'homing_override': {'axes': 'z', 'set_position_z': '0', 'gcode': '\nstatus_homing\nG90\nG0 Z5 F500\nG28 X0 Y0\nG0 X150 Y100 F9000\nG28 Z0\nG0 Z5 F500\nstatus_ready'}, 'bed_mesh': {'speed': '150', 'horizontal_move_z': '5', 'mesh_min': '25,35.0', 'mesh_max': '225.0,220', 'probe_count': '6,6', 'algorithm': 'bicubic', 'fade_start': '1', 'fade_end': '10', 'fade_target': '0'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\nSTATUS_HEATING\nM109 S150\nSTATUS_HOMING\nM117 Homing...\nG28 Y0 X0 Z0\nSTATUS_MESHING\nBED_MESH_CALIBRATE ADAPTIVE=1\n\n\n\n\n\n\n\n\n\n\n\nSTATUS_HEATING\nM107\nM117 Heating bed\nM190 S{ params.BED }\nM117 Heating nozzle\nM109 S{target_extruder}\nstatus_ready\nG1 Z15.0 F600\nG1 X125 Y125 F3000\nG92 E0\nG1 F9000\nstatus_printing\nM117 Printing...'}, 'gcode_macro PRINT_END': {'gcode': '\nstatus_busy\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\n\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y} F3600\nM117 Finished!\nstatus_off'}, 'gcode_macro M600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state'}, 'printer': {'kinematics': 'corexz', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '5', 'max_z_accel': '100'}, 'force_move': {'enable_force_move': 'true'}, 'exclude_object': {}, 'bed_mesh default': {'version': '1', 'points': '\n-0.100000, -0.025000, 0.012500, 0.037500, 0.125000, 0.212500\n-0.187500, -0.100000, -0.025000, 0.025000, 0.100000, 0.212500\n-0.262500, -0.162500, -0.075000, -0.012500, 0.075000, 0.187500\n-0.262500, -0.162500, -0.087500, -0.000000, 0.100000, 0.237500\n-0.200000, -0.100000, -0.012500, 0.062500, 0.200000, 0.350000\n-0.225000, -0.075000, -0.000000, 0.087500, 0.225000, 0.387500', 'x_count': '6', 'y_count': '6', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'bicubic', 'tension': '0.2', 'min_x': '25.0', 'max_x': '225.0', 'min_y': '35.0', 'max_y': '220.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_sam4e8e_00313753364B37373032303038303139-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu ebbcan': {'canbus_uuid': '8250861450f7', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set allow_park = client.park_at_cancel | default(false) | lower == \'true\' %}\n{% set retract = client.cancel_retract | default(5.0) | abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x | default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y | default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x | length > 0 or park_y | length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro | default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set idle_timeout = client.idle_timeout | default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE | default(1) | int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro | default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move | default(velocity) %}\n{% set runout_resume = True if client.runout_sensor | default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state | upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro | default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY | default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'neopixel sb_leds': {'pin': 'EBBCan:gpio16', 'chain_count': 3, 'color_order': ['GRB'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'led_effect sb_logo_busy': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1,0,0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_cleaning': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.02, 0.5)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_calibrating_z': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 0.35)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1, 0.18, 0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0, 0, 1)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_homing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.6, 0.2)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_leveling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.5, 0.1, 0.4)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_meshing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.2, 1.0, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_printing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.3, 0.3, 0.0),(0.3, 0.1, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_standby': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.01, 0.01, 0.01)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 1.0, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_nozzle_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1.0, 0.18, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 1.0, 0.1)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_standby': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.6, 0.0, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.6, 1.0, 0.0, 0.1)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_critical_error': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': True, 'endstops': '', 'layers': '\nstrobe         1  1.5   add        (1.0,  1.0, 1.0)\nbreathing      2  0     difference (0.95, 0.0, 0.0)\nstatic         1  0     top        (1.0,  0.0, 0.0)', 'leds': '\nneopixel:sb_leds'}, 'led_effect rainbow': {'frame_rate': 24.0, 'autostart': True, 'run_on_error': False, 'endstops': '', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.0, 0.3, 0.0),(0.0, 0.0, 0.3)', 'leds': '\nneopixel:sb_leds'}, 'led_effect set_nozzle_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic         0  0     top        (0.5,  0.5, 0.5)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect set_logo_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic         0  0     top        (1.0,  1.0, 1.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'gcode_macro set_logo_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nSTOP_LED_EFFECTS', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=rainbow', 'description': 'G-Code macro'}, 'gcode_macro status_part_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_busy\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_heating\nSET_LED_EFFECT EFFECT=sb_nozzle_heating', 'description': 'G-Code macro'}, 'gcode_macro status_cooling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cooling\nSET_LED_EFFECT EFFECT=sb_nozzle_cooling', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_leveling\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_homing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cleaning\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_meshing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_calibrating_z\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_printing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'adxl345': {'axes_map': ['z', '-y', 'x'], 'rate': 3200, 'cs_pin': 'EBBCan:gpio1', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'EBBCan:gpio2', 'spi_software_miso_pin': 'EBBCan:gpio3', 'spi_software_mosi_pin': 'EBBCan:gpio0'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[100.0, 100.0, 20.0]], 'accel_chip': 'adxl345'}, 'input_shaper': {'shaper_type': '3hump_ei', 'shaper_type_x': '3hump_ei', 'damping_ratio_x': 0.1, 'shaper_freq_x': 45.0, 'shaper_type_y': '3hump_ei', 'damping_ratio_y': 0.1, 'shaper_freq_y': 0.0}, 'tmc2660 stepper_x': {'cs_pin': 'PD14', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PD6', 'dir_pin': '!PD11', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'EBBCan:gpio24', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2660 stepper_y': {'cs_pin': 'PC9', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PD7', 'dir_pin': '!PD12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'PA2', 'position_endstop': 0.0, 'position_min': -4.0, 'position_max': 225.0, 'homing_speed': 35.0, 'second_homing_speed': 17.5, 'homing_retract_speed': 35.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2660 stepper_z': {'cs_pin': 'PC10', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PD8', 'dir_pin': '!PD13', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -2.5, 'position_max': 230.0, 'homing_speed': 35.0, 'second_homing_speed': 17.5, 'homing_retract_speed': 35.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'adc_temperature my_thermistor': {'resistance1': 1000.0, 'temperature1': 0.0, 'temperature2': 80.0, 'resistance2': 1309.0}, 'tmc2209 extruder': {'uart_pin': 'EBBCan:gpio20', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan:gpio27', 'min_temp': 0.0, 'max_temp': 250.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 21.527, 'pid_ki': 1.063, 'pid_kd': 108.982, 'heater_pin': 'EBBCan:gpio7', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': '!EBBCan:gpio18', 'pressure_advance': 0.065, 'pressure_advance_smooth_time': 0.02, 'dir_pin': 'EBBCan:gpio19', 'rotation_distance': 21.63024711, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!EBBCan:gpio17'}, 'filament_switch_sensor extruder': {'switch_pin': 'EBBCan:gpio21', 'pause_on_runout': True, 'runout_gcode': '', 'pause_delay': 0.5, 'event_delay': 3.0}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'thermistor chamber_temp': {'temperature1': 25.0, 'resistance1': 10000.0, 'beta': 3950.0}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PC13', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'watermark', 'max_delta': 2.0, 'heater_pin': '!PA19', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan extruder_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'EBBCan:gpio13', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.25, 'off_below': 0.0, 'cycle_time': 0.08, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'EBBCan:gpio14'}, 'probe': {'z_offset': -1.35, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': '^EBBCan:gpio22', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 3, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.015, 'samples_tolerance_retries': 3}, 'homing_override': {'set_position_z': 0.0, 'axes': 'z', 'gcode': '\nstatus_homing\nG90\nG0 Z5 F500\nG28 X0 Y0\nG0 X150 Y100 F9000\nG28 Z0\nG0 Z5 F500\nstatus_ready'}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [6, 6], 'mesh_min': [25.0, 35.0], 'mesh_max': [225.0, 220.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 150.0, 'fade_start': 1.0, 'fade_end': 10.0, 'fade_target': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[-0.1, -0.025, 0.0125, 0.0375, 0.125, 0.2125], [-0.1875, -0.1, -0.025, 0.025, 0.1, 0.2125], [-0.2625, -0.1625, -0.075, -0.0125, 0.075, 0.1875], [-0.2625, -0.1625, -0.0875, -0.0, 0.1, 0.2375], [-0.2, -0.1, -0.0125, 0.0625, 0.2, 0.35], [-0.225, -0.075, -0.0, 0.0875, 0.225, 0.3875]], 'min_x': 25.0, 'max_x': 225.0, 'min_y': 35.0, 'max_y': 220.0, 'x_count': 6, 'y_count': 6, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'bicubic', 'tension': 0.2}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\nSTATUS_HEATING\nM109 S150\nSTATUS_HOMING\nM117 Homing...\nG28 Y0 X0 Z0\nSTATUS_MESHING\nBED_MESH_CALIBRATE ADAPTIVE=1\n\n\n\n\n\n\n\n\n\n\n\nSTATUS_HEATING\nM107\nM117 Heating bed\nM190 S{ params.BED }\nM117 Heating nozzle\nM109 S{target_extruder}\nstatus_ready\nG1 Z15.0 F600\nG1 X125 Y125 F3000\nG92 E0\nG1 F9000\nstatus_printing\nM117 Printing...', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\nstatus_busy\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\n\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y} F3600\nM117 Finished!\nstatus_off', 'description': 'G-Code macro'}, 'gcode_macro m600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state', 'description': 'G-Code macro'}, 'force_move': {'enable_force_move': True}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexz', 'max_z_velocity': 5.0, 'max_z_accel': 100.0}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-04-10 23:30:52,854 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-04-10 23:30:52,857 [printer.py:reinit()] - Klipper version: v0.12.0-132-ge37b007f-dirty
2024-04-10 23:30:52,857 [printer.py:reinit()] - # Extruders: 1
2024-04-10 23:30:52,857 [printer.py:reinit()] - # Temperature devices: 2
2024-04-10 23:30:52,857 [printer.py:reinit()] - # Fans: 2
2024-04-10 23:30:52,858 [printer.py:reinit()] - # Output pins: 0
2024-04-10 23:30:52,858 [printer.py:reinit()] - # Leds: 20
2024-04-10 23:30:52,858 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-04-10 23:30:52,878 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-04-10 23:30:52,881 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor mcu&fan&heater_fan extruder_fan&filament_switch_sensor extruder&neopixel sb_leds
2024-04-10 23:30:53,138 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-04-10 23:30:53,139 [screen.py:init_klipper()] - Printer initialized
2024-04-10 23:30:53,139 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-04-10 23:30:53,139 [printer.py:change_state()] - Adding callback for state: startup
2024-04-10 23:31:09,956 [printer.py:change_state()] - Changing state from 'startup' to 'disconnected'
2024-04-10 23:31:09,957 [printer.py:change_state()] - Adding callback for state: disconnected
2024-04-10 23:31:09,959 [screen.py:state_disconnected()] - ### Going to disconnected
2024-04-10 23:31:09,960 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-04-10 23:31:09,963 [screen.py:show_panel()] - Reinitializing panel
2024-04-10 23:31:10,085 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-04-10 23:31:13,743 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-10 23:31:13,755 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-04-10 23:31:13,765 [printer.py:configure_cameras()] - Cameras: []
2024-04-10 23:31:13,766 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'octoprint_compat', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-04-10 23:31:13,766 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-04-10 23:31:13,777 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-04-10 23:31:13,801 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set allow_park = client.park_at_cancel | default(false) | lower == \'true\' %}\n{% set retract = client.cancel_retract | default(5.0) | abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x | default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y | default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x | length > 0 or park_y | length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro | default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set idle_timeout = client.idle_timeout | default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE | default(1) | int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro | default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move | default(velocity) %}\n{% set runout_resume = True if client.runout_sensor | default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state | upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro | default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY | default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}"}, 'neopixel sb_leds': {'pin': 'EBBCan:gpio16', 'chain_count': '3', 'color_order': 'GRB', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0'}, 'led_effect sb_logo_busy': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (1,0,0)'}, 'led_effect sb_logo_cleaning': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.02, 0.5)'}, 'led_effect sb_logo_calibrating_z': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 0.35)'}, 'led_effect sb_logo_heating': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nbreathing  3 1 top (1, 0.18, 0)'}, 'led_effect sb_logo_cooling': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nbreathing  3 1 top (0, 0, 1)'}, 'led_effect sb_logo_homing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.6, 0.2)'}, 'led_effect sb_logo_leveling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.5, 0.1, 0.4)'}, 'led_effect sb_logo_meshing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.2, 1.0, 0.0)'}, 'led_effect sb_logo_printing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.3, 0.3, 0.0),(0.3, 0.1, 0.0)'}, 'led_effect sb_logo_standby': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.01, 0.01, 0.01)'}, 'led_effect sb_logo_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 1.0, 0.0)'}, 'led_effect sb_nozzle_heating': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (1.0, 0.18, 0.0, 0.0)'}, 'led_effect sb_nozzle_cooling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 1.0, 0.1)'}, 'led_effect sb_nozzle_standby': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.6, 0.0, 0.0, 0.0)'}, 'led_effect sb_nozzle_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.6, 1.0, 0.0, 0.1)'}, 'led_effect sb_critical_error': {'leds': '\nneopixel:sb_leds', 'layers': '\nstrobe         1  1.5   add        (1.0,  1.0, 1.0)\nbreathing      2  0     difference (0.95, 0.0, 0.0)\nstatic         1  0     top        (1.0,  0.0, 0.0)', 'autostart': 'false', 'frame_rate': '24', 'run_on_error': 'true'}, 'led_effect rainbow': {'leds': '\nneopixel:sb_leds', 'autostart': 'true', 'frame_rate': '24', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.0, 0.3, 0.0),(0.0, 0.0, 0.3)'}, 'led_effect set_nozzle_leds': {'leds': '\nneopixel:sb_leds (2,3)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nstatic         0  0     top        (0.5,  0.5, 0.5)'}, 'led_effect set_logo_leds': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nstatic         0  0     top        (1.0,  1.0, 1.0)'}, 'gcode_macro set_logo_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds STOP=1'}, 'gcode_macro set_logo_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1'}, 'gcode_macro status_off': {'gcode': '\nSTOP_LED_EFFECTS'}, 'gcode_macro status_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=rainbow'}, 'gcode_macro status_part_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready'}, 'gcode_macro status_busy': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_busy\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_heating\nSET_LED_EFFECT EFFECT=sb_nozzle_heating'}, 'gcode_macro status_cooling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cooling\nSET_LED_EFFECT EFFECT=sb_nozzle_cooling'}, 'gcode_macro status_leveling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_leveling\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_homing\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cleaning\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_meshing\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_calibrating_z\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_printing\nset_nozzle_leds_on'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_sam4e8e_00313753364B37373032303038303139-if00'}, 'mcu EBBCan': {'canbus_uuid': '8250861450f7'}, 'adxl345': {'cs_pin': 'EBBCan:gpio1', 'spi_software_sclk_pin': 'EBBCan:gpio2', 'spi_software_mosi_pin': 'EBBCan:gpio0', 'spi_software_miso_pin': 'EBBCan:gpio3', 'axes_map': 'z,-y,x'}, 'resonance_tester': {'probe_points': '100, 100, 20', 'accel_chip': 'adxl345'}, 'input_shaper': {'shaper_freq_x': '45', 'shaper_type': '3hump_ei'}, 'stepper_x': {'step_pin': 'PD6', 'dir_pin': '!PD11', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'EBBCan:gpio24', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '40'}, 'tmc2660 stepper_x': {'cs_pin': 'PD14', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'stepper_y': {'step_pin': 'PD7', 'dir_pin': '!PD12', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'PA2', 'position_endstop': '0', 'position_max': '225', 'position_min': '-4', 'homing_speed': '35', 'homing_retract_dist': '0'}, 'tmc2660 stepper_y': {'cs_pin': 'PC9', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'stepper_z': {'step_pin': 'PD8', 'dir_pin': '!PD13', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '230', 'position_min': '-2.5', 'homing_speed': '35.0'}, 'tmc2660 stepper_z': {'cs_pin': 'PC10', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'adc_temperature my_thermistor': {'temperature1': '0', 'resistance1': '1000', 'temperature2': '80', 'resistance2': '1309'}, 'extruder': {'step_pin': '!EBBCan:gpio18', 'dir_pin': 'EBBCan:gpio19', 'enable_pin': '!EBBCan:gpio17', 'microsteps': '32', 'rotation_distance': '21.63024711', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'pressure_advance': '0.065', 'pressure_advance_smooth_time': '0.02', 'gear_ratio': '50:10', 'heater_pin': 'EBBCan:gpio7', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'EBBCan:gpio27', 'control': 'pid', 'pid_kp': '21.527', 'pid_ki': '1.063', 'pid_kd': '108.982', 'min_temp': '0', 'max_temp': '250'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan:gpio20', 'run_current': '0.5', 'stealthchop_threshold': '999999'}, 'filament_switch_sensor extruder': {'pause_on_runout': 'True', 'switch_pin': 'EBBCan:gpio21'}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu'}, 'thermistor chamber_temp': {'temperature1': '25', 'resistance1': '10000', 'beta': '3950'}, 'heater_bed': {'heater_pin': '!PA19', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PC13', 'control': 'watermark', 'min_temp': '0', 'max_temp': '120'}, 'heater_fan extruder_fan': {'pin': 'EBBCan:gpio13', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'EBBCan:gpio14', 'cycle_time': '.08', 'kick_start_time': '.25'}, 'probe': {'pin': '^EBBCan:gpio22', 'x_offset': '0', 'y_offset': '0', 'samples': '3', 'samples_result': 'median', 'sample_retract_dist': '3', 'samples_tolerance': '0.015', 'samples_tolerance_retries': '3', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'z_offset': '-1.350'}, 'homing_override': {'axes': 'z', 'set_position_z': '0', 'gcode': '\nstatus_homing\nG90\nG0 Z5 F500\nG28 X0 Y0\nG0 X150 Y100 F9000\nG28 Z0\nG0 Z5 F500\nstatus_ready'}, 'bed_mesh': {'speed': '150', 'horizontal_move_z': '5', 'mesh_min': '25,35.0', 'mesh_max': '225.0,220', 'probe_count': '6,6', 'algorithm': 'bicubic', 'fade_start': '1', 'fade_end': '10', 'fade_target': '0'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\nSTATUS_HEATING\nM109 S150\nSTATUS_HOMING\nM117 Homing...\nG28 Y0 X0 Z0\nSTATUS_MESHING\nBED_MESH_CALIBRATE ADAPTIVE=1\n\n\n\n\n\n\n\n\n\n\n\nSTATUS_HEATING\nM107\nM117 Heating bed\nM190 S{ params.BED }\nM117 Heating nozzle\nM109 S{target_extruder}\nstatus_ready\nG1 Z15.0 F600\nG1 X125 Y125 F3000\nG92 E0\nG1 F9000\nstatus_printing\nM117 Printing...'}, 'gcode_macro PRINT_END': {'gcode': '\nstatus_busy\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\n\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y} F3600\nM117 Finished!\nstatus_off'}, 'gcode_macro M600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state'}, 'printer': {'kinematics': 'corexz', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '5', 'max_z_accel': '100'}, 'force_move': {'enable_force_move': 'true'}, 'exclude_object': {}, 'bed_mesh default': {'version': '1', 'points': '\n-0.100000, -0.025000, 0.012500, 0.037500, 0.125000, 0.212500\n-0.187500, -0.100000, -0.025000, 0.025000, 0.100000, 0.212500\n-0.262500, -0.162500, -0.075000, -0.012500, 0.075000, 0.187500\n-0.262500, -0.162500, -0.087500, -0.000000, 0.100000, 0.237500\n-0.200000, -0.100000, -0.012500, 0.062500, 0.200000, 0.350000\n-0.225000, -0.075000, -0.000000, 0.087500, 0.225000, 0.387500', 'x_count': '6', 'y_count': '6', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'bicubic', 'tension': '0.2', 'min_x': '25.0', 'max_x': '225.0', 'min_y': '35.0', 'max_y': '220.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_sam4e8e_00313753364B37373032303038303139-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu ebbcan': {'canbus_uuid': '8250861450f7', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set allow_park = client.park_at_cancel | default(false) | lower == \'true\' %}\n{% set retract = client.cancel_retract | default(5.0) | abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x | default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y | default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x | length > 0 or park_y | length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro | default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set idle_timeout = client.idle_timeout | default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE | default(1) | int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro | default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move | default(velocity) %}\n{% set runout_resume = True if client.runout_sensor | default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state | upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro | default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY | default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'neopixel sb_leds': {'pin': 'EBBCan:gpio16', 'chain_count': 3, 'color_order': ['GRB'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'led_effect sb_logo_busy': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1,0,0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_cleaning': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.02, 0.5)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_calibrating_z': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 0.35)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1, 0.18, 0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0, 0, 1)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_homing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.6, 0.2)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_leveling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.5, 0.1, 0.4)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_meshing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.2, 1.0, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_printing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.3, 0.3, 0.0),(0.3, 0.1, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_standby': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.01, 0.01, 0.01)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 1.0, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_nozzle_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1.0, 0.18, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 1.0, 0.1)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_standby': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.6, 0.0, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.6, 1.0, 0.0, 0.1)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_critical_error': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': True, 'endstops': '', 'layers': '\nstrobe         1  1.5   add        (1.0,  1.0, 1.0)\nbreathing      2  0     difference (0.95, 0.0, 0.0)\nstatic         1  0     top        (1.0,  0.0, 0.0)', 'leds': '\nneopixel:sb_leds'}, 'led_effect rainbow': {'frame_rate': 24.0, 'autostart': True, 'run_on_error': False, 'endstops': '', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.0, 0.3, 0.0),(0.0, 0.0, 0.3)', 'leds': '\nneopixel:sb_leds'}, 'led_effect set_nozzle_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic         0  0     top        (0.5,  0.5, 0.5)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect set_logo_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic         0  0     top        (1.0,  1.0, 1.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'gcode_macro set_logo_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nSTOP_LED_EFFECTS', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=rainbow', 'description': 'G-Code macro'}, 'gcode_macro status_part_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_busy\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_heating\nSET_LED_EFFECT EFFECT=sb_nozzle_heating', 'description': 'G-Code macro'}, 'gcode_macro status_cooling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cooling\nSET_LED_EFFECT EFFECT=sb_nozzle_cooling', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_leveling\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_homing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cleaning\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_meshing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_calibrating_z\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_printing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'adxl345': {'axes_map': ['z', '-y', 'x'], 'rate': 3200, 'cs_pin': 'EBBCan:gpio1', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'EBBCan:gpio2', 'spi_software_miso_pin': 'EBBCan:gpio3', 'spi_software_mosi_pin': 'EBBCan:gpio0'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[100.0, 100.0, 20.0]], 'accel_chip': 'adxl345'}, 'input_shaper': {'shaper_type': '3hump_ei', 'shaper_type_x': '3hump_ei', 'damping_ratio_x': 0.1, 'shaper_freq_x': 45.0, 'shaper_type_y': '3hump_ei', 'damping_ratio_y': 0.1, 'shaper_freq_y': 0.0}, 'tmc2660 stepper_x': {'cs_pin': 'PD14', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PD6', 'dir_pin': '!PD11', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'EBBCan:gpio24', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2660 stepper_y': {'cs_pin': 'PC9', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PD7', 'dir_pin': '!PD12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'PA2', 'position_endstop': 0.0, 'position_min': -4.0, 'position_max': 225.0, 'homing_speed': 35.0, 'second_homing_speed': 17.5, 'homing_retract_speed': 35.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2660 stepper_z': {'cs_pin': 'PC10', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PD8', 'dir_pin': '!PD13', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -2.5, 'position_max': 230.0, 'homing_speed': 35.0, 'second_homing_speed': 17.5, 'homing_retract_speed': 35.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'adc_temperature my_thermistor': {'resistance1': 1000.0, 'temperature1': 0.0, 'temperature2': 80.0, 'resistance2': 1309.0}, 'tmc2209 extruder': {'uart_pin': 'EBBCan:gpio20', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan:gpio27', 'min_temp': 0.0, 'max_temp': 250.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 21.527, 'pid_ki': 1.063, 'pid_kd': 108.982, 'heater_pin': 'EBBCan:gpio7', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': '!EBBCan:gpio18', 'pressure_advance': 0.065, 'pressure_advance_smooth_time': 0.02, 'dir_pin': 'EBBCan:gpio19', 'rotation_distance': 21.63024711, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!EBBCan:gpio17'}, 'filament_switch_sensor extruder': {'switch_pin': 'EBBCan:gpio21', 'pause_on_runout': True, 'runout_gcode': '', 'pause_delay': 0.5, 'event_delay': 3.0}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'thermistor chamber_temp': {'temperature1': 25.0, 'resistance1': 10000.0, 'beta': 3950.0}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PC13', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'watermark', 'max_delta': 2.0, 'heater_pin': '!PA19', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan extruder_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'EBBCan:gpio13', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.25, 'off_below': 0.0, 'cycle_time': 0.08, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'EBBCan:gpio14'}, 'probe': {'z_offset': -1.35, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': '^EBBCan:gpio22', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 3, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.015, 'samples_tolerance_retries': 3}, 'homing_override': {'set_position_z': 0.0, 'axes': 'z', 'gcode': '\nstatus_homing\nG90\nG0 Z5 F500\nG28 X0 Y0\nG0 X150 Y100 F9000\nG28 Z0\nG0 Z5 F500\nstatus_ready'}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [6, 6], 'mesh_min': [25.0, 35.0], 'mesh_max': [225.0, 220.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 150.0, 'fade_start': 1.0, 'fade_end': 10.0, 'fade_target': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[-0.1, -0.025, 0.0125, 0.0375, 0.125, 0.2125], [-0.1875, -0.1, -0.025, 0.025, 0.1, 0.2125], [-0.2625, -0.1625, -0.075, -0.0125, 0.075, 0.1875], [-0.2625, -0.1625, -0.0875, -0.0, 0.1, 0.2375], [-0.2, -0.1, -0.0125, 0.0625, 0.2, 0.35], [-0.225, -0.075, -0.0, 0.0875, 0.225, 0.3875]], 'min_x': 25.0, 'max_x': 225.0, 'min_y': 35.0, 'max_y': 220.0, 'x_count': 6, 'y_count': 6, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'bicubic', 'tension': 0.2}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\nSTATUS_HEATING\nM109 S150\nSTATUS_HOMING\nM117 Homing...\nG28 Y0 X0 Z0\nSTATUS_MESHING\nBED_MESH_CALIBRATE ADAPTIVE=1\n\n\n\n\n\n\n\n\n\n\n\nSTATUS_HEATING\nM107\nM117 Heating bed\nM190 S{ params.BED }\nM117 Heating nozzle\nM109 S{target_extruder}\nstatus_ready\nG1 Z15.0 F600\nG1 X125 Y125 F3000\nG92 E0\nG1 F9000\nstatus_printing\nM117 Printing...', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\nstatus_busy\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\n\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y} F3600\nM117 Finished!\nstatus_off', 'description': 'G-Code macro'}, 'gcode_macro m600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state', 'description': 'G-Code macro'}, 'force_move': {'enable_force_move': True}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexz', 'max_z_velocity': 5.0, 'max_z_accel': 100.0}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-04-10 23:31:13,805 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-04-10 23:31:13,807 [printer.py:reinit()] - Klipper version: v0.12.0-132-ge37b007f-dirty
2024-04-10 23:31:13,807 [printer.py:reinit()] - # Extruders: 1
2024-04-10 23:31:13,807 [printer.py:reinit()] - # Temperature devices: 2
2024-04-10 23:31:13,807 [printer.py:reinit()] - # Fans: 2
2024-04-10 23:31:13,807 [printer.py:reinit()] - # Output pins: 0
2024-04-10 23:31:13,807 [printer.py:reinit()] - # Leds: 20
2024-04-10 23:31:13,807 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-04-10 23:31:13,821 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-04-10 23:31:13,823 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor mcu&fan&heater_fan extruder_fan&filament_switch_sensor extruder&neopixel sb_leds
2024-04-10 23:31:14,099 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-04-10 23:31:14,099 [screen.py:init_klipper()] - Printer initialized
2024-04-10 23:31:14,099 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-04-10 23:31:14,099 [printer.py:change_state()] - Adding callback for state: startup
2024-04-10 23:32:14,784 [screen.py:_load_panel()] - Loading panel: shutdown
2024-04-10 23:32:15,012 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen > shutdown
2024-04-10 23:35:14,196 [functions.py:log_start()] - --------------------KlipperScreen Log Start--------------------
2024-04-10 23:35:14,197 [functions.py:log_start()] - KlipperScreen Version: v0.3.9-50-gdaed9a0
2024-04-10 23:35:14,197 [functions.py:log_start()] - Python version: 3.11
2024-04-10 23:40:39,762 [config.py:get_config_file_location()] - Passed config (-c): .
2024-04-10 23:40:39,762 [config.py:__init__()] - Config path location: /home/pi/printer_data/config/KlipperScreen.conf
2024-04-10 23:40:39,861 [config.py:log_config()] -  ===== Config File =====

=======================
2024-04-10 23:40:39,868 [config.py:__init__()] - ====== Saved Def ======

[main]
use_dpms = False
print_sort_dir = date_desc

=======================
2024-04-10 23:40:39,870 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2024-04-10 23:40:40,725 [config.py:create_translations()] - Selected lang: None OS lang: en_GB
2024-04-10 23:40:40,726 [config.py:install_language()] - Using lang en
2024-04-10 23:40:40,782 [screen.py:__init__()] - Monitors: 1 using number: 0
2024-04-10 23:40:40,785 [screen.py:__init__()] - Wayland: False Display name: :100
2024-04-10 23:40:40,790 [screen.py:__init__()] - Screen resolution: 984x540
2024-04-10 23:40:40,793 [KlippyGtk.py:__init__()] - Font size: 18.6 (medium)
2024-04-10 23:40:52,752 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2024-04-10 23:40:52,752 [screen.py:set_screenblanking_timeout()] - Not using DPMS
2024-04-10 23:40:52,775 [screen.py:initial_connection()] - Default printer: None
2024-04-10 23:40:52,894 [screen.py:connect_printer()] - Connecting to printer: Printer
2024-04-10 23:40:52,895 [screen.py:_load_panel()] - Loading panel: splash_screen
2024-04-10 23:40:53,068 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-04-10 23:40:53,112 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-04-10 23:40:53,112 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-10 23:40:53,145 [KlippyRest.py:_do_request()] - host=127.0.0.1, port=7125>>Max retries exceeded with url>>Failed to establish a new connection>>[Errno 111] Connection refused
2024-04-10 23:41:02,972 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-04-10 23:41:02,973 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-10 23:41:02,995 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/access/oneshot_token
2024-04-10 23:41:03,018 [KlippyWebsocket.py:connect()] - Starting websocket thread
2024-04-10 23:41:03,030 [_logging.py:info()] - Websocket connected
2024-04-10 23:41:03,030 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2024-04-10 23:41:03,031 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-10 23:41:03,048 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-04-10 23:41:03,063 [printer.py:configure_cameras()] - Cameras: []
2024-04-10 23:41:03,064 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'ready', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'octoprint_compat', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-04-10 23:41:03,064 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-04-10 23:41:03,081 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-04-10 23:41:03,216 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set allow_park = client.park_at_cancel | default(false) | lower == \'true\' %}\n{% set retract = client.cancel_retract | default(5.0) | abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x | default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y | default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x | length > 0 or park_y | length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro | default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set idle_timeout = client.idle_timeout | default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE | default(1) | int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro | default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move | default(velocity) %}\n{% set runout_resume = True if client.runout_sensor | default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state | upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro | default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY | default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}"}, 'neopixel sb_leds': {'pin': 'EBBCan:gpio16', 'chain_count': '3', 'color_order': 'GRB', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0'}, 'led_effect sb_logo_busy': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (1,0,0)'}, 'led_effect sb_logo_cleaning': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.02, 0.5)'}, 'led_effect sb_logo_calibrating_z': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 0.35)'}, 'led_effect sb_logo_heating': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nbreathing  3 1 top (1, 0.18, 0)'}, 'led_effect sb_logo_cooling': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nbreathing  3 1 top (0, 0, 1)'}, 'led_effect sb_logo_homing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.6, 0.2)'}, 'led_effect sb_logo_leveling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.5, 0.1, 0.4)'}, 'led_effect sb_logo_meshing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.2, 1.0, 0.0)'}, 'led_effect sb_logo_printing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.3, 0.3, 0.0),(0.3, 0.1, 0.0)'}, 'led_effect sb_logo_standby': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.01, 0.01, 0.01)'}, 'led_effect sb_logo_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 1.0, 0.0)'}, 'led_effect sb_nozzle_heating': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (1.0, 0.18, 0.0, 0.0)'}, 'led_effect sb_nozzle_cooling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 1.0, 0.1)'}, 'led_effect sb_nozzle_standby': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.6, 0.0, 0.0, 0.0)'}, 'led_effect sb_nozzle_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.6, 1.0, 0.0, 0.1)'}, 'led_effect sb_critical_error': {'leds': '\nneopixel:sb_leds', 'layers': '\nstrobe         1  1.5   add        (1.0,  1.0, 1.0)\nbreathing      2  0     difference (0.95, 0.0, 0.0)\nstatic         1  0     top        (1.0,  0.0, 0.0)', 'autostart': 'false', 'frame_rate': '24', 'run_on_error': 'true'}, 'led_effect rainbow': {'leds': '\nneopixel:sb_leds', 'autostart': 'true', 'frame_rate': '24', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.0, 0.3, 0.0),(0.0, 0.0, 0.3)'}, 'led_effect set_nozzle_leds': {'leds': '\nneopixel:sb_leds (2,3)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nstatic         0  0     top        (0.5,  0.5, 0.5)'}, 'led_effect set_logo_leds': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nstatic         0  0     top        (1.0,  1.0, 1.0)'}, 'gcode_macro set_logo_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds STOP=1'}, 'gcode_macro set_logo_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1'}, 'gcode_macro status_off': {'gcode': '\nSTOP_LED_EFFECTS'}, 'gcode_macro status_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=rainbow'}, 'gcode_macro status_part_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready'}, 'gcode_macro status_busy': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_busy\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_heating\nSET_LED_EFFECT EFFECT=sb_nozzle_heating'}, 'gcode_macro status_cooling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cooling\nSET_LED_EFFECT EFFECT=sb_nozzle_cooling'}, 'gcode_macro status_leveling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_leveling\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_homing\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cleaning\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_meshing\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_calibrating_z\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_printing\nset_nozzle_leds_on'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_sam4e8e_00313753364B37373032303038303139-if00'}, 'mcu EBBCan': {'canbus_uuid': '8250861450f7'}, 'adxl345': {'cs_pin': 'EBBCan:gpio1', 'spi_software_sclk_pin': 'EBBCan:gpio2', 'spi_software_mosi_pin': 'EBBCan:gpio0', 'spi_software_miso_pin': 'EBBCan:gpio3', 'axes_map': 'z,-y,x'}, 'resonance_tester': {'probe_points': '100, 100, 20', 'accel_chip': 'adxl345'}, 'input_shaper': {'shaper_freq_x': '45', 'shaper_type': '3hump_ei'}, 'stepper_x': {'step_pin': 'PD6', 'dir_pin': '!PD11', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'EBBCan:gpio24', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '40'}, 'tmc2660 stepper_x': {'cs_pin': 'PD14', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'stepper_y': {'step_pin': 'PD7', 'dir_pin': '!PD12', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'PA2', 'position_endstop': '0', 'position_max': '225', 'position_min': '-4', 'homing_speed': '35', 'homing_retract_dist': '0'}, 'tmc2660 stepper_y': {'cs_pin': 'PC9', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'stepper_z': {'step_pin': 'PD8', 'dir_pin': '!PD13', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '230', 'position_min': '-2.5', 'homing_speed': '35.0'}, 'tmc2660 stepper_z': {'cs_pin': 'PC10', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'adc_temperature my_thermistor': {'temperature1': '0', 'resistance1': '1000', 'temperature2': '80', 'resistance2': '1309'}, 'extruder': {'step_pin': '!EBBCan:gpio18', 'dir_pin': 'EBBCan:gpio19', 'enable_pin': '!EBBCan:gpio17', 'microsteps': '32', 'rotation_distance': '21.63024711', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'pressure_advance': '0.065', 'pressure_advance_smooth_time': '0.02', 'gear_ratio': '50:10', 'heater_pin': 'EBBCan:gpio7', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'EBBCan:gpio27', 'control': 'pid', 'pid_kp': '21.527', 'pid_ki': '1.063', 'pid_kd': '108.982', 'min_temp': '0', 'max_temp': '250'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan:gpio20', 'run_current': '0.5', 'stealthchop_threshold': '999999'}, 'filament_switch_sensor extruder': {'pause_on_runout': 'True', 'switch_pin': 'EBBCan:gpio21'}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu'}, 'thermistor chamber_temp': {'temperature1': '25', 'resistance1': '10000', 'beta': '3950'}, 'heater_bed': {'heater_pin': '!PA19', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PC13', 'control': 'watermark', 'min_temp': '0', 'max_temp': '120'}, 'heater_fan extruder_fan': {'pin': 'EBBCan:gpio13', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'EBBCan:gpio14', 'cycle_time': '.08', 'kick_start_time': '.25'}, 'probe': {'pin': '^EBBCan:gpio22', 'x_offset': '0', 'y_offset': '0', 'samples': '3', 'samples_result': 'median', 'sample_retract_dist': '3', 'samples_tolerance': '0.015', 'samples_tolerance_retries': '3', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'z_offset': '-1.350'}, 'homing_override': {'axes': 'z', 'set_position_z': '0', 'gcode': '\nstatus_homing\nG90\nG0 Z5 F500\nG28 X0 Y0\nG0 X150 Y100 F9000\nG28 Z0\nG0 Z5 F500\nstatus_ready'}, 'bed_mesh': {'speed': '150', 'horizontal_move_z': '5', 'mesh_min': '25,35.0', 'mesh_max': '225.0,220', 'probe_count': '6,6', 'algorithm': 'bicubic', 'fade_start': '1', 'fade_end': '10', 'fade_target': '0'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\nSTATUS_HEATING\nM109 S150\nSTATUS_HOMING\nM117 Homing...\nG28 Y0 X0 Z0\nSTATUS_MESHING\nBED_MESH_CALIBRATE ADAPTIVE=1\n\n\n\n\n\n\n\n\n\n\n\nSTATUS_HEATING\nM107\nM117 Heating bed\nM190 S{ params.BED }\nM117 Heating nozzle\nM109 S{target_extruder}\nstatus_ready\nG1 Z15.0 F600\nG1 X125 Y125 F3000\nG92 E0\nG1 F9000\nstatus_printing\nM117 Printing...'}, 'gcode_macro PRINT_END': {'gcode': '\nstatus_busy\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\n\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y} F3600\nM117 Finished!\nstatus_off'}, 'gcode_macro M600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state'}, 'printer': {'kinematics': 'corexz', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '5', 'max_z_accel': '100'}, 'force_move': {'enable_force_move': 'true'}, 'exclude_object': {}, 'bed_mesh default': {'version': '1', 'points': '\n-0.100000, -0.025000, 0.012500, 0.037500, 0.125000, 0.212500\n-0.187500, -0.100000, -0.025000, 0.025000, 0.100000, 0.212500\n-0.262500, -0.162500, -0.075000, -0.012500, 0.075000, 0.187500\n-0.262500, -0.162500, -0.087500, -0.000000, 0.100000, 0.237500\n-0.200000, -0.100000, -0.012500, 0.062500, 0.200000, 0.350000\n-0.225000, -0.075000, -0.000000, 0.087500, 0.225000, 0.387500', 'x_count': '6', 'y_count': '6', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'bicubic', 'tension': '0.2', 'min_x': '25.0', 'max_x': '225.0', 'min_y': '35.0', 'max_y': '220.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_sam4e8e_00313753364B37373032303038303139-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu ebbcan': {'canbus_uuid': '8250861450f7', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set allow_park = client.park_at_cancel | default(false) | lower == \'true\' %}\n{% set retract = client.cancel_retract | default(5.0) | abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x | default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y | default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x | length > 0 or park_y | length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro | default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set idle_timeout = client.idle_timeout | default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE | default(1) | int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro | default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move | default(velocity) %}\n{% set runout_resume = True if client.runout_sensor | default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state | upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro | default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY | default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'neopixel sb_leds': {'pin': 'EBBCan:gpio16', 'chain_count': 3, 'color_order': ['GRB'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'led_effect sb_logo_busy': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1,0,0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_cleaning': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.02, 0.5)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_calibrating_z': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 0.35)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1, 0.18, 0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0, 0, 1)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_homing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.6, 0.2)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_leveling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.5, 0.1, 0.4)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_meshing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.2, 1.0, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_printing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.3, 0.3, 0.0),(0.3, 0.1, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_standby': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.01, 0.01, 0.01)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 1.0, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_nozzle_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1.0, 0.18, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 1.0, 0.1)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_standby': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.6, 0.0, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.6, 1.0, 0.0, 0.1)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_critical_error': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': True, 'endstops': '', 'layers': '\nstrobe         1  1.5   add        (1.0,  1.0, 1.0)\nbreathing      2  0     difference (0.95, 0.0, 0.0)\nstatic         1  0     top        (1.0,  0.0, 0.0)', 'leds': '\nneopixel:sb_leds'}, 'led_effect rainbow': {'frame_rate': 24.0, 'autostart': True, 'run_on_error': False, 'endstops': '', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.0, 0.3, 0.0),(0.0, 0.0, 0.3)', 'leds': '\nneopixel:sb_leds'}, 'led_effect set_nozzle_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic         0  0     top        (0.5,  0.5, 0.5)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect set_logo_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic         0  0     top        (1.0,  1.0, 1.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'gcode_macro set_logo_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nSTOP_LED_EFFECTS', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=rainbow', 'description': 'G-Code macro'}, 'gcode_macro status_part_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_busy\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_heating\nSET_LED_EFFECT EFFECT=sb_nozzle_heating', 'description': 'G-Code macro'}, 'gcode_macro status_cooling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cooling\nSET_LED_EFFECT EFFECT=sb_nozzle_cooling', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_leveling\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_homing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cleaning\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_meshing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_calibrating_z\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_printing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'adxl345': {'axes_map': ['z', '-y', 'x'], 'rate': 3200, 'cs_pin': 'EBBCan:gpio1', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'EBBCan:gpio2', 'spi_software_miso_pin': 'EBBCan:gpio3', 'spi_software_mosi_pin': 'EBBCan:gpio0'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[100.0, 100.0, 20.0]], 'accel_chip': 'adxl345'}, 'input_shaper': {'shaper_type': '3hump_ei', 'shaper_type_x': '3hump_ei', 'damping_ratio_x': 0.1, 'shaper_freq_x': 45.0, 'shaper_type_y': '3hump_ei', 'damping_ratio_y': 0.1, 'shaper_freq_y': 0.0}, 'tmc2660 stepper_x': {'cs_pin': 'PD14', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PD6', 'dir_pin': '!PD11', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'EBBCan:gpio24', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2660 stepper_y': {'cs_pin': 'PC9', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PD7', 'dir_pin': '!PD12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'PA2', 'position_endstop': 0.0, 'position_min': -4.0, 'position_max': 225.0, 'homing_speed': 35.0, 'second_homing_speed': 17.5, 'homing_retract_speed': 35.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2660 stepper_z': {'cs_pin': 'PC10', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PD8', 'dir_pin': '!PD13', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -2.5, 'position_max': 230.0, 'homing_speed': 35.0, 'second_homing_speed': 17.5, 'homing_retract_speed': 35.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'adc_temperature my_thermistor': {'resistance1': 1000.0, 'temperature1': 0.0, 'temperature2': 80.0, 'resistance2': 1309.0}, 'tmc2209 extruder': {'uart_pin': 'EBBCan:gpio20', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan:gpio27', 'min_temp': 0.0, 'max_temp': 250.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 21.527, 'pid_ki': 1.063, 'pid_kd': 108.982, 'heater_pin': 'EBBCan:gpio7', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': '!EBBCan:gpio18', 'pressure_advance': 0.065, 'pressure_advance_smooth_time': 0.02, 'dir_pin': 'EBBCan:gpio19', 'rotation_distance': 21.63024711, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!EBBCan:gpio17'}, 'filament_switch_sensor extruder': {'switch_pin': 'EBBCan:gpio21', 'pause_on_runout': True, 'runout_gcode': '', 'pause_delay': 0.5, 'event_delay': 3.0}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'thermistor chamber_temp': {'temperature1': 25.0, 'resistance1': 10000.0, 'beta': 3950.0}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PC13', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'watermark', 'max_delta': 2.0, 'heater_pin': '!PA19', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan extruder_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'EBBCan:gpio13', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.25, 'off_below': 0.0, 'cycle_time': 0.08, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'EBBCan:gpio14'}, 'probe': {'z_offset': -1.35, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': '^EBBCan:gpio22', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 3, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.015, 'samples_tolerance_retries': 3}, 'homing_override': {'set_position_z': 0.0, 'axes': 'z', 'gcode': '\nstatus_homing\nG90\nG0 Z5 F500\nG28 X0 Y0\nG0 X150 Y100 F9000\nG28 Z0\nG0 Z5 F500\nstatus_ready'}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [6, 6], 'mesh_min': [25.0, 35.0], 'mesh_max': [225.0, 220.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 150.0, 'fade_start': 1.0, 'fade_end': 10.0, 'fade_target': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[-0.1, -0.025, 0.0125, 0.0375, 0.125, 0.2125], [-0.1875, -0.1, -0.025, 0.025, 0.1, 0.2125], [-0.2625, -0.1625, -0.075, -0.0125, 0.075, 0.1875], [-0.2625, -0.1625, -0.0875, -0.0, 0.1, 0.2375], [-0.2, -0.1, -0.0125, 0.0625, 0.2, 0.35], [-0.225, -0.075, -0.0, 0.0875, 0.225, 0.3875]], 'min_x': 25.0, 'max_x': 225.0, 'min_y': 35.0, 'max_y': 220.0, 'x_count': 6, 'y_count': 6, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'bicubic', 'tension': 0.2}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\nSTATUS_HEATING\nM109 S150\nSTATUS_HOMING\nM117 Homing...\nG28 Y0 X0 Z0\nSTATUS_MESHING\nBED_MESH_CALIBRATE ADAPTIVE=1\n\n\n\n\n\n\n\n\n\n\n\nSTATUS_HEATING\nM107\nM117 Heating bed\nM190 S{ params.BED }\nM117 Heating nozzle\nM109 S{target_extruder}\nstatus_ready\nG1 Z15.0 F600\nG1 X125 Y125 F3000\nG92 E0\nG1 F9000\nstatus_printing\nM117 Printing...', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\nstatus_busy\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\n\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y} F3600\nM117 Finished!\nstatus_off', 'description': 'G-Code macro'}, 'gcode_macro m600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state', 'description': 'G-Code macro'}, 'force_move': {'enable_force_move': True}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexz', 'max_z_velocity': 5.0, 'max_z_accel': 100.0}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-04-10 23:41:03,221 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-04-10 23:41:03,223 [printer.py:reinit()] - Klipper version: v0.12.0-132-ge37b007f-dirty
2024-04-10 23:41:03,223 [printer.py:reinit()] - # Extruders: 1
2024-04-10 23:41:03,223 [printer.py:reinit()] - # Temperature devices: 2
2024-04-10 23:41:03,224 [printer.py:reinit()] - # Fans: 2
2024-04-10 23:41:03,224 [printer.py:reinit()] - # Output pins: 0
2024-04-10 23:41:03,224 [printer.py:reinit()] - # Leds: 20
2024-04-10 23:41:03,224 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-04-10 23:41:03,251 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-04-10 23:41:03,256 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor mcu&fan&heater_fan extruder_fan&filament_switch_sensor extruder&neopixel sb_leds
2024-04-10 23:41:03,547 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-04-10 23:41:03,548 [screen.py:init_klipper()] - Printer initialized
2024-04-10 23:41:03,548 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2024-04-10 23:41:03,548 [printer.py:change_state()] - Adding callback for state: ready
2024-04-10 23:41:03,588 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-04-10 23:41:03,594 [screen.py:_load_panel()] - Loading panel: main_menu
2024-04-10 23:41:07,802 [main_menu.py:__init__()] - ### Making MainMenu
2024-04-10 23:41:07,817 [main_menu.py:add_device()] - Adding device: extruder
2024-04-10 23:41:07,919 [main_menu.py:add_device()] - Adding device: heater_bed
2024-04-10 23:41:08,760 [main_menu.py:add_device()] - Adding device: temperature_sensor mcu
2024-04-10 23:41:08,813 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-10 23:41:08,814 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-10 23:41:08,841 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor mcu', 'heater_bed', 'extruder']
2024-04-10 23:41:08,842 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-04-10 23:41:08,856 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-04-10 23:55:12,173 [screen.py:_load_panel()] - Loading panel: move
2024-04-10 23:55:12,591 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2024-04-10 23:55:14,350 [screen.py:_load_panel()] - Loading panel: menu
2024-04-10 23:55:14,780 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move > menu
2024-04-10 23:55:14,823 [menu.py:arrangeMenuItems()] - X > homing quad_gantry_level
2024-04-10 23:55:14,832 [menu.py:arrangeMenuItems()] - X > homing Z-Tilt
2024-04-10 23:55:17,502 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G28'}
2024-04-10 23:55:19,771 [screen.py:_menu_go_back()] - #### Menu go back
2024-04-10 23:55:19,884 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2024-04-10 23:55:27,773 [screen.py:_menu_go_back()] - #### Menu go back
2024-04-10 23:55:28,099 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-10 23:58:12,127 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2024-04-10 23:58:12,128 [printer.py:change_state()] - Adding callback for state: printing
2024-04-10 23:58:12,163 [screen.py:_load_panel()] - Loading panel: job_status
2024-04-10 23:58:13,094 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-04-10 23:58:13,118 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-04-10 23:58:13,175 [job_status.py:update_file_metadata()] - Update Metadata. File: tfic-angled-honeycomb_0.2mm_PLA_MK3S_5h2m.gcode Size: 15746614
2024-04-10 23:58:13,189 [job_status.py:show_file_thumbnail()] - tfic-angled-honeycomb_0.2mm_PLA_MK3S_5h2m.gcode
2024-04-11 00:02:12,490 [KlippyGtk.py:Dialog()] - Showing dialog tfic-angled-honeycomb_0.2mm_PLA_MK3S_5h2m.gcode (width=984, height=549)
2024-04-11 00:02:14,864 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2024-04-27 20:48:11,656 [functions.py:log_start()] - --------------------KlipperScreen Log Start--------------------
2024-04-27 20:48:11,657 [functions.py:log_start()] - KlipperScreen Version: v0.3.9-50-gdaed9a0
2024-04-27 20:48:11,657 [functions.py:log_start()] - Python version: 3.11
2024-04-27 20:48:11,917 [config.py:get_config_file_location()] - Passed config (-c): .
2024-04-27 20:48:11,918 [config.py:__init__()] - Config path location: /home/pi/printer_data/config/KlipperScreen.conf
2024-04-27 20:48:11,956 [config.py:log_config()] -  ===== Config File =====

=======================
2024-04-27 20:48:11,958 [config.py:__init__()] - ====== Saved Def ======

[main]
use_dpms = False
print_sort_dir = date_desc

=======================
2024-04-27 20:48:11,959 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2024-04-27 20:48:12,104 [config.py:create_translations()] - Selected lang: None OS lang: en_GB
2024-04-27 20:48:12,105 [config.py:install_language()] - Using lang en
2024-04-27 20:48:12,137 [screen.py:__init__()] - Monitors: 1 using number: 0
2024-04-27 20:48:12,140 [screen.py:__init__()] - Wayland: False Display name: :100
2024-04-27 20:48:12,142 [screen.py:__init__()] - Screen resolution: 984x540
2024-04-27 20:48:12,144 [KlippyGtk.py:__init__()] - Font size: 18.6 (medium)
2024-04-27 20:49:22,910 [functions.py:log_start()] - --------------------KlipperScreen Log Start--------------------
2024-04-27 20:49:22,911 [functions.py:log_start()] - KlipperScreen Version: v0.3.9-50-gdaed9a0
2024-04-27 20:49:22,911 [functions.py:log_start()] - Python version: 3.11
2024-04-27 20:49:22,929 [screen.py:__init__()] - Gtk couldn't be initialized. Use Gtk.init_check() if you want to handle this case.

Traceback (most recent call last):
  File "/home/pi/KlipperScreen/screen.py", line 104, in __init__
    super().__init__(title="KlipperScreen")
  File "/home/pi/.KlipperScreen-env/lib/python3.11/site-packages/gi/overrides/Gtk.py", line 508, in __init__
    raise RuntimeError(
RuntimeError: Gtk couldn't be initialized. Use Gtk.init_check() if you want to handle this case.
Traceback (most recent call last):
  File "/home/pi/KlipperScreen/screen.py", line 104, in __init__
    super().__init__(title="KlipperScreen")
  File "/home/pi/.KlipperScreen-env/lib/python3.11/site-packages/gi/overrides/Gtk.py", line 508, in __init__
    raise RuntimeError(
RuntimeError: Gtk couldn't be initialized. Use Gtk.init_check() if you want to handle this case.
2024-04-27 20:49:22,933 [screen.py:main()] - Failed to initialize window


Traceback (most recent call last):
  File "/home/pi/KlipperScreen/screen.py", line 104, in __init__
    super().__init__(title="KlipperScreen")
  File "/home/pi/.KlipperScreen-env/lib/python3.11/site-packages/gi/overrides/Gtk.py", line 508, in __init__
    raise RuntimeError(
RuntimeError: Gtk couldn't be initialized. Use Gtk.init_check() if you want to handle this case.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/home/pi/KlipperScreen/screen.py", line 1132, in main
    win = KlipperScreen(args)
          ^^^^^^^^^^^^^^^^^^^
  File "/home/pi/KlipperScreen/screen.py", line 107, in __init__
    raise RuntimeError from e
RuntimeError
Traceback (most recent call last):
  File "/home/pi/KlipperScreen/screen.py", line 104, in __init__
    super().__init__(title="KlipperScreen")
  File "/home/pi/.KlipperScreen-env/lib/python3.11/site-packages/gi/overrides/Gtk.py", line 508, in __init__
    raise RuntimeError(
RuntimeError: Gtk couldn't be initialized. Use Gtk.init_check() if you want to handle this case.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/home/pi/KlipperScreen/screen.py", line 1132, in main
    win = KlipperScreen(args)
          ^^^^^^^^^^^^^^^^^^^
  File "/home/pi/KlipperScreen/screen.py", line 107, in __init__
    raise RuntimeError from e
RuntimeError
2024-04-27 20:49:29,937 [functions.py:log_start()] - --------------------KlipperScreen Log Start--------------------
2024-04-27 20:49:29,937 [functions.py:log_start()] - KlipperScreen Version: v0.3.9-50-gdaed9a0
2024-04-27 20:49:29,938 [functions.py:log_start()] - Python version: 3.11
2024-04-27 20:49:30,076 [config.py:get_config_file_location()] - Passed config (-c): .
2024-04-27 20:49:30,077 [config.py:__init__()] - Config path location: /home/pi/printer_data/config/KlipperScreen.conf
2024-04-27 20:49:30,101 [config.py:log_config()] -  ===== Config File =====

=======================
2024-04-27 20:49:30,103 [config.py:__init__()] - ====== Saved Def ======

[main]
use_dpms = False
print_sort_dir = date_desc

=======================
2024-04-27 20:49:30,104 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2024-04-27 20:49:30,211 [config.py:create_translations()] - Selected lang: None OS lang: en_GB
2024-04-27 20:49:30,214 [config.py:install_language()] - Using lang en
2024-04-27 20:49:30,233 [screen.py:__init__()] - Monitors: 1 using number: 0
2024-04-27 20:49:30,234 [screen.py:__init__()] - Wayland: False Display name: :100
2024-04-27 20:49:30,237 [screen.py:__init__()] - Screen resolution: 984x540
2024-04-27 20:49:30,239 [KlippyGtk.py:__init__()] - Font size: 18.6 (medium)
2024-04-27 20:49:31,024 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2024-04-27 20:49:31,024 [screen.py:set_screenblanking_timeout()] - Not using DPMS
2024-04-27 20:49:31,033 [screen.py:initial_connection()] - Default printer: None
2024-04-27 20:49:31,099 [screen.py:connect_printer()] - Connecting to printer: Printer
2024-04-27 20:49:31,099 [screen.py:_load_panel()] - Loading panel: splash_screen
2024-04-27 20:49:31,195 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-04-27 20:49:31,215 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-04-27 20:49:31,216 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-27 20:49:31,243 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/access/oneshot_token
2024-04-27 20:49:31,257 [KlippyWebsocket.py:connect()] - Starting websocket thread
2024-04-27 20:49:31,269 [_logging.py:info()] - Websocket connected
2024-04-27 20:49:31,270 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2024-04-27 20:49:31,275 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-27 20:49:31,288 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-04-27 20:49:31,300 [printer.py:configure_cameras()] - Cameras: []
2024-04-27 20:49:31,300 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'ready', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'update_manager', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-04-27 20:49:31,300 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-04-27 20:49:31,314 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-04-27 20:49:31,521 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set allow_park = client.park_at_cancel | default(false) | lower == \'true\' %}\n{% set retract = client.cancel_retract | default(5.0) | abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x | default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y | default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x | length > 0 or park_y | length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro | default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set idle_timeout = client.idle_timeout | default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE | default(1) | int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro | default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move | default(velocity) %}\n{% set runout_resume = True if client.runout_sensor | default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state | upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro | default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY | default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}"}, 'neopixel sb_leds': {'pin': 'EBBCan:gpio16', 'chain_count': '3', 'color_order': 'GRB', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0'}, 'led_effect sb_logo_busy': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (1,0,0)'}, 'led_effect sb_logo_cleaning': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.02, 0.5)'}, 'led_effect sb_logo_calibrating_z': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 0.35)'}, 'led_effect sb_logo_heating': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nbreathing  3 1 top (1, 0.18, 0)'}, 'led_effect sb_logo_cooling': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nbreathing  3 1 top (0, 0, 1)'}, 'led_effect sb_logo_homing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.6, 0.2)'}, 'led_effect sb_logo_leveling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.5, 0.1, 0.4)'}, 'led_effect sb_logo_meshing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.2, 1.0, 0.0)'}, 'led_effect sb_logo_printing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.3, 0.3, 0.0),(0.3, 0.1, 0.0)'}, 'led_effect sb_logo_standby': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.01, 0.01, 0.01)'}, 'led_effect sb_logo_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 1.0, 0.0)'}, 'led_effect sb_nozzle_heating': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (1.0, 0.18, 0.0, 0.0)'}, 'led_effect sb_nozzle_cooling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 1.0, 0.1)'}, 'led_effect sb_nozzle_standby': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.6, 0.0, 0.0, 0.0)'}, 'led_effect sb_nozzle_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.6, 1.0, 0.0, 0.1)'}, 'led_effect sb_critical_error': {'leds': '\nneopixel:sb_leds', 'layers': '\nstrobe         1  1.5   add        (1.0,  1.0, 1.0)\nbreathing      2  0     difference (0.95, 0.0, 0.0)\nstatic         1  0     top        (1.0,  0.0, 0.0)', 'autostart': 'false', 'frame_rate': '24', 'run_on_error': 'true'}, 'led_effect rainbow': {'leds': '\nneopixel:sb_leds', 'autostart': 'true', 'frame_rate': '24', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.0, 0.3, 0.0),(0.0, 0.0, 0.3)'}, 'led_effect set_nozzle_leds': {'leds': '\nneopixel:sb_leds (2,3)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nstatic         0  0     top        (0.5,  0.5, 0.5)'}, 'led_effect set_logo_leds': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nstatic         0  0     top        (1.0,  1.0, 1.0)'}, 'gcode_macro set_logo_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds STOP=1'}, 'gcode_macro set_logo_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1'}, 'gcode_macro status_off': {'gcode': '\nSTOP_LED_EFFECTS'}, 'gcode_macro status_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=rainbow'}, 'gcode_macro status_part_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready'}, 'gcode_macro status_busy': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_busy\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_heating\nSET_LED_EFFECT EFFECT=sb_nozzle_heating'}, 'gcode_macro status_cooling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cooling\nSET_LED_EFFECT EFFECT=sb_nozzle_cooling'}, 'gcode_macro status_leveling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_leveling\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_homing\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cleaning\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_meshing\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_calibrating_z\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_printing\nset_nozzle_leds_on'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_sam4e8e_00313753364B37373032303038303139-if00'}, 'mcu EBBCan': {'canbus_uuid': '8250861450f7'}, 'adxl345': {'cs_pin': 'EBBCan:gpio1', 'spi_software_sclk_pin': 'EBBCan:gpio2', 'spi_software_mosi_pin': 'EBBCan:gpio0', 'spi_software_miso_pin': 'EBBCan:gpio3', 'axes_map': 'z,-y,x'}, 'resonance_tester': {'probe_points': '100, 100, 20', 'accel_chip': 'adxl345'}, 'input_shaper': {'shaper_freq_x': '45', 'shaper_type': '3hump_ei'}, 'stepper_x': {'step_pin': 'PD6', 'dir_pin': '!PD11', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'EBBCan:gpio24', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '40'}, 'tmc2660 stepper_x': {'cs_pin': 'PD14', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'stepper_y': {'step_pin': 'PD7', 'dir_pin': '!PD12', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'PA2', 'position_endstop': '0', 'position_max': '225', 'position_min': '-4', 'homing_speed': '35', 'homing_retract_dist': '0'}, 'tmc2660 stepper_y': {'cs_pin': 'PC9', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'stepper_z': {'step_pin': 'PD8', 'dir_pin': '!PD13', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '230', 'position_min': '-2.5', 'homing_speed': '35.0'}, 'tmc2660 stepper_z': {'cs_pin': 'PC10', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'adc_temperature my_thermistor': {'temperature1': '0', 'resistance1': '1000', 'temperature2': '80', 'resistance2': '1309'}, 'extruder': {'step_pin': '!EBBCan:gpio18', 'dir_pin': 'EBBCan:gpio19', 'enable_pin': '!EBBCan:gpio17', 'microsteps': '32', 'rotation_distance': '21.63024711', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'pressure_advance': '0.065', 'pressure_advance_smooth_time': '0.02', 'gear_ratio': '50:10', 'heater_pin': 'EBBCan:gpio7', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'EBBCan:gpio27', 'control': 'pid', 'pid_kp': '21.527', 'pid_ki': '1.063', 'pid_kd': '108.982', 'min_temp': '0', 'max_temp': '250'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan:gpio20', 'run_current': '0.5', 'stealthchop_threshold': '999999'}, 'filament_switch_sensor extruder': {'pause_on_runout': 'True', 'switch_pin': 'EBBCan:gpio21'}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu'}, 'thermistor chamber_temp': {'temperature1': '25', 'resistance1': '10000', 'beta': '3950'}, 'heater_bed': {'heater_pin': '!PA19', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PC13', 'control': 'watermark', 'min_temp': '0', 'max_temp': '120'}, 'heater_fan extruder_fan': {'pin': 'EBBCan:gpio13', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'EBBCan:gpio14', 'cycle_time': '.08', 'kick_start_time': '.25'}, 'probe': {'pin': '^EBBCan:gpio22', 'x_offset': '0', 'y_offset': '0', 'samples': '3', 'samples_result': 'median', 'sample_retract_dist': '3', 'samples_tolerance': '0.015', 'samples_tolerance_retries': '3', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'z_offset': '-1.350'}, 'homing_override': {'axes': 'z', 'set_position_z': '0', 'gcode': '\nstatus_homing\nG90\nG0 Z5 F500\nG28 X0 Y0\nG0 X150 Y100 F9000\nG28 Z0\nG0 Z5 F500\nstatus_ready'}, 'bed_mesh': {'speed': '150', 'horizontal_move_z': '5', 'mesh_min': '25,35.0', 'mesh_max': '225.0,220', 'probe_count': '6,6', 'algorithm': 'bicubic', 'fade_start': '1', 'fade_end': '10', 'fade_target': '0'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\nSTATUS_HEATING\nM109 S150\nSTATUS_HOMING\nM117 Homing...\nG28 Y0 X0 Z0\nSTATUS_MESHING\nBED_MESH_CALIBRATE ADAPTIVE=1\n\n\n\n\n\n\n\n\n\n\n\nSTATUS_HEATING\nM107\nM117 Heating bed\nM190 S{ params.BED }\nM117 Heating nozzle\nM109 S{target_extruder}\nstatus_ready\nG1 Z15.0 F600\nG1 X125 Y125 F3000\nG92 E0\nG1 F9000\nstatus_printing\nM117 Printing...'}, 'gcode_macro PRINT_END': {'gcode': '\nstatus_busy\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\n\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y} F3600\nM117 Finished!\nstatus_off'}, 'gcode_macro M600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state'}, 'printer': {'kinematics': 'corexz', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '5', 'max_z_accel': '100'}, 'force_move': {'enable_force_move': 'true'}, 'exclude_object': {}, 'bed_mesh default': {'version': '1', 'points': '\n-0.100000, -0.025000, 0.012500, 0.037500, 0.125000, 0.212500\n-0.187500, -0.100000, -0.025000, 0.025000, 0.100000, 0.212500\n-0.262500, -0.162500, -0.075000, -0.012500, 0.075000, 0.187500\n-0.262500, -0.162500, -0.087500, -0.000000, 0.100000, 0.237500\n-0.200000, -0.100000, -0.012500, 0.062500, 0.200000, 0.350000\n-0.225000, -0.075000, -0.000000, 0.087500, 0.225000, 0.387500', 'x_count': '6', 'y_count': '6', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'bicubic', 'tension': '0.2', 'min_x': '25.0', 'max_x': '225.0', 'min_y': '35.0', 'max_y': '220.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_sam4e8e_00313753364B37373032303038303139-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu ebbcan': {'canbus_uuid': '8250861450f7', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set allow_park = client.park_at_cancel | default(false) | lower == \'true\' %}\n{% set retract = client.cancel_retract | default(5.0) | abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x | default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y | default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x | length > 0 or park_y | length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro | default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set idle_timeout = client.idle_timeout | default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE | default(1) | int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro | default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move | default(velocity) %}\n{% set runout_resume = True if client.runout_sensor | default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state | upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro | default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY | default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'neopixel sb_leds': {'pin': 'EBBCan:gpio16', 'chain_count': 3, 'color_order': ['GRB'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'led_effect sb_logo_busy': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1,0,0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_cleaning': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.02, 0.5)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_calibrating_z': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 0.35)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1, 0.18, 0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0, 0, 1)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_homing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.6, 0.2)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_leveling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.5, 0.1, 0.4)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_meshing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.2, 1.0, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_printing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.3, 0.3, 0.0),(0.3, 0.1, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_standby': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.01, 0.01, 0.01)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 1.0, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_nozzle_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1.0, 0.18, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 1.0, 0.1)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_standby': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.6, 0.0, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.6, 1.0, 0.0, 0.1)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_critical_error': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': True, 'endstops': '', 'layers': '\nstrobe         1  1.5   add        (1.0,  1.0, 1.0)\nbreathing      2  0     difference (0.95, 0.0, 0.0)\nstatic         1  0     top        (1.0,  0.0, 0.0)', 'leds': '\nneopixel:sb_leds'}, 'led_effect rainbow': {'frame_rate': 24.0, 'autostart': True, 'run_on_error': False, 'endstops': '', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.0, 0.3, 0.0),(0.0, 0.0, 0.3)', 'leds': '\nneopixel:sb_leds'}, 'led_effect set_nozzle_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic         0  0     top        (0.5,  0.5, 0.5)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect set_logo_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic         0  0     top        (1.0,  1.0, 1.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'gcode_macro set_logo_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nSTOP_LED_EFFECTS', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=rainbow', 'description': 'G-Code macro'}, 'gcode_macro status_part_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_busy\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_heating\nSET_LED_EFFECT EFFECT=sb_nozzle_heating', 'description': 'G-Code macro'}, 'gcode_macro status_cooling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cooling\nSET_LED_EFFECT EFFECT=sb_nozzle_cooling', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_leveling\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_homing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cleaning\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_meshing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_calibrating_z\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_printing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'adxl345': {'axes_map': ['z', '-y', 'x'], 'rate': 3200, 'cs_pin': 'EBBCan:gpio1', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'EBBCan:gpio2', 'spi_software_miso_pin': 'EBBCan:gpio3', 'spi_software_mosi_pin': 'EBBCan:gpio0'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[100.0, 100.0, 20.0]], 'accel_chip': 'adxl345'}, 'input_shaper': {'shaper_type': '3hump_ei', 'shaper_type_x': '3hump_ei', 'damping_ratio_x': 0.1, 'shaper_freq_x': 45.0, 'shaper_type_y': '3hump_ei', 'damping_ratio_y': 0.1, 'shaper_freq_y': 0.0}, 'tmc2660 stepper_x': {'cs_pin': 'PD14', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PD6', 'dir_pin': '!PD11', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'EBBCan:gpio24', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2660 stepper_y': {'cs_pin': 'PC9', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PD7', 'dir_pin': '!PD12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'PA2', 'position_endstop': 0.0, 'position_min': -4.0, 'position_max': 225.0, 'homing_speed': 35.0, 'second_homing_speed': 17.5, 'homing_retract_speed': 35.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2660 stepper_z': {'cs_pin': 'PC10', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PD8', 'dir_pin': '!PD13', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -2.5, 'position_max': 230.0, 'homing_speed': 35.0, 'second_homing_speed': 17.5, 'homing_retract_speed': 35.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'adc_temperature my_thermistor': {'resistance1': 1000.0, 'temperature1': 0.0, 'temperature2': 80.0, 'resistance2': 1309.0}, 'tmc2209 extruder': {'uart_pin': 'EBBCan:gpio20', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan:gpio27', 'min_temp': 0.0, 'max_temp': 250.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 21.527, 'pid_ki': 1.063, 'pid_kd': 108.982, 'heater_pin': 'EBBCan:gpio7', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': '!EBBCan:gpio18', 'pressure_advance': 0.065, 'pressure_advance_smooth_time': 0.02, 'dir_pin': 'EBBCan:gpio19', 'rotation_distance': 21.63024711, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!EBBCan:gpio17'}, 'filament_switch_sensor extruder': {'switch_pin': 'EBBCan:gpio21', 'pause_on_runout': True, 'runout_gcode': '', 'pause_delay': 0.5, 'event_delay': 3.0}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'thermistor chamber_temp': {'temperature1': 25.0, 'resistance1': 10000.0, 'beta': 3950.0}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PC13', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'watermark', 'max_delta': 2.0, 'heater_pin': '!PA19', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan extruder_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'EBBCan:gpio13', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.25, 'off_below': 0.0, 'cycle_time': 0.08, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'EBBCan:gpio14'}, 'probe': {'z_offset': -1.35, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': '^EBBCan:gpio22', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 3, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.015, 'samples_tolerance_retries': 3}, 'homing_override': {'set_position_z': 0.0, 'axes': 'z', 'gcode': '\nstatus_homing\nG90\nG0 Z5 F500\nG28 X0 Y0\nG0 X150 Y100 F9000\nG28 Z0\nG0 Z5 F500\nstatus_ready'}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [6, 6], 'mesh_min': [25.0, 35.0], 'mesh_max': [225.0, 220.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 150.0, 'fade_start': 1.0, 'fade_end': 10.0, 'fade_target': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[-0.1, -0.025, 0.0125, 0.0375, 0.125, 0.2125], [-0.1875, -0.1, -0.025, 0.025, 0.1, 0.2125], [-0.2625, -0.1625, -0.075, -0.0125, 0.075, 0.1875], [-0.2625, -0.1625, -0.0875, -0.0, 0.1, 0.2375], [-0.2, -0.1, -0.0125, 0.0625, 0.2, 0.35], [-0.225, -0.075, -0.0, 0.0875, 0.225, 0.3875]], 'min_x': 25.0, 'max_x': 225.0, 'min_y': 35.0, 'max_y': 220.0, 'x_count': 6, 'y_count': 6, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'bicubic', 'tension': 0.2}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\nSTATUS_HEATING\nM109 S150\nSTATUS_HOMING\nM117 Homing...\nG28 Y0 X0 Z0\nSTATUS_MESHING\nBED_MESH_CALIBRATE ADAPTIVE=1\n\n\n\n\n\n\n\n\n\n\n\nSTATUS_HEATING\nM107\nM117 Heating bed\nM190 S{ params.BED }\nM117 Heating nozzle\nM109 S{target_extruder}\nstatus_ready\nG1 Z15.0 F600\nG1 X125 Y125 F3000\nG92 E0\nG1 F9000\nstatus_printing\nM117 Printing...', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\nstatus_busy\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\n\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y} F3600\nM117 Finished!\nstatus_off', 'description': 'G-Code macro'}, 'gcode_macro m600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state', 'description': 'G-Code macro'}, 'force_move': {'enable_force_move': True}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexz', 'max_z_velocity': 5.0, 'max_z_accel': 100.0}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-04-27 20:49:31,524 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-04-27 20:49:31,526 [printer.py:reinit()] - Klipper version: v0.12.0-132-ge37b007f-dirty
2024-04-27 20:49:31,526 [printer.py:reinit()] - # Extruders: 1
2024-04-27 20:49:31,526 [printer.py:reinit()] - # Temperature devices: 2
2024-04-27 20:49:31,526 [printer.py:reinit()] - # Fans: 2
2024-04-27 20:49:31,526 [printer.py:reinit()] - # Output pins: 0
2024-04-27 20:49:31,526 [printer.py:reinit()] - # Leds: 20
2024-04-27 20:49:31,526 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-04-27 20:49:31,546 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-04-27 20:49:31,548 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor mcu&fan&heater_fan extruder_fan&filament_switch_sensor extruder&neopixel sb_leds
2024-04-27 20:49:31,820 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-04-27 20:49:31,820 [screen.py:init_klipper()] - Printer initialized
2024-04-27 20:49:31,820 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2024-04-27 20:49:31,821 [printer.py:change_state()] - Adding callback for state: ready
2024-04-27 20:49:31,914 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-04-27 20:49:31,918 [screen.py:_load_panel()] - Loading panel: main_menu
2024-04-27 20:49:32,059 [main_menu.py:__init__()] - ### Making MainMenu
2024-04-27 20:49:32,075 [main_menu.py:add_device()] - Adding device: extruder
2024-04-27 20:49:32,091 [main_menu.py:add_device()] - Adding device: heater_bed
2024-04-27 20:49:32,101 [main_menu.py:add_device()] - Adding device: temperature_sensor mcu
2024-04-27 20:49:32,152 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-27 20:49:32,154 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-27 20:49:32,181 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor mcu', 'heater_bed', 'extruder']
2024-04-27 20:49:32,183 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-04-27 20:49:32,196 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-04-27 20:50:50,352 [functions.py:log_start()] - --------------------KlipperScreen Log Start--------------------
2024-04-27 20:50:50,352 [functions.py:log_start()] - KlipperScreen Version: v0.3.9-50-gdaed9a0
2024-04-27 20:50:50,352 [functions.py:log_start()] - Python version: 3.11
2024-04-27 20:50:50,492 [config.py:get_config_file_location()] - Passed config (-c): .
2024-04-27 20:50:50,492 [config.py:__init__()] - Config path location: /home/pi/printer_data/config/KlipperScreen.conf
2024-04-27 20:50:50,517 [config.py:log_config()] -  ===== Config File =====

=======================
2024-04-27 20:50:50,520 [config.py:__init__()] - ====== Saved Def ======

[main]
use_dpms = False
print_sort_dir = date_desc

=======================
2024-04-27 20:50:50,520 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2024-04-27 20:50:50,631 [config.py:create_translations()] - Selected lang: None OS lang: en_GB
2024-04-27 20:50:50,632 [config.py:install_language()] - Using lang en
2024-04-27 20:50:50,651 [screen.py:__init__()] - Monitors: 1 using number: 0
2024-04-27 20:50:50,653 [screen.py:__init__()] - Wayland: False Display name: :100
2024-04-27 20:50:50,656 [screen.py:__init__()] - Screen resolution: 984x540
2024-04-27 20:50:50,657 [KlippyGtk.py:__init__()] - Font size: 18.6 (medium)
2024-04-27 20:50:51,641 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2024-04-27 20:50:51,642 [screen.py:set_screenblanking_timeout()] - Not using DPMS
2024-04-27 20:50:51,650 [screen.py:initial_connection()] - Default printer: None
2024-04-27 20:50:51,718 [screen.py:connect_printer()] - Connecting to printer: Printer
2024-04-27 20:50:51,719 [screen.py:_load_panel()] - Loading panel: splash_screen
2024-04-27 20:50:51,787 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-04-27 20:50:51,805 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-04-27 20:50:51,805 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-27 20:50:51,822 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/access/oneshot_token
2024-04-27 20:50:51,834 [KlippyWebsocket.py:connect()] - Starting websocket thread
2024-04-27 20:50:51,843 [_logging.py:info()] - Websocket connected
2024-04-27 20:50:51,844 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2024-04-27 20:50:51,849 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-27 20:50:51,861 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-04-27 20:50:51,872 [printer.py:configure_cameras()] - Cameras: []
2024-04-27 20:50:51,873 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'ready', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'update_manager', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 3, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-04-27 20:50:51,873 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-04-27 20:50:51,886 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-04-27 20:50:51,965 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set allow_park = client.park_at_cancel | default(false) | lower == \'true\' %}\n{% set retract = client.cancel_retract | default(5.0) | abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x | default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y | default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x | length > 0 or park_y | length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro | default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set idle_timeout = client.idle_timeout | default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE | default(1) | int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro | default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move | default(velocity) %}\n{% set runout_resume = True if client.runout_sensor | default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state | upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro | default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY | default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}"}, 'neopixel sb_leds': {'pin': 'EBBCan:gpio16', 'chain_count': '3', 'color_order': 'GRB', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0'}, 'led_effect sb_logo_busy': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (1,0,0)'}, 'led_effect sb_logo_cleaning': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.02, 0.5)'}, 'led_effect sb_logo_calibrating_z': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 0.35)'}, 'led_effect sb_logo_heating': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nbreathing  3 1 top (1, 0.18, 0)'}, 'led_effect sb_logo_cooling': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nbreathing  3 1 top (0, 0, 1)'}, 'led_effect sb_logo_homing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.6, 0.2)'}, 'led_effect sb_logo_leveling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.5, 0.1, 0.4)'}, 'led_effect sb_logo_meshing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.2, 1.0, 0.0)'}, 'led_effect sb_logo_printing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.3, 0.3, 0.0),(0.3, 0.1, 0.0)'}, 'led_effect sb_logo_standby': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.01, 0.01, 0.01)'}, 'led_effect sb_logo_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 1.0, 0.0)'}, 'led_effect sb_nozzle_heating': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (1.0, 0.18, 0.0, 0.0)'}, 'led_effect sb_nozzle_cooling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 1.0, 0.1)'}, 'led_effect sb_nozzle_standby': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.6, 0.0, 0.0, 0.0)'}, 'led_effect sb_nozzle_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.6, 1.0, 0.0, 0.1)'}, 'led_effect sb_critical_error': {'leds': '\nneopixel:sb_leds', 'layers': '\nstrobe         1  1.5   add        (1.0,  1.0, 1.0)\nbreathing      2  0     difference (0.95, 0.0, 0.0)\nstatic         1  0     top        (1.0,  0.0, 0.0)', 'autostart': 'false', 'frame_rate': '24', 'run_on_error': 'true'}, 'led_effect rainbow': {'leds': '\nneopixel:sb_leds', 'autostart': 'true', 'frame_rate': '24', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.0, 0.3, 0.0),(0.0, 0.0, 0.3)'}, 'led_effect set_nozzle_leds': {'leds': '\nneopixel:sb_leds (2,3)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nstatic         0  0     top        (0.5,  0.5, 0.5)'}, 'led_effect set_logo_leds': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nstatic         0  0     top        (1.0,  1.0, 1.0)'}, 'gcode_macro set_logo_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds STOP=1'}, 'gcode_macro set_logo_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1'}, 'gcode_macro status_off': {'gcode': '\nSTOP_LED_EFFECTS'}, 'gcode_macro status_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=rainbow'}, 'gcode_macro status_part_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready'}, 'gcode_macro status_busy': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_busy\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_heating\nSET_LED_EFFECT EFFECT=sb_nozzle_heating'}, 'gcode_macro status_cooling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cooling\nSET_LED_EFFECT EFFECT=sb_nozzle_cooling'}, 'gcode_macro status_leveling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_leveling\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_homing\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cleaning\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_meshing\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_calibrating_z\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_printing\nset_nozzle_leds_on'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_sam4e8e_00313753364B37373032303038303139-if00'}, 'mcu EBBCan': {'canbus_uuid': '8250861450f7'}, 'adxl345': {'cs_pin': 'EBBCan:gpio1', 'spi_software_sclk_pin': 'EBBCan:gpio2', 'spi_software_mosi_pin': 'EBBCan:gpio0', 'spi_software_miso_pin': 'EBBCan:gpio3', 'axes_map': 'z,-y,x'}, 'resonance_tester': {'probe_points': '100, 100, 20', 'accel_chip': 'adxl345'}, 'input_shaper': {'shaper_freq_x': '45', 'shaper_type': '3hump_ei'}, 'stepper_x': {'step_pin': 'PD6', 'dir_pin': '!PD11', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'EBBCan:gpio24', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '40'}, 'tmc2660 stepper_x': {'cs_pin': 'PD14', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'stepper_y': {'step_pin': 'PD7', 'dir_pin': '!PD12', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'PA2', 'position_endstop': '0', 'position_max': '225', 'position_min': '-4', 'homing_speed': '35', 'homing_retract_dist': '0'}, 'tmc2660 stepper_y': {'cs_pin': 'PC9', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'stepper_z': {'step_pin': 'PD8', 'dir_pin': '!PD13', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '230', 'position_min': '-2.5', 'homing_speed': '35.0'}, 'tmc2660 stepper_z': {'cs_pin': 'PC10', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'adc_temperature my_thermistor': {'temperature1': '0', 'resistance1': '1000', 'temperature2': '80', 'resistance2': '1309'}, 'extruder': {'step_pin': '!EBBCan:gpio18', 'dir_pin': 'EBBCan:gpio19', 'enable_pin': '!EBBCan:gpio17', 'microsteps': '32', 'rotation_distance': '21.63024711', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'pressure_advance': '0.065', 'pressure_advance_smooth_time': '0.02', 'gear_ratio': '50:10', 'heater_pin': 'EBBCan:gpio7', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'EBBCan:gpio27', 'control': 'pid', 'pid_kp': '21.527', 'pid_ki': '1.063', 'pid_kd': '108.982', 'min_temp': '0', 'max_temp': '250'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan:gpio20', 'run_current': '0.5', 'stealthchop_threshold': '999999'}, 'filament_switch_sensor extruder': {'pause_on_runout': 'True', 'switch_pin': 'EBBCan:gpio21'}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu'}, 'thermistor chamber_temp': {'temperature1': '25', 'resistance1': '10000', 'beta': '3950'}, 'heater_bed': {'heater_pin': '!PA19', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PC13', 'control': 'watermark', 'min_temp': '0', 'max_temp': '120'}, 'heater_fan extruder_fan': {'pin': 'EBBCan:gpio13', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'EBBCan:gpio14', 'cycle_time': '.08', 'kick_start_time': '.25'}, 'probe': {'pin': '^EBBCan:gpio22', 'x_offset': '0', 'y_offset': '0', 'samples': '3', 'samples_result': 'median', 'sample_retract_dist': '3', 'samples_tolerance': '0.015', 'samples_tolerance_retries': '3', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'z_offset': '-1.350'}, 'homing_override': {'axes': 'z', 'set_position_z': '0', 'gcode': '\nstatus_homing\nG90\nG0 Z5 F500\nG28 X0 Y0\nG0 X150 Y100 F9000\nG28 Z0\nG0 Z5 F500\nstatus_ready'}, 'bed_mesh': {'speed': '150', 'horizontal_move_z': '5', 'mesh_min': '25,35.0', 'mesh_max': '225.0,220', 'probe_count': '6,6', 'algorithm': 'bicubic', 'fade_start': '1', 'fade_end': '10', 'fade_target': '0'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\nSTATUS_HEATING\nM109 S150\nSTATUS_HOMING\nM117 Homing...\nG28 Y0 X0 Z0\nSTATUS_MESHING\nBED_MESH_CALIBRATE ADAPTIVE=1\n\n\n\n\n\n\n\n\n\n\n\nSTATUS_HEATING\nM107\nM117 Heating bed\nM190 S{ params.BED }\nM117 Heating nozzle\nM109 S{target_extruder}\nstatus_ready\nG1 Z15.0 F600\nG1 X125 Y125 F3000\nG92 E0\nG1 F9000\nstatus_printing\nM117 Printing...'}, 'gcode_macro PRINT_END': {'gcode': '\nstatus_busy\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\n\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y} F3600\nM117 Finished!\nstatus_off'}, 'gcode_macro M600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state'}, 'printer': {'kinematics': 'corexz', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '5', 'max_z_accel': '100'}, 'force_move': {'enable_force_move': 'true'}, 'exclude_object': {}, 'bed_mesh default': {'version': '1', 'points': '\n-0.100000, -0.025000, 0.012500, 0.037500, 0.125000, 0.212500\n-0.187500, -0.100000, -0.025000, 0.025000, 0.100000, 0.212500\n-0.262500, -0.162500, -0.075000, -0.012500, 0.075000, 0.187500\n-0.262500, -0.162500, -0.087500, -0.000000, 0.100000, 0.237500\n-0.200000, -0.100000, -0.012500, 0.062500, 0.200000, 0.350000\n-0.225000, -0.075000, -0.000000, 0.087500, 0.225000, 0.387500', 'x_count': '6', 'y_count': '6', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'bicubic', 'tension': '0.2', 'min_x': '25.0', 'max_x': '225.0', 'min_y': '35.0', 'max_y': '220.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_sam4e8e_00313753364B37373032303038303139-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu ebbcan': {'canbus_uuid': '8250861450f7', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set allow_park = client.park_at_cancel | default(false) | lower == \'true\' %}\n{% set retract = client.cancel_retract | default(5.0) | abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x | default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y | default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x | length > 0 or park_y | length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro | default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set idle_timeout = client.idle_timeout | default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE | default(1) | int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro | default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move | default(velocity) %}\n{% set runout_resume = True if client.runout_sensor | default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state | upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro | default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY | default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'neopixel sb_leds': {'pin': 'EBBCan:gpio16', 'chain_count': 3, 'color_order': ['GRB'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'led_effect sb_logo_busy': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1,0,0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_cleaning': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.02, 0.5)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_calibrating_z': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 0.35)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1, 0.18, 0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0, 0, 1)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_homing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.6, 0.2)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_leveling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.5, 0.1, 0.4)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_meshing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.2, 1.0, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_printing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.3, 0.3, 0.0),(0.3, 0.1, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_standby': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.01, 0.01, 0.01)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 1.0, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_nozzle_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1.0, 0.18, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 1.0, 0.1)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_standby': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.6, 0.0, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.6, 1.0, 0.0, 0.1)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_critical_error': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': True, 'endstops': '', 'layers': '\nstrobe         1  1.5   add        (1.0,  1.0, 1.0)\nbreathing      2  0     difference (0.95, 0.0, 0.0)\nstatic         1  0     top        (1.0,  0.0, 0.0)', 'leds': '\nneopixel:sb_leds'}, 'led_effect rainbow': {'frame_rate': 24.0, 'autostart': True, 'run_on_error': False, 'endstops': '', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.0, 0.3, 0.0),(0.0, 0.0, 0.3)', 'leds': '\nneopixel:sb_leds'}, 'led_effect set_nozzle_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic         0  0     top        (0.5,  0.5, 0.5)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect set_logo_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic         0  0     top        (1.0,  1.0, 1.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'gcode_macro set_logo_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nSTOP_LED_EFFECTS', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=rainbow', 'description': 'G-Code macro'}, 'gcode_macro status_part_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_busy\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_heating\nSET_LED_EFFECT EFFECT=sb_nozzle_heating', 'description': 'G-Code macro'}, 'gcode_macro status_cooling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cooling\nSET_LED_EFFECT EFFECT=sb_nozzle_cooling', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_leveling\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_homing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cleaning\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_meshing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_calibrating_z\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_printing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'adxl345': {'axes_map': ['z', '-y', 'x'], 'rate': 3200, 'cs_pin': 'EBBCan:gpio1', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'EBBCan:gpio2', 'spi_software_miso_pin': 'EBBCan:gpio3', 'spi_software_mosi_pin': 'EBBCan:gpio0'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[100.0, 100.0, 20.0]], 'accel_chip': 'adxl345'}, 'input_shaper': {'shaper_type': '3hump_ei', 'shaper_type_x': '3hump_ei', 'damping_ratio_x': 0.1, 'shaper_freq_x': 45.0, 'shaper_type_y': '3hump_ei', 'damping_ratio_y': 0.1, 'shaper_freq_y': 0.0}, 'tmc2660 stepper_x': {'cs_pin': 'PD14', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PD6', 'dir_pin': '!PD11', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'EBBCan:gpio24', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2660 stepper_y': {'cs_pin': 'PC9', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PD7', 'dir_pin': '!PD12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'PA2', 'position_endstop': 0.0, 'position_min': -4.0, 'position_max': 225.0, 'homing_speed': 35.0, 'second_homing_speed': 17.5, 'homing_retract_speed': 35.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2660 stepper_z': {'cs_pin': 'PC10', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PD8', 'dir_pin': '!PD13', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -2.5, 'position_max': 230.0, 'homing_speed': 35.0, 'second_homing_speed': 17.5, 'homing_retract_speed': 35.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'adc_temperature my_thermistor': {'resistance1': 1000.0, 'temperature1': 0.0, 'temperature2': 80.0, 'resistance2': 1309.0}, 'tmc2209 extruder': {'uart_pin': 'EBBCan:gpio20', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan:gpio27', 'min_temp': 0.0, 'max_temp': 250.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 21.527, 'pid_ki': 1.063, 'pid_kd': 108.982, 'heater_pin': 'EBBCan:gpio7', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': '!EBBCan:gpio18', 'pressure_advance': 0.065, 'pressure_advance_smooth_time': 0.02, 'dir_pin': 'EBBCan:gpio19', 'rotation_distance': 21.63024711, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!EBBCan:gpio17'}, 'filament_switch_sensor extruder': {'switch_pin': 'EBBCan:gpio21', 'pause_on_runout': True, 'runout_gcode': '', 'pause_delay': 0.5, 'event_delay': 3.0}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'thermistor chamber_temp': {'temperature1': 25.0, 'resistance1': 10000.0, 'beta': 3950.0}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PC13', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'watermark', 'max_delta': 2.0, 'heater_pin': '!PA19', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan extruder_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'EBBCan:gpio13', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.25, 'off_below': 0.0, 'cycle_time': 0.08, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'EBBCan:gpio14'}, 'probe': {'z_offset': -1.35, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': '^EBBCan:gpio22', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 3, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.015, 'samples_tolerance_retries': 3}, 'homing_override': {'set_position_z': 0.0, 'axes': 'z', 'gcode': '\nstatus_homing\nG90\nG0 Z5 F500\nG28 X0 Y0\nG0 X150 Y100 F9000\nG28 Z0\nG0 Z5 F500\nstatus_ready'}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [6, 6], 'mesh_min': [25.0, 35.0], 'mesh_max': [225.0, 220.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 150.0, 'fade_start': 1.0, 'fade_end': 10.0, 'fade_target': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[-0.1, -0.025, 0.0125, 0.0375, 0.125, 0.2125], [-0.1875, -0.1, -0.025, 0.025, 0.1, 0.2125], [-0.2625, -0.1625, -0.075, -0.0125, 0.075, 0.1875], [-0.2625, -0.1625, -0.0875, -0.0, 0.1, 0.2375], [-0.2, -0.1, -0.0125, 0.0625, 0.2, 0.35], [-0.225, -0.075, -0.0, 0.0875, 0.225, 0.3875]], 'min_x': 25.0, 'max_x': 225.0, 'min_y': 35.0, 'max_y': 220.0, 'x_count': 6, 'y_count': 6, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'bicubic', 'tension': 0.2}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\nSTATUS_HEATING\nM109 S150\nSTATUS_HOMING\nM117 Homing...\nG28 Y0 X0 Z0\nSTATUS_MESHING\nBED_MESH_CALIBRATE ADAPTIVE=1\n\n\n\n\n\n\n\n\n\n\n\nSTATUS_HEATING\nM107\nM117 Heating bed\nM190 S{ params.BED }\nM117 Heating nozzle\nM109 S{target_extruder}\nstatus_ready\nG1 Z15.0 F600\nG1 X125 Y125 F3000\nG92 E0\nG1 F9000\nstatus_printing\nM117 Printing...', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\nstatus_busy\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\n\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y} F3600\nM117 Finished!\nstatus_off', 'description': 'G-Code macro'}, 'gcode_macro m600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state', 'description': 'G-Code macro'}, 'force_move': {'enable_force_move': True}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexz', 'max_z_velocity': 5.0, 'max_z_accel': 100.0}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-04-27 20:50:51,968 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-04-27 20:50:51,970 [printer.py:reinit()] - Klipper version: v0.12.0-132-ge37b007f-dirty
2024-04-27 20:50:51,970 [printer.py:reinit()] - # Extruders: 1
2024-04-27 20:50:51,970 [printer.py:reinit()] - # Temperature devices: 2
2024-04-27 20:50:51,970 [printer.py:reinit()] - # Fans: 2
2024-04-27 20:50:51,970 [printer.py:reinit()] - # Output pins: 0
2024-04-27 20:50:51,970 [printer.py:reinit()] - # Leds: 20
2024-04-27 20:50:51,970 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-04-27 20:50:51,988 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-04-27 20:50:51,991 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor mcu&fan&heater_fan extruder_fan&filament_switch_sensor extruder&neopixel sb_leds
2024-04-27 20:50:52,268 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-04-27 20:50:52,268 [screen.py:init_klipper()] - Printer initialized
2024-04-27 20:50:52,268 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2024-04-27 20:50:52,269 [printer.py:change_state()] - Adding callback for state: ready
2024-04-27 20:50:52,365 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-04-27 20:50:52,370 [screen.py:_load_panel()] - Loading panel: main_menu
2024-04-27 20:50:52,481 [main_menu.py:__init__()] - ### Making MainMenu
2024-04-27 20:50:52,497 [main_menu.py:add_device()] - Adding device: extruder
2024-04-27 20:50:52,506 [main_menu.py:add_device()] - Adding device: heater_bed
2024-04-27 20:50:52,514 [main_menu.py:add_device()] - Adding device: temperature_sensor mcu
2024-04-27 20:50:52,567 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-27 20:50:52,569 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-27 20:50:52,598 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor mcu', 'heater_bed', 'extruder']
2024-04-27 20:50:52,600 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-04-27 20:50:52,612 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-04-27 20:51:15,485 [functions.py:log_start()] - --------------------KlipperScreen Log Start--------------------
2024-04-27 20:51:15,486 [functions.py:log_start()] - KlipperScreen Version: v0.3.9-50-gdaed9a0
2024-04-27 20:51:15,486 [functions.py:log_start()] - Python version: 3.11
2024-04-27 20:51:15,625 [config.py:get_config_file_location()] - Passed config (-c): .
2024-04-27 20:51:15,626 [config.py:__init__()] - Config path location: /home/pi/printer_data/config/KlipperScreen.conf
2024-04-27 20:51:15,651 [config.py:log_config()] -  ===== Config File =====

=======================
2024-04-27 20:51:15,653 [config.py:__init__()] - ====== Saved Def ======

[main]
use_dpms = False
print_sort_dir = date_desc

=======================
2024-04-27 20:51:15,654 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2024-04-27 20:51:15,765 [config.py:create_translations()] - Selected lang: None OS lang: en_GB
2024-04-27 20:51:15,766 [config.py:install_language()] - Using lang en
2024-04-27 20:51:15,788 [screen.py:__init__()] - Monitors: 1 using number: 0
2024-04-27 20:51:15,789 [screen.py:__init__()] - Wayland: False Display name: :100
2024-04-27 20:51:15,792 [screen.py:__init__()] - Screen resolution: 984x540
2024-04-27 20:51:15,793 [KlippyGtk.py:__init__()] - Font size: 18.6 (medium)
2024-04-27 20:51:22,454 [functions.py:log_start()] - --------------------KlipperScreen Log Start--------------------
2024-04-27 20:51:22,455 [functions.py:log_start()] - KlipperScreen Version: v0.3.9-50-gdaed9a0
2024-04-27 20:51:22,455 [functions.py:log_start()] - Python version: 3.11
2024-04-27 20:51:22,462 [screen.py:__init__()] - Gtk couldn't be initialized. Use Gtk.init_check() if you want to handle this case.

Traceback (most recent call last):
  File "/home/pi/KlipperScreen/screen.py", line 104, in __init__
    super().__init__(title="KlipperScreen")
  File "/home/pi/.KlipperScreen-env/lib/python3.11/site-packages/gi/overrides/Gtk.py", line 508, in __init__
    raise RuntimeError(
RuntimeError: Gtk couldn't be initialized. Use Gtk.init_check() if you want to handle this case.
Traceback (most recent call last):
  File "/home/pi/KlipperScreen/screen.py", line 104, in __init__
    super().__init__(title="KlipperScreen")
  File "/home/pi/.KlipperScreen-env/lib/python3.11/site-packages/gi/overrides/Gtk.py", line 508, in __init__
    raise RuntimeError(
RuntimeError: Gtk couldn't be initialized. Use Gtk.init_check() if you want to handle this case.
2024-04-27 20:51:22,465 [screen.py:main()] - Failed to initialize window


Traceback (most recent call last):
  File "/home/pi/KlipperScreen/screen.py", line 104, in __init__
    super().__init__(title="KlipperScreen")
  File "/home/pi/.KlipperScreen-env/lib/python3.11/site-packages/gi/overrides/Gtk.py", line 508, in __init__
    raise RuntimeError(
RuntimeError: Gtk couldn't be initialized. Use Gtk.init_check() if you want to handle this case.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/home/pi/KlipperScreen/screen.py", line 1132, in main
    win = KlipperScreen(args)
          ^^^^^^^^^^^^^^^^^^^
  File "/home/pi/KlipperScreen/screen.py", line 107, in __init__
    raise RuntimeError from e
RuntimeError
Traceback (most recent call last):
  File "/home/pi/KlipperScreen/screen.py", line 104, in __init__
    super().__init__(title="KlipperScreen")
  File "/home/pi/.KlipperScreen-env/lib/python3.11/site-packages/gi/overrides/Gtk.py", line 508, in __init__
    raise RuntimeError(
RuntimeError: Gtk couldn't be initialized. Use Gtk.init_check() if you want to handle this case.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/home/pi/KlipperScreen/screen.py", line 1132, in main
    win = KlipperScreen(args)
          ^^^^^^^^^^^^^^^^^^^
  File "/home/pi/KlipperScreen/screen.py", line 107, in __init__
    raise RuntimeError from e
RuntimeError
2024-04-27 20:51:22,472 [screen.py:<module>()] - Fatal error in main loop:


Traceback (most recent call last):
  File "/home/pi/KlipperScreen/screen.py", line 104, in __init__
    super().__init__(title="KlipperScreen")
  File "/home/pi/.KlipperScreen-env/lib/python3.11/site-packages/gi/overrides/Gtk.py", line 508, in __init__
    raise RuntimeError(
RuntimeError: Gtk couldn't be initialized. Use Gtk.init_check() if you want to handle this case.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/home/pi/KlipperScreen/screen.py", line 1132, in main
    win = KlipperScreen(args)
          ^^^^^^^^^^^^^^^^^^^
  File "/home/pi/KlipperScreen/screen.py", line 107, in __init__
    raise RuntimeError from e
RuntimeError

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/home/pi/KlipperScreen/screen.py", line 1143, in <module>
    main()
  File "/home/pi/KlipperScreen/screen.py", line 1135, in main
    raise RuntimeError from e
RuntimeError
Traceback (most recent call last):
  File "/home/pi/KlipperScreen/screen.py", line 104, in __init__
    super().__init__(title="KlipperScreen")
  File "/home/pi/.KlipperScreen-env/lib/python3.11/site-packages/gi/overrides/Gtk.py", line 508, in __init__
    raise RuntimeError(
RuntimeError: Gtk couldn't be initialized. Use Gtk.init_check() if you want to handle this case.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/home/pi/KlipperScreen/screen.py", line 1132, in main
    win = KlipperScreen(args)
          ^^^^^^^^^^^^^^^^^^^
  File "/home/pi/KlipperScreen/screen.py", line 107, in __init__
    raise RuntimeError from e
RuntimeError

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/home/pi/KlipperScreen/screen.py", line 1143, in <module>
    main()
  File "/home/pi/KlipperScreen/screen.py", line 1135, in main
    raise RuntimeError from e
RuntimeError
2024-04-27 20:51:29,511 [functions.py:log_start()] - --------------------KlipperScreen Log Start--------------------
2024-04-27 20:51:29,512 [functions.py:log_start()] - KlipperScreen Version: v0.3.9-50-gdaed9a0
2024-04-27 20:51:29,512 [functions.py:log_start()] - Python version: 3.11
2024-04-27 20:51:29,651 [config.py:get_config_file_location()] - Passed config (-c): .
2024-04-27 20:51:29,652 [config.py:__init__()] - Config path location: /home/pi/printer_data/config/KlipperScreen.conf
2024-04-27 20:51:29,677 [config.py:log_config()] -  ===== Config File =====

=======================
2024-04-27 20:51:29,679 [config.py:__init__()] - ====== Saved Def ======

[main]
use_dpms = False
print_sort_dir = date_desc

=======================
2024-04-27 20:51:29,680 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2024-04-27 20:51:29,788 [config.py:create_translations()] - Selected lang: None OS lang: en_GB
2024-04-27 20:51:29,788 [config.py:install_language()] - Using lang en
2024-04-27 20:51:29,809 [screen.py:__init__()] - Monitors: 1 using number: 0
2024-04-27 20:51:29,810 [screen.py:__init__()] - Wayland: False Display name: :100
2024-04-27 20:51:29,813 [screen.py:__init__()] - Screen resolution: 984x540
2024-04-27 20:51:29,815 [KlippyGtk.py:__init__()] - Font size: 18.6 (medium)
2024-04-27 20:51:30,761 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2024-04-27 20:51:30,761 [screen.py:set_screenblanking_timeout()] - Not using DPMS
2024-04-27 20:51:30,770 [screen.py:initial_connection()] - Default printer: None
2024-04-27 20:51:30,838 [screen.py:connect_printer()] - Connecting to printer: Printer
2024-04-27 20:51:30,838 [screen.py:_load_panel()] - Loading panel: splash_screen
2024-04-27 20:51:30,907 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-04-27 20:51:30,925 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-04-27 20:51:30,925 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-27 20:51:30,943 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/access/oneshot_token
2024-04-27 20:51:30,955 [KlippyWebsocket.py:connect()] - Starting websocket thread
2024-04-27 20:51:30,964 [_logging.py:info()] - Websocket connected
2024-04-27 20:51:30,965 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2024-04-27 20:51:31,009 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-27 20:51:31,021 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-04-27 20:51:31,033 [printer.py:configure_cameras()] - Cameras: []
2024-04-27 20:51:31,033 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'ready', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'update_manager', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 3, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-04-27 20:51:31,034 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-04-27 20:51:31,046 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-04-27 20:51:31,316 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set allow_park = client.park_at_cancel | default(false) | lower == \'true\' %}\n{% set retract = client.cancel_retract | default(5.0) | abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x | default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y | default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x | length > 0 or park_y | length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro | default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set idle_timeout = client.idle_timeout | default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE | default(1) | int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro | default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move | default(velocity) %}\n{% set runout_resume = True if client.runout_sensor | default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state | upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro | default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY | default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}"}, 'neopixel sb_leds': {'pin': 'EBBCan:gpio16', 'chain_count': '3', 'color_order': 'GRB', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0'}, 'led_effect sb_logo_busy': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (1,0,0)'}, 'led_effect sb_logo_cleaning': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.02, 0.5)'}, 'led_effect sb_logo_calibrating_z': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 0.35)'}, 'led_effect sb_logo_heating': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nbreathing  3 1 top (1, 0.18, 0)'}, 'led_effect sb_logo_cooling': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nbreathing  3 1 top (0, 0, 1)'}, 'led_effect sb_logo_homing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.6, 0.2)'}, 'led_effect sb_logo_leveling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.5, 0.1, 0.4)'}, 'led_effect sb_logo_meshing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.2, 1.0, 0.0)'}, 'led_effect sb_logo_printing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.3, 0.3, 0.0),(0.3, 0.1, 0.0)'}, 'led_effect sb_logo_standby': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.01, 0.01, 0.01)'}, 'led_effect sb_logo_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 1.0, 0.0)'}, 'led_effect sb_nozzle_heating': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (1.0, 0.18, 0.0, 0.0)'}, 'led_effect sb_nozzle_cooling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 1.0, 0.1)'}, 'led_effect sb_nozzle_standby': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.6, 0.0, 0.0, 0.0)'}, 'led_effect sb_nozzle_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.6, 1.0, 0.0, 0.1)'}, 'led_effect sb_critical_error': {'leds': '\nneopixel:sb_leds', 'layers': '\nstrobe         1  1.5   add        (1.0,  1.0, 1.0)\nbreathing      2  0     difference (0.95, 0.0, 0.0)\nstatic         1  0     top        (1.0,  0.0, 0.0)', 'autostart': 'false', 'frame_rate': '24', 'run_on_error': 'true'}, 'led_effect rainbow': {'leds': '\nneopixel:sb_leds', 'autostart': 'true', 'frame_rate': '24', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.0, 0.3, 0.0),(0.0, 0.0, 0.3)'}, 'led_effect set_nozzle_leds': {'leds': '\nneopixel:sb_leds (2,3)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nstatic         0  0     top        (0.5,  0.5, 0.5)'}, 'led_effect set_logo_leds': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nstatic         0  0     top        (1.0,  1.0, 1.0)'}, 'gcode_macro set_logo_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds STOP=1'}, 'gcode_macro set_logo_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1'}, 'gcode_macro status_off': {'gcode': '\nSTOP_LED_EFFECTS'}, 'gcode_macro status_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=rainbow'}, 'gcode_macro status_part_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready'}, 'gcode_macro status_busy': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_busy\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_heating\nSET_LED_EFFECT EFFECT=sb_nozzle_heating'}, 'gcode_macro status_cooling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cooling\nSET_LED_EFFECT EFFECT=sb_nozzle_cooling'}, 'gcode_macro status_leveling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_leveling\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_homing\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cleaning\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_meshing\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_calibrating_z\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_printing\nset_nozzle_leds_on'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_sam4e8e_00313753364B37373032303038303139-if00'}, 'mcu EBBCan': {'canbus_uuid': '8250861450f7'}, 'adxl345': {'cs_pin': 'EBBCan:gpio1', 'spi_software_sclk_pin': 'EBBCan:gpio2', 'spi_software_mosi_pin': 'EBBCan:gpio0', 'spi_software_miso_pin': 'EBBCan:gpio3', 'axes_map': 'z,-y,x'}, 'resonance_tester': {'probe_points': '100, 100, 20', 'accel_chip': 'adxl345'}, 'input_shaper': {'shaper_freq_x': '45', 'shaper_type': '3hump_ei'}, 'stepper_x': {'step_pin': 'PD6', 'dir_pin': '!PD11', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'EBBCan:gpio24', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '40'}, 'tmc2660 stepper_x': {'cs_pin': 'PD14', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'stepper_y': {'step_pin': 'PD7', 'dir_pin': '!PD12', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'PA2', 'position_endstop': '0', 'position_max': '225', 'position_min': '-4', 'homing_speed': '35', 'homing_retract_dist': '0'}, 'tmc2660 stepper_y': {'cs_pin': 'PC9', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'stepper_z': {'step_pin': 'PD8', 'dir_pin': '!PD13', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '230', 'position_min': '-2.5', 'homing_speed': '35.0'}, 'tmc2660 stepper_z': {'cs_pin': 'PC10', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'adc_temperature my_thermistor': {'temperature1': '0', 'resistance1': '1000', 'temperature2': '80', 'resistance2': '1309'}, 'extruder': {'step_pin': '!EBBCan:gpio18', 'dir_pin': 'EBBCan:gpio19', 'enable_pin': '!EBBCan:gpio17', 'microsteps': '32', 'rotation_distance': '21.63024711', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'pressure_advance': '0.065', 'pressure_advance_smooth_time': '0.02', 'gear_ratio': '50:10', 'heater_pin': 'EBBCan:gpio7', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'EBBCan:gpio27', 'control': 'pid', 'pid_kp': '21.527', 'pid_ki': '1.063', 'pid_kd': '108.982', 'min_temp': '0', 'max_temp': '250'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan:gpio20', 'run_current': '0.5', 'stealthchop_threshold': '999999'}, 'filament_switch_sensor extruder': {'pause_on_runout': 'True', 'switch_pin': 'EBBCan:gpio21'}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu'}, 'thermistor chamber_temp': {'temperature1': '25', 'resistance1': '10000', 'beta': '3950'}, 'heater_bed': {'heater_pin': '!PA19', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PC13', 'control': 'watermark', 'min_temp': '0', 'max_temp': '120'}, 'heater_fan extruder_fan': {'pin': 'EBBCan:gpio13', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'EBBCan:gpio14', 'cycle_time': '.08', 'kick_start_time': '.25'}, 'probe': {'pin': '^EBBCan:gpio22', 'x_offset': '0', 'y_offset': '0', 'samples': '3', 'samples_result': 'median', 'sample_retract_dist': '3', 'samples_tolerance': '0.015', 'samples_tolerance_retries': '3', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'z_offset': '-1.350'}, 'homing_override': {'axes': 'z', 'set_position_z': '0', 'gcode': '\nstatus_homing\nG90\nG0 Z5 F500\nG28 X0 Y0\nG0 X150 Y100 F9000\nG28 Z0\nG0 Z5 F500\nstatus_ready'}, 'bed_mesh': {'speed': '150', 'horizontal_move_z': '5', 'mesh_min': '25,35.0', 'mesh_max': '225.0,220', 'probe_count': '6,6', 'algorithm': 'bicubic', 'fade_start': '1', 'fade_end': '10', 'fade_target': '0'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\nSTATUS_HEATING\nM109 S150\nSTATUS_HOMING\nM117 Homing...\nG28 Y0 X0 Z0\nSTATUS_MESHING\nBED_MESH_CALIBRATE ADAPTIVE=1\n\n\n\n\n\n\n\n\n\n\n\nSTATUS_HEATING\nM107\nM117 Heating bed\nM190 S{ params.BED }\nM117 Heating nozzle\nM109 S{target_extruder}\nstatus_ready\nG1 Z15.0 F600\nG1 X125 Y125 F3000\nG92 E0\nG1 F9000\nstatus_printing\nM117 Printing...'}, 'gcode_macro PRINT_END': {'gcode': '\nstatus_busy\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\n\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y} F3600\nM117 Finished!\nstatus_off'}, 'gcode_macro M600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state'}, 'printer': {'kinematics': 'corexz', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '5', 'max_z_accel': '100'}, 'force_move': {'enable_force_move': 'true'}, 'exclude_object': {}, 'bed_mesh default': {'version': '1', 'points': '\n-0.100000, -0.025000, 0.012500, 0.037500, 0.125000, 0.212500\n-0.187500, -0.100000, -0.025000, 0.025000, 0.100000, 0.212500\n-0.262500, -0.162500, -0.075000, -0.012500, 0.075000, 0.187500\n-0.262500, -0.162500, -0.087500, -0.000000, 0.100000, 0.237500\n-0.200000, -0.100000, -0.012500, 0.062500, 0.200000, 0.350000\n-0.225000, -0.075000, -0.000000, 0.087500, 0.225000, 0.387500', 'x_count': '6', 'y_count': '6', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'bicubic', 'tension': '0.2', 'min_x': '25.0', 'max_x': '225.0', 'min_y': '35.0', 'max_y': '220.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_sam4e8e_00313753364B37373032303038303139-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu ebbcan': {'canbus_uuid': '8250861450f7', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set allow_park = client.park_at_cancel | default(false) | lower == \'true\' %}\n{% set retract = client.cancel_retract | default(5.0) | abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x | default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y | default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x | length > 0 or park_y | length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro | default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set idle_timeout = client.idle_timeout | default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE | default(1) | int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro | default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move | default(velocity) %}\n{% set runout_resume = True if client.runout_sensor | default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state | upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro | default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY | default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'neopixel sb_leds': {'pin': 'EBBCan:gpio16', 'chain_count': 3, 'color_order': ['GRB'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'led_effect sb_logo_busy': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1,0,0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_cleaning': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.02, 0.5)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_calibrating_z': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 0.35)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1, 0.18, 0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0, 0, 1)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_homing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.6, 0.2)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_leveling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.5, 0.1, 0.4)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_meshing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.2, 1.0, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_printing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.3, 0.3, 0.0),(0.3, 0.1, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_standby': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.01, 0.01, 0.01)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 1.0, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_nozzle_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1.0, 0.18, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 1.0, 0.1)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_standby': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.6, 0.0, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.6, 1.0, 0.0, 0.1)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_critical_error': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': True, 'endstops': '', 'layers': '\nstrobe         1  1.5   add        (1.0,  1.0, 1.0)\nbreathing      2  0     difference (0.95, 0.0, 0.0)\nstatic         1  0     top        (1.0,  0.0, 0.0)', 'leds': '\nneopixel:sb_leds'}, 'led_effect rainbow': {'frame_rate': 24.0, 'autostart': True, 'run_on_error': False, 'endstops': '', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.0, 0.3, 0.0),(0.0, 0.0, 0.3)', 'leds': '\nneopixel:sb_leds'}, 'led_effect set_nozzle_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic         0  0     top        (0.5,  0.5, 0.5)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect set_logo_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic         0  0     top        (1.0,  1.0, 1.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'gcode_macro set_logo_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nSTOP_LED_EFFECTS', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=rainbow', 'description': 'G-Code macro'}, 'gcode_macro status_part_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_busy\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_heating\nSET_LED_EFFECT EFFECT=sb_nozzle_heating', 'description': 'G-Code macro'}, 'gcode_macro status_cooling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cooling\nSET_LED_EFFECT EFFECT=sb_nozzle_cooling', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_leveling\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_homing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cleaning\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_meshing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_calibrating_z\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_printing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'adxl345': {'axes_map': ['z', '-y', 'x'], 'rate': 3200, 'cs_pin': 'EBBCan:gpio1', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'EBBCan:gpio2', 'spi_software_miso_pin': 'EBBCan:gpio3', 'spi_software_mosi_pin': 'EBBCan:gpio0'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[100.0, 100.0, 20.0]], 'accel_chip': 'adxl345'}, 'input_shaper': {'shaper_type': '3hump_ei', 'shaper_type_x': '3hump_ei', 'damping_ratio_x': 0.1, 'shaper_freq_x': 45.0, 'shaper_type_y': '3hump_ei', 'damping_ratio_y': 0.1, 'shaper_freq_y': 0.0}, 'tmc2660 stepper_x': {'cs_pin': 'PD14', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PD6', 'dir_pin': '!PD11', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'EBBCan:gpio24', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2660 stepper_y': {'cs_pin': 'PC9', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PD7', 'dir_pin': '!PD12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'PA2', 'position_endstop': 0.0, 'position_min': -4.0, 'position_max': 225.0, 'homing_speed': 35.0, 'second_homing_speed': 17.5, 'homing_retract_speed': 35.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2660 stepper_z': {'cs_pin': 'PC10', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PD8', 'dir_pin': '!PD13', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -2.5, 'position_max': 230.0, 'homing_speed': 35.0, 'second_homing_speed': 17.5, 'homing_retract_speed': 35.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'adc_temperature my_thermistor': {'resistance1': 1000.0, 'temperature1': 0.0, 'temperature2': 80.0, 'resistance2': 1309.0}, 'tmc2209 extruder': {'uart_pin': 'EBBCan:gpio20', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan:gpio27', 'min_temp': 0.0, 'max_temp': 250.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 21.527, 'pid_ki': 1.063, 'pid_kd': 108.982, 'heater_pin': 'EBBCan:gpio7', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': '!EBBCan:gpio18', 'pressure_advance': 0.065, 'pressure_advance_smooth_time': 0.02, 'dir_pin': 'EBBCan:gpio19', 'rotation_distance': 21.63024711, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!EBBCan:gpio17'}, 'filament_switch_sensor extruder': {'switch_pin': 'EBBCan:gpio21', 'pause_on_runout': True, 'runout_gcode': '', 'pause_delay': 0.5, 'event_delay': 3.0}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'thermistor chamber_temp': {'temperature1': 25.0, 'resistance1': 10000.0, 'beta': 3950.0}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PC13', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'watermark', 'max_delta': 2.0, 'heater_pin': '!PA19', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan extruder_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'EBBCan:gpio13', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.25, 'off_below': 0.0, 'cycle_time': 0.08, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'EBBCan:gpio14'}, 'probe': {'z_offset': -1.35, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': '^EBBCan:gpio22', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 3, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.015, 'samples_tolerance_retries': 3}, 'homing_override': {'set_position_z': 0.0, 'axes': 'z', 'gcode': '\nstatus_homing\nG90\nG0 Z5 F500\nG28 X0 Y0\nG0 X150 Y100 F9000\nG28 Z0\nG0 Z5 F500\nstatus_ready'}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [6, 6], 'mesh_min': [25.0, 35.0], 'mesh_max': [225.0, 220.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 150.0, 'fade_start': 1.0, 'fade_end': 10.0, 'fade_target': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[-0.1, -0.025, 0.0125, 0.0375, 0.125, 0.2125], [-0.1875, -0.1, -0.025, 0.025, 0.1, 0.2125], [-0.2625, -0.1625, -0.075, -0.0125, 0.075, 0.1875], [-0.2625, -0.1625, -0.0875, -0.0, 0.1, 0.2375], [-0.2, -0.1, -0.0125, 0.0625, 0.2, 0.35], [-0.225, -0.075, -0.0, 0.0875, 0.225, 0.3875]], 'min_x': 25.0, 'max_x': 225.0, 'min_y': 35.0, 'max_y': 220.0, 'x_count': 6, 'y_count': 6, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'bicubic', 'tension': 0.2}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\nSTATUS_HEATING\nM109 S150\nSTATUS_HOMING\nM117 Homing...\nG28 Y0 X0 Z0\nSTATUS_MESHING\nBED_MESH_CALIBRATE ADAPTIVE=1\n\n\n\n\n\n\n\n\n\n\n\nSTATUS_HEATING\nM107\nM117 Heating bed\nM190 S{ params.BED }\nM117 Heating nozzle\nM109 S{target_extruder}\nstatus_ready\nG1 Z15.0 F600\nG1 X125 Y125 F3000\nG92 E0\nG1 F9000\nstatus_printing\nM117 Printing...', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\nstatus_busy\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\n\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y} F3600\nM117 Finished!\nstatus_off', 'description': 'G-Code macro'}, 'gcode_macro m600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state', 'description': 'G-Code macro'}, 'force_move': {'enable_force_move': True}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexz', 'max_z_velocity': 5.0, 'max_z_accel': 100.0}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-04-27 20:51:31,319 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-04-27 20:51:31,321 [printer.py:reinit()] - Klipper version: v0.12.0-132-ge37b007f-dirty
2024-04-27 20:51:31,321 [printer.py:reinit()] - # Extruders: 1
2024-04-27 20:51:31,321 [printer.py:reinit()] - # Temperature devices: 2
2024-04-27 20:51:31,321 [printer.py:reinit()] - # Fans: 2
2024-04-27 20:51:31,321 [printer.py:reinit()] - # Output pins: 0
2024-04-27 20:51:31,321 [printer.py:reinit()] - # Leds: 20
2024-04-27 20:51:31,322 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-04-27 20:51:31,339 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-04-27 20:51:31,341 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor mcu&fan&heater_fan extruder_fan&filament_switch_sensor extruder&neopixel sb_leds
2024-04-27 20:51:31,622 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-04-27 20:51:31,622 [screen.py:init_klipper()] - Printer initialized
2024-04-27 20:51:31,622 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2024-04-27 20:51:31,623 [printer.py:change_state()] - Adding callback for state: ready
2024-04-27 20:51:31,722 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-04-27 20:51:31,725 [screen.py:_load_panel()] - Loading panel: main_menu
2024-04-27 20:51:31,836 [main_menu.py:__init__()] - ### Making MainMenu
2024-04-27 20:51:31,852 [main_menu.py:add_device()] - Adding device: extruder
2024-04-27 20:51:31,860 [main_menu.py:add_device()] - Adding device: heater_bed
2024-04-27 20:51:31,870 [main_menu.py:add_device()] - Adding device: temperature_sensor mcu
2024-04-27 20:51:31,921 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-27 20:51:31,923 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-27 20:51:31,952 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor mcu', 'heater_bed', 'extruder']
2024-04-27 20:51:31,954 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-04-27 20:51:31,967 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-04-27 20:51:45,095 [functions.py:log_start()] - --------------------KlipperScreen Log Start--------------------
2024-04-27 20:51:45,096 [functions.py:log_start()] - KlipperScreen Version: v0.3.9-50-gdaed9a0
2024-04-27 20:51:45,096 [functions.py:log_start()] - Python version: 3.11
2024-04-27 20:51:45,234 [config.py:get_config_file_location()] - Passed config (-c): .
2024-04-27 20:51:45,235 [config.py:__init__()] - Config path location: /home/pi/printer_data/config/KlipperScreen.conf
2024-04-27 20:51:45,261 [config.py:log_config()] -  ===== Config File =====

=======================
2024-04-27 20:51:45,263 [config.py:__init__()] - ====== Saved Def ======

[main]
use_dpms = False
print_sort_dir = date_desc

=======================
2024-04-27 20:51:45,264 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2024-04-27 20:51:45,372 [config.py:create_translations()] - Selected lang: None OS lang: en_GB
2024-04-27 20:51:45,372 [config.py:install_language()] - Using lang en
2024-04-27 20:51:45,393 [screen.py:__init__()] - Monitors: 1 using number: 0
2024-04-27 20:51:45,395 [screen.py:__init__()] - Wayland: False Display name: :100
2024-04-27 20:51:45,397 [screen.py:__init__()] - Screen resolution: 984x540
2024-04-27 20:51:45,399 [KlippyGtk.py:__init__()] - Font size: 18.6 (medium)
2024-04-27 20:51:46,336 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2024-04-27 20:51:46,337 [screen.py:set_screenblanking_timeout()] - Not using DPMS
2024-04-27 20:51:46,346 [screen.py:initial_connection()] - Default printer: None
2024-04-27 20:51:46,415 [screen.py:connect_printer()] - Connecting to printer: Printer
2024-04-27 20:51:46,416 [screen.py:_load_panel()] - Loading panel: splash_screen
2024-04-27 20:51:46,483 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-04-27 20:51:46,501 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-04-27 20:51:46,501 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-27 20:51:46,518 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/access/oneshot_token
2024-04-27 20:51:46,530 [KlippyWebsocket.py:connect()] - Starting websocket thread
2024-04-27 20:51:46,539 [_logging.py:info()] - Websocket connected
2024-04-27 20:51:46,540 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2024-04-27 20:51:46,545 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-27 20:51:46,557 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-04-27 20:51:46,568 [printer.py:configure_cameras()] - Cameras: []
2024-04-27 20:51:46,569 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'ready', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'update_manager', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 3, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-04-27 20:51:46,569 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-04-27 20:51:46,582 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-04-27 20:51:46,855 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set allow_park = client.park_at_cancel | default(false) | lower == \'true\' %}\n{% set retract = client.cancel_retract | default(5.0) | abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x | default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y | default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x | length > 0 or park_y | length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro | default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set idle_timeout = client.idle_timeout | default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE | default(1) | int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro | default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move | default(velocity) %}\n{% set runout_resume = True if client.runout_sensor | default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state | upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro | default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY | default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}"}, 'neopixel sb_leds': {'pin': 'EBBCan:gpio16', 'chain_count': '3', 'color_order': 'GRB', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0'}, 'led_effect sb_logo_busy': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (1,0,0)'}, 'led_effect sb_logo_cleaning': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.02, 0.5)'}, 'led_effect sb_logo_calibrating_z': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 0.35)'}, 'led_effect sb_logo_heating': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nbreathing  3 1 top (1, 0.18, 0)'}, 'led_effect sb_logo_cooling': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nbreathing  3 1 top (0, 0, 1)'}, 'led_effect sb_logo_homing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.6, 0.2)'}, 'led_effect sb_logo_leveling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.5, 0.1, 0.4)'}, 'led_effect sb_logo_meshing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.2, 1.0, 0.0)'}, 'led_effect sb_logo_printing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.3, 0.3, 0.0),(0.3, 0.1, 0.0)'}, 'led_effect sb_logo_standby': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.01, 0.01, 0.01)'}, 'led_effect sb_logo_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 1.0, 0.0)'}, 'led_effect sb_nozzle_heating': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (1.0, 0.18, 0.0, 0.0)'}, 'led_effect sb_nozzle_cooling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 1.0, 0.1)'}, 'led_effect sb_nozzle_standby': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.6, 0.0, 0.0, 0.0)'}, 'led_effect sb_nozzle_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.6, 1.0, 0.0, 0.1)'}, 'led_effect sb_critical_error': {'leds': '\nneopixel:sb_leds', 'layers': '\nstrobe         1  1.5   add        (1.0,  1.0, 1.0)\nbreathing      2  0     difference (0.95, 0.0, 0.0)\nstatic         1  0     top        (1.0,  0.0, 0.0)', 'autostart': 'false', 'frame_rate': '24', 'run_on_error': 'true'}, 'led_effect rainbow': {'leds': '\nneopixel:sb_leds', 'autostart': 'true', 'frame_rate': '24', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.0, 0.3, 0.0),(0.0, 0.0, 0.3)'}, 'led_effect set_nozzle_leds': {'leds': '\nneopixel:sb_leds (2,3)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nstatic         0  0     top        (0.5,  0.5, 0.5)'}, 'led_effect set_logo_leds': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nstatic         0  0     top        (1.0,  1.0, 1.0)'}, 'gcode_macro set_logo_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds STOP=1'}, 'gcode_macro set_logo_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1'}, 'gcode_macro status_off': {'gcode': '\nSTOP_LED_EFFECTS'}, 'gcode_macro status_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=rainbow'}, 'gcode_macro status_part_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready'}, 'gcode_macro status_busy': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_busy\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_heating\nSET_LED_EFFECT EFFECT=sb_nozzle_heating'}, 'gcode_macro status_cooling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cooling\nSET_LED_EFFECT EFFECT=sb_nozzle_cooling'}, 'gcode_macro status_leveling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_leveling\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_homing\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cleaning\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_meshing\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_calibrating_z\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_printing\nset_nozzle_leds_on'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_sam4e8e_00313753364B37373032303038303139-if00'}, 'mcu EBBCan': {'canbus_uuid': '8250861450f7'}, 'adxl345': {'cs_pin': 'EBBCan:gpio1', 'spi_software_sclk_pin': 'EBBCan:gpio2', 'spi_software_mosi_pin': 'EBBCan:gpio0', 'spi_software_miso_pin': 'EBBCan:gpio3', 'axes_map': 'z,-y,x'}, 'resonance_tester': {'probe_points': '100, 100, 20', 'accel_chip': 'adxl345'}, 'input_shaper': {'shaper_freq_x': '45', 'shaper_type': '3hump_ei'}, 'stepper_x': {'step_pin': 'PD6', 'dir_pin': '!PD11', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'EBBCan:gpio24', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '40'}, 'tmc2660 stepper_x': {'cs_pin': 'PD14', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'stepper_y': {'step_pin': 'PD7', 'dir_pin': '!PD12', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'PA2', 'position_endstop': '0', 'position_max': '225', 'position_min': '-4', 'homing_speed': '35', 'homing_retract_dist': '0'}, 'tmc2660 stepper_y': {'cs_pin': 'PC9', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'stepper_z': {'step_pin': 'PD8', 'dir_pin': '!PD13', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '230', 'position_min': '-2.5', 'homing_speed': '35.0'}, 'tmc2660 stepper_z': {'cs_pin': 'PC10', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'adc_temperature my_thermistor': {'temperature1': '0', 'resistance1': '1000', 'temperature2': '80', 'resistance2': '1309'}, 'extruder': {'step_pin': '!EBBCan:gpio18', 'dir_pin': 'EBBCan:gpio19', 'enable_pin': '!EBBCan:gpio17', 'microsteps': '32', 'rotation_distance': '21.63024711', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'pressure_advance': '0.065', 'pressure_advance_smooth_time': '0.02', 'gear_ratio': '50:10', 'heater_pin': 'EBBCan:gpio7', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'EBBCan:gpio27', 'control': 'pid', 'pid_kp': '21.527', 'pid_ki': '1.063', 'pid_kd': '108.982', 'min_temp': '0', 'max_temp': '250'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan:gpio20', 'run_current': '0.5', 'stealthchop_threshold': '999999'}, 'filament_switch_sensor extruder': {'pause_on_runout': 'True', 'switch_pin': 'EBBCan:gpio21'}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu'}, 'thermistor chamber_temp': {'temperature1': '25', 'resistance1': '10000', 'beta': '3950'}, 'heater_bed': {'heater_pin': '!PA19', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PC13', 'control': 'watermark', 'min_temp': '0', 'max_temp': '120'}, 'heater_fan extruder_fan': {'pin': 'EBBCan:gpio13', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'EBBCan:gpio14', 'cycle_time': '.08', 'kick_start_time': '.25'}, 'probe': {'pin': '^EBBCan:gpio22', 'x_offset': '0', 'y_offset': '0', 'samples': '3', 'samples_result': 'median', 'sample_retract_dist': '3', 'samples_tolerance': '0.015', 'samples_tolerance_retries': '3', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'z_offset': '-1.350'}, 'homing_override': {'axes': 'z', 'set_position_z': '0', 'gcode': '\nstatus_homing\nG90\nG0 Z5 F500\nG28 X0 Y0\nG0 X150 Y100 F9000\nG28 Z0\nG0 Z5 F500\nstatus_ready'}, 'bed_mesh': {'speed': '150', 'horizontal_move_z': '5', 'mesh_min': '25,35.0', 'mesh_max': '225.0,220', 'probe_count': '6,6', 'algorithm': 'bicubic', 'fade_start': '1', 'fade_end': '10', 'fade_target': '0'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\nSTATUS_HEATING\nM109 S150\nSTATUS_HOMING\nM117 Homing...\nG28 Y0 X0 Z0\nSTATUS_MESHING\nBED_MESH_CALIBRATE ADAPTIVE=1\n\n\n\n\n\n\n\n\n\n\n\nSTATUS_HEATING\nM107\nM117 Heating bed\nM190 S{ params.BED }\nM117 Heating nozzle\nM109 S{target_extruder}\nstatus_ready\nG1 Z15.0 F600\nG1 X125 Y125 F3000\nG92 E0\nG1 F9000\nstatus_printing\nM117 Printing...'}, 'gcode_macro PRINT_END': {'gcode': '\nstatus_busy\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\n\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y} F3600\nM117 Finished!\nstatus_off'}, 'gcode_macro M600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state'}, 'printer': {'kinematics': 'corexz', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '5', 'max_z_accel': '100'}, 'force_move': {'enable_force_move': 'true'}, 'exclude_object': {}, 'bed_mesh default': {'version': '1', 'points': '\n-0.100000, -0.025000, 0.012500, 0.037500, 0.125000, 0.212500\n-0.187500, -0.100000, -0.025000, 0.025000, 0.100000, 0.212500\n-0.262500, -0.162500, -0.075000, -0.012500, 0.075000, 0.187500\n-0.262500, -0.162500, -0.087500, -0.000000, 0.100000, 0.237500\n-0.200000, -0.100000, -0.012500, 0.062500, 0.200000, 0.350000\n-0.225000, -0.075000, -0.000000, 0.087500, 0.225000, 0.387500', 'x_count': '6', 'y_count': '6', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'bicubic', 'tension': '0.2', 'min_x': '25.0', 'max_x': '225.0', 'min_y': '35.0', 'max_y': '220.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_sam4e8e_00313753364B37373032303038303139-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu ebbcan': {'canbus_uuid': '8250861450f7', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set allow_park = client.park_at_cancel | default(false) | lower == \'true\' %}\n{% set retract = client.cancel_retract | default(5.0) | abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x | default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y | default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x | length > 0 or park_y | length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro | default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set idle_timeout = client.idle_timeout | default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE | default(1) | int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro | default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move | default(velocity) %}\n{% set runout_resume = True if client.runout_sensor | default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state | upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro | default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY | default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'neopixel sb_leds': {'pin': 'EBBCan:gpio16', 'chain_count': 3, 'color_order': ['GRB'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'led_effect sb_logo_busy': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1,0,0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_cleaning': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.02, 0.5)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_calibrating_z': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 0.35)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1, 0.18, 0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0, 0, 1)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_homing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.6, 0.2)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_leveling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.5, 0.1, 0.4)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_meshing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.2, 1.0, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_printing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.3, 0.3, 0.0),(0.3, 0.1, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_standby': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.01, 0.01, 0.01)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 1.0, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_nozzle_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1.0, 0.18, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 1.0, 0.1)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_standby': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.6, 0.0, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.6, 1.0, 0.0, 0.1)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_critical_error': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': True, 'endstops': '', 'layers': '\nstrobe         1  1.5   add        (1.0,  1.0, 1.0)\nbreathing      2  0     difference (0.95, 0.0, 0.0)\nstatic         1  0     top        (1.0,  0.0, 0.0)', 'leds': '\nneopixel:sb_leds'}, 'led_effect rainbow': {'frame_rate': 24.0, 'autostart': True, 'run_on_error': False, 'endstops': '', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.0, 0.3, 0.0),(0.0, 0.0, 0.3)', 'leds': '\nneopixel:sb_leds'}, 'led_effect set_nozzle_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic         0  0     top        (0.5,  0.5, 0.5)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect set_logo_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic         0  0     top        (1.0,  1.0, 1.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'gcode_macro set_logo_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nSTOP_LED_EFFECTS', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=rainbow', 'description': 'G-Code macro'}, 'gcode_macro status_part_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_busy\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_heating\nSET_LED_EFFECT EFFECT=sb_nozzle_heating', 'description': 'G-Code macro'}, 'gcode_macro status_cooling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cooling\nSET_LED_EFFECT EFFECT=sb_nozzle_cooling', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_leveling\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_homing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cleaning\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_meshing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_calibrating_z\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_printing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'adxl345': {'axes_map': ['z', '-y', 'x'], 'rate': 3200, 'cs_pin': 'EBBCan:gpio1', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'EBBCan:gpio2', 'spi_software_miso_pin': 'EBBCan:gpio3', 'spi_software_mosi_pin': 'EBBCan:gpio0'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[100.0, 100.0, 20.0]], 'accel_chip': 'adxl345'}, 'input_shaper': {'shaper_type': '3hump_ei', 'shaper_type_x': '3hump_ei', 'damping_ratio_x': 0.1, 'shaper_freq_x': 45.0, 'shaper_type_y': '3hump_ei', 'damping_ratio_y': 0.1, 'shaper_freq_y': 0.0}, 'tmc2660 stepper_x': {'cs_pin': 'PD14', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PD6', 'dir_pin': '!PD11', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'EBBCan:gpio24', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2660 stepper_y': {'cs_pin': 'PC9', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PD7', 'dir_pin': '!PD12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'PA2', 'position_endstop': 0.0, 'position_min': -4.0, 'position_max': 225.0, 'homing_speed': 35.0, 'second_homing_speed': 17.5, 'homing_retract_speed': 35.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2660 stepper_z': {'cs_pin': 'PC10', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PD8', 'dir_pin': '!PD13', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -2.5, 'position_max': 230.0, 'homing_speed': 35.0, 'second_homing_speed': 17.5, 'homing_retract_speed': 35.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'adc_temperature my_thermistor': {'resistance1': 1000.0, 'temperature1': 0.0, 'temperature2': 80.0, 'resistance2': 1309.0}, 'tmc2209 extruder': {'uart_pin': 'EBBCan:gpio20', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan:gpio27', 'min_temp': 0.0, 'max_temp': 250.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 21.527, 'pid_ki': 1.063, 'pid_kd': 108.982, 'heater_pin': 'EBBCan:gpio7', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': '!EBBCan:gpio18', 'pressure_advance': 0.065, 'pressure_advance_smooth_time': 0.02, 'dir_pin': 'EBBCan:gpio19', 'rotation_distance': 21.63024711, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!EBBCan:gpio17'}, 'filament_switch_sensor extruder': {'switch_pin': 'EBBCan:gpio21', 'pause_on_runout': True, 'runout_gcode': '', 'pause_delay': 0.5, 'event_delay': 3.0}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'thermistor chamber_temp': {'temperature1': 25.0, 'resistance1': 10000.0, 'beta': 3950.0}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PC13', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'watermark', 'max_delta': 2.0, 'heater_pin': '!PA19', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan extruder_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'EBBCan:gpio13', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.25, 'off_below': 0.0, 'cycle_time': 0.08, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'EBBCan:gpio14'}, 'probe': {'z_offset': -1.35, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': '^EBBCan:gpio22', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 3, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.015, 'samples_tolerance_retries': 3}, 'homing_override': {'set_position_z': 0.0, 'axes': 'z', 'gcode': '\nstatus_homing\nG90\nG0 Z5 F500\nG28 X0 Y0\nG0 X150 Y100 F9000\nG28 Z0\nG0 Z5 F500\nstatus_ready'}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [6, 6], 'mesh_min': [25.0, 35.0], 'mesh_max': [225.0, 220.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 150.0, 'fade_start': 1.0, 'fade_end': 10.0, 'fade_target': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[-0.1, -0.025, 0.0125, 0.0375, 0.125, 0.2125], [-0.1875, -0.1, -0.025, 0.025, 0.1, 0.2125], [-0.2625, -0.1625, -0.075, -0.0125, 0.075, 0.1875], [-0.2625, -0.1625, -0.0875, -0.0, 0.1, 0.2375], [-0.2, -0.1, -0.0125, 0.0625, 0.2, 0.35], [-0.225, -0.075, -0.0, 0.0875, 0.225, 0.3875]], 'min_x': 25.0, 'max_x': 225.0, 'min_y': 35.0, 'max_y': 220.0, 'x_count': 6, 'y_count': 6, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'bicubic', 'tension': 0.2}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\nSTATUS_HEATING\nM109 S150\nSTATUS_HOMING\nM117 Homing...\nG28 Y0 X0 Z0\nSTATUS_MESHING\nBED_MESH_CALIBRATE ADAPTIVE=1\n\n\n\n\n\n\n\n\n\n\n\nSTATUS_HEATING\nM107\nM117 Heating bed\nM190 S{ params.BED }\nM117 Heating nozzle\nM109 S{target_extruder}\nstatus_ready\nG1 Z15.0 F600\nG1 X125 Y125 F3000\nG92 E0\nG1 F9000\nstatus_printing\nM117 Printing...', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\nstatus_busy\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\n\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y} F3600\nM117 Finished!\nstatus_off', 'description': 'G-Code macro'}, 'gcode_macro m600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state', 'description': 'G-Code macro'}, 'force_move': {'enable_force_move': True}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexz', 'max_z_velocity': 5.0, 'max_z_accel': 100.0}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-04-27 20:51:46,858 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-04-27 20:51:46,860 [printer.py:reinit()] - Klipper version: v0.12.0-132-ge37b007f-dirty
2024-04-27 20:51:46,860 [printer.py:reinit()] - # Extruders: 1
2024-04-27 20:51:46,860 [printer.py:reinit()] - # Temperature devices: 2
2024-04-27 20:51:46,860 [printer.py:reinit()] - # Fans: 2
2024-04-27 20:51:46,860 [printer.py:reinit()] - # Output pins: 0
2024-04-27 20:51:46,861 [printer.py:reinit()] - # Leds: 20
2024-04-27 20:51:46,861 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-04-27 20:51:46,879 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-04-27 20:51:46,881 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor mcu&fan&heater_fan extruder_fan&filament_switch_sensor extruder&neopixel sb_leds
2024-04-27 20:51:47,161 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-04-27 20:51:47,161 [screen.py:init_klipper()] - Printer initialized
2024-04-27 20:51:47,162 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2024-04-27 20:51:47,162 [printer.py:change_state()] - Adding callback for state: ready
2024-04-27 20:51:47,700 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-04-27 20:51:47,703 [screen.py:_load_panel()] - Loading panel: main_menu
2024-04-27 20:51:47,814 [main_menu.py:__init__()] - ### Making MainMenu
2024-04-27 20:51:47,829 [main_menu.py:add_device()] - Adding device: extruder
2024-04-27 20:51:47,838 [main_menu.py:add_device()] - Adding device: heater_bed
2024-04-27 20:51:47,848 [main_menu.py:add_device()] - Adding device: temperature_sensor mcu
2024-04-27 20:51:47,899 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-27 20:51:47,901 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-27 20:51:47,930 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor mcu', 'heater_bed', 'extruder']
2024-04-27 20:51:47,932 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-04-27 20:51:47,945 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-04-27 20:52:25,906 [functions.py:log_start()] - --------------------KlipperScreen Log Start--------------------
2024-04-27 20:52:25,907 [functions.py:log_start()] - KlipperScreen Version: v0.3.9-50-gdaed9a0
2024-04-27 20:52:25,907 [functions.py:log_start()] - Python version: 3.11
2024-04-27 20:52:26,047 [config.py:get_config_file_location()] - Passed config (-c): .
2024-04-27 20:52:26,048 [config.py:__init__()] - Config path location: /home/pi/printer_data/config/KlipperScreen.conf
2024-04-27 20:52:26,074 [config.py:log_config()] -  ===== Config File =====

=======================
2024-04-27 20:52:26,076 [config.py:__init__()] - ====== Saved Def ======

[main]
use_dpms = False
print_sort_dir = date_desc

=======================
2024-04-27 20:52:26,077 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2024-04-27 20:52:26,183 [config.py:create_translations()] - Selected lang: None OS lang: en_GB
2024-04-27 20:52:26,187 [config.py:install_language()] - Using lang en
2024-04-27 20:52:26,207 [screen.py:__init__()] - Monitors: 1 using number: 0
2024-04-27 20:52:26,208 [screen.py:__init__()] - Wayland: False Display name: :100
2024-04-27 20:52:26,211 [screen.py:__init__()] - Screen resolution: 984x540
2024-04-27 20:52:26,213 [KlippyGtk.py:__init__()] - Font size: 18.6 (medium)
2024-04-27 20:52:27,116 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2024-04-27 20:52:27,117 [screen.py:set_screenblanking_timeout()] - Not using DPMS
2024-04-27 20:52:27,125 [screen.py:initial_connection()] - Default printer: None
2024-04-27 20:52:27,191 [screen.py:connect_printer()] - Connecting to printer: Printer
2024-04-27 20:52:27,191 [screen.py:_load_panel()] - Loading panel: splash_screen
2024-04-27 20:52:27,260 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-04-27 20:52:27,278 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-04-27 20:52:27,278 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-27 20:52:27,296 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/access/oneshot_token
2024-04-27 20:52:27,308 [KlippyWebsocket.py:connect()] - Starting websocket thread
2024-04-27 20:52:27,317 [_logging.py:info()] - Websocket connected
2024-04-27 20:52:27,318 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2024-04-27 20:52:27,365 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-27 20:52:27,378 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-04-27 20:52:27,389 [printer.py:configure_cameras()] - Cameras: []
2024-04-27 20:52:27,389 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'ready', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'update_manager', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 4, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-04-27 20:52:27,390 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-04-27 20:52:27,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-04-27 20:52:27,461 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set allow_park = client.park_at_cancel | default(false) | lower == \'true\' %}\n{% set retract = client.cancel_retract | default(5.0) | abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x | default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y | default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x | length > 0 or park_y | length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro | default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set idle_timeout = client.idle_timeout | default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE | default(1) | int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro | default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move | default(velocity) %}\n{% set runout_resume = True if client.runout_sensor | default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state | upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro | default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY | default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}"}, 'neopixel sb_leds': {'pin': 'EBBCan:gpio16', 'chain_count': '3', 'color_order': 'GRB', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0'}, 'led_effect sb_logo_busy': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (1,0,0)'}, 'led_effect sb_logo_cleaning': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.02, 0.5)'}, 'led_effect sb_logo_calibrating_z': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 0.35)'}, 'led_effect sb_logo_heating': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nbreathing  3 1 top (1, 0.18, 0)'}, 'led_effect sb_logo_cooling': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nbreathing  3 1 top (0, 0, 1)'}, 'led_effect sb_logo_homing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.6, 0.2)'}, 'led_effect sb_logo_leveling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.5, 0.1, 0.4)'}, 'led_effect sb_logo_meshing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.2, 1.0, 0.0)'}, 'led_effect sb_logo_printing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.3, 0.3, 0.0),(0.3, 0.1, 0.0)'}, 'led_effect sb_logo_standby': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.01, 0.01, 0.01)'}, 'led_effect sb_logo_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 1.0, 0.0)'}, 'led_effect sb_nozzle_heating': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (1.0, 0.18, 0.0, 0.0)'}, 'led_effect sb_nozzle_cooling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 1.0, 0.1)'}, 'led_effect sb_nozzle_standby': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.6, 0.0, 0.0, 0.0)'}, 'led_effect sb_nozzle_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.6, 1.0, 0.0, 0.1)'}, 'led_effect sb_critical_error': {'leds': '\nneopixel:sb_leds', 'layers': '\nstrobe         1  1.5   add        (1.0,  1.0, 1.0)\nbreathing      2  0     difference (0.95, 0.0, 0.0)\nstatic         1  0     top        (1.0,  0.0, 0.0)', 'autostart': 'false', 'frame_rate': '24', 'run_on_error': 'true'}, 'led_effect rainbow': {'leds': '\nneopixel:sb_leds', 'autostart': 'true', 'frame_rate': '24', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.0, 0.3, 0.0),(0.0, 0.0, 0.3)'}, 'led_effect set_nozzle_leds': {'leds': '\nneopixel:sb_leds (2,3)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nstatic         0  0     top        (0.5,  0.5, 0.5)'}, 'led_effect set_logo_leds': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nstatic         0  0     top        (1.0,  1.0, 1.0)'}, 'gcode_macro set_logo_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds STOP=1'}, 'gcode_macro set_logo_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1'}, 'gcode_macro status_off': {'gcode': '\nSTOP_LED_EFFECTS'}, 'gcode_macro status_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=rainbow'}, 'gcode_macro status_part_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready'}, 'gcode_macro status_busy': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_busy\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_heating\nSET_LED_EFFECT EFFECT=sb_nozzle_heating'}, 'gcode_macro status_cooling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cooling\nSET_LED_EFFECT EFFECT=sb_nozzle_cooling'}, 'gcode_macro status_leveling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_leveling\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_homing\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cleaning\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_meshing\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_calibrating_z\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_printing\nset_nozzle_leds_on'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_sam4e8e_00313753364B37373032303038303139-if00'}, 'mcu EBBCan': {'canbus_uuid': '8250861450f7'}, 'adxl345': {'cs_pin': 'EBBCan:gpio1', 'spi_software_sclk_pin': 'EBBCan:gpio2', 'spi_software_mosi_pin': 'EBBCan:gpio0', 'spi_software_miso_pin': 'EBBCan:gpio3', 'axes_map': 'z,-y,x'}, 'resonance_tester': {'probe_points': '100, 100, 20', 'accel_chip': 'adxl345'}, 'input_shaper': {'shaper_freq_x': '45', 'shaper_type': '3hump_ei'}, 'stepper_x': {'step_pin': 'PD6', 'dir_pin': '!PD11', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'EBBCan:gpio24', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '40'}, 'tmc2660 stepper_x': {'cs_pin': 'PD14', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'stepper_y': {'step_pin': 'PD7', 'dir_pin': '!PD12', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'PA2', 'position_endstop': '0', 'position_max': '225', 'position_min': '-4', 'homing_speed': '35', 'homing_retract_dist': '0'}, 'tmc2660 stepper_y': {'cs_pin': 'PC9', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'stepper_z': {'step_pin': 'PD8', 'dir_pin': '!PD13', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '230', 'position_min': '-2.5', 'homing_speed': '35.0'}, 'tmc2660 stepper_z': {'cs_pin': 'PC10', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'adc_temperature my_thermistor': {'temperature1': '0', 'resistance1': '1000', 'temperature2': '80', 'resistance2': '1309'}, 'extruder': {'step_pin': '!EBBCan:gpio18', 'dir_pin': 'EBBCan:gpio19', 'enable_pin': '!EBBCan:gpio17', 'microsteps': '32', 'rotation_distance': '21.63024711', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'pressure_advance': '0.065', 'pressure_advance_smooth_time': '0.02', 'gear_ratio': '50:10', 'heater_pin': 'EBBCan:gpio7', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'EBBCan:gpio27', 'control': 'pid', 'pid_kp': '21.527', 'pid_ki': '1.063', 'pid_kd': '108.982', 'min_temp': '0', 'max_temp': '250'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan:gpio20', 'run_current': '0.5', 'stealthchop_threshold': '999999'}, 'filament_switch_sensor extruder': {'pause_on_runout': 'True', 'switch_pin': 'EBBCan:gpio21'}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu'}, 'thermistor chamber_temp': {'temperature1': '25', 'resistance1': '10000', 'beta': '3950'}, 'heater_bed': {'heater_pin': '!PA19', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PC13', 'control': 'watermark', 'min_temp': '0', 'max_temp': '120'}, 'heater_fan extruder_fan': {'pin': 'EBBCan:gpio13', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'EBBCan:gpio14', 'cycle_time': '.08', 'kick_start_time': '.25'}, 'probe': {'pin': '^EBBCan:gpio22', 'x_offset': '0', 'y_offset': '0', 'samples': '3', 'samples_result': 'median', 'sample_retract_dist': '3', 'samples_tolerance': '0.015', 'samples_tolerance_retries': '3', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'z_offset': '-1.350'}, 'homing_override': {'axes': 'z', 'set_position_z': '0', 'gcode': '\nstatus_homing\nG90\nG0 Z5 F500\nG28 X0 Y0\nG0 X150 Y100 F9000\nG28 Z0\nG0 Z5 F500\nstatus_ready'}, 'bed_mesh': {'speed': '150', 'horizontal_move_z': '5', 'mesh_min': '25,35.0', 'mesh_max': '225.0,220', 'probe_count': '6,6', 'algorithm': 'bicubic', 'fade_start': '1', 'fade_end': '10', 'fade_target': '0'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\nSTATUS_HEATING\nM109 S150\nSTATUS_HOMING\nM117 Homing...\nG28 Y0 X0 Z0\nSTATUS_MESHING\nBED_MESH_CALIBRATE ADAPTIVE=1\n\n\n\n\n\n\n\n\n\n\n\nSTATUS_HEATING\nM107\nM117 Heating bed\nM190 S{ params.BED }\nM117 Heating nozzle\nM109 S{target_extruder}\nstatus_ready\nG1 Z15.0 F600\nG1 X125 Y125 F3000\nG92 E0\nG1 F9000\nstatus_printing\nM117 Printing...'}, 'gcode_macro PRINT_END': {'gcode': '\nstatus_busy\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\n\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y} F3600\nM117 Finished!\nstatus_off'}, 'gcode_macro M600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state'}, 'printer': {'kinematics': 'corexz', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '5', 'max_z_accel': '100'}, 'force_move': {'enable_force_move': 'true'}, 'exclude_object': {}, 'bed_mesh default': {'version': '1', 'points': '\n-0.100000, -0.025000, 0.012500, 0.037500, 0.125000, 0.212500\n-0.187500, -0.100000, -0.025000, 0.025000, 0.100000, 0.212500\n-0.262500, -0.162500, -0.075000, -0.012500, 0.075000, 0.187500\n-0.262500, -0.162500, -0.087500, -0.000000, 0.100000, 0.237500\n-0.200000, -0.100000, -0.012500, 0.062500, 0.200000, 0.350000\n-0.225000, -0.075000, -0.000000, 0.087500, 0.225000, 0.387500', 'x_count': '6', 'y_count': '6', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'bicubic', 'tension': '0.2', 'min_x': '25.0', 'max_x': '225.0', 'min_y': '35.0', 'max_y': '220.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_sam4e8e_00313753364B37373032303038303139-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu ebbcan': {'canbus_uuid': '8250861450f7', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set allow_park = client.park_at_cancel | default(false) | lower == \'true\' %}\n{% set retract = client.cancel_retract | default(5.0) | abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x | default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y | default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x | length > 0 or park_y | length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro | default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set idle_timeout = client.idle_timeout | default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE | default(1) | int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro | default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move | default(velocity) %}\n{% set runout_resume = True if client.runout_sensor | default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state | upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro | default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY | default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'neopixel sb_leds': {'pin': 'EBBCan:gpio16', 'chain_count': 3, 'color_order': ['GRB'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'led_effect sb_logo_busy': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1,0,0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_cleaning': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.02, 0.5)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_calibrating_z': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 0.35)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1, 0.18, 0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0, 0, 1)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_homing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.6, 0.2)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_leveling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.5, 0.1, 0.4)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_meshing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.2, 1.0, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_printing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.3, 0.3, 0.0),(0.3, 0.1, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_standby': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.01, 0.01, 0.01)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 1.0, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_nozzle_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1.0, 0.18, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 1.0, 0.1)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_standby': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.6, 0.0, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.6, 1.0, 0.0, 0.1)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_critical_error': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': True, 'endstops': '', 'layers': '\nstrobe         1  1.5   add        (1.0,  1.0, 1.0)\nbreathing      2  0     difference (0.95, 0.0, 0.0)\nstatic         1  0     top        (1.0,  0.0, 0.0)', 'leds': '\nneopixel:sb_leds'}, 'led_effect rainbow': {'frame_rate': 24.0, 'autostart': True, 'run_on_error': False, 'endstops': '', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.0, 0.3, 0.0),(0.0, 0.0, 0.3)', 'leds': '\nneopixel:sb_leds'}, 'led_effect set_nozzle_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic         0  0     top        (0.5,  0.5, 0.5)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect set_logo_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic         0  0     top        (1.0,  1.0, 1.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'gcode_macro set_logo_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nSTOP_LED_EFFECTS', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=rainbow', 'description': 'G-Code macro'}, 'gcode_macro status_part_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_busy\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_heating\nSET_LED_EFFECT EFFECT=sb_nozzle_heating', 'description': 'G-Code macro'}, 'gcode_macro status_cooling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cooling\nSET_LED_EFFECT EFFECT=sb_nozzle_cooling', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_leveling\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_homing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cleaning\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_meshing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_calibrating_z\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_printing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'adxl345': {'axes_map': ['z', '-y', 'x'], 'rate': 3200, 'cs_pin': 'EBBCan:gpio1', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'EBBCan:gpio2', 'spi_software_miso_pin': 'EBBCan:gpio3', 'spi_software_mosi_pin': 'EBBCan:gpio0'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[100.0, 100.0, 20.0]], 'accel_chip': 'adxl345'}, 'input_shaper': {'shaper_type': '3hump_ei', 'shaper_type_x': '3hump_ei', 'damping_ratio_x': 0.1, 'shaper_freq_x': 45.0, 'shaper_type_y': '3hump_ei', 'damping_ratio_y': 0.1, 'shaper_freq_y': 0.0}, 'tmc2660 stepper_x': {'cs_pin': 'PD14', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PD6', 'dir_pin': '!PD11', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'EBBCan:gpio24', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2660 stepper_y': {'cs_pin': 'PC9', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PD7', 'dir_pin': '!PD12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'PA2', 'position_endstop': 0.0, 'position_min': -4.0, 'position_max': 225.0, 'homing_speed': 35.0, 'second_homing_speed': 17.5, 'homing_retract_speed': 35.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2660 stepper_z': {'cs_pin': 'PC10', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PD8', 'dir_pin': '!PD13', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -2.5, 'position_max': 230.0, 'homing_speed': 35.0, 'second_homing_speed': 17.5, 'homing_retract_speed': 35.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'adc_temperature my_thermistor': {'resistance1': 1000.0, 'temperature1': 0.0, 'temperature2': 80.0, 'resistance2': 1309.0}, 'tmc2209 extruder': {'uart_pin': 'EBBCan:gpio20', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan:gpio27', 'min_temp': 0.0, 'max_temp': 250.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 21.527, 'pid_ki': 1.063, 'pid_kd': 108.982, 'heater_pin': 'EBBCan:gpio7', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': '!EBBCan:gpio18', 'pressure_advance': 0.065, 'pressure_advance_smooth_time': 0.02, 'dir_pin': 'EBBCan:gpio19', 'rotation_distance': 21.63024711, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!EBBCan:gpio17'}, 'filament_switch_sensor extruder': {'switch_pin': 'EBBCan:gpio21', 'pause_on_runout': True, 'runout_gcode': '', 'pause_delay': 0.5, 'event_delay': 3.0}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'thermistor chamber_temp': {'temperature1': 25.0, 'resistance1': 10000.0, 'beta': 3950.0}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PC13', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'watermark', 'max_delta': 2.0, 'heater_pin': '!PA19', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan extruder_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'EBBCan:gpio13', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.25, 'off_below': 0.0, 'cycle_time': 0.08, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'EBBCan:gpio14'}, 'probe': {'z_offset': -1.35, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': '^EBBCan:gpio22', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 3, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.015, 'samples_tolerance_retries': 3}, 'homing_override': {'set_position_z': 0.0, 'axes': 'z', 'gcode': '\nstatus_homing\nG90\nG0 Z5 F500\nG28 X0 Y0\nG0 X150 Y100 F9000\nG28 Z0\nG0 Z5 F500\nstatus_ready'}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [6, 6], 'mesh_min': [25.0, 35.0], 'mesh_max': [225.0, 220.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 150.0, 'fade_start': 1.0, 'fade_end': 10.0, 'fade_target': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[-0.1, -0.025, 0.0125, 0.0375, 0.125, 0.2125], [-0.1875, -0.1, -0.025, 0.025, 0.1, 0.2125], [-0.2625, -0.1625, -0.075, -0.0125, 0.075, 0.1875], [-0.2625, -0.1625, -0.0875, -0.0, 0.1, 0.2375], [-0.2, -0.1, -0.0125, 0.0625, 0.2, 0.35], [-0.225, -0.075, -0.0, 0.0875, 0.225, 0.3875]], 'min_x': 25.0, 'max_x': 225.0, 'min_y': 35.0, 'max_y': 220.0, 'x_count': 6, 'y_count': 6, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'bicubic', 'tension': 0.2}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\nSTATUS_HEATING\nM109 S150\nSTATUS_HOMING\nM117 Homing...\nG28 Y0 X0 Z0\nSTATUS_MESHING\nBED_MESH_CALIBRATE ADAPTIVE=1\n\n\n\n\n\n\n\n\n\n\n\nSTATUS_HEATING\nM107\nM117 Heating bed\nM190 S{ params.BED }\nM117 Heating nozzle\nM109 S{target_extruder}\nstatus_ready\nG1 Z15.0 F600\nG1 X125 Y125 F3000\nG92 E0\nG1 F9000\nstatus_printing\nM117 Printing...', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\nstatus_busy\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\n\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y} F3600\nM117 Finished!\nstatus_off', 'description': 'G-Code macro'}, 'gcode_macro m600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state', 'description': 'G-Code macro'}, 'force_move': {'enable_force_move': True}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexz', 'max_z_velocity': 5.0, 'max_z_accel': 100.0}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-04-27 20:52:27,464 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-04-27 20:52:27,466 [printer.py:reinit()] - Klipper version: v0.12.0-132-ge37b007f-dirty
2024-04-27 20:52:27,466 [printer.py:reinit()] - # Extruders: 1
2024-04-27 20:52:27,466 [printer.py:reinit()] - # Temperature devices: 2
2024-04-27 20:52:27,466 [printer.py:reinit()] - # Fans: 2
2024-04-27 20:52:27,466 [printer.py:reinit()] - # Output pins: 0
2024-04-27 20:52:27,467 [printer.py:reinit()] - # Leds: 20
2024-04-27 20:52:27,467 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-04-27 20:52:27,484 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-04-27 20:52:27,487 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor mcu&fan&heater_fan extruder_fan&filament_switch_sensor extruder&neopixel sb_leds
2024-04-27 20:52:27,762 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-04-27 20:52:27,763 [screen.py:init_klipper()] - Printer initialized
2024-04-27 20:52:27,763 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2024-04-27 20:52:27,763 [printer.py:change_state()] - Adding callback for state: ready
2024-04-27 20:52:27,844 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-04-27 20:52:27,848 [screen.py:_load_panel()] - Loading panel: main_menu
2024-04-27 20:52:27,960 [main_menu.py:__init__()] - ### Making MainMenu
2024-04-27 20:52:27,975 [main_menu.py:add_device()] - Adding device: extruder
2024-04-27 20:52:27,983 [main_menu.py:add_device()] - Adding device: heater_bed
2024-04-27 20:52:27,992 [main_menu.py:add_device()] - Adding device: temperature_sensor mcu
2024-04-27 20:52:28,044 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-27 20:52:28,046 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-27 20:52:28,076 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor mcu', 'heater_bed', 'extruder']
2024-04-27 20:52:28,078 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-04-27 20:52:28,093 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-04-27 20:52:43,313 [functions.py:log_start()] - --------------------KlipperScreen Log Start--------------------
2024-04-27 20:52:43,314 [functions.py:log_start()] - KlipperScreen Version: v0.3.9-50-gdaed9a0
2024-04-27 20:52:43,314 [functions.py:log_start()] - Python version: 3.11
2024-04-27 20:52:43,484 [config.py:get_config_file_location()] - Passed config (-c): .
2024-04-27 20:52:43,485 [config.py:__init__()] - Config path location: /home/pi/printer_data/config/KlipperScreen.conf
2024-04-27 20:52:43,509 [config.py:log_config()] -  ===== Config File =====

=======================
2024-04-27 20:52:43,511 [config.py:__init__()] - ====== Saved Def ======

[main]
use_dpms = False
print_sort_dir = date_desc

=======================
2024-04-27 20:52:43,512 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2024-04-27 20:52:43,622 [config.py:create_translations()] - Selected lang: None OS lang: en_GB
2024-04-27 20:52:43,622 [config.py:install_language()] - Using lang en
2024-04-27 20:52:43,642 [screen.py:__init__()] - Monitors: 1 using number: 0
2024-04-27 20:52:43,643 [screen.py:__init__()] - Wayland: False Display name: :100
2024-04-27 20:52:43,647 [screen.py:__init__()] - Screen resolution: 984x540
2024-04-27 20:52:43,648 [KlippyGtk.py:__init__()] - Font size: 18.6 (medium)
2024-04-27 20:52:44,600 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2024-04-27 20:52:44,600 [screen.py:set_screenblanking_timeout()] - Not using DPMS
2024-04-27 20:52:44,609 [screen.py:initial_connection()] - Default printer: None
2024-04-27 20:52:44,677 [screen.py:connect_printer()] - Connecting to printer: Printer
2024-04-27 20:52:44,677 [screen.py:_load_panel()] - Loading panel: splash_screen
2024-04-27 20:52:44,748 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-04-27 20:52:44,766 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-04-27 20:52:44,766 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-27 20:52:44,784 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/access/oneshot_token
2024-04-27 20:52:44,797 [KlippyWebsocket.py:connect()] - Starting websocket thread
2024-04-27 20:52:44,806 [_logging.py:info()] - Websocket connected
2024-04-27 20:52:44,807 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2024-04-27 20:52:44,853 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-27 20:52:44,866 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-04-27 20:52:44,878 [printer.py:configure_cameras()] - Cameras: []
2024-04-27 20:52:44,878 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'ready', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'update_manager', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 4, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-04-27 20:52:44,878 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-04-27 20:52:44,891 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-04-27 20:52:45,001 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set allow_park = client.park_at_cancel | default(false) | lower == \'true\' %}\n{% set retract = client.cancel_retract | default(5.0) | abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x | default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y | default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x | length > 0 or park_y | length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro | default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set idle_timeout = client.idle_timeout | default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE | default(1) | int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro | default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move | default(velocity) %}\n{% set runout_resume = True if client.runout_sensor | default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state | upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro | default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY | default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}"}, 'neopixel sb_leds': {'pin': 'EBBCan:gpio16', 'chain_count': '3', 'color_order': 'GRB', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0'}, 'led_effect sb_logo_busy': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (1,0,0)'}, 'led_effect sb_logo_cleaning': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.02, 0.5)'}, 'led_effect sb_logo_calibrating_z': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 0.35)'}, 'led_effect sb_logo_heating': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nbreathing  3 1 top (1, 0.18, 0)'}, 'led_effect sb_logo_cooling': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nbreathing  3 1 top (0, 0, 1)'}, 'led_effect sb_logo_homing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.6, 0.2)'}, 'led_effect sb_logo_leveling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.5, 0.1, 0.4)'}, 'led_effect sb_logo_meshing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.2, 1.0, 0.0)'}, 'led_effect sb_logo_printing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.3, 0.3, 0.0),(0.3, 0.1, 0.0)'}, 'led_effect sb_logo_standby': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.01, 0.01, 0.01)'}, 'led_effect sb_logo_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 1.0, 0.0)'}, 'led_effect sb_nozzle_heating': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (1.0, 0.18, 0.0, 0.0)'}, 'led_effect sb_nozzle_cooling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 1.0, 0.1)'}, 'led_effect sb_nozzle_standby': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.6, 0.0, 0.0, 0.0)'}, 'led_effect sb_nozzle_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.6, 1.0, 0.0, 0.1)'}, 'led_effect sb_critical_error': {'leds': '\nneopixel:sb_leds', 'layers': '\nstrobe         1  1.5   add        (1.0,  1.0, 1.0)\nbreathing      2  0     difference (0.95, 0.0, 0.0)\nstatic         1  0     top        (1.0,  0.0, 0.0)', 'autostart': 'false', 'frame_rate': '24', 'run_on_error': 'true'}, 'led_effect rainbow': {'leds': '\nneopixel:sb_leds', 'autostart': 'true', 'frame_rate': '24', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.0, 0.3, 0.0),(0.0, 0.0, 0.3)'}, 'led_effect set_nozzle_leds': {'leds': '\nneopixel:sb_leds (2,3)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nstatic         0  0     top        (0.5,  0.5, 0.5)'}, 'led_effect set_logo_leds': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nstatic         0  0     top        (1.0,  1.0, 1.0)'}, 'gcode_macro set_logo_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds STOP=1'}, 'gcode_macro set_logo_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1'}, 'gcode_macro status_off': {'gcode': '\nSTOP_LED_EFFECTS'}, 'gcode_macro status_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=rainbow'}, 'gcode_macro status_part_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready'}, 'gcode_macro status_busy': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_busy\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_heating\nSET_LED_EFFECT EFFECT=sb_nozzle_heating'}, 'gcode_macro status_cooling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cooling\nSET_LED_EFFECT EFFECT=sb_nozzle_cooling'}, 'gcode_macro status_leveling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_leveling\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_homing\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cleaning\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_meshing\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_calibrating_z\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_printing\nset_nozzle_leds_on'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_sam4e8e_00313753364B37373032303038303139-if00'}, 'mcu EBBCan': {'canbus_uuid': '8250861450f7'}, 'adxl345': {'cs_pin': 'EBBCan:gpio1', 'spi_software_sclk_pin': 'EBBCan:gpio2', 'spi_software_mosi_pin': 'EBBCan:gpio0', 'spi_software_miso_pin': 'EBBCan:gpio3', 'axes_map': 'z,-y,x'}, 'resonance_tester': {'probe_points': '100, 100, 20', 'accel_chip': 'adxl345'}, 'input_shaper': {'shaper_freq_x': '45', 'shaper_type': '3hump_ei'}, 'stepper_x': {'step_pin': 'PD6', 'dir_pin': '!PD11', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'EBBCan:gpio24', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '40'}, 'tmc2660 stepper_x': {'cs_pin': 'PD14', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'stepper_y': {'step_pin': 'PD7', 'dir_pin': '!PD12', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'PA2', 'position_endstop': '0', 'position_max': '225', 'position_min': '-4', 'homing_speed': '35', 'homing_retract_dist': '0'}, 'tmc2660 stepper_y': {'cs_pin': 'PC9', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'stepper_z': {'step_pin': 'PD8', 'dir_pin': '!PD13', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '230', 'position_min': '-2.5', 'homing_speed': '35.0'}, 'tmc2660 stepper_z': {'cs_pin': 'PC10', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'adc_temperature my_thermistor': {'temperature1': '0', 'resistance1': '1000', 'temperature2': '80', 'resistance2': '1309'}, 'extruder': {'step_pin': '!EBBCan:gpio18', 'dir_pin': 'EBBCan:gpio19', 'enable_pin': '!EBBCan:gpio17', 'microsteps': '32', 'rotation_distance': '21.63024711', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'pressure_advance': '0.065', 'pressure_advance_smooth_time': '0.02', 'gear_ratio': '50:10', 'heater_pin': 'EBBCan:gpio7', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'EBBCan:gpio27', 'control': 'pid', 'pid_kp': '21.527', 'pid_ki': '1.063', 'pid_kd': '108.982', 'min_temp': '0', 'max_temp': '250'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan:gpio20', 'run_current': '0.5', 'stealthchop_threshold': '999999'}, 'filament_switch_sensor extruder': {'pause_on_runout': 'True', 'switch_pin': 'EBBCan:gpio21'}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu'}, 'thermistor chamber_temp': {'temperature1': '25', 'resistance1': '10000', 'beta': '3950'}, 'heater_bed': {'heater_pin': '!PA19', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PC13', 'control': 'watermark', 'min_temp': '0', 'max_temp': '120'}, 'heater_fan extruder_fan': {'pin': 'EBBCan:gpio13', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'EBBCan:gpio14', 'cycle_time': '.08', 'kick_start_time': '.25'}, 'probe': {'pin': '^EBBCan:gpio22', 'x_offset': '0', 'y_offset': '0', 'samples': '3', 'samples_result': 'median', 'sample_retract_dist': '3', 'samples_tolerance': '0.015', 'samples_tolerance_retries': '3', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'z_offset': '-1.350'}, 'homing_override': {'axes': 'z', 'set_position_z': '0', 'gcode': '\nstatus_homing\nG90\nG0 Z5 F500\nG28 X0 Y0\nG0 X150 Y100 F9000\nG28 Z0\nG0 Z5 F500\nstatus_ready'}, 'bed_mesh': {'speed': '150', 'horizontal_move_z': '5', 'mesh_min': '25,35.0', 'mesh_max': '225.0,220', 'probe_count': '6,6', 'algorithm': 'bicubic', 'fade_start': '1', 'fade_end': '10', 'fade_target': '0'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\nSTATUS_HEATING\nM109 S150\nSTATUS_HOMING\nM117 Homing...\nG28 Y0 X0 Z0\nSTATUS_MESHING\nBED_MESH_CALIBRATE ADAPTIVE=1\n\n\n\n\n\n\n\n\n\n\n\nSTATUS_HEATING\nM107\nM117 Heating bed\nM190 S{ params.BED }\nM117 Heating nozzle\nM109 S{target_extruder}\nstatus_ready\nG1 Z15.0 F600\nG1 X125 Y125 F3000\nG92 E0\nG1 F9000\nstatus_printing\nM117 Printing...'}, 'gcode_macro PRINT_END': {'gcode': '\nstatus_busy\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\n\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y} F3600\nM117 Finished!\nstatus_off'}, 'gcode_macro M600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state'}, 'printer': {'kinematics': 'corexz', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '5', 'max_z_accel': '100'}, 'force_move': {'enable_force_move': 'true'}, 'exclude_object': {}, 'bed_mesh default': {'version': '1', 'points': '\n-0.100000, -0.025000, 0.012500, 0.037500, 0.125000, 0.212500\n-0.187500, -0.100000, -0.025000, 0.025000, 0.100000, 0.212500\n-0.262500, -0.162500, -0.075000, -0.012500, 0.075000, 0.187500\n-0.262500, -0.162500, -0.087500, -0.000000, 0.100000, 0.237500\n-0.200000, -0.100000, -0.012500, 0.062500, 0.200000, 0.350000\n-0.225000, -0.075000, -0.000000, 0.087500, 0.225000, 0.387500', 'x_count': '6', 'y_count': '6', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'bicubic', 'tension': '0.2', 'min_x': '25.0', 'max_x': '225.0', 'min_y': '35.0', 'max_y': '220.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_sam4e8e_00313753364B37373032303038303139-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu ebbcan': {'canbus_uuid': '8250861450f7', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set allow_park = client.park_at_cancel | default(false) | lower == \'true\' %}\n{% set retract = client.cancel_retract | default(5.0) | abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x | default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y | default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x | length > 0 or park_y | length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro | default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set idle_timeout = client.idle_timeout | default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE | default(1) | int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro | default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move | default(velocity) %}\n{% set runout_resume = True if client.runout_sensor | default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state | upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro | default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY | default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'neopixel sb_leds': {'pin': 'EBBCan:gpio16', 'chain_count': 3, 'color_order': ['GRB'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'led_effect sb_logo_busy': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1,0,0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_cleaning': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.02, 0.5)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_calibrating_z': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 0.35)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1, 0.18, 0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0, 0, 1)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_homing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.6, 0.2)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_leveling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.5, 0.1, 0.4)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_meshing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.2, 1.0, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_printing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.3, 0.3, 0.0),(0.3, 0.1, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_standby': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.01, 0.01, 0.01)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 1.0, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_nozzle_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1.0, 0.18, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 1.0, 0.1)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_standby': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.6, 0.0, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.6, 1.0, 0.0, 0.1)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_critical_error': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': True, 'endstops': '', 'layers': '\nstrobe         1  1.5   add        (1.0,  1.0, 1.0)\nbreathing      2  0     difference (0.95, 0.0, 0.0)\nstatic         1  0     top        (1.0,  0.0, 0.0)', 'leds': '\nneopixel:sb_leds'}, 'led_effect rainbow': {'frame_rate': 24.0, 'autostart': True, 'run_on_error': False, 'endstops': '', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.0, 0.3, 0.0),(0.0, 0.0, 0.3)', 'leds': '\nneopixel:sb_leds'}, 'led_effect set_nozzle_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic         0  0     top        (0.5,  0.5, 0.5)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect set_logo_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic         0  0     top        (1.0,  1.0, 1.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'gcode_macro set_logo_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nSTOP_LED_EFFECTS', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=rainbow', 'description': 'G-Code macro'}, 'gcode_macro status_part_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_busy\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_heating\nSET_LED_EFFECT EFFECT=sb_nozzle_heating', 'description': 'G-Code macro'}, 'gcode_macro status_cooling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cooling\nSET_LED_EFFECT EFFECT=sb_nozzle_cooling', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_leveling\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_homing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cleaning\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_meshing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_calibrating_z\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_printing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'adxl345': {'axes_map': ['z', '-y', 'x'], 'rate': 3200, 'cs_pin': 'EBBCan:gpio1', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'EBBCan:gpio2', 'spi_software_miso_pin': 'EBBCan:gpio3', 'spi_software_mosi_pin': 'EBBCan:gpio0'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[100.0, 100.0, 20.0]], 'accel_chip': 'adxl345'}, 'input_shaper': {'shaper_type': '3hump_ei', 'shaper_type_x': '3hump_ei', 'damping_ratio_x': 0.1, 'shaper_freq_x': 45.0, 'shaper_type_y': '3hump_ei', 'damping_ratio_y': 0.1, 'shaper_freq_y': 0.0}, 'tmc2660 stepper_x': {'cs_pin': 'PD14', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PD6', 'dir_pin': '!PD11', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'EBBCan:gpio24', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2660 stepper_y': {'cs_pin': 'PC9', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PD7', 'dir_pin': '!PD12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'PA2', 'position_endstop': 0.0, 'position_min': -4.0, 'position_max': 225.0, 'homing_speed': 35.0, 'second_homing_speed': 17.5, 'homing_retract_speed': 35.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2660 stepper_z': {'cs_pin': 'PC10', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PD8', 'dir_pin': '!PD13', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -2.5, 'position_max': 230.0, 'homing_speed': 35.0, 'second_homing_speed': 17.5, 'homing_retract_speed': 35.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'adc_temperature my_thermistor': {'resistance1': 1000.0, 'temperature1': 0.0, 'temperature2': 80.0, 'resistance2': 1309.0}, 'tmc2209 extruder': {'uart_pin': 'EBBCan:gpio20', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan:gpio27', 'min_temp': 0.0, 'max_temp': 250.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 21.527, 'pid_ki': 1.063, 'pid_kd': 108.982, 'heater_pin': 'EBBCan:gpio7', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': '!EBBCan:gpio18', 'pressure_advance': 0.065, 'pressure_advance_smooth_time': 0.02, 'dir_pin': 'EBBCan:gpio19', 'rotation_distance': 21.63024711, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!EBBCan:gpio17'}, 'filament_switch_sensor extruder': {'switch_pin': 'EBBCan:gpio21', 'pause_on_runout': True, 'runout_gcode': '', 'pause_delay': 0.5, 'event_delay': 3.0}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'thermistor chamber_temp': {'temperature1': 25.0, 'resistance1': 10000.0, 'beta': 3950.0}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PC13', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'watermark', 'max_delta': 2.0, 'heater_pin': '!PA19', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan extruder_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'EBBCan:gpio13', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.25, 'off_below': 0.0, 'cycle_time': 0.08, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'EBBCan:gpio14'}, 'probe': {'z_offset': -1.35, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': '^EBBCan:gpio22', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 3, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.015, 'samples_tolerance_retries': 3}, 'homing_override': {'set_position_z': 0.0, 'axes': 'z', 'gcode': '\nstatus_homing\nG90\nG0 Z5 F500\nG28 X0 Y0\nG0 X150 Y100 F9000\nG28 Z0\nG0 Z5 F500\nstatus_ready'}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [6, 6], 'mesh_min': [25.0, 35.0], 'mesh_max': [225.0, 220.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 150.0, 'fade_start': 1.0, 'fade_end': 10.0, 'fade_target': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[-0.1, -0.025, 0.0125, 0.0375, 0.125, 0.2125], [-0.1875, -0.1, -0.025, 0.025, 0.1, 0.2125], [-0.2625, -0.1625, -0.075, -0.0125, 0.075, 0.1875], [-0.2625, -0.1625, -0.0875, -0.0, 0.1, 0.2375], [-0.2, -0.1, -0.0125, 0.0625, 0.2, 0.35], [-0.225, -0.075, -0.0, 0.0875, 0.225, 0.3875]], 'min_x': 25.0, 'max_x': 225.0, 'min_y': 35.0, 'max_y': 220.0, 'x_count': 6, 'y_count': 6, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'bicubic', 'tension': 0.2}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\nSTATUS_HEATING\nM109 S150\nSTATUS_HOMING\nM117 Homing...\nG28 Y0 X0 Z0\nSTATUS_MESHING\nBED_MESH_CALIBRATE ADAPTIVE=1\n\n\n\n\n\n\n\n\n\n\n\nSTATUS_HEATING\nM107\nM117 Heating bed\nM190 S{ params.BED }\nM117 Heating nozzle\nM109 S{target_extruder}\nstatus_ready\nG1 Z15.0 F600\nG1 X125 Y125 F3000\nG92 E0\nG1 F9000\nstatus_printing\nM117 Printing...', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\nstatus_busy\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\n\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y} F3600\nM117 Finished!\nstatus_off', 'description': 'G-Code macro'}, 'gcode_macro m600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state', 'description': 'G-Code macro'}, 'force_move': {'enable_force_move': True}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexz', 'max_z_velocity': 5.0, 'max_z_accel': 100.0}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-04-27 20:52:45,004 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-04-27 20:52:45,006 [printer.py:reinit()] - Klipper version: v0.12.0-132-ge37b007f-dirty
2024-04-27 20:52:45,006 [printer.py:reinit()] - # Extruders: 1
2024-04-27 20:52:45,006 [printer.py:reinit()] - # Temperature devices: 2
2024-04-27 20:52:45,006 [printer.py:reinit()] - # Fans: 2
2024-04-27 20:52:45,007 [printer.py:reinit()] - # Output pins: 0
2024-04-27 20:52:45,007 [printer.py:reinit()] - # Leds: 20
2024-04-27 20:52:45,007 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-04-27 20:52:45,024 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-04-27 20:52:45,026 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor mcu&fan&heater_fan extruder_fan&filament_switch_sensor extruder&neopixel sb_leds
2024-04-27 20:52:45,307 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-04-27 20:52:45,307 [screen.py:init_klipper()] - Printer initialized
2024-04-27 20:52:45,307 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2024-04-27 20:52:45,308 [printer.py:change_state()] - Adding callback for state: ready
2024-04-27 20:52:45,437 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-04-27 20:52:45,441 [screen.py:_load_panel()] - Loading panel: main_menu
2024-04-27 20:52:45,557 [main_menu.py:__init__()] - ### Making MainMenu
2024-04-27 20:52:45,572 [main_menu.py:add_device()] - Adding device: extruder
2024-04-27 20:52:45,581 [main_menu.py:add_device()] - Adding device: heater_bed
2024-04-27 20:52:45,590 [main_menu.py:add_device()] - Adding device: temperature_sensor mcu
2024-04-27 20:52:45,642 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-27 20:52:45,644 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-27 20:52:45,674 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor mcu', 'heater_bed', 'extruder']
2024-04-27 20:52:45,677 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-04-27 20:52:45,689 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-04-27 20:53:27,980 [functions.py:log_start()] - --------------------KlipperScreen Log Start--------------------
2024-04-27 20:53:27,980 [functions.py:log_start()] - KlipperScreen Version: v0.3.9-50-gdaed9a0
2024-04-27 20:53:27,980 [functions.py:log_start()] - Python version: 3.11
2024-04-27 20:53:28,121 [config.py:get_config_file_location()] - Passed config (-c): .
2024-04-27 20:53:28,122 [config.py:__init__()] - Config path location: /home/pi/printer_data/config/KlipperScreen.conf
2024-04-27 20:53:28,148 [config.py:log_config()] -  ===== Config File =====

=======================
2024-04-27 20:53:28,150 [config.py:__init__()] - ====== Saved Def ======

[main]
use_dpms = False
print_sort_dir = date_desc

=======================
2024-04-27 20:53:28,151 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2024-04-27 20:53:28,259 [config.py:create_translations()] - Selected lang: None OS lang: en_GB
2024-04-27 20:53:28,260 [config.py:install_language()] - Using lang en
2024-04-27 20:53:28,280 [screen.py:__init__()] - Monitors: 1 using number: 0
2024-04-27 20:53:28,281 [screen.py:__init__()] - Wayland: False Display name: :100
2024-04-27 20:53:28,284 [screen.py:__init__()] - Screen resolution: 984x540
2024-04-27 20:53:28,285 [KlippyGtk.py:__init__()] - Font size: 18.6 (medium)
2024-04-27 20:53:28,966 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2024-04-27 20:53:28,967 [screen.py:set_screenblanking_timeout()] - Not using DPMS
2024-04-27 20:53:28,975 [screen.py:initial_connection()] - Default printer: None
2024-04-27 20:53:29,042 [screen.py:connect_printer()] - Connecting to printer: Printer
2024-04-27 20:53:29,043 [screen.py:_load_panel()] - Loading panel: splash_screen
2024-04-27 20:53:29,111 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-04-27 20:53:29,130 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-04-27 20:53:29,130 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-27 20:53:29,148 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/access/oneshot_token
2024-04-27 20:53:29,160 [KlippyWebsocket.py:connect()] - Starting websocket thread
2024-04-27 20:53:29,170 [_logging.py:info()] - Websocket connected
2024-04-27 20:53:29,170 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2024-04-27 20:53:29,217 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-27 20:53:29,229 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-04-27 20:53:29,240 [printer.py:configure_cameras()] - Cameras: []
2024-04-27 20:53:29,241 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'ready', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'update_manager', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 4, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-04-27 20:53:29,241 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-04-27 20:53:29,255 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-04-27 20:53:29,358 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set allow_park = client.park_at_cancel | default(false) | lower == \'true\' %}\n{% set retract = client.cancel_retract | default(5.0) | abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x | default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y | default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x | length > 0 or park_y | length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro | default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set idle_timeout = client.idle_timeout | default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE | default(1) | int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro | default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move | default(velocity) %}\n{% set runout_resume = True if client.runout_sensor | default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state | upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro | default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY | default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}"}, 'neopixel sb_leds': {'pin': 'EBBCan:gpio16', 'chain_count': '3', 'color_order': 'GRB', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0'}, 'led_effect sb_logo_busy': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (1,0,0)'}, 'led_effect sb_logo_cleaning': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.02, 0.5)'}, 'led_effect sb_logo_calibrating_z': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 0.35)'}, 'led_effect sb_logo_heating': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nbreathing  3 1 top (1, 0.18, 0)'}, 'led_effect sb_logo_cooling': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nbreathing  3 1 top (0, 0, 1)'}, 'led_effect sb_logo_homing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.6, 0.2)'}, 'led_effect sb_logo_leveling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.5, 0.1, 0.4)'}, 'led_effect sb_logo_meshing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.2, 1.0, 0.0)'}, 'led_effect sb_logo_printing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.3, 0.3, 0.0),(0.3, 0.1, 0.0)'}, 'led_effect sb_logo_standby': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.01, 0.01, 0.01)'}, 'led_effect sb_logo_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 1.0, 0.0)'}, 'led_effect sb_nozzle_heating': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (1.0, 0.18, 0.0, 0.0)'}, 'led_effect sb_nozzle_cooling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 1.0, 0.1)'}, 'led_effect sb_nozzle_standby': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.6, 0.0, 0.0, 0.0)'}, 'led_effect sb_nozzle_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.6, 1.0, 0.0, 0.1)'}, 'led_effect sb_critical_error': {'leds': '\nneopixel:sb_leds', 'layers': '\nstrobe         1  1.5   add        (1.0,  1.0, 1.0)\nbreathing      2  0     difference (0.95, 0.0, 0.0)\nstatic         1  0     top        (1.0,  0.0, 0.0)', 'autostart': 'false', 'frame_rate': '24', 'run_on_error': 'true'}, 'led_effect rainbow': {'leds': '\nneopixel:sb_leds', 'autostart': 'true', 'frame_rate': '24', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.0, 0.3, 0.0),(0.0, 0.0, 0.3)'}, 'led_effect set_nozzle_leds': {'leds': '\nneopixel:sb_leds (2,3)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nstatic         0  0     top        (0.5,  0.5, 0.5)'}, 'led_effect set_logo_leds': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nstatic         0  0     top        (1.0,  1.0, 1.0)'}, 'gcode_macro set_logo_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds STOP=1'}, 'gcode_macro set_logo_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1'}, 'gcode_macro status_off': {'gcode': '\nSTOP_LED_EFFECTS'}, 'gcode_macro status_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=rainbow'}, 'gcode_macro status_part_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready'}, 'gcode_macro status_busy': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_busy\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_heating\nSET_LED_EFFECT EFFECT=sb_nozzle_heating'}, 'gcode_macro status_cooling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cooling\nSET_LED_EFFECT EFFECT=sb_nozzle_cooling'}, 'gcode_macro status_leveling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_leveling\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_homing\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cleaning\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_meshing\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_calibrating_z\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_printing\nset_nozzle_leds_on'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_sam4e8e_00313753364B37373032303038303139-if00'}, 'mcu EBBCan': {'canbus_uuid': '8250861450f7'}, 'adxl345': {'cs_pin': 'EBBCan:gpio1', 'spi_software_sclk_pin': 'EBBCan:gpio2', 'spi_software_mosi_pin': 'EBBCan:gpio0', 'spi_software_miso_pin': 'EBBCan:gpio3', 'axes_map': 'z,-y,x'}, 'resonance_tester': {'probe_points': '100, 100, 20', 'accel_chip': 'adxl345'}, 'input_shaper': {'shaper_freq_x': '45', 'shaper_type': '3hump_ei'}, 'stepper_x': {'step_pin': 'PD6', 'dir_pin': '!PD11', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'EBBCan:gpio24', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '40'}, 'tmc2660 stepper_x': {'cs_pin': 'PD14', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'stepper_y': {'step_pin': 'PD7', 'dir_pin': '!PD12', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'PA2', 'position_endstop': '0', 'position_max': '225', 'position_min': '-4', 'homing_speed': '35', 'homing_retract_dist': '0'}, 'tmc2660 stepper_y': {'cs_pin': 'PC9', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'stepper_z': {'step_pin': 'PD8', 'dir_pin': '!PD13', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '230', 'position_min': '-2.5', 'homing_speed': '35.0'}, 'tmc2660 stepper_z': {'cs_pin': 'PC10', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'adc_temperature my_thermistor': {'temperature1': '0', 'resistance1': '1000', 'temperature2': '80', 'resistance2': '1309'}, 'extruder': {'step_pin': '!EBBCan:gpio18', 'dir_pin': 'EBBCan:gpio19', 'enable_pin': '!EBBCan:gpio17', 'microsteps': '32', 'rotation_distance': '21.63024711', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'pressure_advance': '0.065', 'pressure_advance_smooth_time': '0.02', 'gear_ratio': '50:10', 'heater_pin': 'EBBCan:gpio7', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'EBBCan:gpio27', 'control': 'pid', 'pid_kp': '21.527', 'pid_ki': '1.063', 'pid_kd': '108.982', 'min_temp': '0', 'max_temp': '250'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan:gpio20', 'run_current': '0.5', 'stealthchop_threshold': '999999'}, 'filament_switch_sensor extruder': {'pause_on_runout': 'True', 'switch_pin': 'EBBCan:gpio21'}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu'}, 'thermistor chamber_temp': {'temperature1': '25', 'resistance1': '10000', 'beta': '3950'}, 'heater_bed': {'heater_pin': '!PA19', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PC13', 'control': 'watermark', 'min_temp': '0', 'max_temp': '120'}, 'heater_fan extruder_fan': {'pin': 'EBBCan:gpio13', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'EBBCan:gpio14', 'cycle_time': '.08', 'kick_start_time': '.25'}, 'probe': {'pin': '^EBBCan:gpio22', 'x_offset': '0', 'y_offset': '0', 'samples': '3', 'samples_result': 'median', 'sample_retract_dist': '3', 'samples_tolerance': '0.015', 'samples_tolerance_retries': '3', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'z_offset': '-1.350'}, 'homing_override': {'axes': 'z', 'set_position_z': '0', 'gcode': '\nstatus_homing\nG90\nG0 Z5 F500\nG28 X0 Y0\nG0 X150 Y100 F9000\nG28 Z0\nG0 Z5 F500\nstatus_ready'}, 'bed_mesh': {'speed': '150', 'horizontal_move_z': '5', 'mesh_min': '25,35.0', 'mesh_max': '225.0,220', 'probe_count': '6,6', 'algorithm': 'bicubic', 'fade_start': '1', 'fade_end': '10', 'fade_target': '0'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\nSTATUS_HEATING\nM109 S150\nSTATUS_HOMING\nM117 Homing...\nG28 Y0 X0 Z0\nSTATUS_MESHING\nBED_MESH_CALIBRATE ADAPTIVE=1\n\n\n\n\n\n\n\n\n\n\n\nSTATUS_HEATING\nM107\nM117 Heating bed\nM190 S{ params.BED }\nM117 Heating nozzle\nM109 S{target_extruder}\nstatus_ready\nG1 Z15.0 F600\nG1 X125 Y125 F3000\nG92 E0\nG1 F9000\nstatus_printing\nM117 Printing...'}, 'gcode_macro PRINT_END': {'gcode': '\nstatus_busy\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\n\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y} F3600\nM117 Finished!\nstatus_off'}, 'gcode_macro M600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state'}, 'printer': {'kinematics': 'corexz', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '5', 'max_z_accel': '100'}, 'force_move': {'enable_force_move': 'true'}, 'exclude_object': {}, 'bed_mesh default': {'version': '1', 'points': '\n-0.100000, -0.025000, 0.012500, 0.037500, 0.125000, 0.212500\n-0.187500, -0.100000, -0.025000, 0.025000, 0.100000, 0.212500\n-0.262500, -0.162500, -0.075000, -0.012500, 0.075000, 0.187500\n-0.262500, -0.162500, -0.087500, -0.000000, 0.100000, 0.237500\n-0.200000, -0.100000, -0.012500, 0.062500, 0.200000, 0.350000\n-0.225000, -0.075000, -0.000000, 0.087500, 0.225000, 0.387500', 'x_count': '6', 'y_count': '6', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'bicubic', 'tension': '0.2', 'min_x': '25.0', 'max_x': '225.0', 'min_y': '35.0', 'max_y': '220.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_sam4e8e_00313753364B37373032303038303139-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu ebbcan': {'canbus_uuid': '8250861450f7', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set allow_park = client.park_at_cancel | default(false) | lower == \'true\' %}\n{% set retract = client.cancel_retract | default(5.0) | abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x | default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y | default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x | length > 0 or park_y | length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro | default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set idle_timeout = client.idle_timeout | default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE | default(1) | int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro | default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move | default(velocity) %}\n{% set runout_resume = True if client.runout_sensor | default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state | upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro | default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY | default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'neopixel sb_leds': {'pin': 'EBBCan:gpio16', 'chain_count': 3, 'color_order': ['GRB'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'led_effect sb_logo_busy': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1,0,0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_cleaning': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.02, 0.5)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_calibrating_z': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 0.35)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1, 0.18, 0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0, 0, 1)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_homing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.6, 0.2)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_leveling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.5, 0.1, 0.4)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_meshing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.2, 1.0, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_printing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.3, 0.3, 0.0),(0.3, 0.1, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_standby': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.01, 0.01, 0.01)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 1.0, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_nozzle_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1.0, 0.18, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 1.0, 0.1)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_standby': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.6, 0.0, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.6, 1.0, 0.0, 0.1)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_critical_error': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': True, 'endstops': '', 'layers': '\nstrobe         1  1.5   add        (1.0,  1.0, 1.0)\nbreathing      2  0     difference (0.95, 0.0, 0.0)\nstatic         1  0     top        (1.0,  0.0, 0.0)', 'leds': '\nneopixel:sb_leds'}, 'led_effect rainbow': {'frame_rate': 24.0, 'autostart': True, 'run_on_error': False, 'endstops': '', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.0, 0.3, 0.0),(0.0, 0.0, 0.3)', 'leds': '\nneopixel:sb_leds'}, 'led_effect set_nozzle_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic         0  0     top        (0.5,  0.5, 0.5)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect set_logo_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic         0  0     top        (1.0,  1.0, 1.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'gcode_macro set_logo_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nSTOP_LED_EFFECTS', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=rainbow', 'description': 'G-Code macro'}, 'gcode_macro status_part_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_busy\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_heating\nSET_LED_EFFECT EFFECT=sb_nozzle_heating', 'description': 'G-Code macro'}, 'gcode_macro status_cooling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cooling\nSET_LED_EFFECT EFFECT=sb_nozzle_cooling', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_leveling\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_homing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cleaning\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_meshing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_calibrating_z\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_printing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'adxl345': {'axes_map': ['z', '-y', 'x'], 'rate': 3200, 'cs_pin': 'EBBCan:gpio1', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'EBBCan:gpio2', 'spi_software_miso_pin': 'EBBCan:gpio3', 'spi_software_mosi_pin': 'EBBCan:gpio0'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[100.0, 100.0, 20.0]], 'accel_chip': 'adxl345'}, 'input_shaper': {'shaper_type': '3hump_ei', 'shaper_type_x': '3hump_ei', 'damping_ratio_x': 0.1, 'shaper_freq_x': 45.0, 'shaper_type_y': '3hump_ei', 'damping_ratio_y': 0.1, 'shaper_freq_y': 0.0}, 'tmc2660 stepper_x': {'cs_pin': 'PD14', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PD6', 'dir_pin': '!PD11', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'EBBCan:gpio24', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2660 stepper_y': {'cs_pin': 'PC9', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PD7', 'dir_pin': '!PD12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'PA2', 'position_endstop': 0.0, 'position_min': -4.0, 'position_max': 225.0, 'homing_speed': 35.0, 'second_homing_speed': 17.5, 'homing_retract_speed': 35.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2660 stepper_z': {'cs_pin': 'PC10', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PD8', 'dir_pin': '!PD13', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -2.5, 'position_max': 230.0, 'homing_speed': 35.0, 'second_homing_speed': 17.5, 'homing_retract_speed': 35.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'adc_temperature my_thermistor': {'resistance1': 1000.0, 'temperature1': 0.0, 'temperature2': 80.0, 'resistance2': 1309.0}, 'tmc2209 extruder': {'uart_pin': 'EBBCan:gpio20', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan:gpio27', 'min_temp': 0.0, 'max_temp': 250.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 21.527, 'pid_ki': 1.063, 'pid_kd': 108.982, 'heater_pin': 'EBBCan:gpio7', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': '!EBBCan:gpio18', 'pressure_advance': 0.065, 'pressure_advance_smooth_time': 0.02, 'dir_pin': 'EBBCan:gpio19', 'rotation_distance': 21.63024711, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!EBBCan:gpio17'}, 'filament_switch_sensor extruder': {'switch_pin': 'EBBCan:gpio21', 'pause_on_runout': True, 'runout_gcode': '', 'pause_delay': 0.5, 'event_delay': 3.0}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'thermistor chamber_temp': {'temperature1': 25.0, 'resistance1': 10000.0, 'beta': 3950.0}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PC13', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'watermark', 'max_delta': 2.0, 'heater_pin': '!PA19', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan extruder_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'EBBCan:gpio13', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.25, 'off_below': 0.0, 'cycle_time': 0.08, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'EBBCan:gpio14'}, 'probe': {'z_offset': -1.35, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': '^EBBCan:gpio22', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 3, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.015, 'samples_tolerance_retries': 3}, 'homing_override': {'set_position_z': 0.0, 'axes': 'z', 'gcode': '\nstatus_homing\nG90\nG0 Z5 F500\nG28 X0 Y0\nG0 X150 Y100 F9000\nG28 Z0\nG0 Z5 F500\nstatus_ready'}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [6, 6], 'mesh_min': [25.0, 35.0], 'mesh_max': [225.0, 220.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 150.0, 'fade_start': 1.0, 'fade_end': 10.0, 'fade_target': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[-0.1, -0.025, 0.0125, 0.0375, 0.125, 0.2125], [-0.1875, -0.1, -0.025, 0.025, 0.1, 0.2125], [-0.2625, -0.1625, -0.075, -0.0125, 0.075, 0.1875], [-0.2625, -0.1625, -0.0875, -0.0, 0.1, 0.2375], [-0.2, -0.1, -0.0125, 0.0625, 0.2, 0.35], [-0.225, -0.075, -0.0, 0.0875, 0.225, 0.3875]], 'min_x': 25.0, 'max_x': 225.0, 'min_y': 35.0, 'max_y': 220.0, 'x_count': 6, 'y_count': 6, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'bicubic', 'tension': 0.2}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\nSTATUS_HEATING\nM109 S150\nSTATUS_HOMING\nM117 Homing...\nG28 Y0 X0 Z0\nSTATUS_MESHING\nBED_MESH_CALIBRATE ADAPTIVE=1\n\n\n\n\n\n\n\n\n\n\n\nSTATUS_HEATING\nM107\nM117 Heating bed\nM190 S{ params.BED }\nM117 Heating nozzle\nM109 S{target_extruder}\nstatus_ready\nG1 Z15.0 F600\nG1 X125 Y125 F3000\nG92 E0\nG1 F9000\nstatus_printing\nM117 Printing...', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\nstatus_busy\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\n\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y} F3600\nM117 Finished!\nstatus_off', 'description': 'G-Code macro'}, 'gcode_macro m600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state', 'description': 'G-Code macro'}, 'force_move': {'enable_force_move': True}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexz', 'max_z_velocity': 5.0, 'max_z_accel': 100.0}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-04-27 20:53:29,361 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-04-27 20:53:29,362 [printer.py:reinit()] - Klipper version: v0.12.0-132-ge37b007f-dirty
2024-04-27 20:53:29,362 [printer.py:reinit()] - # Extruders: 1
2024-04-27 20:53:29,363 [printer.py:reinit()] - # Temperature devices: 2
2024-04-27 20:53:29,363 [printer.py:reinit()] - # Fans: 2
2024-04-27 20:53:29,363 [printer.py:reinit()] - # Output pins: 0
2024-04-27 20:53:29,363 [printer.py:reinit()] - # Leds: 20
2024-04-27 20:53:29,363 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-04-27 20:53:29,381 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-04-27 20:53:29,383 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor mcu&fan&heater_fan extruder_fan&filament_switch_sensor extruder&neopixel sb_leds
2024-04-27 20:53:29,634 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-04-27 20:53:29,634 [screen.py:init_klipper()] - Printer initialized
2024-04-27 20:53:29,634 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2024-04-27 20:53:29,635 [printer.py:change_state()] - Adding callback for state: ready
2024-04-27 20:53:29,734 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-04-27 20:53:29,738 [screen.py:_load_panel()] - Loading panel: main_menu
2024-04-27 20:53:29,849 [main_menu.py:__init__()] - ### Making MainMenu
2024-04-27 20:53:29,866 [main_menu.py:add_device()] - Adding device: extruder
2024-04-27 20:53:29,876 [main_menu.py:add_device()] - Adding device: heater_bed
2024-04-27 20:53:29,884 [main_menu.py:add_device()] - Adding device: temperature_sensor mcu
2024-04-27 20:53:29,936 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-27 20:53:29,937 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-27 20:53:29,969 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor mcu', 'heater_bed', 'extruder']
2024-04-27 20:53:29,970 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-04-27 20:53:29,983 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-04-27 20:54:52,116 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2024-04-27 20:54:52,117 [printer.py:change_state()] - Adding callback for state: printing
2024-04-27 20:54:52,139 [screen.py:_load_panel()] - Loading panel: job_status
2024-04-27 20:54:52,866 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-04-27 20:54:52,876 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-04-27 20:54:52,901 [job_status.py:update_file_metadata()] - Update Metadata. File: tfic-angled-honeycomb_0.2mm_PLA_MK3S_5h2m.gcode Size: 15746614
2024-04-27 20:54:52,915 [job_status.py:show_file_thumbnail()] - tfic-angled-honeycomb_0.2mm_PLA_MK3S_5h2m.gcode
2024-04-27 20:54:59,604 [functions.py:log_start()] - --------------------KlipperScreen Log Start--------------------
2024-04-27 20:54:59,604 [functions.py:log_start()] - KlipperScreen Version: v0.3.9-50-gdaed9a0
2024-04-27 20:54:59,605 [functions.py:log_start()] - Python version: 3.11
2024-04-27 20:54:59,747 [config.py:get_config_file_location()] - Passed config (-c): .
2024-04-27 20:54:59,748 [config.py:__init__()] - Config path location: /home/pi/printer_data/config/KlipperScreen.conf
2024-04-27 20:54:59,773 [config.py:log_config()] -  ===== Config File =====

=======================
2024-04-27 20:54:59,775 [config.py:__init__()] - ====== Saved Def ======

[main]
use_dpms = False
print_sort_dir = date_desc

=======================
2024-04-27 20:54:59,776 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2024-04-27 20:54:59,885 [config.py:create_translations()] - Selected lang: None OS lang: en_GB
2024-04-27 20:54:59,886 [config.py:install_language()] - Using lang en
2024-04-27 20:54:59,905 [screen.py:__init__()] - Monitors: 1 using number: 0
2024-04-27 20:54:59,906 [screen.py:__init__()] - Wayland: False Display name: :100
2024-04-27 20:54:59,909 [screen.py:__init__()] - Screen resolution: 984x540
2024-04-27 20:54:59,910 [KlippyGtk.py:__init__()] - Font size: 18.6 (medium)
2024-04-27 20:55:00,527 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2024-04-27 20:55:00,528 [screen.py:set_screenblanking_timeout()] - Not using DPMS
2024-04-27 20:55:00,537 [screen.py:initial_connection()] - Default printer: None
2024-04-27 20:55:00,608 [screen.py:connect_printer()] - Connecting to printer: Printer
2024-04-27 20:55:00,609 [screen.py:_load_panel()] - Loading panel: splash_screen
2024-04-27 20:55:00,680 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-04-27 20:55:00,699 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-04-27 20:55:00,700 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-27 20:55:00,717 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/access/oneshot_token
2024-04-27 20:55:00,729 [KlippyWebsocket.py:connect()] - Starting websocket thread
2024-04-27 20:55:00,740 [_logging.py:info()] - Websocket connected
2024-04-27 20:55:00,740 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2024-04-27 20:55:00,753 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-27 20:55:00,765 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-04-27 20:55:00,777 [printer.py:configure_cameras()] - Cameras: []
2024-04-27 20:55:00,777 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'ready', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'update_manager', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 4, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-04-27 20:55:00,777 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-04-27 20:55:00,790 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-04-27 20:55:00,884 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set allow_park = client.park_at_cancel | default(false) | lower == \'true\' %}\n{% set retract = client.cancel_retract | default(5.0) | abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x | default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y | default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x | length > 0 or park_y | length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro | default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set idle_timeout = client.idle_timeout | default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE | default(1) | int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro | default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move | default(velocity) %}\n{% set runout_resume = True if client.runout_sensor | default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state | upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro | default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY | default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}"}, 'neopixel sb_leds': {'pin': 'EBBCan:gpio16', 'chain_count': '3', 'color_order': 'GRB', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0'}, 'led_effect sb_logo_busy': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (1,0,0)'}, 'led_effect sb_logo_cleaning': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.02, 0.5)'}, 'led_effect sb_logo_calibrating_z': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 0.35)'}, 'led_effect sb_logo_heating': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nbreathing  3 1 top (1, 0.18, 0)'}, 'led_effect sb_logo_cooling': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nbreathing  3 1 top (0, 0, 1)'}, 'led_effect sb_logo_homing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.6, 0.2)'}, 'led_effect sb_logo_leveling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.5, 0.1, 0.4)'}, 'led_effect sb_logo_meshing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.2, 1.0, 0.0)'}, 'led_effect sb_logo_printing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.3, 0.3, 0.0),(0.3, 0.1, 0.0)'}, 'led_effect sb_logo_standby': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.01, 0.01, 0.01)'}, 'led_effect sb_logo_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 1.0, 0.0)'}, 'led_effect sb_nozzle_heating': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (1.0, 0.18, 0.0, 0.0)'}, 'led_effect sb_nozzle_cooling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 1.0, 0.1)'}, 'led_effect sb_nozzle_standby': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.6, 0.0, 0.0, 0.0)'}, 'led_effect sb_nozzle_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.6, 1.0, 0.0, 0.1)'}, 'led_effect sb_critical_error': {'leds': '\nneopixel:sb_leds', 'layers': '\nstrobe         1  1.5   add        (1.0,  1.0, 1.0)\nbreathing      2  0     difference (0.95, 0.0, 0.0)\nstatic         1  0     top        (1.0,  0.0, 0.0)', 'autostart': 'false', 'frame_rate': '24', 'run_on_error': 'true'}, 'led_effect rainbow': {'leds': '\nneopixel:sb_leds', 'autostart': 'true', 'frame_rate': '24', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.0, 0.3, 0.0),(0.0, 0.0, 0.3)'}, 'led_effect set_nozzle_leds': {'leds': '\nneopixel:sb_leds (2,3)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nstatic         0  0     top        (0.5,  0.5, 0.5)'}, 'led_effect set_logo_leds': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nstatic         0  0     top        (1.0,  1.0, 1.0)'}, 'gcode_macro set_logo_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds STOP=1'}, 'gcode_macro set_logo_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1'}, 'gcode_macro status_off': {'gcode': '\nSTOP_LED_EFFECTS'}, 'gcode_macro status_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=rainbow'}, 'gcode_macro status_part_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready'}, 'gcode_macro status_busy': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_busy\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_heating\nSET_LED_EFFECT EFFECT=sb_nozzle_heating'}, 'gcode_macro status_cooling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cooling\nSET_LED_EFFECT EFFECT=sb_nozzle_cooling'}, 'gcode_macro status_leveling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_leveling\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_homing\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cleaning\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_meshing\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_calibrating_z\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_printing\nset_nozzle_leds_on'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_sam4e8e_00313753364B37373032303038303139-if00'}, 'mcu EBBCan': {'canbus_uuid': '8250861450f7'}, 'adxl345': {'cs_pin': 'EBBCan:gpio1', 'spi_software_sclk_pin': 'EBBCan:gpio2', 'spi_software_mosi_pin': 'EBBCan:gpio0', 'spi_software_miso_pin': 'EBBCan:gpio3', 'axes_map': 'z,-y,x'}, 'resonance_tester': {'probe_points': '100, 100, 20', 'accel_chip': 'adxl345'}, 'input_shaper': {'shaper_freq_x': '45', 'shaper_type': '3hump_ei'}, 'stepper_x': {'step_pin': 'PD6', 'dir_pin': '!PD11', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'EBBCan:gpio24', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '40'}, 'tmc2660 stepper_x': {'cs_pin': 'PD14', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'stepper_y': {'step_pin': 'PD7', 'dir_pin': '!PD12', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'PA2', 'position_endstop': '0', 'position_max': '225', 'position_min': '-4', 'homing_speed': '35', 'homing_retract_dist': '0'}, 'tmc2660 stepper_y': {'cs_pin': 'PC9', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'stepper_z': {'step_pin': 'PD8', 'dir_pin': '!PD13', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '230', 'position_min': '-2.5', 'homing_speed': '35.0'}, 'tmc2660 stepper_z': {'cs_pin': 'PC10', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'adc_temperature my_thermistor': {'temperature1': '0', 'resistance1': '1000', 'temperature2': '80', 'resistance2': '1309'}, 'extruder': {'step_pin': '!EBBCan:gpio18', 'dir_pin': 'EBBCan:gpio19', 'enable_pin': '!EBBCan:gpio17', 'microsteps': '32', 'rotation_distance': '21.63024711', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'pressure_advance': '0.065', 'pressure_advance_smooth_time': '0.02', 'gear_ratio': '50:10', 'heater_pin': 'EBBCan:gpio7', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'EBBCan:gpio27', 'control': 'pid', 'pid_kp': '21.527', 'pid_ki': '1.063', 'pid_kd': '108.982', 'min_temp': '0', 'max_temp': '250'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan:gpio20', 'run_current': '0.5', 'stealthchop_threshold': '999999'}, 'filament_switch_sensor extruder': {'pause_on_runout': 'True', 'switch_pin': 'EBBCan:gpio21'}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu'}, 'thermistor chamber_temp': {'temperature1': '25', 'resistance1': '10000', 'beta': '3950'}, 'heater_bed': {'heater_pin': '!PA19', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PC13', 'control': 'watermark', 'min_temp': '0', 'max_temp': '120'}, 'heater_fan extruder_fan': {'pin': 'EBBCan:gpio13', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'EBBCan:gpio14', 'cycle_time': '.08', 'kick_start_time': '.25'}, 'probe': {'pin': '^EBBCan:gpio22', 'x_offset': '0', 'y_offset': '0', 'samples': '3', 'samples_result': 'median', 'sample_retract_dist': '3', 'samples_tolerance': '0.015', 'samples_tolerance_retries': '3', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'z_offset': '-1.350'}, 'homing_override': {'axes': 'z', 'set_position_z': '0', 'gcode': '\nstatus_homing\nG90\nG0 Z5 F500\nG28 X0 Y0\nG0 X150 Y100 F9000\nG28 Z0\nG0 Z5 F500\nstatus_ready'}, 'bed_mesh': {'speed': '150', 'horizontal_move_z': '5', 'mesh_min': '25,35.0', 'mesh_max': '225.0,220', 'probe_count': '6,6', 'algorithm': 'bicubic', 'fade_start': '1', 'fade_end': '10', 'fade_target': '0'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\nSTATUS_HEATING\nM109 S150\nSTATUS_HOMING\nM117 Homing...\nG28 Y0 X0 Z0\nSTATUS_MESHING\nBED_MESH_CALIBRATE ADAPTIVE=1\n\n\n\n\n\n\n\n\n\n\n\nSTATUS_HEATING\nM107\nM117 Heating bed\nM190 S{ params.BED }\nM117 Heating nozzle\nM109 S{target_extruder}\nstatus_ready\nG1 Z15.0 F600\nG1 X125 Y125 F3000\nG92 E0\nG1 F9000\nstatus_printing\nM117 Printing...'}, 'gcode_macro PRINT_END': {'gcode': '\nstatus_busy\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\n\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y} F3600\nM117 Finished!\nstatus_off'}, 'gcode_macro M600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state'}, 'printer': {'kinematics': 'corexz', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '5', 'max_z_accel': '100'}, 'force_move': {'enable_force_move': 'true'}, 'exclude_object': {}, 'bed_mesh default': {'version': '1', 'points': '\n-0.100000, -0.025000, 0.012500, 0.037500, 0.125000, 0.212500\n-0.187500, -0.100000, -0.025000, 0.025000, 0.100000, 0.212500\n-0.262500, -0.162500, -0.075000, -0.012500, 0.075000, 0.187500\n-0.262500, -0.162500, -0.087500, -0.000000, 0.100000, 0.237500\n-0.200000, -0.100000, -0.012500, 0.062500, 0.200000, 0.350000\n-0.225000, -0.075000, -0.000000, 0.087500, 0.225000, 0.387500', 'x_count': '6', 'y_count': '6', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'bicubic', 'tension': '0.2', 'min_x': '25.0', 'max_x': '225.0', 'min_y': '35.0', 'max_y': '220.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_sam4e8e_00313753364B37373032303038303139-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu ebbcan': {'canbus_uuid': '8250861450f7', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set allow_park = client.park_at_cancel | default(false) | lower == \'true\' %}\n{% set retract = client.cancel_retract | default(5.0) | abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x | default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y | default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x | length > 0 or park_y | length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro | default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set idle_timeout = client.idle_timeout | default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE | default(1) | int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro | default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move | default(velocity) %}\n{% set runout_resume = True if client.runout_sensor | default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state | upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro | default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY | default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'neopixel sb_leds': {'pin': 'EBBCan:gpio16', 'chain_count': 3, 'color_order': ['GRB'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'led_effect sb_logo_busy': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1,0,0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_cleaning': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.02, 0.5)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_calibrating_z': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 0.35)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1, 0.18, 0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0, 0, 1)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_homing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.6, 0.2)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_leveling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.5, 0.1, 0.4)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_meshing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.2, 1.0, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_printing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.3, 0.3, 0.0),(0.3, 0.1, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_standby': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.01, 0.01, 0.01)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 1.0, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_nozzle_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1.0, 0.18, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 1.0, 0.1)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_standby': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.6, 0.0, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.6, 1.0, 0.0, 0.1)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_critical_error': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': True, 'endstops': '', 'layers': '\nstrobe         1  1.5   add        (1.0,  1.0, 1.0)\nbreathing      2  0     difference (0.95, 0.0, 0.0)\nstatic         1  0     top        (1.0,  0.0, 0.0)', 'leds': '\nneopixel:sb_leds'}, 'led_effect rainbow': {'frame_rate': 24.0, 'autostart': True, 'run_on_error': False, 'endstops': '', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.0, 0.3, 0.0),(0.0, 0.0, 0.3)', 'leds': '\nneopixel:sb_leds'}, 'led_effect set_nozzle_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic         0  0     top        (0.5,  0.5, 0.5)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect set_logo_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic         0  0     top        (1.0,  1.0, 1.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'gcode_macro set_logo_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nSTOP_LED_EFFECTS', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=rainbow', 'description': 'G-Code macro'}, 'gcode_macro status_part_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_busy\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_heating\nSET_LED_EFFECT EFFECT=sb_nozzle_heating', 'description': 'G-Code macro'}, 'gcode_macro status_cooling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cooling\nSET_LED_EFFECT EFFECT=sb_nozzle_cooling', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_leveling\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_homing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cleaning\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_meshing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_calibrating_z\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_printing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'adxl345': {'axes_map': ['z', '-y', 'x'], 'rate': 3200, 'cs_pin': 'EBBCan:gpio1', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'EBBCan:gpio2', 'spi_software_miso_pin': 'EBBCan:gpio3', 'spi_software_mosi_pin': 'EBBCan:gpio0'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[100.0, 100.0, 20.0]], 'accel_chip': 'adxl345'}, 'input_shaper': {'shaper_type': '3hump_ei', 'shaper_type_x': '3hump_ei', 'damping_ratio_x': 0.1, 'shaper_freq_x': 45.0, 'shaper_type_y': '3hump_ei', 'damping_ratio_y': 0.1, 'shaper_freq_y': 0.0}, 'tmc2660 stepper_x': {'cs_pin': 'PD14', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PD6', 'dir_pin': '!PD11', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'EBBCan:gpio24', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2660 stepper_y': {'cs_pin': 'PC9', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PD7', 'dir_pin': '!PD12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'PA2', 'position_endstop': 0.0, 'position_min': -4.0, 'position_max': 225.0, 'homing_speed': 35.0, 'second_homing_speed': 17.5, 'homing_retract_speed': 35.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2660 stepper_z': {'cs_pin': 'PC10', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PD8', 'dir_pin': '!PD13', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -2.5, 'position_max': 230.0, 'homing_speed': 35.0, 'second_homing_speed': 17.5, 'homing_retract_speed': 35.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'adc_temperature my_thermistor': {'resistance1': 1000.0, 'temperature1': 0.0, 'temperature2': 80.0, 'resistance2': 1309.0}, 'tmc2209 extruder': {'uart_pin': 'EBBCan:gpio20', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan:gpio27', 'min_temp': 0.0, 'max_temp': 250.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 21.527, 'pid_ki': 1.063, 'pid_kd': 108.982, 'heater_pin': 'EBBCan:gpio7', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': '!EBBCan:gpio18', 'pressure_advance': 0.065, 'pressure_advance_smooth_time': 0.02, 'dir_pin': 'EBBCan:gpio19', 'rotation_distance': 21.63024711, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!EBBCan:gpio17'}, 'filament_switch_sensor extruder': {'switch_pin': 'EBBCan:gpio21', 'pause_on_runout': True, 'runout_gcode': '', 'pause_delay': 0.5, 'event_delay': 3.0}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'thermistor chamber_temp': {'temperature1': 25.0, 'resistance1': 10000.0, 'beta': 3950.0}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PC13', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'watermark', 'max_delta': 2.0, 'heater_pin': '!PA19', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan extruder_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'EBBCan:gpio13', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.25, 'off_below': 0.0, 'cycle_time': 0.08, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'EBBCan:gpio14'}, 'probe': {'z_offset': -1.35, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': '^EBBCan:gpio22', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 3, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.015, 'samples_tolerance_retries': 3}, 'homing_override': {'set_position_z': 0.0, 'axes': 'z', 'gcode': '\nstatus_homing\nG90\nG0 Z5 F500\nG28 X0 Y0\nG0 X150 Y100 F9000\nG28 Z0\nG0 Z5 F500\nstatus_ready'}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [6, 6], 'mesh_min': [25.0, 35.0], 'mesh_max': [225.0, 220.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 150.0, 'fade_start': 1.0, 'fade_end': 10.0, 'fade_target': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[-0.1, -0.025, 0.0125, 0.0375, 0.125, 0.2125], [-0.1875, -0.1, -0.025, 0.025, 0.1, 0.2125], [-0.2625, -0.1625, -0.075, -0.0125, 0.075, 0.1875], [-0.2625, -0.1625, -0.0875, -0.0, 0.1, 0.2375], [-0.2, -0.1, -0.0125, 0.0625, 0.2, 0.35], [-0.225, -0.075, -0.0, 0.0875, 0.225, 0.3875]], 'min_x': 25.0, 'max_x': 225.0, 'min_y': 35.0, 'max_y': 220.0, 'x_count': 6, 'y_count': 6, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'bicubic', 'tension': 0.2}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\nSTATUS_HEATING\nM109 S150\nSTATUS_HOMING\nM117 Homing...\nG28 Y0 X0 Z0\nSTATUS_MESHING\nBED_MESH_CALIBRATE ADAPTIVE=1\n\n\n\n\n\n\n\n\n\n\n\nSTATUS_HEATING\nM107\nM117 Heating bed\nM190 S{ params.BED }\nM117 Heating nozzle\nM109 S{target_extruder}\nstatus_ready\nG1 Z15.0 F600\nG1 X125 Y125 F3000\nG92 E0\nG1 F9000\nstatus_printing\nM117 Printing...', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\nstatus_busy\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\n\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y} F3600\nM117 Finished!\nstatus_off', 'description': 'G-Code macro'}, 'gcode_macro m600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state', 'description': 'G-Code macro'}, 'force_move': {'enable_force_move': True}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexz', 'max_z_velocity': 5.0, 'max_z_accel': 100.0}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-04-27 20:55:00,888 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-04-27 20:55:00,889 [printer.py:reinit()] - Klipper version: v0.12.0-132-ge37b007f-dirty
2024-04-27 20:55:00,889 [printer.py:reinit()] - # Extruders: 1
2024-04-27 20:55:00,889 [printer.py:reinit()] - # Temperature devices: 2
2024-04-27 20:55:00,890 [printer.py:reinit()] - # Fans: 2
2024-04-27 20:55:00,890 [printer.py:reinit()] - # Output pins: 0
2024-04-27 20:55:00,890 [printer.py:reinit()] - # Leds: 20
2024-04-27 20:55:00,890 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-04-27 20:55:00,908 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-04-27 20:55:00,911 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor mcu&fan&heater_fan extruder_fan&filament_switch_sensor extruder&neopixel sb_leds
2024-04-27 20:55:01,196 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-04-27 20:55:01,197 [screen.py:init_klipper()] - Printer initialized
2024-04-27 20:55:01,197 [printer.py:change_state()] - Changing state from 'disconnected' to 'printing'
2024-04-27 20:55:01,197 [printer.py:change_state()] - Adding callback for state: printing
2024-04-27 20:55:01,309 [screen.py:_load_panel()] - Loading panel: job_status
2024-04-27 20:55:01,504 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-04-27 20:55:01,513 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-04-27 20:55:01,540 [job_status.py:update_file_metadata()] - Cannot find file metadata. Listening for updated metadata
2024-04-27 20:55:01,541 [job_status.py:show_file_thumbnail()] - tfic-angled-honeycomb_0.2mm_PLA_MK3S_5h2m.gcode
2024-04-27 20:55:01,541 [job_status.py:show_file_thumbnail()] - no pixbuf
2024-04-27 20:55:01,559 [job_status.py:update_file_metadata()] - Update Metadata. File: tfic-angled-honeycomb_0.2mm_PLA_MK3S_5h2m.gcode Size: 15746614
2024-04-27 20:55:01,565 [job_status.py:show_file_thumbnail()] - tfic-angled-honeycomb_0.2mm_PLA_MK3S_5h2m.gcode
2024-04-27 21:02:00,346 [functions.py:log_start()] - --------------------KlipperScreen Log Start--------------------
2024-04-27 21:02:00,347 [functions.py:log_start()] - KlipperScreen Version: v0.3.9-50-gdaed9a0
2024-04-27 21:02:00,347 [functions.py:log_start()] - Python version: 3.11
2024-04-27 21:02:00,608 [config.py:get_config_file_location()] - Passed config (-c): .
2024-04-27 21:02:00,608 [config.py:__init__()] - Config path location: /home/pi/printer_data/config/KlipperScreen.conf
2024-04-27 21:02:00,648 [config.py:log_config()] -  ===== Config File =====

=======================
2024-04-27 21:02:00,650 [config.py:__init__()] - ====== Saved Def ======

[main]
use_dpms = False
print_sort_dir = date_desc

=======================
2024-04-27 21:02:00,651 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2024-04-27 21:02:00,796 [config.py:create_translations()] - Selected lang: None OS lang: en_GB
2024-04-27 21:02:00,796 [config.py:install_language()] - Using lang en
2024-04-27 21:02:00,825 [screen.py:__init__()] - Monitors: 1 using number: 0
2024-04-27 21:02:00,826 [screen.py:__init__()] - Wayland: False Display name: :100
2024-04-27 21:02:00,829 [screen.py:__init__()] - Screen resolution: 984x540
2024-04-27 21:02:00,830 [KlippyGtk.py:__init__()] - Font size: 18.6 (medium)
2024-04-27 21:02:02,593 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2024-04-27 21:02:02,593 [screen.py:set_screenblanking_timeout()] - Not using DPMS
2024-04-27 21:02:02,606 [screen.py:initial_connection()] - Default printer: None
2024-04-27 21:02:02,698 [screen.py:connect_printer()] - Connecting to printer: Printer
2024-04-27 21:02:02,699 [screen.py:_load_panel()] - Loading panel: splash_screen
2024-04-27 21:02:02,799 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-04-27 21:02:02,818 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-04-27 21:02:02,818 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-27 21:02:02,844 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/access/oneshot_token
2024-04-27 21:02:02,856 [KlippyWebsocket.py:connect()] - Starting websocket thread
2024-04-27 21:02:02,865 [_logging.py:info()] - Websocket connected
2024-04-27 21:02:02,865 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2024-04-27 21:02:03,358 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-27 21:02:03,370 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-04-27 21:02:03,381 [printer.py:configure_cameras()] - Cameras: []
2024-04-27 21:02:03,382 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'ready', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'octoprint_compat', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 3, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-04-27 21:02:03,382 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-04-27 21:02:03,395 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-04-27 21:02:03,566 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set allow_park = client.park_at_cancel | default(false) | lower == \'true\' %}\n{% set retract = client.cancel_retract | default(5.0) | abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x | default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y | default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x | length > 0 or park_y | length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro | default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set idle_timeout = client.idle_timeout | default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE | default(1) | int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro | default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move | default(velocity) %}\n{% set runout_resume = True if client.runout_sensor | default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state | upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro | default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY | default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}"}, 'neopixel sb_leds': {'pin': 'EBBCan:gpio16', 'chain_count': '3', 'color_order': 'GRB', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0'}, 'led_effect sb_logo_busy': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (1,0,0)'}, 'led_effect sb_logo_cleaning': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.02, 0.5)'}, 'led_effect sb_logo_calibrating_z': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 0.35)'}, 'led_effect sb_logo_heating': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nbreathing  3 1 top (1, 0.18, 0)'}, 'led_effect sb_logo_cooling': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nbreathing  3 1 top (0, 0, 1)'}, 'led_effect sb_logo_homing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.6, 0.2)'}, 'led_effect sb_logo_leveling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.5, 0.1, 0.4)'}, 'led_effect sb_logo_meshing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.2, 1.0, 0.0)'}, 'led_effect sb_logo_printing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.3, 0.3, 0.0),(0.3, 0.1, 0.0)'}, 'led_effect sb_logo_standby': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.01, 0.01, 0.01)'}, 'led_effect sb_logo_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 1.0, 0.0)'}, 'led_effect sb_nozzle_heating': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (1.0, 0.18, 0.0, 0.0)'}, 'led_effect sb_nozzle_cooling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 1.0, 0.1)'}, 'led_effect sb_nozzle_standby': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.6, 0.0, 0.0, 0.0)'}, 'led_effect sb_nozzle_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.6, 1.0, 0.0, 0.1)'}, 'led_effect sb_critical_error': {'leds': '\nneopixel:sb_leds', 'layers': '\nstrobe         1  1.5   add        (1.0,  1.0, 1.0)\nbreathing      2  0     difference (0.95, 0.0, 0.0)\nstatic         1  0     top        (1.0,  0.0, 0.0)', 'autostart': 'false', 'frame_rate': '24', 'run_on_error': 'true'}, 'led_effect rainbow': {'leds': '\nneopixel:sb_leds', 'autostart': 'true', 'frame_rate': '24', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.0, 0.3, 0.0),(0.0, 0.0, 0.3)'}, 'led_effect set_nozzle_leds': {'leds': '\nneopixel:sb_leds (2,3)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nstatic         0  0     top        (0.5,  0.5, 0.5)'}, 'led_effect set_logo_leds': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nstatic         0  0     top        (1.0,  1.0, 1.0)'}, 'gcode_macro set_logo_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds STOP=1'}, 'gcode_macro set_logo_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1'}, 'gcode_macro status_off': {'gcode': '\nSTOP_LED_EFFECTS'}, 'gcode_macro status_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=rainbow'}, 'gcode_macro status_part_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready'}, 'gcode_macro status_busy': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_busy\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_heating\nSET_LED_EFFECT EFFECT=sb_nozzle_heating'}, 'gcode_macro status_cooling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cooling\nSET_LED_EFFECT EFFECT=sb_nozzle_cooling'}, 'gcode_macro status_leveling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_leveling\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_homing\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cleaning\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_meshing\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_calibrating_z\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_printing\nset_nozzle_leds_on'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_sam4e8e_00313753364B37373032303038303139-if00'}, 'mcu EBBCan': {'canbus_uuid': '8250861450f7'}, 'adxl345': {'cs_pin': 'EBBCan:gpio1', 'spi_software_sclk_pin': 'EBBCan:gpio2', 'spi_software_mosi_pin': 'EBBCan:gpio0', 'spi_software_miso_pin': 'EBBCan:gpio3', 'axes_map': 'z,-y,x'}, 'resonance_tester': {'probe_points': '100, 100, 20', 'accel_chip': 'adxl345'}, 'input_shaper': {'shaper_freq_x': '45', 'shaper_type': '3hump_ei'}, 'stepper_x': {'step_pin': 'PD6', 'dir_pin': '!PD11', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'EBBCan:gpio24', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '40'}, 'tmc2660 stepper_x': {'cs_pin': 'PD14', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'stepper_y': {'step_pin': 'PD7', 'dir_pin': '!PD12', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'PA2', 'position_endstop': '0', 'position_max': '225', 'position_min': '-4', 'homing_speed': '35', 'homing_retract_dist': '0'}, 'tmc2660 stepper_y': {'cs_pin': 'PC9', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'stepper_z': {'step_pin': 'PD8', 'dir_pin': '!PD13', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '230', 'position_min': '-2.5', 'homing_speed': '35.0'}, 'tmc2660 stepper_z': {'cs_pin': 'PC10', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'adc_temperature my_thermistor': {'temperature1': '0', 'resistance1': '1000', 'temperature2': '80', 'resistance2': '1309'}, 'extruder': {'step_pin': '!EBBCan:gpio18', 'dir_pin': 'EBBCan:gpio19', 'enable_pin': '!EBBCan:gpio17', 'microsteps': '32', 'rotation_distance': '21.63024711', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'pressure_advance': '0.065', 'pressure_advance_smooth_time': '0.02', 'gear_ratio': '50:10', 'heater_pin': 'EBBCan:gpio7', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'EBBCan:gpio27', 'control': 'pid', 'pid_kp': '21.527', 'pid_ki': '1.063', 'pid_kd': '108.982', 'min_temp': '0', 'max_temp': '250'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan:gpio20', 'run_current': '0.5', 'stealthchop_threshold': '999999'}, 'filament_switch_sensor extruder': {'pause_on_runout': 'True', 'switch_pin': 'EBBCan:gpio21'}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu'}, 'thermistor chamber_temp': {'temperature1': '25', 'resistance1': '10000', 'beta': '3950'}, 'heater_bed': {'heater_pin': '!PA19', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PC13', 'control': 'watermark', 'min_temp': '0', 'max_temp': '120'}, 'heater_fan extruder_fan': {'pin': 'EBBCan:gpio13', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'EBBCan:gpio14', 'cycle_time': '.08', 'kick_start_time': '.25'}, 'probe': {'pin': '^EBBCan:gpio22', 'x_offset': '0', 'y_offset': '0', 'samples': '3', 'samples_result': 'median', 'sample_retract_dist': '3', 'samples_tolerance': '0.015', 'samples_tolerance_retries': '3', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'z_offset': '-1.350'}, 'homing_override': {'axes': 'z', 'set_position_z': '0', 'gcode': '\nstatus_homing\nG90\nG0 Z5 F500\nG28 X0 Y0\nG0 X150 Y100 F9000\nG28 Z0\nG0 Z5 F500\nstatus_ready'}, 'bed_mesh': {'speed': '150', 'horizontal_move_z': '5', 'mesh_min': '25,35.0', 'mesh_max': '225.0,220', 'probe_count': '6,6', 'algorithm': 'bicubic', 'fade_start': '1', 'fade_end': '10', 'fade_target': '0'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\nSTATUS_HEATING\nM109 S150\nSTATUS_HOMING\nM117 Homing...\nG28 Y0 X0 Z0\nSTATUS_MESHING\nBED_MESH_CALIBRATE ADAPTIVE=1\n\n\n\n\n\n\n\n\n\n\n\nSTATUS_HEATING\nM107\nM117 Heating bed\nM190 S{ params.BED }\nM117 Heating nozzle\nM109 S{target_extruder}\nstatus_ready\nG1 Z15.0 F600\nG1 X125 Y125 F3000\nG92 E0\nG1 F9000\nstatus_printing\nM117 Printing...'}, 'gcode_macro PRINT_END': {'gcode': '\nstatus_busy\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\n\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y} F3600\nM117 Finished!\nstatus_off'}, 'gcode_macro M600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state'}, 'printer': {'kinematics': 'corexz', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '5', 'max_z_accel': '100'}, 'force_move': {'enable_force_move': 'true'}, 'exclude_object': {}, 'bed_mesh default': {'version': '1', 'points': '\n-0.100000, -0.025000, 0.012500, 0.037500, 0.125000, 0.212500\n-0.187500, -0.100000, -0.025000, 0.025000, 0.100000, 0.212500\n-0.262500, -0.162500, -0.075000, -0.012500, 0.075000, 0.187500\n-0.262500, -0.162500, -0.087500, -0.000000, 0.100000, 0.237500\n-0.200000, -0.100000, -0.012500, 0.062500, 0.200000, 0.350000\n-0.225000, -0.075000, -0.000000, 0.087500, 0.225000, 0.387500', 'x_count': '6', 'y_count': '6', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'bicubic', 'tension': '0.2', 'min_x': '25.0', 'max_x': '225.0', 'min_y': '35.0', 'max_y': '220.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_sam4e8e_00313753364B37373032303038303139-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu ebbcan': {'canbus_uuid': '8250861450f7', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set allow_park = client.park_at_cancel | default(false) | lower == \'true\' %}\n{% set retract = client.cancel_retract | default(5.0) | abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x | default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y | default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x | length > 0 or park_y | length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro | default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set idle_timeout = client.idle_timeout | default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE | default(1) | int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro | default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move | default(velocity) %}\n{% set runout_resume = True if client.runout_sensor | default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state | upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro | default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY | default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'neopixel sb_leds': {'pin': 'EBBCan:gpio16', 'chain_count': 3, 'color_order': ['GRB'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'led_effect sb_logo_busy': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1,0,0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_cleaning': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.02, 0.5)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_calibrating_z': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 0.35)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1, 0.18, 0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0, 0, 1)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_homing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.6, 0.2)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_leveling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.5, 0.1, 0.4)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_meshing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.2, 1.0, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_printing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.3, 0.3, 0.0),(0.3, 0.1, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_standby': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.01, 0.01, 0.01)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 1.0, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_nozzle_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1.0, 0.18, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 1.0, 0.1)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_standby': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.6, 0.0, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.6, 1.0, 0.0, 0.1)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_critical_error': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': True, 'endstops': '', 'layers': '\nstrobe         1  1.5   add        (1.0,  1.0, 1.0)\nbreathing      2  0     difference (0.95, 0.0, 0.0)\nstatic         1  0     top        (1.0,  0.0, 0.0)', 'leds': '\nneopixel:sb_leds'}, 'led_effect rainbow': {'frame_rate': 24.0, 'autostart': True, 'run_on_error': False, 'endstops': '', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.0, 0.3, 0.0),(0.0, 0.0, 0.3)', 'leds': '\nneopixel:sb_leds'}, 'led_effect set_nozzle_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic         0  0     top        (0.5,  0.5, 0.5)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect set_logo_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic         0  0     top        (1.0,  1.0, 1.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'gcode_macro set_logo_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nSTOP_LED_EFFECTS', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=rainbow', 'description': 'G-Code macro'}, 'gcode_macro status_part_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_busy\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_heating\nSET_LED_EFFECT EFFECT=sb_nozzle_heating', 'description': 'G-Code macro'}, 'gcode_macro status_cooling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cooling\nSET_LED_EFFECT EFFECT=sb_nozzle_cooling', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_leveling\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_homing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cleaning\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_meshing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_calibrating_z\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_printing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'adxl345': {'axes_map': ['z', '-y', 'x'], 'rate': 3200, 'cs_pin': 'EBBCan:gpio1', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'EBBCan:gpio2', 'spi_software_miso_pin': 'EBBCan:gpio3', 'spi_software_mosi_pin': 'EBBCan:gpio0'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[100.0, 100.0, 20.0]], 'accel_chip': 'adxl345'}, 'input_shaper': {'shaper_type': '3hump_ei', 'shaper_type_x': '3hump_ei', 'damping_ratio_x': 0.1, 'shaper_freq_x': 45.0, 'shaper_type_y': '3hump_ei', 'damping_ratio_y': 0.1, 'shaper_freq_y': 0.0}, 'tmc2660 stepper_x': {'cs_pin': 'PD14', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PD6', 'dir_pin': '!PD11', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'EBBCan:gpio24', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2660 stepper_y': {'cs_pin': 'PC9', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PD7', 'dir_pin': '!PD12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'PA2', 'position_endstop': 0.0, 'position_min': -4.0, 'position_max': 225.0, 'homing_speed': 35.0, 'second_homing_speed': 17.5, 'homing_retract_speed': 35.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2660 stepper_z': {'cs_pin': 'PC10', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PD8', 'dir_pin': '!PD13', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -2.5, 'position_max': 230.0, 'homing_speed': 35.0, 'second_homing_speed': 17.5, 'homing_retract_speed': 35.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'adc_temperature my_thermistor': {'resistance1': 1000.0, 'temperature1': 0.0, 'temperature2': 80.0, 'resistance2': 1309.0}, 'tmc2209 extruder': {'uart_pin': 'EBBCan:gpio20', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan:gpio27', 'min_temp': 0.0, 'max_temp': 250.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 21.527, 'pid_ki': 1.063, 'pid_kd': 108.982, 'heater_pin': 'EBBCan:gpio7', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': '!EBBCan:gpio18', 'pressure_advance': 0.065, 'pressure_advance_smooth_time': 0.02, 'dir_pin': 'EBBCan:gpio19', 'rotation_distance': 21.63024711, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!EBBCan:gpio17'}, 'filament_switch_sensor extruder': {'switch_pin': 'EBBCan:gpio21', 'pause_on_runout': True, 'runout_gcode': '', 'pause_delay': 0.5, 'event_delay': 3.0}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'thermistor chamber_temp': {'temperature1': 25.0, 'resistance1': 10000.0, 'beta': 3950.0}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PC13', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'watermark', 'max_delta': 2.0, 'heater_pin': '!PA19', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan extruder_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'EBBCan:gpio13', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.25, 'off_below': 0.0, 'cycle_time': 0.08, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'EBBCan:gpio14'}, 'probe': {'z_offset': -1.35, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': '^EBBCan:gpio22', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 3, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.015, 'samples_tolerance_retries': 3}, 'homing_override': {'set_position_z': 0.0, 'axes': 'z', 'gcode': '\nstatus_homing\nG90\nG0 Z5 F500\nG28 X0 Y0\nG0 X150 Y100 F9000\nG28 Z0\nG0 Z5 F500\nstatus_ready'}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [6, 6], 'mesh_min': [25.0, 35.0], 'mesh_max': [225.0, 220.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 150.0, 'fade_start': 1.0, 'fade_end': 10.0, 'fade_target': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[-0.1, -0.025, 0.0125, 0.0375, 0.125, 0.2125], [-0.1875, -0.1, -0.025, 0.025, 0.1, 0.2125], [-0.2625, -0.1625, -0.075, -0.0125, 0.075, 0.1875], [-0.2625, -0.1625, -0.0875, -0.0, 0.1, 0.2375], [-0.2, -0.1, -0.0125, 0.0625, 0.2, 0.35], [-0.225, -0.075, -0.0, 0.0875, 0.225, 0.3875]], 'min_x': 25.0, 'max_x': 225.0, 'min_y': 35.0, 'max_y': 220.0, 'x_count': 6, 'y_count': 6, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'bicubic', 'tension': 0.2}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\nSTATUS_HEATING\nM109 S150\nSTATUS_HOMING\nM117 Homing...\nG28 Y0 X0 Z0\nSTATUS_MESHING\nBED_MESH_CALIBRATE ADAPTIVE=1\n\n\n\n\n\n\n\n\n\n\n\nSTATUS_HEATING\nM107\nM117 Heating bed\nM190 S{ params.BED }\nM117 Heating nozzle\nM109 S{target_extruder}\nstatus_ready\nG1 Z15.0 F600\nG1 X125 Y125 F3000\nG92 E0\nG1 F9000\nstatus_printing\nM117 Printing...', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\nstatus_busy\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\n\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y} F3600\nM117 Finished!\nstatus_off', 'description': 'G-Code macro'}, 'gcode_macro m600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state', 'description': 'G-Code macro'}, 'force_move': {'enable_force_move': True}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexz', 'max_z_velocity': 5.0, 'max_z_accel': 100.0}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-04-27 21:02:03,569 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-04-27 21:02:03,571 [printer.py:reinit()] - Klipper version: v0.12.0-132-ge37b007f-dirty
2024-04-27 21:02:03,571 [printer.py:reinit()] - # Extruders: 1
2024-04-27 21:02:03,571 [printer.py:reinit()] - # Temperature devices: 2
2024-04-27 21:02:03,571 [printer.py:reinit()] - # Fans: 2
2024-04-27 21:02:03,571 [printer.py:reinit()] - # Output pins: 0
2024-04-27 21:02:03,571 [printer.py:reinit()] - # Leds: 20
2024-04-27 21:02:03,572 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-04-27 21:02:03,590 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-04-27 21:02:03,592 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor mcu&fan&heater_fan extruder_fan&filament_switch_sensor extruder&neopixel sb_leds
2024-04-27 21:02:03,867 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-04-27 21:02:03,868 [screen.py:init_klipper()] - Printer initialized
2024-04-27 21:02:03,868 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2024-04-27 21:02:03,868 [printer.py:change_state()] - Adding callback for state: ready
2024-04-27 21:02:04,051 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-04-27 21:02:04,056 [screen.py:_load_panel()] - Loading panel: main_menu
2024-04-27 21:02:04,196 [main_menu.py:__init__()] - ### Making MainMenu
2024-04-27 21:02:04,211 [main_menu.py:add_device()] - Adding device: extruder
2024-04-27 21:02:04,228 [main_menu.py:add_device()] - Adding device: heater_bed
2024-04-27 21:02:04,239 [main_menu.py:add_device()] - Adding device: temperature_sensor mcu
2024-04-27 21:02:04,291 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-27 21:02:04,293 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-27 21:02:04,323 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor mcu', 'heater_bed', 'extruder']
2024-04-27 21:02:04,325 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-04-27 21:02:04,338 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-04-27 21:04:38,795 [functions.py:log_start()] - --------------------KlipperScreen Log Start--------------------
2024-04-27 21:04:38,795 [functions.py:log_start()] - KlipperScreen Version: v0.3.9-50-gdaed9a0
2024-04-27 21:04:38,796 [functions.py:log_start()] - Python version: 3.11
2024-04-27 21:04:38,934 [config.py:get_config_file_location()] - Passed config (-c): .
2024-04-27 21:04:38,935 [config.py:__init__()] - Config path location: /home/pi/printer_data/config/KlipperScreen.conf
2024-04-27 21:04:38,960 [config.py:log_config()] -  ===== Config File =====

=======================
2024-04-27 21:04:38,962 [config.py:__init__()] - ====== Saved Def ======

[main]
use_dpms = False
print_sort_dir = date_desc

=======================
2024-04-27 21:04:38,963 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2024-04-27 21:04:39,070 [config.py:create_translations()] - Selected lang: None OS lang: en_GB
2024-04-27 21:04:39,073 [config.py:install_language()] - Using lang en
2024-04-27 21:04:39,092 [screen.py:__init__()] - Monitors: 1 using number: 0
2024-04-27 21:04:39,094 [screen.py:__init__()] - Wayland: False Display name: :100
2024-04-27 21:04:39,097 [screen.py:__init__()] - Screen resolution: 984x540
2024-04-27 21:04:39,099 [KlippyGtk.py:__init__()] - Font size: 18.6 (medium)
2024-04-27 21:04:39,703 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2024-04-27 21:04:39,703 [screen.py:set_screenblanking_timeout()] - Not using DPMS
2024-04-27 21:04:39,713 [screen.py:initial_connection()] - Default printer: None
2024-04-27 21:04:39,780 [screen.py:connect_printer()] - Connecting to printer: Printer
2024-04-27 21:04:39,781 [screen.py:_load_panel()] - Loading panel: splash_screen
2024-04-27 21:04:39,848 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-04-27 21:04:39,867 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-04-27 21:04:39,867 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-27 21:04:39,884 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/access/oneshot_token
2024-04-27 21:04:39,896 [KlippyWebsocket.py:connect()] - Starting websocket thread
2024-04-27 21:04:39,906 [_logging.py:info()] - Websocket connected
2024-04-27 21:04:39,907 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2024-04-27 21:04:39,919 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-27 21:04:39,931 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-04-27 21:04:39,942 [printer.py:configure_cameras()] - Cameras: []
2024-04-27 21:04:39,943 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'ready', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'octoprint_compat', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 3, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-04-27 21:04:39,943 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-04-27 21:04:39,956 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-04-27 21:04:40,036 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set allow_park = client.park_at_cancel | default(false) | lower == \'true\' %}\n{% set retract = client.cancel_retract | default(5.0) | abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x | default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y | default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x | length > 0 or park_y | length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro | default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set idle_timeout = client.idle_timeout | default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE | default(1) | int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro | default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move | default(velocity) %}\n{% set runout_resume = True if client.runout_sensor | default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state | upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro | default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY | default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}"}, 'neopixel sb_leds': {'pin': 'EBBCan:gpio16', 'chain_count': '3', 'color_order': 'GRB', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0'}, 'led_effect sb_logo_busy': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (1,0,0)'}, 'led_effect sb_logo_cleaning': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.02, 0.5)'}, 'led_effect sb_logo_calibrating_z': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 0.35)'}, 'led_effect sb_logo_heating': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nbreathing  3 1 top (1, 0.18, 0)'}, 'led_effect sb_logo_cooling': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nbreathing  3 1 top (0, 0, 1)'}, 'led_effect sb_logo_homing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.6, 0.2)'}, 'led_effect sb_logo_leveling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.5, 0.1, 0.4)'}, 'led_effect sb_logo_meshing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.2, 1.0, 0.0)'}, 'led_effect sb_logo_printing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.3, 0.3, 0.0),(0.3, 0.1, 0.0)'}, 'led_effect sb_logo_standby': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.01, 0.01, 0.01)'}, 'led_effect sb_logo_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 1.0, 0.0)'}, 'led_effect sb_nozzle_heating': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (1.0, 0.18, 0.0, 0.0)'}, 'led_effect sb_nozzle_cooling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 1.0, 0.1)'}, 'led_effect sb_nozzle_standby': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.6, 0.0, 0.0, 0.0)'}, 'led_effect sb_nozzle_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.6, 1.0, 0.0, 0.1)'}, 'led_effect sb_critical_error': {'leds': '\nneopixel:sb_leds', 'layers': '\nstrobe         1  1.5   add        (1.0,  1.0, 1.0)\nbreathing      2  0     difference (0.95, 0.0, 0.0)\nstatic         1  0     top        (1.0,  0.0, 0.0)', 'autostart': 'false', 'frame_rate': '24', 'run_on_error': 'true'}, 'led_effect rainbow': {'leds': '\nneopixel:sb_leds', 'autostart': 'true', 'frame_rate': '24', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.0, 0.3, 0.0),(0.0, 0.0, 0.3)'}, 'led_effect set_nozzle_leds': {'leds': '\nneopixel:sb_leds (2,3)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nstatic         0  0     top        (0.5,  0.5, 0.5)'}, 'led_effect set_logo_leds': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nstatic         0  0     top        (1.0,  1.0, 1.0)'}, 'gcode_macro set_logo_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds STOP=1'}, 'gcode_macro set_logo_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1'}, 'gcode_macro status_off': {'gcode': '\nSTOP_LED_EFFECTS'}, 'gcode_macro status_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=rainbow'}, 'gcode_macro status_part_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready'}, 'gcode_macro status_busy': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_busy\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_heating\nSET_LED_EFFECT EFFECT=sb_nozzle_heating'}, 'gcode_macro status_cooling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cooling\nSET_LED_EFFECT EFFECT=sb_nozzle_cooling'}, 'gcode_macro status_leveling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_leveling\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_homing\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cleaning\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_meshing\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_calibrating_z\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_printing\nset_nozzle_leds_on'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_sam4e8e_00313753364B37373032303038303139-if00'}, 'mcu EBBCan': {'canbus_uuid': '8250861450f7'}, 'adxl345': {'cs_pin': 'EBBCan:gpio1', 'spi_software_sclk_pin': 'EBBCan:gpio2', 'spi_software_mosi_pin': 'EBBCan:gpio0', 'spi_software_miso_pin': 'EBBCan:gpio3', 'axes_map': 'z,-y,x'}, 'resonance_tester': {'probe_points': '100, 100, 20', 'accel_chip': 'adxl345'}, 'input_shaper': {'shaper_freq_x': '45', 'shaper_type': '3hump_ei'}, 'stepper_x': {'step_pin': 'PD6', 'dir_pin': '!PD11', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'EBBCan:gpio24', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '40'}, 'tmc2660 stepper_x': {'cs_pin': 'PD14', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'stepper_y': {'step_pin': 'PD7', 'dir_pin': '!PD12', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'PA2', 'position_endstop': '0', 'position_max': '225', 'position_min': '-4', 'homing_speed': '35', 'homing_retract_dist': '0'}, 'tmc2660 stepper_y': {'cs_pin': 'PC9', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'stepper_z': {'step_pin': 'PD8', 'dir_pin': '!PD13', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '230', 'position_min': '-2.5', 'homing_speed': '35.0'}, 'tmc2660 stepper_z': {'cs_pin': 'PC10', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'adc_temperature my_thermistor': {'temperature1': '0', 'resistance1': '1000', 'temperature2': '80', 'resistance2': '1309'}, 'extruder': {'step_pin': '!EBBCan:gpio18', 'dir_pin': 'EBBCan:gpio19', 'enable_pin': '!EBBCan:gpio17', 'microsteps': '32', 'rotation_distance': '21.63024711', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'pressure_advance': '0.065', 'pressure_advance_smooth_time': '0.02', 'gear_ratio': '50:10', 'heater_pin': 'EBBCan:gpio7', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'EBBCan:gpio27', 'control': 'pid', 'pid_kp': '21.527', 'pid_ki': '1.063', 'pid_kd': '108.982', 'min_temp': '0', 'max_temp': '250'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan:gpio20', 'run_current': '0.5', 'stealthchop_threshold': '999999'}, 'filament_switch_sensor extruder': {'pause_on_runout': 'True', 'switch_pin': 'EBBCan:gpio21'}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu'}, 'thermistor chamber_temp': {'temperature1': '25', 'resistance1': '10000', 'beta': '3950'}, 'heater_bed': {'heater_pin': '!PA19', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PC13', 'control': 'watermark', 'min_temp': '0', 'max_temp': '120'}, 'heater_fan extruder_fan': {'pin': 'EBBCan:gpio13', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'EBBCan:gpio14', 'cycle_time': '.08', 'kick_start_time': '.25'}, 'probe': {'pin': '^EBBCan:gpio22', 'x_offset': '0', 'y_offset': '0', 'samples': '3', 'samples_result': 'median', 'sample_retract_dist': '3', 'samples_tolerance': '0.015', 'samples_tolerance_retries': '3', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'z_offset': '-1.350'}, 'homing_override': {'axes': 'z', 'set_position_z': '0', 'gcode': '\nstatus_homing\nG90\nG0 Z5 F500\nG28 X0 Y0\nG0 X150 Y100 F9000\nG28 Z0\nG0 Z5 F500\nstatus_ready'}, 'bed_mesh': {'speed': '150', 'horizontal_move_z': '5', 'mesh_min': '25,35.0', 'mesh_max': '225.0,220', 'probe_count': '6,6', 'algorithm': 'bicubic', 'fade_start': '1', 'fade_end': '10', 'fade_target': '0'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\nSTATUS_HEATING\nM109 S150\nSTATUS_HOMING\nM117 Homing...\nG28 Y0 X0 Z0\nSTATUS_MESHING\nBED_MESH_CALIBRATE ADAPTIVE=1\n\n\n\n\n\n\n\n\n\n\n\nSTATUS_HEATING\nM107\nM117 Heating bed\nM190 S{ params.BED }\nM117 Heating nozzle\nM109 S{target_extruder}\nstatus_ready\nG1 Z15.0 F600\nG1 X125 Y125 F3000\nG92 E0\nG1 F9000\nstatus_printing\nM117 Printing...'}, 'gcode_macro PRINT_END': {'gcode': '\nstatus_busy\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\n\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y} F3600\nM117 Finished!\nstatus_off'}, 'gcode_macro M600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state'}, 'printer': {'kinematics': 'corexz', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '5', 'max_z_accel': '100'}, 'force_move': {'enable_force_move': 'true'}, 'exclude_object': {}, 'bed_mesh default': {'version': '1', 'points': '\n-0.100000, -0.025000, 0.012500, 0.037500, 0.125000, 0.212500\n-0.187500, -0.100000, -0.025000, 0.025000, 0.100000, 0.212500\n-0.262500, -0.162500, -0.075000, -0.012500, 0.075000, 0.187500\n-0.262500, -0.162500, -0.087500, -0.000000, 0.100000, 0.237500\n-0.200000, -0.100000, -0.012500, 0.062500, 0.200000, 0.350000\n-0.225000, -0.075000, -0.000000, 0.087500, 0.225000, 0.387500', 'x_count': '6', 'y_count': '6', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'bicubic', 'tension': '0.2', 'min_x': '25.0', 'max_x': '225.0', 'min_y': '35.0', 'max_y': '220.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_sam4e8e_00313753364B37373032303038303139-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu ebbcan': {'canbus_uuid': '8250861450f7', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set allow_park = client.park_at_cancel | default(false) | lower == \'true\' %}\n{% set retract = client.cancel_retract | default(5.0) | abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x | default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y | default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x | length > 0 or park_y | length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro | default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set idle_timeout = client.idle_timeout | default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE | default(1) | int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro | default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move | default(velocity) %}\n{% set runout_resume = True if client.runout_sensor | default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state | upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro | default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY | default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'neopixel sb_leds': {'pin': 'EBBCan:gpio16', 'chain_count': 3, 'color_order': ['GRB'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'led_effect sb_logo_busy': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1,0,0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_cleaning': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.02, 0.5)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_calibrating_z': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 0.35)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1, 0.18, 0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0, 0, 1)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_homing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.6, 0.2)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_leveling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.5, 0.1, 0.4)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_meshing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.2, 1.0, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_printing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.3, 0.3, 0.0),(0.3, 0.1, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_standby': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.01, 0.01, 0.01)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 1.0, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_nozzle_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1.0, 0.18, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 1.0, 0.1)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_standby': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.6, 0.0, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.6, 1.0, 0.0, 0.1)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_critical_error': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': True, 'endstops': '', 'layers': '\nstrobe         1  1.5   add        (1.0,  1.0, 1.0)\nbreathing      2  0     difference (0.95, 0.0, 0.0)\nstatic         1  0     top        (1.0,  0.0, 0.0)', 'leds': '\nneopixel:sb_leds'}, 'led_effect rainbow': {'frame_rate': 24.0, 'autostart': True, 'run_on_error': False, 'endstops': '', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.0, 0.3, 0.0),(0.0, 0.0, 0.3)', 'leds': '\nneopixel:sb_leds'}, 'led_effect set_nozzle_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic         0  0     top        (0.5,  0.5, 0.5)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect set_logo_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic         0  0     top        (1.0,  1.0, 1.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'gcode_macro set_logo_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nSTOP_LED_EFFECTS', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=rainbow', 'description': 'G-Code macro'}, 'gcode_macro status_part_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_busy\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_heating\nSET_LED_EFFECT EFFECT=sb_nozzle_heating', 'description': 'G-Code macro'}, 'gcode_macro status_cooling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cooling\nSET_LED_EFFECT EFFECT=sb_nozzle_cooling', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_leveling\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_homing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cleaning\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_meshing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_calibrating_z\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_printing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'adxl345': {'axes_map': ['z', '-y', 'x'], 'rate': 3200, 'cs_pin': 'EBBCan:gpio1', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'EBBCan:gpio2', 'spi_software_miso_pin': 'EBBCan:gpio3', 'spi_software_mosi_pin': 'EBBCan:gpio0'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[100.0, 100.0, 20.0]], 'accel_chip': 'adxl345'}, 'input_shaper': {'shaper_type': '3hump_ei', 'shaper_type_x': '3hump_ei', 'damping_ratio_x': 0.1, 'shaper_freq_x': 45.0, 'shaper_type_y': '3hump_ei', 'damping_ratio_y': 0.1, 'shaper_freq_y': 0.0}, 'tmc2660 stepper_x': {'cs_pin': 'PD14', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PD6', 'dir_pin': '!PD11', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'EBBCan:gpio24', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2660 stepper_y': {'cs_pin': 'PC9', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PD7', 'dir_pin': '!PD12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'PA2', 'position_endstop': 0.0, 'position_min': -4.0, 'position_max': 225.0, 'homing_speed': 35.0, 'second_homing_speed': 17.5, 'homing_retract_speed': 35.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2660 stepper_z': {'cs_pin': 'PC10', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PD8', 'dir_pin': '!PD13', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -2.5, 'position_max': 230.0, 'homing_speed': 35.0, 'second_homing_speed': 17.5, 'homing_retract_speed': 35.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'adc_temperature my_thermistor': {'resistance1': 1000.0, 'temperature1': 0.0, 'temperature2': 80.0, 'resistance2': 1309.0}, 'tmc2209 extruder': {'uart_pin': 'EBBCan:gpio20', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan:gpio27', 'min_temp': 0.0, 'max_temp': 250.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 21.527, 'pid_ki': 1.063, 'pid_kd': 108.982, 'heater_pin': 'EBBCan:gpio7', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': '!EBBCan:gpio18', 'pressure_advance': 0.065, 'pressure_advance_smooth_time': 0.02, 'dir_pin': 'EBBCan:gpio19', 'rotation_distance': 21.63024711, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!EBBCan:gpio17'}, 'filament_switch_sensor extruder': {'switch_pin': 'EBBCan:gpio21', 'pause_on_runout': True, 'runout_gcode': '', 'pause_delay': 0.5, 'event_delay': 3.0}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'thermistor chamber_temp': {'temperature1': 25.0, 'resistance1': 10000.0, 'beta': 3950.0}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PC13', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'watermark', 'max_delta': 2.0, 'heater_pin': '!PA19', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan extruder_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'EBBCan:gpio13', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.25, 'off_below': 0.0, 'cycle_time': 0.08, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'EBBCan:gpio14'}, 'probe': {'z_offset': -1.35, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': '^EBBCan:gpio22', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 3, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.015, 'samples_tolerance_retries': 3}, 'homing_override': {'set_position_z': 0.0, 'axes': 'z', 'gcode': '\nstatus_homing\nG90\nG0 Z5 F500\nG28 X0 Y0\nG0 X150 Y100 F9000\nG28 Z0\nG0 Z5 F500\nstatus_ready'}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [6, 6], 'mesh_min': [25.0, 35.0], 'mesh_max': [225.0, 220.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 150.0, 'fade_start': 1.0, 'fade_end': 10.0, 'fade_target': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[-0.1, -0.025, 0.0125, 0.0375, 0.125, 0.2125], [-0.1875, -0.1, -0.025, 0.025, 0.1, 0.2125], [-0.2625, -0.1625, -0.075, -0.0125, 0.075, 0.1875], [-0.2625, -0.1625, -0.0875, -0.0, 0.1, 0.2375], [-0.2, -0.1, -0.0125, 0.0625, 0.2, 0.35], [-0.225, -0.075, -0.0, 0.0875, 0.225, 0.3875]], 'min_x': 25.0, 'max_x': 225.0, 'min_y': 35.0, 'max_y': 220.0, 'x_count': 6, 'y_count': 6, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'bicubic', 'tension': 0.2}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\nSTATUS_HEATING\nM109 S150\nSTATUS_HOMING\nM117 Homing...\nG28 Y0 X0 Z0\nSTATUS_MESHING\nBED_MESH_CALIBRATE ADAPTIVE=1\n\n\n\n\n\n\n\n\n\n\n\nSTATUS_HEATING\nM107\nM117 Heating bed\nM190 S{ params.BED }\nM117 Heating nozzle\nM109 S{target_extruder}\nstatus_ready\nG1 Z15.0 F600\nG1 X125 Y125 F3000\nG92 E0\nG1 F9000\nstatus_printing\nM117 Printing...', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\nstatus_busy\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\n\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y} F3600\nM117 Finished!\nstatus_off', 'description': 'G-Code macro'}, 'gcode_macro m600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state', 'description': 'G-Code macro'}, 'force_move': {'enable_force_move': True}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexz', 'max_z_velocity': 5.0, 'max_z_accel': 100.0}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-04-27 21:04:40,039 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-04-27 21:04:40,041 [printer.py:reinit()] - Klipper version: v0.12.0-132-ge37b007f-dirty
2024-04-27 21:04:40,041 [printer.py:reinit()] - # Extruders: 1
2024-04-27 21:04:40,041 [printer.py:reinit()] - # Temperature devices: 2
2024-04-27 21:04:40,041 [printer.py:reinit()] - # Fans: 2
2024-04-27 21:04:40,041 [printer.py:reinit()] - # Output pins: 0
2024-04-27 21:04:40,042 [printer.py:reinit()] - # Leds: 20
2024-04-27 21:04:40,042 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-04-27 21:04:40,059 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-04-27 21:04:40,062 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor mcu&fan&heater_fan extruder_fan&filament_switch_sensor extruder&neopixel sb_leds
2024-04-27 21:04:40,346 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-04-27 21:04:40,346 [screen.py:init_klipper()] - Printer initialized
2024-04-27 21:04:40,346 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2024-04-27 21:04:40,346 [printer.py:change_state()] - Adding callback for state: ready
2024-04-27 21:04:40,446 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-04-27 21:04:40,451 [screen.py:_load_panel()] - Loading panel: main_menu
2024-04-27 21:04:40,561 [main_menu.py:__init__()] - ### Making MainMenu
2024-04-27 21:04:40,576 [main_menu.py:add_device()] - Adding device: extruder
2024-04-27 21:04:40,585 [main_menu.py:add_device()] - Adding device: heater_bed
2024-04-27 21:04:40,594 [main_menu.py:add_device()] - Adding device: temperature_sensor mcu
2024-04-27 21:04:40,645 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-27 21:04:40,646 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-27 21:04:40,676 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor mcu', 'heater_bed', 'extruder']
2024-04-27 21:04:40,677 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-04-27 21:04:40,690 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-04-27 21:05:07,341 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2024-04-27 21:05:07,342 [printer.py:change_state()] - Adding callback for state: printing
2024-04-27 21:05:07,370 [screen.py:_load_panel()] - Loading panel: job_status
2024-04-27 21:05:08,130 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-04-27 21:05:08,140 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-04-27 21:05:08,164 [job_status.py:update_file_metadata()] - Update Metadata. File: tfic-angled-honeycomb_0.2mm_PLA_MK3S_5h2m.gcode Size: 15746614
2024-04-27 21:05:08,178 [job_status.py:show_file_thumbnail()] - tfic-angled-honeycomb_0.2mm_PLA_MK3S_5h2m.gcode
2024-04-27 21:05:20,734 [functions.py:log_start()] - --------------------KlipperScreen Log Start--------------------
2024-04-27 21:05:20,734 [functions.py:log_start()] - KlipperScreen Version: v0.3.9-50-gdaed9a0
2024-04-27 21:05:20,734 [functions.py:log_start()] - Python version: 3.11
2024-04-27 21:05:20,876 [config.py:get_config_file_location()] - Passed config (-c): .
2024-04-27 21:05:20,876 [config.py:__init__()] - Config path location: /home/pi/printer_data/config/KlipperScreen.conf
2024-04-27 21:05:20,903 [config.py:log_config()] -  ===== Config File =====

=======================
2024-04-27 21:05:20,906 [config.py:__init__()] - ====== Saved Def ======

[main]
use_dpms = False
print_sort_dir = date_desc

=======================
2024-04-27 21:05:20,906 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2024-04-27 21:05:21,018 [config.py:create_translations()] - Selected lang: None OS lang: en_GB
2024-04-27 21:05:21,019 [config.py:install_language()] - Using lang en
2024-04-27 21:05:21,039 [screen.py:__init__()] - Monitors: 1 using number: 0
2024-04-27 21:05:21,040 [screen.py:__init__()] - Wayland: False Display name: :100
2024-04-27 21:05:21,043 [screen.py:__init__()] - Screen resolution: 984x540
2024-04-27 21:05:21,045 [KlippyGtk.py:__init__()] - Font size: 18.6 (medium)
2024-04-27 21:05:21,679 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2024-04-27 21:05:21,680 [screen.py:set_screenblanking_timeout()] - Not using DPMS
2024-04-27 21:05:21,689 [screen.py:initial_connection()] - Default printer: None
2024-04-27 21:05:21,762 [screen.py:connect_printer()] - Connecting to printer: Printer
2024-04-27 21:05:21,762 [screen.py:_load_panel()] - Loading panel: splash_screen
2024-04-27 21:05:21,836 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-04-27 21:05:21,858 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-04-27 21:05:21,858 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-27 21:05:21,878 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/access/oneshot_token
2024-04-27 21:05:21,891 [KlippyWebsocket.py:connect()] - Starting websocket thread
2024-04-27 21:05:21,900 [_logging.py:info()] - Websocket connected
2024-04-27 21:05:21,901 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2024-04-27 21:05:21,916 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-27 21:05:21,929 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-04-27 21:05:21,941 [printer.py:configure_cameras()] - Cameras: []
2024-04-27 21:05:21,942 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'ready', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'octoprint_compat', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 3, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-04-27 21:05:21,942 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-04-27 21:05:21,956 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-04-27 21:05:22,121 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set allow_park = client.park_at_cancel | default(false) | lower == \'true\' %}\n{% set retract = client.cancel_retract | default(5.0) | abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x | default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y | default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x | length > 0 or park_y | length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro | default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set idle_timeout = client.idle_timeout | default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE | default(1) | int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro | default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move | default(velocity) %}\n{% set runout_resume = True if client.runout_sensor | default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state | upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro | default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY | default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}"}, 'neopixel sb_leds': {'pin': 'EBBCan:gpio16', 'chain_count': '3', 'color_order': 'GRB', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0'}, 'led_effect sb_logo_busy': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (1,0,0)'}, 'led_effect sb_logo_cleaning': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.02, 0.5)'}, 'led_effect sb_logo_calibrating_z': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 0.35)'}, 'led_effect sb_logo_heating': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nbreathing  3 1 top (1, 0.18, 0)'}, 'led_effect sb_logo_cooling': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nbreathing  3 1 top (0, 0, 1)'}, 'led_effect sb_logo_homing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.6, 0.2)'}, 'led_effect sb_logo_leveling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.5, 0.1, 0.4)'}, 'led_effect sb_logo_meshing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.2, 1.0, 0.0)'}, 'led_effect sb_logo_printing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.3, 0.3, 0.0),(0.3, 0.1, 0.0)'}, 'led_effect sb_logo_standby': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.01, 0.01, 0.01)'}, 'led_effect sb_logo_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 1.0, 0.0)'}, 'led_effect sb_nozzle_heating': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (1.0, 0.18, 0.0, 0.0)'}, 'led_effect sb_nozzle_cooling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 1.0, 0.1)'}, 'led_effect sb_nozzle_standby': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.6, 0.0, 0.0, 0.0)'}, 'led_effect sb_nozzle_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.6, 1.0, 0.0, 0.1)'}, 'led_effect sb_critical_error': {'leds': '\nneopixel:sb_leds', 'layers': '\nstrobe         1  1.5   add        (1.0,  1.0, 1.0)\nbreathing      2  0     difference (0.95, 0.0, 0.0)\nstatic         1  0     top        (1.0,  0.0, 0.0)', 'autostart': 'false', 'frame_rate': '24', 'run_on_error': 'true'}, 'led_effect rainbow': {'leds': '\nneopixel:sb_leds', 'autostart': 'true', 'frame_rate': '24', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.0, 0.3, 0.0),(0.0, 0.0, 0.3)'}, 'led_effect set_nozzle_leds': {'leds': '\nneopixel:sb_leds (2,3)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nstatic         0  0     top        (0.5,  0.5, 0.5)'}, 'led_effect set_logo_leds': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nstatic         0  0     top        (1.0,  1.0, 1.0)'}, 'gcode_macro set_logo_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds STOP=1'}, 'gcode_macro set_logo_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1'}, 'gcode_macro status_off': {'gcode': '\nSTOP_LED_EFFECTS'}, 'gcode_macro status_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=rainbow'}, 'gcode_macro status_part_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready'}, 'gcode_macro status_busy': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_busy\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_heating\nSET_LED_EFFECT EFFECT=sb_nozzle_heating'}, 'gcode_macro status_cooling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cooling\nSET_LED_EFFECT EFFECT=sb_nozzle_cooling'}, 'gcode_macro status_leveling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_leveling\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_homing\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cleaning\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_meshing\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_calibrating_z\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_printing\nset_nozzle_leds_on'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_sam4e8e_00313753364B37373032303038303139-if00'}, 'mcu EBBCan': {'canbus_uuid': '8250861450f7'}, 'adxl345': {'cs_pin': 'EBBCan:gpio1', 'spi_software_sclk_pin': 'EBBCan:gpio2', 'spi_software_mosi_pin': 'EBBCan:gpio0', 'spi_software_miso_pin': 'EBBCan:gpio3', 'axes_map': 'z,-y,x'}, 'resonance_tester': {'probe_points': '100, 100, 20', 'accel_chip': 'adxl345'}, 'input_shaper': {'shaper_freq_x': '45', 'shaper_type': '3hump_ei'}, 'stepper_x': {'step_pin': 'PD6', 'dir_pin': '!PD11', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'EBBCan:gpio24', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '40'}, 'tmc2660 stepper_x': {'cs_pin': 'PD14', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'stepper_y': {'step_pin': 'PD7', 'dir_pin': '!PD12', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'PA2', 'position_endstop': '0', 'position_max': '225', 'position_min': '-4', 'homing_speed': '35', 'homing_retract_dist': '0'}, 'tmc2660 stepper_y': {'cs_pin': 'PC9', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'stepper_z': {'step_pin': 'PD8', 'dir_pin': '!PD13', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '230', 'position_min': '-2.5', 'homing_speed': '35.0'}, 'tmc2660 stepper_z': {'cs_pin': 'PC10', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'adc_temperature my_thermistor': {'temperature1': '0', 'resistance1': '1000', 'temperature2': '80', 'resistance2': '1309'}, 'extruder': {'step_pin': '!EBBCan:gpio18', 'dir_pin': 'EBBCan:gpio19', 'enable_pin': '!EBBCan:gpio17', 'microsteps': '32', 'rotation_distance': '21.63024711', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'pressure_advance': '0.065', 'pressure_advance_smooth_time': '0.02', 'gear_ratio': '50:10', 'heater_pin': 'EBBCan:gpio7', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'EBBCan:gpio27', 'control': 'pid', 'pid_kp': '21.527', 'pid_ki': '1.063', 'pid_kd': '108.982', 'min_temp': '0', 'max_temp': '250'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan:gpio20', 'run_current': '0.5', 'stealthchop_threshold': '999999'}, 'filament_switch_sensor extruder': {'pause_on_runout': 'True', 'switch_pin': 'EBBCan:gpio21'}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu'}, 'thermistor chamber_temp': {'temperature1': '25', 'resistance1': '10000', 'beta': '3950'}, 'heater_bed': {'heater_pin': '!PA19', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PC13', 'control': 'watermark', 'min_temp': '0', 'max_temp': '120'}, 'heater_fan extruder_fan': {'pin': 'EBBCan:gpio13', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'EBBCan:gpio14', 'cycle_time': '.08', 'kick_start_time': '.25'}, 'probe': {'pin': '^EBBCan:gpio22', 'x_offset': '0', 'y_offset': '0', 'samples': '3', 'samples_result': 'median', 'sample_retract_dist': '3', 'samples_tolerance': '0.015', 'samples_tolerance_retries': '3', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'z_offset': '-1.350'}, 'homing_override': {'axes': 'z', 'set_position_z': '0', 'gcode': '\nstatus_homing\nG90\nG0 Z5 F500\nG28 X0 Y0\nG0 X150 Y100 F9000\nG28 Z0\nG0 Z5 F500\nstatus_ready'}, 'bed_mesh': {'speed': '150', 'horizontal_move_z': '5', 'mesh_min': '25,35.0', 'mesh_max': '225.0,220', 'probe_count': '6,6', 'algorithm': 'bicubic', 'fade_start': '1', 'fade_end': '10', 'fade_target': '0'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\nSTATUS_HEATING\nM109 S150\nSTATUS_HOMING\nM117 Homing...\nG28 Y0 X0 Z0\nSTATUS_MESHING\nBED_MESH_CALIBRATE ADAPTIVE=1\n\n\n\n\n\n\n\n\n\n\n\nSTATUS_HEATING\nM107\nM117 Heating bed\nM190 S{ params.BED }\nM117 Heating nozzle\nM109 S{target_extruder}\nstatus_ready\nG1 Z15.0 F600\nG1 X125 Y125 F3000\nG92 E0\nG1 F9000\nstatus_printing\nM117 Printing...'}, 'gcode_macro PRINT_END': {'gcode': '\nstatus_busy\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\n\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y} F3600\nM117 Finished!\nstatus_off'}, 'gcode_macro M600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state'}, 'printer': {'kinematics': 'corexz', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '5', 'max_z_accel': '100'}, 'force_move': {'enable_force_move': 'true'}, 'exclude_object': {}, 'bed_mesh default': {'version': '1', 'points': '\n-0.100000, -0.025000, 0.012500, 0.037500, 0.125000, 0.212500\n-0.187500, -0.100000, -0.025000, 0.025000, 0.100000, 0.212500\n-0.262500, -0.162500, -0.075000, -0.012500, 0.075000, 0.187500\n-0.262500, -0.162500, -0.087500, -0.000000, 0.100000, 0.237500\n-0.200000, -0.100000, -0.012500, 0.062500, 0.200000, 0.350000\n-0.225000, -0.075000, -0.000000, 0.087500, 0.225000, 0.387500', 'x_count': '6', 'y_count': '6', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'bicubic', 'tension': '0.2', 'min_x': '25.0', 'max_x': '225.0', 'min_y': '35.0', 'max_y': '220.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_sam4e8e_00313753364B37373032303038303139-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu ebbcan': {'canbus_uuid': '8250861450f7', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set allow_park = client.park_at_cancel | default(false) | lower == \'true\' %}\n{% set retract = client.cancel_retract | default(5.0) | abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x | default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y | default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x | length > 0 or park_y | length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro | default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set idle_timeout = client.idle_timeout | default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE | default(1) | int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro | default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move | default(velocity) %}\n{% set runout_resume = True if client.runout_sensor | default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state | upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro | default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY | default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'neopixel sb_leds': {'pin': 'EBBCan:gpio16', 'chain_count': 3, 'color_order': ['GRB'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'led_effect sb_logo_busy': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1,0,0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_cleaning': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.02, 0.5)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_calibrating_z': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 0.35)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1, 0.18, 0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0, 0, 1)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_homing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.6, 0.2)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_leveling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.5, 0.1, 0.4)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_meshing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.2, 1.0, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_printing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.3, 0.3, 0.0),(0.3, 0.1, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_standby': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.01, 0.01, 0.01)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 1.0, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_nozzle_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1.0, 0.18, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 1.0, 0.1)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_standby': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.6, 0.0, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.6, 1.0, 0.0, 0.1)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_critical_error': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': True, 'endstops': '', 'layers': '\nstrobe         1  1.5   add        (1.0,  1.0, 1.0)\nbreathing      2  0     difference (0.95, 0.0, 0.0)\nstatic         1  0     top        (1.0,  0.0, 0.0)', 'leds': '\nneopixel:sb_leds'}, 'led_effect rainbow': {'frame_rate': 24.0, 'autostart': True, 'run_on_error': False, 'endstops': '', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.0, 0.3, 0.0),(0.0, 0.0, 0.3)', 'leds': '\nneopixel:sb_leds'}, 'led_effect set_nozzle_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic         0  0     top        (0.5,  0.5, 0.5)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect set_logo_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic         0  0     top        (1.0,  1.0, 1.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'gcode_macro set_logo_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nSTOP_LED_EFFECTS', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=rainbow', 'description': 'G-Code macro'}, 'gcode_macro status_part_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_busy\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_heating\nSET_LED_EFFECT EFFECT=sb_nozzle_heating', 'description': 'G-Code macro'}, 'gcode_macro status_cooling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cooling\nSET_LED_EFFECT EFFECT=sb_nozzle_cooling', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_leveling\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_homing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cleaning\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_meshing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_calibrating_z\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_printing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'adxl345': {'axes_map': ['z', '-y', 'x'], 'rate': 3200, 'cs_pin': 'EBBCan:gpio1', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'EBBCan:gpio2', 'spi_software_miso_pin': 'EBBCan:gpio3', 'spi_software_mosi_pin': 'EBBCan:gpio0'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[100.0, 100.0, 20.0]], 'accel_chip': 'adxl345'}, 'input_shaper': {'shaper_type': '3hump_ei', 'shaper_type_x': '3hump_ei', 'damping_ratio_x': 0.1, 'shaper_freq_x': 45.0, 'shaper_type_y': '3hump_ei', 'damping_ratio_y': 0.1, 'shaper_freq_y': 0.0}, 'tmc2660 stepper_x': {'cs_pin': 'PD14', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PD6', 'dir_pin': '!PD11', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'EBBCan:gpio24', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2660 stepper_y': {'cs_pin': 'PC9', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PD7', 'dir_pin': '!PD12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'PA2', 'position_endstop': 0.0, 'position_min': -4.0, 'position_max': 225.0, 'homing_speed': 35.0, 'second_homing_speed': 17.5, 'homing_retract_speed': 35.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2660 stepper_z': {'cs_pin': 'PC10', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PD8', 'dir_pin': '!PD13', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -2.5, 'position_max': 230.0, 'homing_speed': 35.0, 'second_homing_speed': 17.5, 'homing_retract_speed': 35.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'adc_temperature my_thermistor': {'resistance1': 1000.0, 'temperature1': 0.0, 'temperature2': 80.0, 'resistance2': 1309.0}, 'tmc2209 extruder': {'uart_pin': 'EBBCan:gpio20', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan:gpio27', 'min_temp': 0.0, 'max_temp': 250.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 21.527, 'pid_ki': 1.063, 'pid_kd': 108.982, 'heater_pin': 'EBBCan:gpio7', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': '!EBBCan:gpio18', 'pressure_advance': 0.065, 'pressure_advance_smooth_time': 0.02, 'dir_pin': 'EBBCan:gpio19', 'rotation_distance': 21.63024711, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!EBBCan:gpio17'}, 'filament_switch_sensor extruder': {'switch_pin': 'EBBCan:gpio21', 'pause_on_runout': True, 'runout_gcode': '', 'pause_delay': 0.5, 'event_delay': 3.0}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'thermistor chamber_temp': {'temperature1': 25.0, 'resistance1': 10000.0, 'beta': 3950.0}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PC13', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'watermark', 'max_delta': 2.0, 'heater_pin': '!PA19', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan extruder_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'EBBCan:gpio13', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.25, 'off_below': 0.0, 'cycle_time': 0.08, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'EBBCan:gpio14'}, 'probe': {'z_offset': -1.35, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': '^EBBCan:gpio22', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 3, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.015, 'samples_tolerance_retries': 3}, 'homing_override': {'set_position_z': 0.0, 'axes': 'z', 'gcode': '\nstatus_homing\nG90\nG0 Z5 F500\nG28 X0 Y0\nG0 X150 Y100 F9000\nG28 Z0\nG0 Z5 F500\nstatus_ready'}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [6, 6], 'mesh_min': [25.0, 35.0], 'mesh_max': [225.0, 220.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 150.0, 'fade_start': 1.0, 'fade_end': 10.0, 'fade_target': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[-0.1, -0.025, 0.0125, 0.0375, 0.125, 0.2125], [-0.1875, -0.1, -0.025, 0.025, 0.1, 0.2125], [-0.2625, -0.1625, -0.075, -0.0125, 0.075, 0.1875], [-0.2625, -0.1625, -0.0875, -0.0, 0.1, 0.2375], [-0.2, -0.1, -0.0125, 0.0625, 0.2, 0.35], [-0.225, -0.075, -0.0, 0.0875, 0.225, 0.3875]], 'min_x': 25.0, 'max_x': 225.0, 'min_y': 35.0, 'max_y': 220.0, 'x_count': 6, 'y_count': 6, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'bicubic', 'tension': 0.2}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\nSTATUS_HEATING\nM109 S150\nSTATUS_HOMING\nM117 Homing...\nG28 Y0 X0 Z0\nSTATUS_MESHING\nBED_MESH_CALIBRATE ADAPTIVE=1\n\n\n\n\n\n\n\n\n\n\n\nSTATUS_HEATING\nM107\nM117 Heating bed\nM190 S{ params.BED }\nM117 Heating nozzle\nM109 S{target_extruder}\nstatus_ready\nG1 Z15.0 F600\nG1 X125 Y125 F3000\nG92 E0\nG1 F9000\nstatus_printing\nM117 Printing...', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\nstatus_busy\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\n\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y} F3600\nM117 Finished!\nstatus_off', 'description': 'G-Code macro'}, 'gcode_macro m600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state', 'description': 'G-Code macro'}, 'force_move': {'enable_force_move': True}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexz', 'max_z_velocity': 5.0, 'max_z_accel': 100.0}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-04-27 21:05:22,124 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-04-27 21:05:22,126 [printer.py:reinit()] - Klipper version: v0.12.0-132-ge37b007f-dirty
2024-04-27 21:05:22,126 [printer.py:reinit()] - # Extruders: 1
2024-04-27 21:05:22,127 [printer.py:reinit()] - # Temperature devices: 2
2024-04-27 21:05:22,127 [printer.py:reinit()] - # Fans: 2
2024-04-27 21:05:22,127 [printer.py:reinit()] - # Output pins: 0
2024-04-27 21:05:22,127 [printer.py:reinit()] - # Leds: 20
2024-04-27 21:05:22,127 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-04-27 21:05:22,148 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-04-27 21:05:22,150 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor mcu&fan&heater_fan extruder_fan&filament_switch_sensor extruder&neopixel sb_leds
2024-04-27 21:05:22,433 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-04-27 21:05:22,433 [screen.py:init_klipper()] - Printer initialized
2024-04-27 21:05:22,434 [printer.py:change_state()] - Changing state from 'disconnected' to 'printing'
2024-04-27 21:05:22,434 [printer.py:change_state()] - Adding callback for state: printing
2024-04-27 21:05:22,548 [screen.py:_load_panel()] - Loading panel: job_status
2024-04-27 21:05:22,754 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-04-27 21:05:22,765 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-04-27 21:05:22,794 [job_status.py:update_file_metadata()] - Cannot find file metadata. Listening for updated metadata
2024-04-27 21:05:22,795 [job_status.py:show_file_thumbnail()] - tfic-angled-honeycomb_0.2mm_PLA_MK3S_5h2m.gcode
2024-04-27 21:05:22,795 [job_status.py:show_file_thumbnail()] - no pixbuf
2024-04-27 21:05:22,818 [job_status.py:update_file_metadata()] - Update Metadata. File: tfic-angled-honeycomb_0.2mm_PLA_MK3S_5h2m.gcode Size: 15746614
2024-04-27 21:05:22,824 [job_status.py:show_file_thumbnail()] - tfic-angled-honeycomb_0.2mm_PLA_MK3S_5h2m.gcode
2024-04-27 21:11:04,929 [functions.py:log_start()] - --------------------KlipperScreen Log Start--------------------
2024-04-27 21:11:04,930 [functions.py:log_start()] - KlipperScreen Version: v0.3.9-50-gdaed9a0
2024-04-27 21:11:04,930 [functions.py:log_start()] - Python version: 3.11
2024-04-27 21:11:05,071 [config.py:get_config_file_location()] - Passed config (-c): .
2024-04-27 21:11:05,072 [config.py:__init__()] - Config path location: /home/pi/printer_data/config/KlipperScreen.conf
2024-04-27 21:11:05,097 [config.py:log_config()] -  ===== Config File =====

=======================
2024-04-27 21:11:05,099 [config.py:__init__()] - ====== Saved Def ======

[main]
use_dpms = False
print_sort_dir = date_desc

=======================
2024-04-27 21:11:05,100 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2024-04-27 21:11:05,208 [config.py:create_translations()] - Selected lang: None OS lang: en_GB
2024-04-27 21:11:05,208 [config.py:install_language()] - Using lang en
2024-04-27 21:11:05,227 [screen.py:__init__()] - Monitors: 1 using number: 0
2024-04-27 21:11:05,229 [screen.py:__init__()] - Wayland: False Display name: :100
2024-04-27 21:11:05,232 [screen.py:__init__()] - Screen resolution: 984x540
2024-04-27 21:11:05,234 [KlippyGtk.py:__init__()] - Font size: 18.6 (medium)
2024-04-27 21:11:05,882 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2024-04-27 21:11:05,882 [screen.py:set_screenblanking_timeout()] - Not using DPMS
2024-04-27 21:11:05,890 [screen.py:initial_connection()] - Default printer: None
2024-04-27 21:11:05,957 [screen.py:connect_printer()] - Connecting to printer: Printer
2024-04-27 21:11:05,958 [screen.py:_load_panel()] - Loading panel: splash_screen
2024-04-27 21:11:06,026 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-04-27 21:11:06,044 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-04-27 21:11:06,045 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-27 21:11:06,062 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/access/oneshot_token
2024-04-27 21:11:06,075 [KlippyWebsocket.py:connect()] - Starting websocket thread
2024-04-27 21:11:06,086 [_logging.py:info()] - Websocket connected
2024-04-27 21:11:06,087 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2024-04-27 21:11:06,110 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-27 21:11:06,123 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-04-27 21:11:06,134 [printer.py:configure_cameras()] - Cameras: []
2024-04-27 21:11:06,135 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'ready', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'octoprint_compat', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 3, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-04-27 21:11:06,135 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-04-27 21:11:06,149 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-04-27 21:11:06,251 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set allow_park = client.park_at_cancel | default(false) | lower == \'true\' %}\n{% set retract = client.cancel_retract | default(5.0) | abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x | default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y | default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x | length > 0 or park_y | length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro | default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set idle_timeout = client.idle_timeout | default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE | default(1) | int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro | default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move | default(velocity) %}\n{% set runout_resume = True if client.runout_sensor | default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state | upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro | default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY | default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}"}, 'neopixel sb_leds': {'pin': 'EBBCan:gpio16', 'chain_count': '3', 'color_order': 'GRB', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0'}, 'led_effect sb_logo_busy': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (1,0,0)'}, 'led_effect sb_logo_cleaning': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.02, 0.5)'}, 'led_effect sb_logo_calibrating_z': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 0.35)'}, 'led_effect sb_logo_heating': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nbreathing  3 1 top (1, 0.18, 0)'}, 'led_effect sb_logo_cooling': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nbreathing  3 1 top (0, 0, 1)'}, 'led_effect sb_logo_homing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.6, 0.2)'}, 'led_effect sb_logo_leveling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.5, 0.1, 0.4)'}, 'led_effect sb_logo_meshing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.2, 1.0, 0.0)'}, 'led_effect sb_logo_printing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.3, 0.3, 0.0),(0.3, 0.1, 0.0)'}, 'led_effect sb_logo_standby': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.01, 0.01, 0.01)'}, 'led_effect sb_logo_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 1.0, 0.0)'}, 'led_effect sb_nozzle_heating': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (1.0, 0.18, 0.0, 0.0)'}, 'led_effect sb_nozzle_cooling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 1.0, 0.1)'}, 'led_effect sb_nozzle_standby': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.6, 0.0, 0.0, 0.0)'}, 'led_effect sb_nozzle_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.6, 1.0, 0.0, 0.1)'}, 'led_effect sb_critical_error': {'leds': '\nneopixel:sb_leds', 'layers': '\nstrobe         1  1.5   add        (1.0,  1.0, 1.0)\nbreathing      2  0     difference (0.95, 0.0, 0.0)\nstatic         1  0     top        (1.0,  0.0, 0.0)', 'autostart': 'false', 'frame_rate': '24', 'run_on_error': 'true'}, 'led_effect rainbow': {'leds': '\nneopixel:sb_leds', 'autostart': 'true', 'frame_rate': '24', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.0, 0.3, 0.0),(0.0, 0.0, 0.3)'}, 'led_effect set_nozzle_leds': {'leds': '\nneopixel:sb_leds (2,3)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nstatic         0  0     top        (0.5,  0.5, 0.5)'}, 'led_effect set_logo_leds': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nstatic         0  0     top        (1.0,  1.0, 1.0)'}, 'gcode_macro set_logo_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds STOP=1'}, 'gcode_macro set_logo_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1'}, 'gcode_macro status_off': {'gcode': '\nSTOP_LED_EFFECTS'}, 'gcode_macro status_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=rainbow'}, 'gcode_macro status_part_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready'}, 'gcode_macro status_busy': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_busy\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_heating\nSET_LED_EFFECT EFFECT=sb_nozzle_heating'}, 'gcode_macro status_cooling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cooling\nSET_LED_EFFECT EFFECT=sb_nozzle_cooling'}, 'gcode_macro status_leveling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_leveling\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_homing\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cleaning\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_meshing\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_calibrating_z\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_printing\nset_nozzle_leds_on'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_sam4e8e_00313753364B37373032303038303139-if00'}, 'mcu EBBCan': {'canbus_uuid': '8250861450f7'}, 'adxl345': {'cs_pin': 'EBBCan:gpio1', 'spi_software_sclk_pin': 'EBBCan:gpio2', 'spi_software_mosi_pin': 'EBBCan:gpio0', 'spi_software_miso_pin': 'EBBCan:gpio3', 'axes_map': 'z,-y,x'}, 'resonance_tester': {'probe_points': '100, 100, 20', 'accel_chip': 'adxl345'}, 'input_shaper': {'shaper_freq_x': '45', 'shaper_type': '3hump_ei'}, 'stepper_x': {'step_pin': 'PD6', 'dir_pin': '!PD11', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'EBBCan:gpio24', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '40'}, 'tmc2660 stepper_x': {'cs_pin': 'PD14', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'stepper_y': {'step_pin': 'PD7', 'dir_pin': '!PD12', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'PA2', 'position_endstop': '0', 'position_max': '225', 'position_min': '-4', 'homing_speed': '35', 'homing_retract_dist': '0'}, 'tmc2660 stepper_y': {'cs_pin': 'PC9', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'stepper_z': {'step_pin': 'PD8', 'dir_pin': '!PD13', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '230', 'position_min': '-2.5', 'homing_speed': '35.0'}, 'tmc2660 stepper_z': {'cs_pin': 'PC10', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'adc_temperature my_thermistor': {'temperature1': '0', 'resistance1': '1000', 'temperature2': '80', 'resistance2': '1309'}, 'extruder': {'step_pin': '!EBBCan:gpio18', 'dir_pin': 'EBBCan:gpio19', 'enable_pin': '!EBBCan:gpio17', 'microsteps': '32', 'rotation_distance': '21.63024711', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'pressure_advance': '0.065', 'pressure_advance_smooth_time': '0.02', 'gear_ratio': '50:10', 'heater_pin': 'EBBCan:gpio7', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'EBBCan:gpio27', 'control': 'pid', 'pid_kp': '21.527', 'pid_ki': '1.063', 'pid_kd': '108.982', 'min_temp': '0', 'max_temp': '250'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan:gpio20', 'run_current': '0.5', 'stealthchop_threshold': '999999'}, 'filament_switch_sensor extruder': {'pause_on_runout': 'True', 'switch_pin': 'EBBCan:gpio21'}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu'}, 'thermistor chamber_temp': {'temperature1': '25', 'resistance1': '10000', 'beta': '3950'}, 'heater_bed': {'heater_pin': '!PA19', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PC13', 'control': 'watermark', 'min_temp': '0', 'max_temp': '120'}, 'heater_fan extruder_fan': {'pin': 'EBBCan:gpio13', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'EBBCan:gpio14', 'cycle_time': '.08', 'kick_start_time': '.25'}, 'probe': {'pin': '^EBBCan:gpio22', 'x_offset': '0', 'y_offset': '0', 'samples': '3', 'samples_result': 'median', 'sample_retract_dist': '3', 'samples_tolerance': '0.015', 'samples_tolerance_retries': '3', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'z_offset': '-1.350'}, 'homing_override': {'axes': 'z', 'set_position_z': '0', 'gcode': '\nstatus_homing\nG90\nG0 Z5 F500\nG28 X0 Y0\nG0 X150 Y100 F9000\nG28 Z0\nG0 Z5 F500\nstatus_ready'}, 'bed_mesh': {'speed': '150', 'horizontal_move_z': '5', 'mesh_min': '25,35.0', 'mesh_max': '225.0,220', 'probe_count': '6,6', 'algorithm': 'bicubic', 'fade_start': '1', 'fade_end': '10', 'fade_target': '0'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\nSTATUS_HEATING\nM109 S150\nSTATUS_HOMING\nM117 Homing...\nG28 Y0 X0 Z0\nSTATUS_MESHING\nBED_MESH_CALIBRATE ADAPTIVE=1\n\n\n\n\n\n\n\n\n\n\n\nSTATUS_HEATING\nM107\nM117 Heating bed\nM190 S{ params.BED }\nM117 Heating nozzle\nM109 S{target_extruder}\nstatus_ready\nG1 Z15.0 F600\nG1 X125 Y125 F3000\nG92 E0\nG1 F9000\nstatus_printing\nM117 Printing...'}, 'gcode_macro PRINT_END': {'gcode': '\nstatus_busy\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\n\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y} F3600\nM117 Finished!\nstatus_off'}, 'gcode_macro M600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state'}, 'printer': {'kinematics': 'corexz', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '5', 'max_z_accel': '100'}, 'force_move': {'enable_force_move': 'true'}, 'exclude_object': {}, 'bed_mesh default': {'version': '1', 'points': '\n-0.100000, -0.025000, 0.012500, 0.037500, 0.125000, 0.212500\n-0.187500, -0.100000, -0.025000, 0.025000, 0.100000, 0.212500\n-0.262500, -0.162500, -0.075000, -0.012500, 0.075000, 0.187500\n-0.262500, -0.162500, -0.087500, -0.000000, 0.100000, 0.237500\n-0.200000, -0.100000, -0.012500, 0.062500, 0.200000, 0.350000\n-0.225000, -0.075000, -0.000000, 0.087500, 0.225000, 0.387500', 'x_count': '6', 'y_count': '6', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'bicubic', 'tension': '0.2', 'min_x': '25.0', 'max_x': '225.0', 'min_y': '35.0', 'max_y': '220.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_sam4e8e_00313753364B37373032303038303139-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu ebbcan': {'canbus_uuid': '8250861450f7', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set allow_park = client.park_at_cancel | default(false) | lower == \'true\' %}\n{% set retract = client.cancel_retract | default(5.0) | abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x | default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y | default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x | length > 0 or park_y | length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro | default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set idle_timeout = client.idle_timeout | default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE | default(1) | int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro | default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move | default(velocity) %}\n{% set runout_resume = True if client.runout_sensor | default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state | upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro | default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY | default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'neopixel sb_leds': {'pin': 'EBBCan:gpio16', 'chain_count': 3, 'color_order': ['GRB'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'led_effect sb_logo_busy': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1,0,0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_cleaning': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.02, 0.5)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_calibrating_z': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 0.35)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1, 0.18, 0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0, 0, 1)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_homing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.6, 0.2)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_leveling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.5, 0.1, 0.4)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_meshing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.2, 1.0, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_printing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.3, 0.3, 0.0),(0.3, 0.1, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_standby': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.01, 0.01, 0.01)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 1.0, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_nozzle_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1.0, 0.18, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 1.0, 0.1)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_standby': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.6, 0.0, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.6, 1.0, 0.0, 0.1)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_critical_error': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': True, 'endstops': '', 'layers': '\nstrobe         1  1.5   add        (1.0,  1.0, 1.0)\nbreathing      2  0     difference (0.95, 0.0, 0.0)\nstatic         1  0     top        (1.0,  0.0, 0.0)', 'leds': '\nneopixel:sb_leds'}, 'led_effect rainbow': {'frame_rate': 24.0, 'autostart': True, 'run_on_error': False, 'endstops': '', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.0, 0.3, 0.0),(0.0, 0.0, 0.3)', 'leds': '\nneopixel:sb_leds'}, 'led_effect set_nozzle_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic         0  0     top        (0.5,  0.5, 0.5)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect set_logo_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic         0  0     top        (1.0,  1.0, 1.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'gcode_macro set_logo_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nSTOP_LED_EFFECTS', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=rainbow', 'description': 'G-Code macro'}, 'gcode_macro status_part_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_busy\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_heating\nSET_LED_EFFECT EFFECT=sb_nozzle_heating', 'description': 'G-Code macro'}, 'gcode_macro status_cooling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cooling\nSET_LED_EFFECT EFFECT=sb_nozzle_cooling', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_leveling\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_homing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cleaning\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_meshing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_calibrating_z\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_printing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'adxl345': {'axes_map': ['z', '-y', 'x'], 'rate': 3200, 'cs_pin': 'EBBCan:gpio1', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'EBBCan:gpio2', 'spi_software_miso_pin': 'EBBCan:gpio3', 'spi_software_mosi_pin': 'EBBCan:gpio0'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[100.0, 100.0, 20.0]], 'accel_chip': 'adxl345'}, 'input_shaper': {'shaper_type': '3hump_ei', 'shaper_type_x': '3hump_ei', 'damping_ratio_x': 0.1, 'shaper_freq_x': 45.0, 'shaper_type_y': '3hump_ei', 'damping_ratio_y': 0.1, 'shaper_freq_y': 0.0}, 'tmc2660 stepper_x': {'cs_pin': 'PD14', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PD6', 'dir_pin': '!PD11', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'EBBCan:gpio24', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2660 stepper_y': {'cs_pin': 'PC9', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PD7', 'dir_pin': '!PD12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'PA2', 'position_endstop': 0.0, 'position_min': -4.0, 'position_max': 225.0, 'homing_speed': 35.0, 'second_homing_speed': 17.5, 'homing_retract_speed': 35.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2660 stepper_z': {'cs_pin': 'PC10', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PD8', 'dir_pin': '!PD13', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -2.5, 'position_max': 230.0, 'homing_speed': 35.0, 'second_homing_speed': 17.5, 'homing_retract_speed': 35.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'adc_temperature my_thermistor': {'resistance1': 1000.0, 'temperature1': 0.0, 'temperature2': 80.0, 'resistance2': 1309.0}, 'tmc2209 extruder': {'uart_pin': 'EBBCan:gpio20', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan:gpio27', 'min_temp': 0.0, 'max_temp': 250.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 21.527, 'pid_ki': 1.063, 'pid_kd': 108.982, 'heater_pin': 'EBBCan:gpio7', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': '!EBBCan:gpio18', 'pressure_advance': 0.065, 'pressure_advance_smooth_time': 0.02, 'dir_pin': 'EBBCan:gpio19', 'rotation_distance': 21.63024711, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!EBBCan:gpio17'}, 'filament_switch_sensor extruder': {'switch_pin': 'EBBCan:gpio21', 'pause_on_runout': True, 'runout_gcode': '', 'pause_delay': 0.5, 'event_delay': 3.0}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'thermistor chamber_temp': {'temperature1': 25.0, 'resistance1': 10000.0, 'beta': 3950.0}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PC13', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'watermark', 'max_delta': 2.0, 'heater_pin': '!PA19', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan extruder_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'EBBCan:gpio13', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.25, 'off_below': 0.0, 'cycle_time': 0.08, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'EBBCan:gpio14'}, 'probe': {'z_offset': -1.35, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': '^EBBCan:gpio22', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 3, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.015, 'samples_tolerance_retries': 3}, 'homing_override': {'set_position_z': 0.0, 'axes': 'z', 'gcode': '\nstatus_homing\nG90\nG0 Z5 F500\nG28 X0 Y0\nG0 X150 Y100 F9000\nG28 Z0\nG0 Z5 F500\nstatus_ready'}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [6, 6], 'mesh_min': [25.0, 35.0], 'mesh_max': [225.0, 220.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 150.0, 'fade_start': 1.0, 'fade_end': 10.0, 'fade_target': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[-0.1, -0.025, 0.0125, 0.0375, 0.125, 0.2125], [-0.1875, -0.1, -0.025, 0.025, 0.1, 0.2125], [-0.2625, -0.1625, -0.075, -0.0125, 0.075, 0.1875], [-0.2625, -0.1625, -0.0875, -0.0, 0.1, 0.2375], [-0.2, -0.1, -0.0125, 0.0625, 0.2, 0.35], [-0.225, -0.075, -0.0, 0.0875, 0.225, 0.3875]], 'min_x': 25.0, 'max_x': 225.0, 'min_y': 35.0, 'max_y': 220.0, 'x_count': 6, 'y_count': 6, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'bicubic', 'tension': 0.2}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\nSTATUS_HEATING\nM109 S150\nSTATUS_HOMING\nM117 Homing...\nG28 Y0 X0 Z0\nSTATUS_MESHING\nBED_MESH_CALIBRATE ADAPTIVE=1\n\n\n\n\n\n\n\n\n\n\n\nSTATUS_HEATING\nM107\nM117 Heating bed\nM190 S{ params.BED }\nM117 Heating nozzle\nM109 S{target_extruder}\nstatus_ready\nG1 Z15.0 F600\nG1 X125 Y125 F3000\nG92 E0\nG1 F9000\nstatus_printing\nM117 Printing...', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\nstatus_busy\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\n\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y} F3600\nM117 Finished!\nstatus_off', 'description': 'G-Code macro'}, 'gcode_macro m600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state', 'description': 'G-Code macro'}, 'force_move': {'enable_force_move': True}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexz', 'max_z_velocity': 5.0, 'max_z_accel': 100.0}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-04-27 21:11:06,254 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-04-27 21:11:06,255 [printer.py:reinit()] - Klipper version: v0.12.0-132-ge37b007f-dirty
2024-04-27 21:11:06,256 [printer.py:reinit()] - # Extruders: 1
2024-04-27 21:11:06,256 [printer.py:reinit()] - # Temperature devices: 2
2024-04-27 21:11:06,256 [printer.py:reinit()] - # Fans: 2
2024-04-27 21:11:06,256 [printer.py:reinit()] - # Output pins: 0
2024-04-27 21:11:06,256 [printer.py:reinit()] - # Leds: 20
2024-04-27 21:11:06,256 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-04-27 21:11:06,274 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-04-27 21:11:06,276 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor mcu&fan&heater_fan extruder_fan&filament_switch_sensor extruder&neopixel sb_leds
2024-04-27 21:11:06,565 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-04-27 21:11:06,565 [screen.py:init_klipper()] - Printer initialized
2024-04-27 21:11:06,566 [printer.py:change_state()] - Changing state from 'disconnected' to 'printing'
2024-04-27 21:11:06,566 [printer.py:change_state()] - Adding callback for state: printing
2024-04-27 21:11:06,686 [screen.py:_load_panel()] - Loading panel: job_status
2024-04-27 21:11:06,883 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-04-27 21:11:06,893 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-04-27 21:11:06,918 [job_status.py:update_file_metadata()] - Cannot find file metadata. Listening for updated metadata
2024-04-27 21:11:06,920 [job_status.py:show_file_thumbnail()] - tfic-angled-honeycomb_0.2mm_PLA_MK3S_5h2m.gcode
2024-04-27 21:11:06,921 [job_status.py:show_file_thumbnail()] - no pixbuf
2024-04-27 21:11:06,938 [job_status.py:update_file_metadata()] - Update Metadata. File: tfic-angled-honeycomb_0.2mm_PLA_MK3S_5h2m.gcode Size: 15746614
2024-04-27 21:11:06,945 [job_status.py:show_file_thumbnail()] - tfic-angled-honeycomb_0.2mm_PLA_MK3S_5h2m.gcode
2024-04-27 21:11:54,711 [functions.py:log_start()] - --------------------KlipperScreen Log Start--------------------
2024-04-27 21:11:54,711 [functions.py:log_start()] - KlipperScreen Version: v0.3.9-50-gdaed9a0
2024-04-27 21:11:54,712 [functions.py:log_start()] - Python version: 3.11
2024-04-27 21:11:54,854 [config.py:get_config_file_location()] - Passed config (-c): .
2024-04-27 21:11:54,854 [config.py:__init__()] - Config path location: /home/pi/printer_data/config/KlipperScreen.conf
2024-04-27 21:11:54,878 [config.py:log_config()] -  ===== Config File =====

=======================
2024-04-27 21:11:54,880 [config.py:__init__()] - ====== Saved Def ======

[main]
use_dpms = False
print_sort_dir = date_desc

=======================
2024-04-27 21:11:54,881 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2024-04-27 21:11:54,991 [config.py:create_translations()] - Selected lang: None OS lang: en_GB
2024-04-27 21:11:54,991 [config.py:install_language()] - Using lang en
2024-04-27 21:11:55,010 [screen.py:__init__()] - Monitors: 1 using number: 0
2024-04-27 21:11:55,012 [screen.py:__init__()] - Wayland: False Display name: :100
2024-04-27 21:11:55,014 [screen.py:__init__()] - Screen resolution: 984x540
2024-04-27 21:11:55,016 [KlippyGtk.py:__init__()] - Font size: 18.6 (medium)
2024-04-27 21:11:55,558 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2024-04-27 21:11:55,559 [screen.py:set_screenblanking_timeout()] - Not using DPMS
2024-04-27 21:11:55,567 [screen.py:initial_connection()] - Default printer: None
2024-04-27 21:11:55,635 [screen.py:connect_printer()] - Connecting to printer: Printer
2024-04-27 21:11:55,635 [screen.py:_load_panel()] - Loading panel: splash_screen
2024-04-27 21:11:55,703 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-04-27 21:11:55,720 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-04-27 21:11:55,721 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-27 21:11:55,739 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/access/oneshot_token
2024-04-27 21:11:55,751 [KlippyWebsocket.py:connect()] - Starting websocket thread
2024-04-27 21:11:55,760 [_logging.py:info()] - Websocket connected
2024-04-27 21:11:55,760 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2024-04-27 21:11:55,781 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-27 21:11:55,794 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-04-27 21:11:55,806 [printer.py:configure_cameras()] - Cameras: []
2024-04-27 21:11:55,807 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'ready', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'octoprint_compat', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 3, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-04-27 21:11:55,807 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-04-27 21:11:55,820 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-04-27 21:11:55,868 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set allow_park = client.park_at_cancel | default(false) | lower == \'true\' %}\n{% set retract = client.cancel_retract | default(5.0) | abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x | default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y | default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x | length > 0 or park_y | length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro | default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set idle_timeout = client.idle_timeout | default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE | default(1) | int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro | default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move | default(velocity) %}\n{% set runout_resume = True if client.runout_sensor | default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state | upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro | default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY | default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}"}, 'neopixel sb_leds': {'pin': 'EBBCan:gpio16', 'chain_count': '3', 'color_order': 'GRB', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0'}, 'led_effect sb_logo_busy': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (1,0,0)'}, 'led_effect sb_logo_cleaning': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.02, 0.5)'}, 'led_effect sb_logo_calibrating_z': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 0.35)'}, 'led_effect sb_logo_heating': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nbreathing  3 1 top (1, 0.18, 0)'}, 'led_effect sb_logo_cooling': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nbreathing  3 1 top (0, 0, 1)'}, 'led_effect sb_logo_homing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.6, 0.2)'}, 'led_effect sb_logo_leveling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.5, 0.1, 0.4)'}, 'led_effect sb_logo_meshing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.2, 1.0, 0.0)'}, 'led_effect sb_logo_printing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.3, 0.3, 0.0),(0.3, 0.1, 0.0)'}, 'led_effect sb_logo_standby': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.01, 0.01, 0.01)'}, 'led_effect sb_logo_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 1.0, 0.0)'}, 'led_effect sb_nozzle_heating': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (1.0, 0.18, 0.0, 0.0)'}, 'led_effect sb_nozzle_cooling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 1.0, 0.1)'}, 'led_effect sb_nozzle_standby': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.6, 0.0, 0.0, 0.0)'}, 'led_effect sb_nozzle_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.6, 1.0, 0.0, 0.1)'}, 'led_effect sb_critical_error': {'leds': '\nneopixel:sb_leds', 'layers': '\nstrobe         1  1.5   add        (1.0,  1.0, 1.0)\nbreathing      2  0     difference (0.95, 0.0, 0.0)\nstatic         1  0     top        (1.0,  0.0, 0.0)', 'autostart': 'false', 'frame_rate': '24', 'run_on_error': 'true'}, 'led_effect rainbow': {'leds': '\nneopixel:sb_leds', 'autostart': 'true', 'frame_rate': '24', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.0, 0.3, 0.0),(0.0, 0.0, 0.3)'}, 'led_effect set_nozzle_leds': {'leds': '\nneopixel:sb_leds (2,3)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nstatic         0  0     top        (0.5,  0.5, 0.5)'}, 'led_effect set_logo_leds': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nstatic         0  0     top        (1.0,  1.0, 1.0)'}, 'gcode_macro set_logo_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds STOP=1'}, 'gcode_macro set_logo_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1'}, 'gcode_macro status_off': {'gcode': '\nSTOP_LED_EFFECTS'}, 'gcode_macro status_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=rainbow'}, 'gcode_macro status_part_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready'}, 'gcode_macro status_busy': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_busy\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_heating\nSET_LED_EFFECT EFFECT=sb_nozzle_heating'}, 'gcode_macro status_cooling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cooling\nSET_LED_EFFECT EFFECT=sb_nozzle_cooling'}, 'gcode_macro status_leveling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_leveling\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_homing\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cleaning\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_meshing\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_calibrating_z\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_printing\nset_nozzle_leds_on'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_sam4e8e_00313753364B37373032303038303139-if00'}, 'mcu EBBCan': {'canbus_uuid': '8250861450f7'}, 'adxl345': {'cs_pin': 'EBBCan:gpio1', 'spi_software_sclk_pin': 'EBBCan:gpio2', 'spi_software_mosi_pin': 'EBBCan:gpio0', 'spi_software_miso_pin': 'EBBCan:gpio3', 'axes_map': 'z,-y,x'}, 'resonance_tester': {'probe_points': '100, 100, 20', 'accel_chip': 'adxl345'}, 'input_shaper': {'shaper_freq_x': '45', 'shaper_type': '3hump_ei'}, 'stepper_x': {'step_pin': 'PD6', 'dir_pin': '!PD11', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'EBBCan:gpio24', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '40'}, 'tmc2660 stepper_x': {'cs_pin': 'PD14', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'stepper_y': {'step_pin': 'PD7', 'dir_pin': '!PD12', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'PA2', 'position_endstop': '0', 'position_max': '225', 'position_min': '-4', 'homing_speed': '35', 'homing_retract_dist': '0'}, 'tmc2660 stepper_y': {'cs_pin': 'PC9', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'stepper_z': {'step_pin': 'PD8', 'dir_pin': '!PD13', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '230', 'position_min': '-2.5', 'homing_speed': '35.0'}, 'tmc2660 stepper_z': {'cs_pin': 'PC10', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'adc_temperature my_thermistor': {'temperature1': '0', 'resistance1': '1000', 'temperature2': '80', 'resistance2': '1309'}, 'extruder': {'step_pin': '!EBBCan:gpio18', 'dir_pin': 'EBBCan:gpio19', 'enable_pin': '!EBBCan:gpio17', 'microsteps': '32', 'rotation_distance': '21.63024711', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'pressure_advance': '0.065', 'pressure_advance_smooth_time': '0.02', 'gear_ratio': '50:10', 'heater_pin': 'EBBCan:gpio7', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'EBBCan:gpio27', 'control': 'pid', 'pid_kp': '21.527', 'pid_ki': '1.063', 'pid_kd': '108.982', 'min_temp': '0', 'max_temp': '250'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan:gpio20', 'run_current': '0.5', 'stealthchop_threshold': '999999'}, 'filament_switch_sensor extruder': {'pause_on_runout': 'True', 'switch_pin': 'EBBCan:gpio21'}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu'}, 'thermistor chamber_temp': {'temperature1': '25', 'resistance1': '10000', 'beta': '3950'}, 'heater_bed': {'heater_pin': '!PA19', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PC13', 'control': 'watermark', 'min_temp': '0', 'max_temp': '120'}, 'heater_fan extruder_fan': {'pin': 'EBBCan:gpio13', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'EBBCan:gpio14', 'cycle_time': '.08', 'kick_start_time': '.25'}, 'probe': {'pin': '^EBBCan:gpio22', 'x_offset': '0', 'y_offset': '0', 'samples': '3', 'samples_result': 'median', 'sample_retract_dist': '3', 'samples_tolerance': '0.015', 'samples_tolerance_retries': '3', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'z_offset': '-1.350'}, 'homing_override': {'axes': 'z', 'set_position_z': '0', 'gcode': '\nstatus_homing\nG90\nG0 Z5 F500\nG28 X0 Y0\nG0 X150 Y100 F9000\nG28 Z0\nG0 Z5 F500\nstatus_ready'}, 'bed_mesh': {'speed': '150', 'horizontal_move_z': '5', 'mesh_min': '25,35.0', 'mesh_max': '225.0,220', 'probe_count': '6,6', 'algorithm': 'bicubic', 'fade_start': '1', 'fade_end': '10', 'fade_target': '0'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\nSTATUS_HEATING\nM109 S150\nSTATUS_HOMING\nM117 Homing...\nG28 Y0 X0 Z0\nSTATUS_MESHING\nBED_MESH_CALIBRATE ADAPTIVE=1\n\n\n\n\n\n\n\n\n\n\n\nSTATUS_HEATING\nM107\nM117 Heating bed\nM190 S{ params.BED }\nM117 Heating nozzle\nM109 S{target_extruder}\nstatus_ready\nG1 Z15.0 F600\nG1 X125 Y125 F3000\nG92 E0\nG1 F9000\nstatus_printing\nM117 Printing...'}, 'gcode_macro PRINT_END': {'gcode': '\nstatus_busy\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\n\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y} F3600\nM117 Finished!\nstatus_off'}, 'gcode_macro M600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state'}, 'printer': {'kinematics': 'corexz', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '5', 'max_z_accel': '100'}, 'force_move': {'enable_force_move': 'true'}, 'exclude_object': {}, 'bed_mesh default': {'version': '1', 'points': '\n-0.100000, -0.025000, 0.012500, 0.037500, 0.125000, 0.212500\n-0.187500, -0.100000, -0.025000, 0.025000, 0.100000, 0.212500\n-0.262500, -0.162500, -0.075000, -0.012500, 0.075000, 0.187500\n-0.262500, -0.162500, -0.087500, -0.000000, 0.100000, 0.237500\n-0.200000, -0.100000, -0.012500, 0.062500, 0.200000, 0.350000\n-0.225000, -0.075000, -0.000000, 0.087500, 0.225000, 0.387500', 'x_count': '6', 'y_count': '6', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'bicubic', 'tension': '0.2', 'min_x': '25.0', 'max_x': '225.0', 'min_y': '35.0', 'max_y': '220.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_sam4e8e_00313753364B37373032303038303139-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu ebbcan': {'canbus_uuid': '8250861450f7', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set allow_park = client.park_at_cancel | default(false) | lower == \'true\' %}\n{% set retract = client.cancel_retract | default(5.0) | abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x | default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y | default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x | length > 0 or park_y | length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro | default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set idle_timeout = client.idle_timeout | default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE | default(1) | int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro | default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move | default(velocity) %}\n{% set runout_resume = True if client.runout_sensor | default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state | upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro | default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY | default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'neopixel sb_leds': {'pin': 'EBBCan:gpio16', 'chain_count': 3, 'color_order': ['GRB'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'led_effect sb_logo_busy': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1,0,0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_cleaning': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.02, 0.5)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_calibrating_z': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 0.35)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1, 0.18, 0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0, 0, 1)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_homing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.6, 0.2)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_leveling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.5, 0.1, 0.4)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_meshing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.2, 1.0, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_printing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.3, 0.3, 0.0),(0.3, 0.1, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_standby': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.01, 0.01, 0.01)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 1.0, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_nozzle_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1.0, 0.18, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 1.0, 0.1)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_standby': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.6, 0.0, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.6, 1.0, 0.0, 0.1)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_critical_error': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': True, 'endstops': '', 'layers': '\nstrobe         1  1.5   add        (1.0,  1.0, 1.0)\nbreathing      2  0     difference (0.95, 0.0, 0.0)\nstatic         1  0     top        (1.0,  0.0, 0.0)', 'leds': '\nneopixel:sb_leds'}, 'led_effect rainbow': {'frame_rate': 24.0, 'autostart': True, 'run_on_error': False, 'endstops': '', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.0, 0.3, 0.0),(0.0, 0.0, 0.3)', 'leds': '\nneopixel:sb_leds'}, 'led_effect set_nozzle_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic         0  0     top        (0.5,  0.5, 0.5)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect set_logo_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic         0  0     top        (1.0,  1.0, 1.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'gcode_macro set_logo_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nSTOP_LED_EFFECTS', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=rainbow', 'description': 'G-Code macro'}, 'gcode_macro status_part_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_busy\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_heating\nSET_LED_EFFECT EFFECT=sb_nozzle_heating', 'description': 'G-Code macro'}, 'gcode_macro status_cooling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cooling\nSET_LED_EFFECT EFFECT=sb_nozzle_cooling', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_leveling\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_homing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cleaning\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_meshing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_calibrating_z\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_printing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'adxl345': {'axes_map': ['z', '-y', 'x'], 'rate': 3200, 'cs_pin': 'EBBCan:gpio1', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'EBBCan:gpio2', 'spi_software_miso_pin': 'EBBCan:gpio3', 'spi_software_mosi_pin': 'EBBCan:gpio0'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[100.0, 100.0, 20.0]], 'accel_chip': 'adxl345'}, 'input_shaper': {'shaper_type': '3hump_ei', 'shaper_type_x': '3hump_ei', 'damping_ratio_x': 0.1, 'shaper_freq_x': 45.0, 'shaper_type_y': '3hump_ei', 'damping_ratio_y': 0.1, 'shaper_freq_y': 0.0}, 'tmc2660 stepper_x': {'cs_pin': 'PD14', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PD6', 'dir_pin': '!PD11', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'EBBCan:gpio24', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2660 stepper_y': {'cs_pin': 'PC9', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PD7', 'dir_pin': '!PD12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'PA2', 'position_endstop': 0.0, 'position_min': -4.0, 'position_max': 225.0, 'homing_speed': 35.0, 'second_homing_speed': 17.5, 'homing_retract_speed': 35.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2660 stepper_z': {'cs_pin': 'PC10', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PD8', 'dir_pin': '!PD13', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -2.5, 'position_max': 230.0, 'homing_speed': 35.0, 'second_homing_speed': 17.5, 'homing_retract_speed': 35.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'adc_temperature my_thermistor': {'resistance1': 1000.0, 'temperature1': 0.0, 'temperature2': 80.0, 'resistance2': 1309.0}, 'tmc2209 extruder': {'uart_pin': 'EBBCan:gpio20', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan:gpio27', 'min_temp': 0.0, 'max_temp': 250.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 21.527, 'pid_ki': 1.063, 'pid_kd': 108.982, 'heater_pin': 'EBBCan:gpio7', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': '!EBBCan:gpio18', 'pressure_advance': 0.065, 'pressure_advance_smooth_time': 0.02, 'dir_pin': 'EBBCan:gpio19', 'rotation_distance': 21.63024711, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!EBBCan:gpio17'}, 'filament_switch_sensor extruder': {'switch_pin': 'EBBCan:gpio21', 'pause_on_runout': True, 'runout_gcode': '', 'pause_delay': 0.5, 'event_delay': 3.0}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'thermistor chamber_temp': {'temperature1': 25.0, 'resistance1': 10000.0, 'beta': 3950.0}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PC13', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'watermark', 'max_delta': 2.0, 'heater_pin': '!PA19', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan extruder_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'EBBCan:gpio13', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.25, 'off_below': 0.0, 'cycle_time': 0.08, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'EBBCan:gpio14'}, 'probe': {'z_offset': -1.35, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': '^EBBCan:gpio22', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 3, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.015, 'samples_tolerance_retries': 3}, 'homing_override': {'set_position_z': 0.0, 'axes': 'z', 'gcode': '\nstatus_homing\nG90\nG0 Z5 F500\nG28 X0 Y0\nG0 X150 Y100 F9000\nG28 Z0\nG0 Z5 F500\nstatus_ready'}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [6, 6], 'mesh_min': [25.0, 35.0], 'mesh_max': [225.0, 220.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 150.0, 'fade_start': 1.0, 'fade_end': 10.0, 'fade_target': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[-0.1, -0.025, 0.0125, 0.0375, 0.125, 0.2125], [-0.1875, -0.1, -0.025, 0.025, 0.1, 0.2125], [-0.2625, -0.1625, -0.075, -0.0125, 0.075, 0.1875], [-0.2625, -0.1625, -0.0875, -0.0, 0.1, 0.2375], [-0.2, -0.1, -0.0125, 0.0625, 0.2, 0.35], [-0.225, -0.075, -0.0, 0.0875, 0.225, 0.3875]], 'min_x': 25.0, 'max_x': 225.0, 'min_y': 35.0, 'max_y': 220.0, 'x_count': 6, 'y_count': 6, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'bicubic', 'tension': 0.2}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\nSTATUS_HEATING\nM109 S150\nSTATUS_HOMING\nM117 Homing...\nG28 Y0 X0 Z0\nSTATUS_MESHING\nBED_MESH_CALIBRATE ADAPTIVE=1\n\n\n\n\n\n\n\n\n\n\n\nSTATUS_HEATING\nM107\nM117 Heating bed\nM190 S{ params.BED }\nM117 Heating nozzle\nM109 S{target_extruder}\nstatus_ready\nG1 Z15.0 F600\nG1 X125 Y125 F3000\nG92 E0\nG1 F9000\nstatus_printing\nM117 Printing...', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\nstatus_busy\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\n\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y} F3600\nM117 Finished!\nstatus_off', 'description': 'G-Code macro'}, 'gcode_macro m600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state', 'description': 'G-Code macro'}, 'force_move': {'enable_force_move': True}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexz', 'max_z_velocity': 5.0, 'max_z_accel': 100.0}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-04-27 21:11:55,871 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-04-27 21:11:55,873 [printer.py:reinit()] - Klipper version: v0.12.0-132-ge37b007f-dirty
2024-04-27 21:11:55,873 [printer.py:reinit()] - # Extruders: 1
2024-04-27 21:11:55,874 [printer.py:reinit()] - # Temperature devices: 2
2024-04-27 21:11:55,874 [printer.py:reinit()] - # Fans: 2
2024-04-27 21:11:55,874 [printer.py:reinit()] - # Output pins: 0
2024-04-27 21:11:55,874 [printer.py:reinit()] - # Leds: 20
2024-04-27 21:11:55,874 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-04-27 21:11:55,891 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-04-27 21:11:55,894 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor mcu&fan&heater_fan extruder_fan&filament_switch_sensor extruder&neopixel sb_leds
2024-04-27 21:11:56,181 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-04-27 21:11:56,182 [screen.py:init_klipper()] - Printer initialized
2024-04-27 21:11:56,182 [printer.py:change_state()] - Changing state from 'disconnected' to 'printing'
2024-04-27 21:11:56,182 [printer.py:change_state()] - Adding callback for state: printing
2024-04-27 21:11:56,321 [screen.py:_load_panel()] - Loading panel: job_status
2024-04-27 21:11:56,515 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-04-27 21:11:56,524 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-04-27 21:11:56,550 [job_status.py:update_file_metadata()] - Cannot find file metadata. Listening for updated metadata
2024-04-27 21:11:56,551 [job_status.py:show_file_thumbnail()] - tfic-angled-honeycomb_0.2mm_PLA_MK3S_5h2m.gcode
2024-04-27 21:11:56,551 [job_status.py:show_file_thumbnail()] - no pixbuf
2024-04-27 21:11:56,572 [job_status.py:update_file_metadata()] - Update Metadata. File: tfic-angled-honeycomb_0.2mm_PLA_MK3S_5h2m.gcode Size: 15746614
2024-04-27 21:11:56,578 [job_status.py:show_file_thumbnail()] - tfic-angled-honeycomb_0.2mm_PLA_MK3S_5h2m.gcode
2024-04-27 21:12:25,785 [functions.py:log_start()] - --------------------KlipperScreen Log Start--------------------
2024-04-27 21:12:25,786 [functions.py:log_start()] - KlipperScreen Version: v0.3.9-50-gdaed9a0
2024-04-27 21:12:25,786 [functions.py:log_start()] - Python version: 3.11
2024-04-27 21:12:25,926 [config.py:get_config_file_location()] - Passed config (-c): .
2024-04-27 21:12:25,927 [config.py:__init__()] - Config path location: /home/pi/printer_data/config/KlipperScreen.conf
2024-04-27 21:12:25,952 [config.py:log_config()] -  ===== Config File =====

=======================
2024-04-27 21:12:25,954 [config.py:__init__()] - ====== Saved Def ======

[main]
use_dpms = False
print_sort_dir = date_desc

=======================
2024-04-27 21:12:25,955 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2024-04-27 21:12:26,063 [config.py:create_translations()] - Selected lang: None OS lang: en_GB
2024-04-27 21:12:26,066 [config.py:install_language()] - Using lang en
2024-04-27 21:12:26,085 [screen.py:__init__()] - Monitors: 1 using number: 0
2024-04-27 21:12:26,086 [screen.py:__init__()] - Wayland: False Display name: :100
2024-04-27 21:12:26,089 [screen.py:__init__()] - Screen resolution: 984x540
2024-04-27 21:12:26,091 [KlippyGtk.py:__init__()] - Font size: 18.6 (medium)
2024-04-27 21:12:26,688 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2024-04-27 21:12:26,688 [screen.py:set_screenblanking_timeout()] - Not using DPMS
2024-04-27 21:12:26,697 [screen.py:initial_connection()] - Default printer: None
2024-04-27 21:12:26,766 [screen.py:connect_printer()] - Connecting to printer: Printer
2024-04-27 21:12:26,767 [screen.py:_load_panel()] - Loading panel: splash_screen
2024-04-27 21:12:26,835 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-04-27 21:12:26,854 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-04-27 21:12:26,854 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-27 21:12:26,873 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/access/oneshot_token
2024-04-27 21:12:26,885 [KlippyWebsocket.py:connect()] - Starting websocket thread
2024-04-27 21:12:26,895 [_logging.py:info()] - Websocket connected
2024-04-27 21:12:26,895 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2024-04-27 21:12:26,919 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-27 21:12:26,932 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-04-27 21:12:26,944 [printer.py:configure_cameras()] - Cameras: []
2024-04-27 21:12:26,945 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'ready', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'octoprint_compat', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 3, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-04-27 21:12:26,945 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-04-27 21:12:26,960 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-04-27 21:12:27,200 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set allow_park = client.park_at_cancel | default(false) | lower == \'true\' %}\n{% set retract = client.cancel_retract | default(5.0) | abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x | default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y | default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x | length > 0 or park_y | length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro | default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set idle_timeout = client.idle_timeout | default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE | default(1) | int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro | default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move | default(velocity) %}\n{% set runout_resume = True if client.runout_sensor | default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state | upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro | default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY | default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}"}, 'neopixel sb_leds': {'pin': 'EBBCan:gpio16', 'chain_count': '3', 'color_order': 'GRB', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0'}, 'led_effect sb_logo_busy': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (1,0,0)'}, 'led_effect sb_logo_cleaning': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.02, 0.5)'}, 'led_effect sb_logo_calibrating_z': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 0.35)'}, 'led_effect sb_logo_heating': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nbreathing  3 1 top (1, 0.18, 0)'}, 'led_effect sb_logo_cooling': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nbreathing  3 1 top (0, 0, 1)'}, 'led_effect sb_logo_homing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.6, 0.2)'}, 'led_effect sb_logo_leveling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.5, 0.1, 0.4)'}, 'led_effect sb_logo_meshing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.2, 1.0, 0.0)'}, 'led_effect sb_logo_printing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.3, 0.3, 0.0),(0.3, 0.1, 0.0)'}, 'led_effect sb_logo_standby': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.01, 0.01, 0.01)'}, 'led_effect sb_logo_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 1.0, 0.0)'}, 'led_effect sb_nozzle_heating': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (1.0, 0.18, 0.0, 0.0)'}, 'led_effect sb_nozzle_cooling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 1.0, 0.1)'}, 'led_effect sb_nozzle_standby': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.6, 0.0, 0.0, 0.0)'}, 'led_effect sb_nozzle_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.6, 1.0, 0.0, 0.1)'}, 'led_effect sb_critical_error': {'leds': '\nneopixel:sb_leds', 'layers': '\nstrobe         1  1.5   add        (1.0,  1.0, 1.0)\nbreathing      2  0     difference (0.95, 0.0, 0.0)\nstatic         1  0     top        (1.0,  0.0, 0.0)', 'autostart': 'false', 'frame_rate': '24', 'run_on_error': 'true'}, 'led_effect rainbow': {'leds': '\nneopixel:sb_leds', 'autostart': 'true', 'frame_rate': '24', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.0, 0.3, 0.0),(0.0, 0.0, 0.3)'}, 'led_effect set_nozzle_leds': {'leds': '\nneopixel:sb_leds (2,3)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nstatic         0  0     top        (0.5,  0.5, 0.5)'}, 'led_effect set_logo_leds': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nstatic         0  0     top        (1.0,  1.0, 1.0)'}, 'gcode_macro set_logo_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds STOP=1'}, 'gcode_macro set_logo_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1'}, 'gcode_macro status_off': {'gcode': '\nSTOP_LED_EFFECTS'}, 'gcode_macro status_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=rainbow'}, 'gcode_macro status_part_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready'}, 'gcode_macro status_busy': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_busy\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_heating\nSET_LED_EFFECT EFFECT=sb_nozzle_heating'}, 'gcode_macro status_cooling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cooling\nSET_LED_EFFECT EFFECT=sb_nozzle_cooling'}, 'gcode_macro status_leveling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_leveling\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_homing\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cleaning\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_meshing\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_calibrating_z\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_printing\nset_nozzle_leds_on'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_sam4e8e_00313753364B37373032303038303139-if00'}, 'mcu EBBCan': {'canbus_uuid': '8250861450f7'}, 'adxl345': {'cs_pin': 'EBBCan:gpio1', 'spi_software_sclk_pin': 'EBBCan:gpio2', 'spi_software_mosi_pin': 'EBBCan:gpio0', 'spi_software_miso_pin': 'EBBCan:gpio3', 'axes_map': 'z,-y,x'}, 'resonance_tester': {'probe_points': '100, 100, 20', 'accel_chip': 'adxl345'}, 'input_shaper': {'shaper_freq_x': '45', 'shaper_type': '3hump_ei'}, 'stepper_x': {'step_pin': 'PD6', 'dir_pin': '!PD11', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'EBBCan:gpio24', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '40'}, 'tmc2660 stepper_x': {'cs_pin': 'PD14', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'stepper_y': {'step_pin': 'PD7', 'dir_pin': '!PD12', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'PA2', 'position_endstop': '0', 'position_max': '225', 'position_min': '-4', 'homing_speed': '35', 'homing_retract_dist': '0'}, 'tmc2660 stepper_y': {'cs_pin': 'PC9', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'stepper_z': {'step_pin': 'PD8', 'dir_pin': '!PD13', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '230', 'position_min': '-2.5', 'homing_speed': '35.0'}, 'tmc2660 stepper_z': {'cs_pin': 'PC10', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'adc_temperature my_thermistor': {'temperature1': '0', 'resistance1': '1000', 'temperature2': '80', 'resistance2': '1309'}, 'extruder': {'step_pin': '!EBBCan:gpio18', 'dir_pin': 'EBBCan:gpio19', 'enable_pin': '!EBBCan:gpio17', 'microsteps': '32', 'rotation_distance': '21.63024711', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'pressure_advance': '0.065', 'pressure_advance_smooth_time': '0.02', 'gear_ratio': '50:10', 'heater_pin': 'EBBCan:gpio7', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'EBBCan:gpio27', 'control': 'pid', 'pid_kp': '21.527', 'pid_ki': '1.063', 'pid_kd': '108.982', 'min_temp': '0', 'max_temp': '250'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan:gpio20', 'run_current': '0.5', 'stealthchop_threshold': '999999'}, 'filament_switch_sensor extruder': {'pause_on_runout': 'True', 'switch_pin': 'EBBCan:gpio21'}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu'}, 'thermistor chamber_temp': {'temperature1': '25', 'resistance1': '10000', 'beta': '3950'}, 'heater_bed': {'heater_pin': '!PA19', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PC13', 'control': 'watermark', 'min_temp': '0', 'max_temp': '120'}, 'heater_fan extruder_fan': {'pin': 'EBBCan:gpio13', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'EBBCan:gpio14', 'cycle_time': '.08', 'kick_start_time': '.25'}, 'probe': {'pin': '^EBBCan:gpio22', 'x_offset': '0', 'y_offset': '0', 'samples': '3', 'samples_result': 'median', 'sample_retract_dist': '3', 'samples_tolerance': '0.015', 'samples_tolerance_retries': '3', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'z_offset': '-1.350'}, 'homing_override': {'axes': 'z', 'set_position_z': '0', 'gcode': '\nstatus_homing\nG90\nG0 Z5 F500\nG28 X0 Y0\nG0 X150 Y100 F9000\nG28 Z0\nG0 Z5 F500\nstatus_ready'}, 'bed_mesh': {'speed': '150', 'horizontal_move_z': '5', 'mesh_min': '25,35.0', 'mesh_max': '225.0,220', 'probe_count': '6,6', 'algorithm': 'bicubic', 'fade_start': '1', 'fade_end': '10', 'fade_target': '0'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\nSTATUS_HEATING\nM109 S150\nSTATUS_HOMING\nM117 Homing...\nG28 Y0 X0 Z0\nSTATUS_MESHING\nBED_MESH_CALIBRATE ADAPTIVE=1\n\n\n\n\n\n\n\n\n\n\n\nSTATUS_HEATING\nM107\nM117 Heating bed\nM190 S{ params.BED }\nM117 Heating nozzle\nM109 S{target_extruder}\nstatus_ready\nG1 Z15.0 F600\nG1 X125 Y125 F3000\nG92 E0\nG1 F9000\nstatus_printing\nM117 Printing...'}, 'gcode_macro PRINT_END': {'gcode': '\nstatus_busy\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\n\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y} F3600\nM117 Finished!\nstatus_off'}, 'gcode_macro M600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state'}, 'printer': {'kinematics': 'corexz', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '5', 'max_z_accel': '100'}, 'force_move': {'enable_force_move': 'true'}, 'exclude_object': {}, 'bed_mesh default': {'version': '1', 'points': '\n-0.100000, -0.025000, 0.012500, 0.037500, 0.125000, 0.212500\n-0.187500, -0.100000, -0.025000, 0.025000, 0.100000, 0.212500\n-0.262500, -0.162500, -0.075000, -0.012500, 0.075000, 0.187500\n-0.262500, -0.162500, -0.087500, -0.000000, 0.100000, 0.237500\n-0.200000, -0.100000, -0.012500, 0.062500, 0.200000, 0.350000\n-0.225000, -0.075000, -0.000000, 0.087500, 0.225000, 0.387500', 'x_count': '6', 'y_count': '6', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'bicubic', 'tension': '0.2', 'min_x': '25.0', 'max_x': '225.0', 'min_y': '35.0', 'max_y': '220.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_sam4e8e_00313753364B37373032303038303139-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu ebbcan': {'canbus_uuid': '8250861450f7', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set allow_park = client.park_at_cancel | default(false) | lower == \'true\' %}\n{% set retract = client.cancel_retract | default(5.0) | abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x | default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y | default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x | length > 0 or park_y | length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro | default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set idle_timeout = client.idle_timeout | default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE | default(1) | int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro | default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move | default(velocity) %}\n{% set runout_resume = True if client.runout_sensor | default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state | upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro | default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY | default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'neopixel sb_leds': {'pin': 'EBBCan:gpio16', 'chain_count': 3, 'color_order': ['GRB'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'led_effect sb_logo_busy': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1,0,0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_cleaning': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.02, 0.5)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_calibrating_z': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 0.35)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1, 0.18, 0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0, 0, 1)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_homing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.6, 0.2)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_leveling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.5, 0.1, 0.4)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_meshing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.2, 1.0, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_printing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.3, 0.3, 0.0),(0.3, 0.1, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_standby': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.01, 0.01, 0.01)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 1.0, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_nozzle_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1.0, 0.18, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 1.0, 0.1)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_standby': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.6, 0.0, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.6, 1.0, 0.0, 0.1)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_critical_error': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': True, 'endstops': '', 'layers': '\nstrobe         1  1.5   add        (1.0,  1.0, 1.0)\nbreathing      2  0     difference (0.95, 0.0, 0.0)\nstatic         1  0     top        (1.0,  0.0, 0.0)', 'leds': '\nneopixel:sb_leds'}, 'led_effect rainbow': {'frame_rate': 24.0, 'autostart': True, 'run_on_error': False, 'endstops': '', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.0, 0.3, 0.0),(0.0, 0.0, 0.3)', 'leds': '\nneopixel:sb_leds'}, 'led_effect set_nozzle_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic         0  0     top        (0.5,  0.5, 0.5)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect set_logo_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic         0  0     top        (1.0,  1.0, 1.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'gcode_macro set_logo_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nSTOP_LED_EFFECTS', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=rainbow', 'description': 'G-Code macro'}, 'gcode_macro status_part_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_busy\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_heating\nSET_LED_EFFECT EFFECT=sb_nozzle_heating', 'description': 'G-Code macro'}, 'gcode_macro status_cooling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cooling\nSET_LED_EFFECT EFFECT=sb_nozzle_cooling', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_leveling\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_homing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cleaning\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_meshing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_calibrating_z\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_printing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'adxl345': {'axes_map': ['z', '-y', 'x'], 'rate': 3200, 'cs_pin': 'EBBCan:gpio1', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'EBBCan:gpio2', 'spi_software_miso_pin': 'EBBCan:gpio3', 'spi_software_mosi_pin': 'EBBCan:gpio0'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[100.0, 100.0, 20.0]], 'accel_chip': 'adxl345'}, 'input_shaper': {'shaper_type': '3hump_ei', 'shaper_type_x': '3hump_ei', 'damping_ratio_x': 0.1, 'shaper_freq_x': 45.0, 'shaper_type_y': '3hump_ei', 'damping_ratio_y': 0.1, 'shaper_freq_y': 0.0}, 'tmc2660 stepper_x': {'cs_pin': 'PD14', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PD6', 'dir_pin': '!PD11', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'EBBCan:gpio24', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2660 stepper_y': {'cs_pin': 'PC9', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PD7', 'dir_pin': '!PD12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'PA2', 'position_endstop': 0.0, 'position_min': -4.0, 'position_max': 225.0, 'homing_speed': 35.0, 'second_homing_speed': 17.5, 'homing_retract_speed': 35.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2660 stepper_z': {'cs_pin': 'PC10', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PD8', 'dir_pin': '!PD13', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -2.5, 'position_max': 230.0, 'homing_speed': 35.0, 'second_homing_speed': 17.5, 'homing_retract_speed': 35.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'adc_temperature my_thermistor': {'resistance1': 1000.0, 'temperature1': 0.0, 'temperature2': 80.0, 'resistance2': 1309.0}, 'tmc2209 extruder': {'uart_pin': 'EBBCan:gpio20', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan:gpio27', 'min_temp': 0.0, 'max_temp': 250.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 21.527, 'pid_ki': 1.063, 'pid_kd': 108.982, 'heater_pin': 'EBBCan:gpio7', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': '!EBBCan:gpio18', 'pressure_advance': 0.065, 'pressure_advance_smooth_time': 0.02, 'dir_pin': 'EBBCan:gpio19', 'rotation_distance': 21.63024711, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!EBBCan:gpio17'}, 'filament_switch_sensor extruder': {'switch_pin': 'EBBCan:gpio21', 'pause_on_runout': True, 'runout_gcode': '', 'pause_delay': 0.5, 'event_delay': 3.0}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'thermistor chamber_temp': {'temperature1': 25.0, 'resistance1': 10000.0, 'beta': 3950.0}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PC13', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'watermark', 'max_delta': 2.0, 'heater_pin': '!PA19', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan extruder_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'EBBCan:gpio13', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.25, 'off_below': 0.0, 'cycle_time': 0.08, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'EBBCan:gpio14'}, 'probe': {'z_offset': -1.35, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': '^EBBCan:gpio22', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 3, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.015, 'samples_tolerance_retries': 3}, 'homing_override': {'set_position_z': 0.0, 'axes': 'z', 'gcode': '\nstatus_homing\nG90\nG0 Z5 F500\nG28 X0 Y0\nG0 X150 Y100 F9000\nG28 Z0\nG0 Z5 F500\nstatus_ready'}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [6, 6], 'mesh_min': [25.0, 35.0], 'mesh_max': [225.0, 220.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 150.0, 'fade_start': 1.0, 'fade_end': 10.0, 'fade_target': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[-0.1, -0.025, 0.0125, 0.0375, 0.125, 0.2125], [-0.1875, -0.1, -0.025, 0.025, 0.1, 0.2125], [-0.2625, -0.1625, -0.075, -0.0125, 0.075, 0.1875], [-0.2625, -0.1625, -0.0875, -0.0, 0.1, 0.2375], [-0.2, -0.1, -0.0125, 0.0625, 0.2, 0.35], [-0.225, -0.075, -0.0, 0.0875, 0.225, 0.3875]], 'min_x': 25.0, 'max_x': 225.0, 'min_y': 35.0, 'max_y': 220.0, 'x_count': 6, 'y_count': 6, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'bicubic', 'tension': 0.2}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\nSTATUS_HEATING\nM109 S150\nSTATUS_HOMING\nM117 Homing...\nG28 Y0 X0 Z0\nSTATUS_MESHING\nBED_MESH_CALIBRATE ADAPTIVE=1\n\n\n\n\n\n\n\n\n\n\n\nSTATUS_HEATING\nM107\nM117 Heating bed\nM190 S{ params.BED }\nM117 Heating nozzle\nM109 S{target_extruder}\nstatus_ready\nG1 Z15.0 F600\nG1 X125 Y125 F3000\nG92 E0\nG1 F9000\nstatus_printing\nM117 Printing...', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\nstatus_busy\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\n\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y} F3600\nM117 Finished!\nstatus_off', 'description': 'G-Code macro'}, 'gcode_macro m600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state', 'description': 'G-Code macro'}, 'force_move': {'enable_force_move': True}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexz', 'max_z_velocity': 5.0, 'max_z_accel': 100.0}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-04-27 21:12:27,204 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-04-27 21:12:27,205 [printer.py:reinit()] - Klipper version: v0.12.0-132-ge37b007f-dirty
2024-04-27 21:12:27,205 [printer.py:reinit()] - # Extruders: 1
2024-04-27 21:12:27,206 [printer.py:reinit()] - # Temperature devices: 2
2024-04-27 21:12:27,206 [printer.py:reinit()] - # Fans: 2
2024-04-27 21:12:27,206 [printer.py:reinit()] - # Output pins: 0
2024-04-27 21:12:27,206 [printer.py:reinit()] - # Leds: 20
2024-04-27 21:12:27,206 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-04-27 21:12:27,226 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-04-27 21:12:27,229 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor mcu&fan&heater_fan extruder_fan&filament_switch_sensor extruder&neopixel sb_leds
2024-04-27 21:12:27,510 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-04-27 21:12:27,510 [screen.py:init_klipper()] - Printer initialized
2024-04-27 21:12:27,511 [printer.py:change_state()] - Changing state from 'disconnected' to 'printing'
2024-04-27 21:12:27,511 [printer.py:change_state()] - Adding callback for state: printing
2024-04-27 21:12:27,638 [screen.py:_load_panel()] - Loading panel: job_status
2024-04-27 21:12:27,832 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-04-27 21:12:27,843 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-04-27 21:12:27,867 [job_status.py:update_file_metadata()] - Cannot find file metadata. Listening for updated metadata
2024-04-27 21:12:27,868 [job_status.py:show_file_thumbnail()] - tfic-angled-honeycomb_0.2mm_PLA_MK3S_5h2m.gcode
2024-04-27 21:12:27,869 [job_status.py:show_file_thumbnail()] - no pixbuf
2024-04-27 21:12:27,891 [job_status.py:update_file_metadata()] - Update Metadata. File: tfic-angled-honeycomb_0.2mm_PLA_MK3S_5h2m.gcode Size: 15746614
2024-04-27 21:12:27,897 [job_status.py:show_file_thumbnail()] - tfic-angled-honeycomb_0.2mm_PLA_MK3S_5h2m.gcode
2024-04-27 21:19:49,918 [functions.py:log_start()] - --------------------KlipperScreen Log Start--------------------
2024-04-27 21:19:49,919 [functions.py:log_start()] - KlipperScreen Version: v0.3.9-50-gdaed9a0
2024-04-27 21:19:49,919 [functions.py:log_start()] - Python version: 3.11
2024-04-27 21:19:50,058 [config.py:get_config_file_location()] - Passed config (-c): .
2024-04-27 21:19:50,059 [config.py:__init__()] - Config path location: /home/pi/printer_data/config/KlipperScreen.conf
2024-04-27 21:19:50,084 [config.py:log_config()] -  ===== Config File =====

=======================
2024-04-27 21:19:50,086 [config.py:__init__()] - ====== Saved Def ======

[main]
use_dpms = False
print_sort_dir = date_desc

=======================
2024-04-27 21:19:50,087 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2024-04-27 21:19:50,197 [config.py:create_translations()] - Selected lang: None OS lang: en_GB
2024-04-27 21:19:50,197 [config.py:install_language()] - Using lang en
2024-04-27 21:19:50,216 [screen.py:__init__()] - Monitors: 1 using number: 0
2024-04-27 21:19:50,217 [screen.py:__init__()] - Wayland: False Display name: :100
2024-04-27 21:19:50,220 [screen.py:__init__()] - Screen resolution: 984x540
2024-04-27 21:19:50,221 [KlippyGtk.py:__init__()] - Font size: 18.6 (medium)
2024-04-27 21:19:50,830 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2024-04-27 21:19:50,830 [screen.py:set_screenblanking_timeout()] - Not using DPMS
2024-04-27 21:19:50,840 [screen.py:initial_connection()] - Default printer: None
2024-04-27 21:19:50,907 [screen.py:connect_printer()] - Connecting to printer: Printer
2024-04-27 21:19:50,908 [screen.py:_load_panel()] - Loading panel: splash_screen
2024-04-27 21:19:50,976 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-04-27 21:19:50,995 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-04-27 21:19:50,995 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-27 21:19:51,012 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/access/oneshot_token
2024-04-27 21:19:51,024 [KlippyWebsocket.py:connect()] - Starting websocket thread
2024-04-27 21:19:51,034 [_logging.py:info()] - Websocket connected
2024-04-27 21:19:51,034 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2024-04-27 21:19:51,051 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-27 21:19:51,063 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-04-27 21:19:51,074 [printer.py:configure_cameras()] - Cameras: []
2024-04-27 21:19:51,074 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'ready', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'octoprint_compat', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 3, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-04-27 21:19:51,074 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-04-27 21:19:51,088 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-04-27 21:19:51,130 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set allow_park = client.park_at_cancel | default(false) | lower == \'true\' %}\n{% set retract = client.cancel_retract | default(5.0) | abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x | default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y | default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x | length > 0 or park_y | length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro | default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set idle_timeout = client.idle_timeout | default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE | default(1) | int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro | default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move | default(velocity) %}\n{% set runout_resume = True if client.runout_sensor | default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state | upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro | default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY | default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}"}, 'neopixel sb_leds': {'pin': 'EBBCan:gpio16', 'chain_count': '3', 'color_order': 'GRB', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0'}, 'led_effect sb_logo_busy': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (1,0,0)'}, 'led_effect sb_logo_cleaning': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.02, 0.5)'}, 'led_effect sb_logo_calibrating_z': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 0.35)'}, 'led_effect sb_logo_heating': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nbreathing  3 1 top (1, 0.18, 0)'}, 'led_effect sb_logo_cooling': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nbreathing  3 1 top (0, 0, 1)'}, 'led_effect sb_logo_homing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.6, 0.2)'}, 'led_effect sb_logo_leveling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.5, 0.1, 0.4)'}, 'led_effect sb_logo_meshing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.2, 1.0, 0.0)'}, 'led_effect sb_logo_printing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.3, 0.3, 0.0),(0.3, 0.1, 0.0)'}, 'led_effect sb_logo_standby': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.01, 0.01, 0.01)'}, 'led_effect sb_logo_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 1.0, 0.0)'}, 'led_effect sb_nozzle_heating': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (1.0, 0.18, 0.0, 0.0)'}, 'led_effect sb_nozzle_cooling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 1.0, 0.1)'}, 'led_effect sb_nozzle_standby': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.6, 0.0, 0.0, 0.0)'}, 'led_effect sb_nozzle_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.6, 1.0, 0.0, 0.1)'}, 'led_effect sb_critical_error': {'leds': '\nneopixel:sb_leds', 'layers': '\nstrobe         1  1.5   add        (1.0,  1.0, 1.0)\nbreathing      2  0     difference (0.95, 0.0, 0.0)\nstatic         1  0     top        (1.0,  0.0, 0.0)', 'autostart': 'false', 'frame_rate': '24', 'run_on_error': 'true'}, 'led_effect rainbow': {'leds': '\nneopixel:sb_leds', 'autostart': 'true', 'frame_rate': '24', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.0, 0.3, 0.0),(0.0, 0.0, 0.3)'}, 'led_effect set_nozzle_leds': {'leds': '\nneopixel:sb_leds (2,3)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nstatic         0  0     top        (0.5,  0.5, 0.5)'}, 'led_effect set_logo_leds': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nstatic         0  0     top        (1.0,  1.0, 1.0)'}, 'gcode_macro set_logo_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds STOP=1'}, 'gcode_macro set_logo_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1'}, 'gcode_macro status_off': {'gcode': '\nSTOP_LED_EFFECTS'}, 'gcode_macro status_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=rainbow'}, 'gcode_macro status_part_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready'}, 'gcode_macro status_busy': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_busy\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_heating\nSET_LED_EFFECT EFFECT=sb_nozzle_heating'}, 'gcode_macro status_cooling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cooling\nSET_LED_EFFECT EFFECT=sb_nozzle_cooling'}, 'gcode_macro status_leveling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_leveling\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_homing\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cleaning\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_meshing\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_calibrating_z\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_printing\nset_nozzle_leds_on'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_sam4e8e_00313753364B37373032303038303139-if00'}, 'mcu EBBCan': {'canbus_uuid': '8250861450f7'}, 'adxl345': {'cs_pin': 'EBBCan:gpio1', 'spi_software_sclk_pin': 'EBBCan:gpio2', 'spi_software_mosi_pin': 'EBBCan:gpio0', 'spi_software_miso_pin': 'EBBCan:gpio3', 'axes_map': 'z,-y,x'}, 'resonance_tester': {'probe_points': '100, 100, 20', 'accel_chip': 'adxl345'}, 'input_shaper': {'shaper_freq_x': '45', 'shaper_type': '3hump_ei'}, 'stepper_x': {'step_pin': 'PD6', 'dir_pin': '!PD11', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'EBBCan:gpio24', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '40'}, 'tmc2660 stepper_x': {'cs_pin': 'PD14', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'stepper_y': {'step_pin': 'PD7', 'dir_pin': '!PD12', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'PA2', 'position_endstop': '0', 'position_max': '225', 'position_min': '-4', 'homing_speed': '35', 'homing_retract_dist': '0'}, 'tmc2660 stepper_y': {'cs_pin': 'PC9', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'stepper_z': {'step_pin': 'PD8', 'dir_pin': '!PD13', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '230', 'position_min': '-2.5', 'homing_speed': '35.0'}, 'tmc2660 stepper_z': {'cs_pin': 'PC10', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'adc_temperature my_thermistor': {'temperature1': '0', 'resistance1': '1000', 'temperature2': '80', 'resistance2': '1309'}, 'extruder': {'step_pin': '!EBBCan:gpio18', 'dir_pin': 'EBBCan:gpio19', 'enable_pin': '!EBBCan:gpio17', 'microsteps': '32', 'rotation_distance': '21.63024711', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'pressure_advance': '0.065', 'pressure_advance_smooth_time': '0.02', 'gear_ratio': '50:10', 'heater_pin': 'EBBCan:gpio7', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'EBBCan:gpio27', 'control': 'pid', 'pid_kp': '21.527', 'pid_ki': '1.063', 'pid_kd': '108.982', 'min_temp': '0', 'max_temp': '250'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan:gpio20', 'run_current': '0.5', 'stealthchop_threshold': '999999'}, 'filament_switch_sensor extruder': {'pause_on_runout': 'True', 'switch_pin': 'EBBCan:gpio21'}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu'}, 'thermistor chamber_temp': {'temperature1': '25', 'resistance1': '10000', 'beta': '3950'}, 'heater_bed': {'heater_pin': '!PA19', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PC13', 'control': 'watermark', 'min_temp': '0', 'max_temp': '120'}, 'heater_fan extruder_fan': {'pin': 'EBBCan:gpio13', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'EBBCan:gpio14', 'cycle_time': '.08', 'kick_start_time': '.25'}, 'probe': {'pin': '^EBBCan:gpio22', 'x_offset': '0', 'y_offset': '0', 'samples': '3', 'samples_result': 'median', 'sample_retract_dist': '3', 'samples_tolerance': '0.015', 'samples_tolerance_retries': '3', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'z_offset': '-1.350'}, 'homing_override': {'axes': 'z', 'set_position_z': '0', 'gcode': '\nstatus_homing\nG90\nG0 Z5 F500\nG28 X0 Y0\nG0 X150 Y100 F9000\nG28 Z0\nG0 Z5 F500\nstatus_ready'}, 'bed_mesh': {'speed': '150', 'horizontal_move_z': '5', 'mesh_min': '25,35.0', 'mesh_max': '225.0,220', 'probe_count': '6,6', 'algorithm': 'bicubic', 'fade_start': '1', 'fade_end': '10', 'fade_target': '0'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\nSTATUS_HEATING\nM109 S150\nSTATUS_HOMING\nM117 Homing...\nG28 Y0 X0 Z0\nSTATUS_MESHING\nBED_MESH_CALIBRATE ADAPTIVE=1\n\n\n\n\n\n\n\n\n\n\n\nSTATUS_HEATING\nM107\nM117 Heating bed\nM190 S{ params.BED }\nM117 Heating nozzle\nM109 S{target_extruder}\nstatus_ready\nG1 Z15.0 F600\nG1 X125 Y125 F3000\nG92 E0\nG1 F9000\nstatus_printing\nM117 Printing...'}, 'gcode_macro PRINT_END': {'gcode': '\nstatus_busy\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\n\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y} F3600\nM117 Finished!\nstatus_off'}, 'gcode_macro M600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state'}, 'printer': {'kinematics': 'corexz', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '5', 'max_z_accel': '100'}, 'force_move': {'enable_force_move': 'true'}, 'exclude_object': {}, 'bed_mesh default': {'version': '1', 'points': '\n-0.100000, -0.025000, 0.012500, 0.037500, 0.125000, 0.212500\n-0.187500, -0.100000, -0.025000, 0.025000, 0.100000, 0.212500\n-0.262500, -0.162500, -0.075000, -0.012500, 0.075000, 0.187500\n-0.262500, -0.162500, -0.087500, -0.000000, 0.100000, 0.237500\n-0.200000, -0.100000, -0.012500, 0.062500, 0.200000, 0.350000\n-0.225000, -0.075000, -0.000000, 0.087500, 0.225000, 0.387500', 'x_count': '6', 'y_count': '6', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'bicubic', 'tension': '0.2', 'min_x': '25.0', 'max_x': '225.0', 'min_y': '35.0', 'max_y': '220.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_sam4e8e_00313753364B37373032303038303139-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu ebbcan': {'canbus_uuid': '8250861450f7', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set allow_park = client.park_at_cancel | default(false) | lower == \'true\' %}\n{% set retract = client.cancel_retract | default(5.0) | abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x | default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y | default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x | length > 0 or park_y | length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro | default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set idle_timeout = client.idle_timeout | default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE | default(1) | int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro | default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move | default(velocity) %}\n{% set runout_resume = True if client.runout_sensor | default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state | upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro | default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY | default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'neopixel sb_leds': {'pin': 'EBBCan:gpio16', 'chain_count': 3, 'color_order': ['GRB'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'led_effect sb_logo_busy': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1,0,0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_cleaning': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.02, 0.5)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_calibrating_z': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 0.35)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1, 0.18, 0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0, 0, 1)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_homing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.6, 0.2)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_leveling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.5, 0.1, 0.4)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_meshing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.2, 1.0, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_printing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.3, 0.3, 0.0),(0.3, 0.1, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_standby': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.01, 0.01, 0.01)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 1.0, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_nozzle_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1.0, 0.18, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 1.0, 0.1)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_standby': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.6, 0.0, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.6, 1.0, 0.0, 0.1)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_critical_error': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': True, 'endstops': '', 'layers': '\nstrobe         1  1.5   add        (1.0,  1.0, 1.0)\nbreathing      2  0     difference (0.95, 0.0, 0.0)\nstatic         1  0     top        (1.0,  0.0, 0.0)', 'leds': '\nneopixel:sb_leds'}, 'led_effect rainbow': {'frame_rate': 24.0, 'autostart': True, 'run_on_error': False, 'endstops': '', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.0, 0.3, 0.0),(0.0, 0.0, 0.3)', 'leds': '\nneopixel:sb_leds'}, 'led_effect set_nozzle_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic         0  0     top        (0.5,  0.5, 0.5)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect set_logo_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic         0  0     top        (1.0,  1.0, 1.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'gcode_macro set_logo_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nSTOP_LED_EFFECTS', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=rainbow', 'description': 'G-Code macro'}, 'gcode_macro status_part_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_busy\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_heating\nSET_LED_EFFECT EFFECT=sb_nozzle_heating', 'description': 'G-Code macro'}, 'gcode_macro status_cooling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cooling\nSET_LED_EFFECT EFFECT=sb_nozzle_cooling', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_leveling\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_homing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cleaning\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_meshing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_calibrating_z\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_printing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'adxl345': {'axes_map': ['z', '-y', 'x'], 'rate': 3200, 'cs_pin': 'EBBCan:gpio1', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'EBBCan:gpio2', 'spi_software_miso_pin': 'EBBCan:gpio3', 'spi_software_mosi_pin': 'EBBCan:gpio0'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[100.0, 100.0, 20.0]], 'accel_chip': 'adxl345'}, 'input_shaper': {'shaper_type': '3hump_ei', 'shaper_type_x': '3hump_ei', 'damping_ratio_x': 0.1, 'shaper_freq_x': 45.0, 'shaper_type_y': '3hump_ei', 'damping_ratio_y': 0.1, 'shaper_freq_y': 0.0}, 'tmc2660 stepper_x': {'cs_pin': 'PD14', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PD6', 'dir_pin': '!PD11', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'EBBCan:gpio24', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2660 stepper_y': {'cs_pin': 'PC9', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PD7', 'dir_pin': '!PD12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'PA2', 'position_endstop': 0.0, 'position_min': -4.0, 'position_max': 225.0, 'homing_speed': 35.0, 'second_homing_speed': 17.5, 'homing_retract_speed': 35.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2660 stepper_z': {'cs_pin': 'PC10', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PD8', 'dir_pin': '!PD13', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -2.5, 'position_max': 230.0, 'homing_speed': 35.0, 'second_homing_speed': 17.5, 'homing_retract_speed': 35.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'adc_temperature my_thermistor': {'resistance1': 1000.0, 'temperature1': 0.0, 'temperature2': 80.0, 'resistance2': 1309.0}, 'tmc2209 extruder': {'uart_pin': 'EBBCan:gpio20', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan:gpio27', 'min_temp': 0.0, 'max_temp': 250.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 21.527, 'pid_ki': 1.063, 'pid_kd': 108.982, 'heater_pin': 'EBBCan:gpio7', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': '!EBBCan:gpio18', 'pressure_advance': 0.065, 'pressure_advance_smooth_time': 0.02, 'dir_pin': 'EBBCan:gpio19', 'rotation_distance': 21.63024711, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!EBBCan:gpio17'}, 'filament_switch_sensor extruder': {'switch_pin': 'EBBCan:gpio21', 'pause_on_runout': True, 'runout_gcode': '', 'pause_delay': 0.5, 'event_delay': 3.0}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'thermistor chamber_temp': {'temperature1': 25.0, 'resistance1': 10000.0, 'beta': 3950.0}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PC13', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'watermark', 'max_delta': 2.0, 'heater_pin': '!PA19', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan extruder_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'EBBCan:gpio13', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.25, 'off_below': 0.0, 'cycle_time': 0.08, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'EBBCan:gpio14'}, 'probe': {'z_offset': -1.35, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': '^EBBCan:gpio22', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 3, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.015, 'samples_tolerance_retries': 3}, 'homing_override': {'set_position_z': 0.0, 'axes': 'z', 'gcode': '\nstatus_homing\nG90\nG0 Z5 F500\nG28 X0 Y0\nG0 X150 Y100 F9000\nG28 Z0\nG0 Z5 F500\nstatus_ready'}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [6, 6], 'mesh_min': [25.0, 35.0], 'mesh_max': [225.0, 220.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 150.0, 'fade_start': 1.0, 'fade_end': 10.0, 'fade_target': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[-0.1, -0.025, 0.0125, 0.0375, 0.125, 0.2125], [-0.1875, -0.1, -0.025, 0.025, 0.1, 0.2125], [-0.2625, -0.1625, -0.075, -0.0125, 0.075, 0.1875], [-0.2625, -0.1625, -0.0875, -0.0, 0.1, 0.2375], [-0.2, -0.1, -0.0125, 0.0625, 0.2, 0.35], [-0.225, -0.075, -0.0, 0.0875, 0.225, 0.3875]], 'min_x': 25.0, 'max_x': 225.0, 'min_y': 35.0, 'max_y': 220.0, 'x_count': 6, 'y_count': 6, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'bicubic', 'tension': 0.2}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\nSTATUS_HEATING\nM109 S150\nSTATUS_HOMING\nM117 Homing...\nG28 Y0 X0 Z0\nSTATUS_MESHING\nBED_MESH_CALIBRATE ADAPTIVE=1\n\n\n\n\n\n\n\n\n\n\n\nSTATUS_HEATING\nM107\nM117 Heating bed\nM190 S{ params.BED }\nM117 Heating nozzle\nM109 S{target_extruder}\nstatus_ready\nG1 Z15.0 F600\nG1 X125 Y125 F3000\nG92 E0\nG1 F9000\nstatus_printing\nM117 Printing...', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\nstatus_busy\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\n\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y} F3600\nM117 Finished!\nstatus_off', 'description': 'G-Code macro'}, 'gcode_macro m600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state', 'description': 'G-Code macro'}, 'force_move': {'enable_force_move': True}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexz', 'max_z_velocity': 5.0, 'max_z_accel': 100.0}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-04-27 21:19:51,133 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-04-27 21:19:51,135 [printer.py:reinit()] - Klipper version: v0.12.0-132-ge37b007f-dirty
2024-04-27 21:19:51,135 [printer.py:reinit()] - # Extruders: 1
2024-04-27 21:19:51,135 [printer.py:reinit()] - # Temperature devices: 2
2024-04-27 21:19:51,135 [printer.py:reinit()] - # Fans: 2
2024-04-27 21:19:51,135 [printer.py:reinit()] - # Output pins: 0
2024-04-27 21:19:51,135 [printer.py:reinit()] - # Leds: 20
2024-04-27 21:19:51,136 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-04-27 21:19:51,153 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-04-27 21:19:51,155 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor mcu&fan&heater_fan extruder_fan&filament_switch_sensor extruder&neopixel sb_leds
2024-04-27 21:19:51,445 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-04-27 21:19:51,445 [screen.py:init_klipper()] - Printer initialized
2024-04-27 21:19:51,446 [printer.py:change_state()] - Changing state from 'disconnected' to 'printing'
2024-04-27 21:19:51,446 [printer.py:change_state()] - Adding callback for state: printing
2024-04-27 21:19:51,565 [screen.py:_load_panel()] - Loading panel: job_status
2024-04-27 21:19:51,760 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-04-27 21:19:51,770 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-04-27 21:19:51,795 [job_status.py:update_file_metadata()] - Cannot find file metadata. Listening for updated metadata
2024-04-27 21:19:51,796 [job_status.py:show_file_thumbnail()] - tfic-angled-honeycomb_0.2mm_PLA_MK3S_5h2m.gcode
2024-04-27 21:19:51,796 [job_status.py:show_file_thumbnail()] - no pixbuf
2024-04-27 21:19:51,817 [job_status.py:update_file_metadata()] - Update Metadata. File: tfic-angled-honeycomb_0.2mm_PLA_MK3S_5h2m.gcode Size: 15746614
2024-04-27 21:19:51,824 [job_status.py:show_file_thumbnail()] - tfic-angled-honeycomb_0.2mm_PLA_MK3S_5h2m.gcode
2024-04-27 21:24:56,889 [functions.py:log_start()] - --------------------KlipperScreen Log Start--------------------
2024-04-27 21:24:56,889 [functions.py:log_start()] - KlipperScreen Version: v0.3.9-50-gdaed9a0
2024-04-27 21:24:56,889 [functions.py:log_start()] - Python version: 3.11
2024-04-27 21:24:57,030 [config.py:get_config_file_location()] - Passed config (-c): .
2024-04-27 21:24:57,031 [config.py:__init__()] - Config path location: /home/pi/printer_data/config/KlipperScreen.conf
2024-04-27 21:24:57,056 [config.py:log_config()] -  ===== Config File =====

=======================
2024-04-27 21:24:57,058 [config.py:__init__()] - ====== Saved Def ======

[main]
use_dpms = False
print_sort_dir = date_desc

=======================
2024-04-27 21:24:57,058 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2024-04-27 21:24:57,165 [config.py:create_translations()] - Selected lang: None OS lang: en_GB
2024-04-27 21:24:57,168 [config.py:install_language()] - Using lang en
2024-04-27 21:24:57,188 [screen.py:__init__()] - Monitors: 1 using number: 0
2024-04-27 21:24:57,190 [screen.py:__init__()] - Wayland: False Display name: :100
2024-04-27 21:24:57,193 [screen.py:__init__()] - Screen resolution: 984x540
2024-04-27 21:24:57,195 [KlippyGtk.py:__init__()] - Font size: 18.6 (medium)
2024-04-27 21:24:57,772 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2024-04-27 21:24:57,772 [screen.py:set_screenblanking_timeout()] - Not using DPMS
2024-04-27 21:24:57,780 [screen.py:initial_connection()] - Default printer: None
2024-04-27 21:24:57,848 [screen.py:connect_printer()] - Connecting to printer: Printer
2024-04-27 21:24:57,848 [screen.py:_load_panel()] - Loading panel: splash_screen
2024-04-27 21:24:57,917 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-04-27 21:24:57,935 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-04-27 21:24:57,935 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-27 21:24:57,952 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/access/oneshot_token
2024-04-27 21:24:57,965 [KlippyWebsocket.py:connect()] - Starting websocket thread
2024-04-27 21:24:57,976 [_logging.py:info()] - Websocket connected
2024-04-27 21:24:57,976 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2024-04-27 21:24:57,994 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-27 21:24:58,009 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-04-27 21:24:58,021 [printer.py:configure_cameras()] - Cameras: []
2024-04-27 21:24:58,021 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'ready', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'octoprint_compat', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 3, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-04-27 21:24:58,022 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-04-27 21:24:58,035 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-04-27 21:24:58,154 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set allow_park = client.park_at_cancel | default(false) | lower == \'true\' %}\n{% set retract = client.cancel_retract | default(5.0) | abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x | default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y | default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x | length > 0 or park_y | length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro | default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set idle_timeout = client.idle_timeout | default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE | default(1) | int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro | default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move | default(velocity) %}\n{% set runout_resume = True if client.runout_sensor | default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state | upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro | default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY | default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}"}, 'neopixel sb_leds': {'pin': 'EBBCan:gpio16', 'chain_count': '3', 'color_order': 'GRB', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0'}, 'led_effect sb_logo_busy': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (1,0,0)'}, 'led_effect sb_logo_cleaning': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.02, 0.5)'}, 'led_effect sb_logo_calibrating_z': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 0.35)'}, 'led_effect sb_logo_heating': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nbreathing  3 1 top (1, 0.18, 0)'}, 'led_effect sb_logo_cooling': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nbreathing  3 1 top (0, 0, 1)'}, 'led_effect sb_logo_homing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.6, 0.2)'}, 'led_effect sb_logo_leveling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.5, 0.1, 0.4)'}, 'led_effect sb_logo_meshing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.2, 1.0, 0.0)'}, 'led_effect sb_logo_printing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.3, 0.3, 0.0),(0.3, 0.1, 0.0)'}, 'led_effect sb_logo_standby': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.01, 0.01, 0.01)'}, 'led_effect sb_logo_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 1.0, 0.0)'}, 'led_effect sb_nozzle_heating': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (1.0, 0.18, 0.0, 0.0)'}, 'led_effect sb_nozzle_cooling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 1.0, 0.1)'}, 'led_effect sb_nozzle_standby': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.6, 0.0, 0.0, 0.0)'}, 'led_effect sb_nozzle_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.6, 1.0, 0.0, 0.1)'}, 'led_effect sb_critical_error': {'leds': '\nneopixel:sb_leds', 'layers': '\nstrobe         1  1.5   add        (1.0,  1.0, 1.0)\nbreathing      2  0     difference (0.95, 0.0, 0.0)\nstatic         1  0     top        (1.0,  0.0, 0.0)', 'autostart': 'false', 'frame_rate': '24', 'run_on_error': 'true'}, 'led_effect rainbow': {'leds': '\nneopixel:sb_leds', 'autostart': 'true', 'frame_rate': '24', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.0, 0.3, 0.0),(0.0, 0.0, 0.3)'}, 'led_effect set_nozzle_leds': {'leds': '\nneopixel:sb_leds (2,3)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nstatic         0  0     top        (0.5,  0.5, 0.5)'}, 'led_effect set_logo_leds': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nstatic         0  0     top        (1.0,  1.0, 1.0)'}, 'gcode_macro set_logo_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds STOP=1'}, 'gcode_macro set_logo_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1'}, 'gcode_macro status_off': {'gcode': '\nSTOP_LED_EFFECTS'}, 'gcode_macro status_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=rainbow'}, 'gcode_macro status_part_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready'}, 'gcode_macro status_busy': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_busy\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_heating\nSET_LED_EFFECT EFFECT=sb_nozzle_heating'}, 'gcode_macro status_cooling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cooling\nSET_LED_EFFECT EFFECT=sb_nozzle_cooling'}, 'gcode_macro status_leveling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_leveling\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_homing\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cleaning\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_meshing\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_calibrating_z\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_printing\nset_nozzle_leds_on'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_sam4e8e_00313753364B37373032303038303139-if00'}, 'mcu EBBCan': {'canbus_uuid': '8250861450f7'}, 'adxl345': {'cs_pin': 'EBBCan:gpio1', 'spi_software_sclk_pin': 'EBBCan:gpio2', 'spi_software_mosi_pin': 'EBBCan:gpio0', 'spi_software_miso_pin': 'EBBCan:gpio3', 'axes_map': 'z,-y,x'}, 'resonance_tester': {'probe_points': '100, 100, 20', 'accel_chip': 'adxl345'}, 'input_shaper': {'shaper_freq_x': '45', 'shaper_type': '3hump_ei'}, 'stepper_x': {'step_pin': 'PD6', 'dir_pin': '!PD11', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'EBBCan:gpio24', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '40'}, 'tmc2660 stepper_x': {'cs_pin': 'PD14', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'stepper_y': {'step_pin': 'PD7', 'dir_pin': '!PD12', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'PA2', 'position_endstop': '0', 'position_max': '225', 'position_min': '-4', 'homing_speed': '35', 'homing_retract_dist': '0'}, 'tmc2660 stepper_y': {'cs_pin': 'PC9', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'stepper_z': {'step_pin': 'PD8', 'dir_pin': '!PD13', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '230', 'position_min': '-2.5', 'homing_speed': '35.0'}, 'tmc2660 stepper_z': {'cs_pin': 'PC10', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'adc_temperature my_thermistor': {'temperature1': '0', 'resistance1': '1000', 'temperature2': '80', 'resistance2': '1309'}, 'extruder': {'step_pin': '!EBBCan:gpio18', 'dir_pin': 'EBBCan:gpio19', 'enable_pin': '!EBBCan:gpio17', 'microsteps': '32', 'rotation_distance': '21.63024711', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'pressure_advance': '0.065', 'pressure_advance_smooth_time': '0.02', 'gear_ratio': '50:10', 'heater_pin': 'EBBCan:gpio7', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'EBBCan:gpio27', 'control': 'pid', 'pid_kp': '21.527', 'pid_ki': '1.063', 'pid_kd': '108.982', 'min_temp': '0', 'max_temp': '250'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan:gpio20', 'run_current': '0.5', 'stealthchop_threshold': '999999'}, 'filament_switch_sensor extruder': {'pause_on_runout': 'True', 'switch_pin': 'EBBCan:gpio21'}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu'}, 'thermistor chamber_temp': {'temperature1': '25', 'resistance1': '10000', 'beta': '3950'}, 'heater_bed': {'heater_pin': '!PA19', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PC13', 'control': 'watermark', 'min_temp': '0', 'max_temp': '120'}, 'heater_fan extruder_fan': {'pin': 'EBBCan:gpio13', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'EBBCan:gpio14', 'cycle_time': '.08', 'kick_start_time': '.25'}, 'probe': {'pin': '^EBBCan:gpio22', 'x_offset': '0', 'y_offset': '0', 'samples': '3', 'samples_result': 'median', 'sample_retract_dist': '3', 'samples_tolerance': '0.015', 'samples_tolerance_retries': '3', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'z_offset': '-1.350'}, 'homing_override': {'axes': 'z', 'set_position_z': '0', 'gcode': '\nstatus_homing\nG90\nG0 Z5 F500\nG28 X0 Y0\nG0 X150 Y100 F9000\nG28 Z0\nG0 Z5 F500\nstatus_ready'}, 'bed_mesh': {'speed': '150', 'horizontal_move_z': '5', 'mesh_min': '25,35.0', 'mesh_max': '225.0,220', 'probe_count': '6,6', 'algorithm': 'bicubic', 'fade_start': '1', 'fade_end': '10', 'fade_target': '0'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\nSTATUS_HEATING\nM109 S150\nSTATUS_HOMING\nM117 Homing...\nG28 Y0 X0 Z0\nSTATUS_MESHING\nBED_MESH_CALIBRATE ADAPTIVE=1\n\n\n\n\n\n\n\n\n\n\n\nSTATUS_HEATING\nM107\nM117 Heating bed\nM190 S{ params.BED }\nM117 Heating nozzle\nM109 S{target_extruder}\nstatus_ready\nG1 Z15.0 F600\nG1 X125 Y125 F3000\nG92 E0\nG1 F9000\nstatus_printing\nM117 Printing...'}, 'gcode_macro PRINT_END': {'gcode': '\nstatus_busy\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\n\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y} F3600\nM117 Finished!\nstatus_off'}, 'gcode_macro M600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state'}, 'printer': {'kinematics': 'corexz', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '5', 'max_z_accel': '100'}, 'force_move': {'enable_force_move': 'true'}, 'exclude_object': {}, 'bed_mesh default': {'version': '1', 'points': '\n-0.100000, -0.025000, 0.012500, 0.037500, 0.125000, 0.212500\n-0.187500, -0.100000, -0.025000, 0.025000, 0.100000, 0.212500\n-0.262500, -0.162500, -0.075000, -0.012500, 0.075000, 0.187500\n-0.262500, -0.162500, -0.087500, -0.000000, 0.100000, 0.237500\n-0.200000, -0.100000, -0.012500, 0.062500, 0.200000, 0.350000\n-0.225000, -0.075000, -0.000000, 0.087500, 0.225000, 0.387500', 'x_count': '6', 'y_count': '6', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'bicubic', 'tension': '0.2', 'min_x': '25.0', 'max_x': '225.0', 'min_y': '35.0', 'max_y': '220.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_sam4e8e_00313753364B37373032303038303139-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu ebbcan': {'canbus_uuid': '8250861450f7', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set allow_park = client.park_at_cancel | default(false) | lower == \'true\' %}\n{% set retract = client.cancel_retract | default(5.0) | abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x | default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y | default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x | length > 0 or park_y | length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro | default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set idle_timeout = client.idle_timeout | default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE | default(1) | int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro | default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move | default(velocity) %}\n{% set runout_resume = True if client.runout_sensor | default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state | upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro | default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY | default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'neopixel sb_leds': {'pin': 'EBBCan:gpio16', 'chain_count': 3, 'color_order': ['GRB'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'led_effect sb_logo_busy': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1,0,0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_cleaning': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.02, 0.5)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_calibrating_z': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 0.35)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1, 0.18, 0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0, 0, 1)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_homing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.6, 0.2)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_leveling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.5, 0.1, 0.4)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_meshing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.2, 1.0, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_printing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.3, 0.3, 0.0),(0.3, 0.1, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_standby': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.01, 0.01, 0.01)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 1.0, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_nozzle_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1.0, 0.18, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 1.0, 0.1)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_standby': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.6, 0.0, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.6, 1.0, 0.0, 0.1)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_critical_error': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': True, 'endstops': '', 'layers': '\nstrobe         1  1.5   add        (1.0,  1.0, 1.0)\nbreathing      2  0     difference (0.95, 0.0, 0.0)\nstatic         1  0     top        (1.0,  0.0, 0.0)', 'leds': '\nneopixel:sb_leds'}, 'led_effect rainbow': {'frame_rate': 24.0, 'autostart': True, 'run_on_error': False, 'endstops': '', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.0, 0.3, 0.0),(0.0, 0.0, 0.3)', 'leds': '\nneopixel:sb_leds'}, 'led_effect set_nozzle_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic         0  0     top        (0.5,  0.5, 0.5)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect set_logo_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic         0  0     top        (1.0,  1.0, 1.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'gcode_macro set_logo_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nSTOP_LED_EFFECTS', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=rainbow', 'description': 'G-Code macro'}, 'gcode_macro status_part_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_busy\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_heating\nSET_LED_EFFECT EFFECT=sb_nozzle_heating', 'description': 'G-Code macro'}, 'gcode_macro status_cooling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cooling\nSET_LED_EFFECT EFFECT=sb_nozzle_cooling', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_leveling\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_homing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cleaning\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_meshing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_calibrating_z\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_printing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'adxl345': {'axes_map': ['z', '-y', 'x'], 'rate': 3200, 'cs_pin': 'EBBCan:gpio1', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'EBBCan:gpio2', 'spi_software_miso_pin': 'EBBCan:gpio3', 'spi_software_mosi_pin': 'EBBCan:gpio0'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[100.0, 100.0, 20.0]], 'accel_chip': 'adxl345'}, 'input_shaper': {'shaper_type': '3hump_ei', 'shaper_type_x': '3hump_ei', 'damping_ratio_x': 0.1, 'shaper_freq_x': 45.0, 'shaper_type_y': '3hump_ei', 'damping_ratio_y': 0.1, 'shaper_freq_y': 0.0}, 'tmc2660 stepper_x': {'cs_pin': 'PD14', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PD6', 'dir_pin': '!PD11', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'EBBCan:gpio24', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2660 stepper_y': {'cs_pin': 'PC9', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PD7', 'dir_pin': '!PD12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'PA2', 'position_endstop': 0.0, 'position_min': -4.0, 'position_max': 225.0, 'homing_speed': 35.0, 'second_homing_speed': 17.5, 'homing_retract_speed': 35.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2660 stepper_z': {'cs_pin': 'PC10', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PD8', 'dir_pin': '!PD13', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -2.5, 'position_max': 230.0, 'homing_speed': 35.0, 'second_homing_speed': 17.5, 'homing_retract_speed': 35.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'adc_temperature my_thermistor': {'resistance1': 1000.0, 'temperature1': 0.0, 'temperature2': 80.0, 'resistance2': 1309.0}, 'tmc2209 extruder': {'uart_pin': 'EBBCan:gpio20', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan:gpio27', 'min_temp': 0.0, 'max_temp': 250.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 21.527, 'pid_ki': 1.063, 'pid_kd': 108.982, 'heater_pin': 'EBBCan:gpio7', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': '!EBBCan:gpio18', 'pressure_advance': 0.065, 'pressure_advance_smooth_time': 0.02, 'dir_pin': 'EBBCan:gpio19', 'rotation_distance': 21.63024711, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!EBBCan:gpio17'}, 'filament_switch_sensor extruder': {'switch_pin': 'EBBCan:gpio21', 'pause_on_runout': True, 'runout_gcode': '', 'pause_delay': 0.5, 'event_delay': 3.0}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'thermistor chamber_temp': {'temperature1': 25.0, 'resistance1': 10000.0, 'beta': 3950.0}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PC13', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'watermark', 'max_delta': 2.0, 'heater_pin': '!PA19', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan extruder_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'EBBCan:gpio13', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.25, 'off_below': 0.0, 'cycle_time': 0.08, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'EBBCan:gpio14'}, 'probe': {'z_offset': -1.35, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': '^EBBCan:gpio22', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 3, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.015, 'samples_tolerance_retries': 3}, 'homing_override': {'set_position_z': 0.0, 'axes': 'z', 'gcode': '\nstatus_homing\nG90\nG0 Z5 F500\nG28 X0 Y0\nG0 X150 Y100 F9000\nG28 Z0\nG0 Z5 F500\nstatus_ready'}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [6, 6], 'mesh_min': [25.0, 35.0], 'mesh_max': [225.0, 220.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 150.0, 'fade_start': 1.0, 'fade_end': 10.0, 'fade_target': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[-0.1, -0.025, 0.0125, 0.0375, 0.125, 0.2125], [-0.1875, -0.1, -0.025, 0.025, 0.1, 0.2125], [-0.2625, -0.1625, -0.075, -0.0125, 0.075, 0.1875], [-0.2625, -0.1625, -0.0875, -0.0, 0.1, 0.2375], [-0.2, -0.1, -0.0125, 0.0625, 0.2, 0.35], [-0.225, -0.075, -0.0, 0.0875, 0.225, 0.3875]], 'min_x': 25.0, 'max_x': 225.0, 'min_y': 35.0, 'max_y': 220.0, 'x_count': 6, 'y_count': 6, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'bicubic', 'tension': 0.2}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\nSTATUS_HEATING\nM109 S150\nSTATUS_HOMING\nM117 Homing...\nG28 Y0 X0 Z0\nSTATUS_MESHING\nBED_MESH_CALIBRATE ADAPTIVE=1\n\n\n\n\n\n\n\n\n\n\n\nSTATUS_HEATING\nM107\nM117 Heating bed\nM190 S{ params.BED }\nM117 Heating nozzle\nM109 S{target_extruder}\nstatus_ready\nG1 Z15.0 F600\nG1 X125 Y125 F3000\nG92 E0\nG1 F9000\nstatus_printing\nM117 Printing...', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\nstatus_busy\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\n\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y} F3600\nM117 Finished!\nstatus_off', 'description': 'G-Code macro'}, 'gcode_macro m600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state', 'description': 'G-Code macro'}, 'force_move': {'enable_force_move': True}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexz', 'max_z_velocity': 5.0, 'max_z_accel': 100.0}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-04-27 21:24:58,157 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-04-27 21:24:58,159 [printer.py:reinit()] - Klipper version: v0.12.0-132-ge37b007f-dirty
2024-04-27 21:24:58,159 [printer.py:reinit()] - # Extruders: 1
2024-04-27 21:24:58,159 [printer.py:reinit()] - # Temperature devices: 2
2024-04-27 21:24:58,159 [printer.py:reinit()] - # Fans: 2
2024-04-27 21:24:58,159 [printer.py:reinit()] - # Output pins: 0
2024-04-27 21:24:58,160 [printer.py:reinit()] - # Leds: 20
2024-04-27 21:24:58,160 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-04-27 21:24:58,178 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-04-27 21:24:58,180 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor mcu&fan&heater_fan extruder_fan&filament_switch_sensor extruder&neopixel sb_leds
2024-04-27 21:24:58,463 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-04-27 21:24:58,463 [screen.py:init_klipper()] - Printer initialized
2024-04-27 21:24:58,464 [printer.py:change_state()] - Changing state from 'disconnected' to 'printing'
2024-04-27 21:24:58,464 [printer.py:change_state()] - Adding callback for state: printing
2024-04-27 21:24:58,597 [screen.py:_load_panel()] - Loading panel: job_status
2024-04-27 21:24:58,797 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-04-27 21:24:58,807 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-04-27 21:24:58,842 [job_status.py:update_file_metadata()] - Cannot find file metadata. Listening for updated metadata
2024-04-27 21:24:58,843 [job_status.py:show_file_thumbnail()] - tfic-angled-honeycomb_0.2mm_PLA_MK3S_5h2m.gcode
2024-04-27 21:24:58,843 [job_status.py:show_file_thumbnail()] - no pixbuf
2024-04-27 21:24:58,862 [job_status.py:update_file_metadata()] - Update Metadata. File: tfic-angled-honeycomb_0.2mm_PLA_MK3S_5h2m.gcode Size: 15746614
2024-04-27 21:24:58,868 [job_status.py:show_file_thumbnail()] - tfic-angled-honeycomb_0.2mm_PLA_MK3S_5h2m.gcode
2024-04-27 21:56:00,308 [functions.py:log_start()] - --------------------KlipperScreen Log Start--------------------
2024-04-27 21:56:00,308 [functions.py:log_start()] - KlipperScreen Version: v0.3.9-50-gdaed9a0
2024-04-27 21:56:00,308 [functions.py:log_start()] - Python version: 3.11
2024-04-27 21:56:00,447 [config.py:get_config_file_location()] - Passed config (-c): .
2024-04-27 21:56:00,448 [config.py:__init__()] - Config path location: /home/pi/printer_data/config/KlipperScreen.conf
2024-04-27 21:56:00,473 [config.py:log_config()] -  ===== Config File =====

=======================
2024-04-27 21:56:00,475 [config.py:__init__()] - ====== Saved Def ======

[main]
use_dpms = False
print_sort_dir = date_desc

=======================
2024-04-27 21:56:00,476 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2024-04-27 21:56:00,581 [config.py:create_translations()] - Selected lang: None OS lang: en_GB
2024-04-27 21:56:00,585 [config.py:install_language()] - Using lang en
2024-04-27 21:56:00,605 [screen.py:__init__()] - Monitors: 1 using number: 0
2024-04-27 21:56:00,606 [screen.py:__init__()] - Wayland: False Display name: :100
2024-04-27 21:56:00,609 [screen.py:__init__()] - Screen resolution: 984x540
2024-04-27 21:56:00,611 [KlippyGtk.py:__init__()] - Font size: 18.6 (medium)
2024-04-27 21:56:01,238 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2024-04-27 21:56:01,238 [screen.py:set_screenblanking_timeout()] - Not using DPMS
2024-04-27 21:56:01,246 [screen.py:initial_connection()] - Default printer: None
2024-04-27 21:56:01,315 [screen.py:connect_printer()] - Connecting to printer: Printer
2024-04-27 21:56:01,316 [screen.py:_load_panel()] - Loading panel: splash_screen
2024-04-27 21:56:01,385 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-04-27 21:56:01,403 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-04-27 21:56:01,404 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-27 21:56:01,421 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/access/oneshot_token
2024-04-27 21:56:01,433 [KlippyWebsocket.py:connect()] - Starting websocket thread
2024-04-27 21:56:01,442 [_logging.py:info()] - Websocket connected
2024-04-27 21:56:01,443 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2024-04-27 21:56:01,448 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-27 21:56:01,461 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-04-27 21:56:01,473 [printer.py:configure_cameras()] - Cameras: []
2024-04-27 21:56:01,474 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'ready', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'octoprint_compat', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 3, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-04-27 21:56:01,474 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-04-27 21:56:01,488 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-04-27 21:56:01,558 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set allow_park = client.park_at_cancel | default(false) | lower == \'true\' %}\n{% set retract = client.cancel_retract | default(5.0) | abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x | default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y | default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x | length > 0 or park_y | length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro | default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set idle_timeout = client.idle_timeout | default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE | default(1) | int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro | default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move | default(velocity) %}\n{% set runout_resume = True if client.runout_sensor | default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state | upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro | default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY | default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}"}, 'neopixel sb_leds': {'pin': 'EBBCan:gpio16', 'chain_count': '3', 'color_order': 'GRB', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0'}, 'led_effect sb_logo_busy': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (1,0,0)'}, 'led_effect sb_logo_cleaning': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.02, 0.5)'}, 'led_effect sb_logo_calibrating_z': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 0.35)'}, 'led_effect sb_logo_heating': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nbreathing  3 1 top (1, 0.18, 0)'}, 'led_effect sb_logo_cooling': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nbreathing  3 1 top (0, 0, 1)'}, 'led_effect sb_logo_homing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.6, 0.2)'}, 'led_effect sb_logo_leveling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.5, 0.1, 0.4)'}, 'led_effect sb_logo_meshing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.2, 1.0, 0.0)'}, 'led_effect sb_logo_printing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.3, 0.3, 0.0),(0.3, 0.1, 0.0)'}, 'led_effect sb_logo_standby': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.01, 0.01, 0.01)'}, 'led_effect sb_logo_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 1.0, 0.0)'}, 'led_effect sb_nozzle_heating': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (1.0, 0.18, 0.0, 0.0)'}, 'led_effect sb_nozzle_cooling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 1.0, 0.1)'}, 'led_effect sb_nozzle_standby': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.6, 0.0, 0.0, 0.0)'}, 'led_effect sb_nozzle_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.6, 1.0, 0.0, 0.1)'}, 'led_effect sb_critical_error': {'leds': '\nneopixel:sb_leds', 'layers': '\nstrobe         1  1.5   add        (1.0,  1.0, 1.0)\nbreathing      2  0     difference (0.95, 0.0, 0.0)\nstatic         1  0     top        (1.0,  0.0, 0.0)', 'autostart': 'false', 'frame_rate': '24', 'run_on_error': 'true'}, 'led_effect rainbow': {'leds': '\nneopixel:sb_leds', 'autostart': 'true', 'frame_rate': '24', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.0, 0.3, 0.0),(0.0, 0.0, 0.3)'}, 'led_effect set_nozzle_leds': {'leds': '\nneopixel:sb_leds (2,3)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nstatic         0  0     top        (0.5,  0.5, 0.5)'}, 'led_effect set_logo_leds': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nstatic         0  0     top        (1.0,  1.0, 1.0)'}, 'gcode_macro set_logo_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds STOP=1'}, 'gcode_macro set_logo_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1'}, 'gcode_macro status_off': {'gcode': '\nSTOP_LED_EFFECTS'}, 'gcode_macro status_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=rainbow'}, 'gcode_macro status_part_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready'}, 'gcode_macro status_busy': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_busy\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_heating\nSET_LED_EFFECT EFFECT=sb_nozzle_heating'}, 'gcode_macro status_cooling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cooling\nSET_LED_EFFECT EFFECT=sb_nozzle_cooling'}, 'gcode_macro status_leveling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_leveling\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_homing\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cleaning\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_meshing\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_calibrating_z\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_printing\nset_nozzle_leds_on'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_sam4e8e_00313753364B37373032303038303139-if00'}, 'mcu EBBCan': {'canbus_uuid': '8250861450f7'}, 'adxl345': {'cs_pin': 'EBBCan:gpio1', 'spi_software_sclk_pin': 'EBBCan:gpio2', 'spi_software_mosi_pin': 'EBBCan:gpio0', 'spi_software_miso_pin': 'EBBCan:gpio3', 'axes_map': 'z,-y,x'}, 'resonance_tester': {'probe_points': '100, 100, 20', 'accel_chip': 'adxl345'}, 'input_shaper': {'shaper_freq_x': '45', 'shaper_type': '3hump_ei'}, 'stepper_x': {'step_pin': 'PD6', 'dir_pin': '!PD11', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'EBBCan:gpio24', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '40'}, 'tmc2660 stepper_x': {'cs_pin': 'PD14', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'stepper_y': {'step_pin': 'PD7', 'dir_pin': '!PD12', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'PA2', 'position_endstop': '0', 'position_max': '225', 'position_min': '-4', 'homing_speed': '35', 'homing_retract_dist': '0'}, 'tmc2660 stepper_y': {'cs_pin': 'PC9', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'stepper_z': {'step_pin': 'PD8', 'dir_pin': '!PD13', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '230', 'position_min': '-2.5', 'homing_speed': '35.0'}, 'tmc2660 stepper_z': {'cs_pin': 'PC10', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'adc_temperature my_thermistor': {'temperature1': '0', 'resistance1': '1000', 'temperature2': '80', 'resistance2': '1309'}, 'extruder': {'step_pin': '!EBBCan:gpio18', 'dir_pin': 'EBBCan:gpio19', 'enable_pin': '!EBBCan:gpio17', 'microsteps': '32', 'rotation_distance': '21.63024711', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'pressure_advance': '0.065', 'pressure_advance_smooth_time': '0.02', 'gear_ratio': '50:10', 'heater_pin': 'EBBCan:gpio7', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'EBBCan:gpio27', 'control': 'pid', 'pid_kp': '21.527', 'pid_ki': '1.063', 'pid_kd': '108.982', 'min_temp': '0', 'max_temp': '250'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan:gpio20', 'run_current': '0.5', 'stealthchop_threshold': '999999'}, 'filament_switch_sensor extruder': {'pause_on_runout': 'True', 'switch_pin': 'EBBCan:gpio21'}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu'}, 'thermistor chamber_temp': {'temperature1': '25', 'resistance1': '10000', 'beta': '3950'}, 'heater_bed': {'heater_pin': '!PA19', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PC13', 'control': 'watermark', 'min_temp': '0', 'max_temp': '120'}, 'heater_fan extruder_fan': {'pin': 'EBBCan:gpio13', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'EBBCan:gpio14', 'cycle_time': '.08', 'kick_start_time': '.25'}, 'probe': {'pin': '^EBBCan:gpio22', 'x_offset': '0', 'y_offset': '0', 'samples': '3', 'samples_result': 'median', 'sample_retract_dist': '3', 'samples_tolerance': '0.015', 'samples_tolerance_retries': '3', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'z_offset': '-1.350'}, 'homing_override': {'axes': 'z', 'set_position_z': '0', 'gcode': '\nstatus_homing\nG90\nG0 Z5 F500\nG28 X0 Y0\nG0 X150 Y100 F9000\nG28 Z0\nG0 Z5 F500\nstatus_ready'}, 'bed_mesh': {'speed': '150', 'horizontal_move_z': '5', 'mesh_min': '25,35.0', 'mesh_max': '225.0,220', 'probe_count': '6,6', 'algorithm': 'bicubic', 'fade_start': '1', 'fade_end': '10', 'fade_target': '0'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\nSTATUS_HEATING\nM109 S150\nSTATUS_HOMING\nM117 Homing...\nG28 Y0 X0 Z0\nSTATUS_MESHING\nBED_MESH_CALIBRATE ADAPTIVE=1\n\n\n\n\n\n\n\n\n\n\n\nSTATUS_HEATING\nM107\nM117 Heating bed\nM190 S{ params.BED }\nM117 Heating nozzle\nM109 S{target_extruder}\nstatus_ready\nG1 Z15.0 F600\nG1 X125 Y125 F3000\nG92 E0\nG1 F9000\nstatus_printing\nM117 Printing...'}, 'gcode_macro PRINT_END': {'gcode': '\nstatus_busy\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\n\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y} F3600\nM117 Finished!\nstatus_off'}, 'gcode_macro M600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state'}, 'printer': {'kinematics': 'corexz', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '5', 'max_z_accel': '100'}, 'force_move': {'enable_force_move': 'true'}, 'exclude_object': {}, 'bed_mesh default': {'version': '1', 'points': '\n-0.100000, -0.025000, 0.012500, 0.037500, 0.125000, 0.212500\n-0.187500, -0.100000, -0.025000, 0.025000, 0.100000, 0.212500\n-0.262500, -0.162500, -0.075000, -0.012500, 0.075000, 0.187500\n-0.262500, -0.162500, -0.087500, -0.000000, 0.100000, 0.237500\n-0.200000, -0.100000, -0.012500, 0.062500, 0.200000, 0.350000\n-0.225000, -0.075000, -0.000000, 0.087500, 0.225000, 0.387500', 'x_count': '6', 'y_count': '6', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'bicubic', 'tension': '0.2', 'min_x': '25.0', 'max_x': '225.0', 'min_y': '35.0', 'max_y': '220.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_sam4e8e_00313753364B37373032303038303139-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu ebbcan': {'canbus_uuid': '8250861450f7', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set allow_park = client.park_at_cancel | default(false) | lower == \'true\' %}\n{% set retract = client.cancel_retract | default(5.0) | abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x | default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y | default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x | length > 0 or park_y | length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro | default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set idle_timeout = client.idle_timeout | default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE | default(1) | int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro | default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move | default(velocity) %}\n{% set runout_resume = True if client.runout_sensor | default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state | upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro | default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY | default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'neopixel sb_leds': {'pin': 'EBBCan:gpio16', 'chain_count': 3, 'color_order': ['GRB'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'led_effect sb_logo_busy': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1,0,0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_cleaning': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.02, 0.5)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_calibrating_z': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 0.35)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1, 0.18, 0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0, 0, 1)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_homing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.6, 0.2)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_leveling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.5, 0.1, 0.4)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_meshing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.2, 1.0, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_printing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.3, 0.3, 0.0),(0.3, 0.1, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_standby': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.01, 0.01, 0.01)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 1.0, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_nozzle_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1.0, 0.18, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 1.0, 0.1)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_standby': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.6, 0.0, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.6, 1.0, 0.0, 0.1)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_critical_error': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': True, 'endstops': '', 'layers': '\nstrobe         1  1.5   add        (1.0,  1.0, 1.0)\nbreathing      2  0     difference (0.95, 0.0, 0.0)\nstatic         1  0     top        (1.0,  0.0, 0.0)', 'leds': '\nneopixel:sb_leds'}, 'led_effect rainbow': {'frame_rate': 24.0, 'autostart': True, 'run_on_error': False, 'endstops': '', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.0, 0.3, 0.0),(0.0, 0.0, 0.3)', 'leds': '\nneopixel:sb_leds'}, 'led_effect set_nozzle_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic         0  0     top        (0.5,  0.5, 0.5)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect set_logo_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic         0  0     top        (1.0,  1.0, 1.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'gcode_macro set_logo_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nSTOP_LED_EFFECTS', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=rainbow', 'description': 'G-Code macro'}, 'gcode_macro status_part_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_busy\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_heating\nSET_LED_EFFECT EFFECT=sb_nozzle_heating', 'description': 'G-Code macro'}, 'gcode_macro status_cooling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cooling\nSET_LED_EFFECT EFFECT=sb_nozzle_cooling', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_leveling\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_homing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cleaning\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_meshing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_calibrating_z\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_printing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'adxl345': {'axes_map': ['z', '-y', 'x'], 'rate': 3200, 'cs_pin': 'EBBCan:gpio1', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'EBBCan:gpio2', 'spi_software_miso_pin': 'EBBCan:gpio3', 'spi_software_mosi_pin': 'EBBCan:gpio0'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[100.0, 100.0, 20.0]], 'accel_chip': 'adxl345'}, 'input_shaper': {'shaper_type': '3hump_ei', 'shaper_type_x': '3hump_ei', 'damping_ratio_x': 0.1, 'shaper_freq_x': 45.0, 'shaper_type_y': '3hump_ei', 'damping_ratio_y': 0.1, 'shaper_freq_y': 0.0}, 'tmc2660 stepper_x': {'cs_pin': 'PD14', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PD6', 'dir_pin': '!PD11', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'EBBCan:gpio24', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2660 stepper_y': {'cs_pin': 'PC9', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PD7', 'dir_pin': '!PD12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'PA2', 'position_endstop': 0.0, 'position_min': -4.0, 'position_max': 225.0, 'homing_speed': 35.0, 'second_homing_speed': 17.5, 'homing_retract_speed': 35.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2660 stepper_z': {'cs_pin': 'PC10', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PD8', 'dir_pin': '!PD13', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -2.5, 'position_max': 230.0, 'homing_speed': 35.0, 'second_homing_speed': 17.5, 'homing_retract_speed': 35.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'adc_temperature my_thermistor': {'resistance1': 1000.0, 'temperature1': 0.0, 'temperature2': 80.0, 'resistance2': 1309.0}, 'tmc2209 extruder': {'uart_pin': 'EBBCan:gpio20', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan:gpio27', 'min_temp': 0.0, 'max_temp': 250.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 21.527, 'pid_ki': 1.063, 'pid_kd': 108.982, 'heater_pin': 'EBBCan:gpio7', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': '!EBBCan:gpio18', 'pressure_advance': 0.065, 'pressure_advance_smooth_time': 0.02, 'dir_pin': 'EBBCan:gpio19', 'rotation_distance': 21.63024711, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!EBBCan:gpio17'}, 'filament_switch_sensor extruder': {'switch_pin': 'EBBCan:gpio21', 'pause_on_runout': True, 'runout_gcode': '', 'pause_delay': 0.5, 'event_delay': 3.0}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'thermistor chamber_temp': {'temperature1': 25.0, 'resistance1': 10000.0, 'beta': 3950.0}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PC13', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'watermark', 'max_delta': 2.0, 'heater_pin': '!PA19', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan extruder_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'EBBCan:gpio13', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.25, 'off_below': 0.0, 'cycle_time': 0.08, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'EBBCan:gpio14'}, 'probe': {'z_offset': -1.35, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': '^EBBCan:gpio22', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 3, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.015, 'samples_tolerance_retries': 3}, 'homing_override': {'set_position_z': 0.0, 'axes': 'z', 'gcode': '\nstatus_homing\nG90\nG0 Z5 F500\nG28 X0 Y0\nG0 X150 Y100 F9000\nG28 Z0\nG0 Z5 F500\nstatus_ready'}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [6, 6], 'mesh_min': [25.0, 35.0], 'mesh_max': [225.0, 220.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 150.0, 'fade_start': 1.0, 'fade_end': 10.0, 'fade_target': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[-0.1, -0.025, 0.0125, 0.0375, 0.125, 0.2125], [-0.1875, -0.1, -0.025, 0.025, 0.1, 0.2125], [-0.2625, -0.1625, -0.075, -0.0125, 0.075, 0.1875], [-0.2625, -0.1625, -0.0875, -0.0, 0.1, 0.2375], [-0.2, -0.1, -0.0125, 0.0625, 0.2, 0.35], [-0.225, -0.075, -0.0, 0.0875, 0.225, 0.3875]], 'min_x': 25.0, 'max_x': 225.0, 'min_y': 35.0, 'max_y': 220.0, 'x_count': 6, 'y_count': 6, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'bicubic', 'tension': 0.2}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\nSTATUS_HEATING\nM109 S150\nSTATUS_HOMING\nM117 Homing...\nG28 Y0 X0 Z0\nSTATUS_MESHING\nBED_MESH_CALIBRATE ADAPTIVE=1\n\n\n\n\n\n\n\n\n\n\n\nSTATUS_HEATING\nM107\nM117 Heating bed\nM190 S{ params.BED }\nM117 Heating nozzle\nM109 S{target_extruder}\nstatus_ready\nG1 Z15.0 F600\nG1 X125 Y125 F3000\nG92 E0\nG1 F9000\nstatus_printing\nM117 Printing...', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\nstatus_busy\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\n\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y} F3600\nM117 Finished!\nstatus_off', 'description': 'G-Code macro'}, 'gcode_macro m600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state', 'description': 'G-Code macro'}, 'force_move': {'enable_force_move': True}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexz', 'max_z_velocity': 5.0, 'max_z_accel': 100.0}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-04-27 21:56:01,561 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-04-27 21:56:01,563 [printer.py:reinit()] - Klipper version: v0.12.0-132-ge37b007f-dirty
2024-04-27 21:56:01,563 [printer.py:reinit()] - # Extruders: 1
2024-04-27 21:56:01,563 [printer.py:reinit()] - # Temperature devices: 2
2024-04-27 21:56:01,563 [printer.py:reinit()] - # Fans: 2
2024-04-27 21:56:01,564 [printer.py:reinit()] - # Output pins: 0
2024-04-27 21:56:01,564 [printer.py:reinit()] - # Leds: 20
2024-04-27 21:56:01,564 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-04-27 21:56:01,585 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-04-27 21:56:01,588 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor mcu&fan&heater_fan extruder_fan&filament_switch_sensor extruder&neopixel sb_leds
2024-04-27 21:56:01,873 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-04-27 21:56:01,873 [screen.py:init_klipper()] - Printer initialized
2024-04-27 21:56:01,873 [printer.py:change_state()] - Changing state from 'disconnected' to 'printing'
2024-04-27 21:56:01,874 [printer.py:change_state()] - Adding callback for state: printing
2024-04-27 21:56:01,991 [screen.py:_load_panel()] - Loading panel: job_status
2024-04-27 21:56:02,183 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-04-27 21:56:02,193 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-04-27 21:56:02,219 [job_status.py:update_file_metadata()] - Cannot find file metadata. Listening for updated metadata
2024-04-27 21:56:02,220 [job_status.py:show_file_thumbnail()] - tfic-angled-honeycomb_0.2mm_PLA_MK3S_5h2m.gcode
2024-04-27 21:56:02,221 [job_status.py:show_file_thumbnail()] - no pixbuf
2024-04-27 21:56:02,237 [job_status.py:update_file_metadata()] - Update Metadata. File: tfic-angled-honeycomb_0.2mm_PLA_MK3S_5h2m.gcode Size: 15746614
2024-04-27 21:56:02,244 [job_status.py:show_file_thumbnail()] - tfic-angled-honeycomb_0.2mm_PLA_MK3S_5h2m.gcode
2024-04-27 21:58:31,294 [functions.py:log_start()] - --------------------KlipperScreen Log Start--------------------
2024-04-27 21:58:31,294 [functions.py:log_start()] - KlipperScreen Version: v0.3.9-50-gdaed9a0
2024-04-27 21:58:31,295 [functions.py:log_start()] - Python version: 3.11
2024-04-27 21:58:31,433 [config.py:get_config_file_location()] - Passed config (-c): .
2024-04-27 21:58:31,434 [config.py:__init__()] - Config path location: /home/pi/printer_data/config/KlipperScreen.conf
2024-04-27 21:58:31,463 [config.py:log_config()] -  ===== Config File =====

=======================
2024-04-27 21:58:31,465 [config.py:__init__()] - ====== Saved Def ======

[main]
use_dpms = False
print_sort_dir = date_desc

=======================
2024-04-27 21:58:31,466 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2024-04-27 21:58:31,575 [config.py:create_translations()] - Selected lang: None OS lang: en_GB
2024-04-27 21:58:31,575 [config.py:install_language()] - Using lang en
2024-04-27 21:58:31,594 [screen.py:__init__()] - Monitors: 1 using number: 0
2024-04-27 21:58:31,596 [screen.py:__init__()] - Wayland: False Display name: :100
2024-04-27 21:58:31,598 [screen.py:__init__()] - Screen resolution: 984x540
2024-04-27 21:58:31,600 [KlippyGtk.py:__init__()] - Font size: 18.6 (medium)
2024-04-27 21:58:32,197 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2024-04-27 21:58:32,198 [screen.py:set_screenblanking_timeout()] - Not using DPMS
2024-04-27 21:58:32,206 [screen.py:initial_connection()] - Default printer: None
2024-04-27 21:58:32,274 [screen.py:connect_printer()] - Connecting to printer: Printer
2024-04-27 21:58:32,274 [screen.py:_load_panel()] - Loading panel: splash_screen
2024-04-27 21:58:32,343 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-04-27 21:58:32,361 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-04-27 21:58:32,362 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-27 21:58:32,379 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/access/oneshot_token
2024-04-27 21:58:32,391 [KlippyWebsocket.py:connect()] - Starting websocket thread
2024-04-27 21:58:32,400 [_logging.py:info()] - Websocket connected
2024-04-27 21:58:32,400 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2024-04-27 21:58:32,416 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-27 21:58:32,428 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-04-27 21:58:32,440 [printer.py:configure_cameras()] - Cameras: []
2024-04-27 21:58:32,441 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'ready', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'octoprint_compat', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 3, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-04-27 21:58:32,441 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-04-27 21:58:32,454 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-04-27 21:58:32,697 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set allow_park = client.park_at_cancel | default(false) | lower == \'true\' %}\n{% set retract = client.cancel_retract | default(5.0) | abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x | default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y | default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x | length > 0 or park_y | length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro | default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set idle_timeout = client.idle_timeout | default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE | default(1) | int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro | default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move | default(velocity) %}\n{% set runout_resume = True if client.runout_sensor | default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state | upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro | default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY | default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}"}, 'neopixel sb_leds': {'pin': 'EBBCan:gpio16', 'chain_count': '3', 'color_order': 'GRB', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0'}, 'led_effect sb_logo_busy': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (1,0,0)'}, 'led_effect sb_logo_cleaning': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.02, 0.5)'}, 'led_effect sb_logo_calibrating_z': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 0.35)'}, 'led_effect sb_logo_heating': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nbreathing  3 1 top (1, 0.18, 0)'}, 'led_effect sb_logo_cooling': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nbreathing  3 1 top (0, 0, 1)'}, 'led_effect sb_logo_homing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.6, 0.2)'}, 'led_effect sb_logo_leveling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.5, 0.1, 0.4)'}, 'led_effect sb_logo_meshing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.2, 1.0, 0.0)'}, 'led_effect sb_logo_printing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.3, 0.3, 0.0),(0.3, 0.1, 0.0)'}, 'led_effect sb_logo_standby': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.01, 0.01, 0.01)'}, 'led_effect sb_logo_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 1.0, 0.0)'}, 'led_effect sb_nozzle_heating': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (1.0, 0.18, 0.0, 0.0)'}, 'led_effect sb_nozzle_cooling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 1.0, 0.1)'}, 'led_effect sb_nozzle_standby': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.6, 0.0, 0.0, 0.0)'}, 'led_effect sb_nozzle_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.6, 1.0, 0.0, 0.1)'}, 'led_effect sb_critical_error': {'leds': '\nneopixel:sb_leds', 'layers': '\nstrobe         1  1.5   add        (1.0,  1.0, 1.0)\nbreathing      2  0     difference (0.95, 0.0, 0.0)\nstatic         1  0     top        (1.0,  0.0, 0.0)', 'autostart': 'false', 'frame_rate': '24', 'run_on_error': 'true'}, 'led_effect rainbow': {'leds': '\nneopixel:sb_leds', 'autostart': 'true', 'frame_rate': '24', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.0, 0.3, 0.0),(0.0, 0.0, 0.3)'}, 'led_effect set_nozzle_leds': {'leds': '\nneopixel:sb_leds (2,3)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nstatic         0  0     top        (0.5,  0.5, 0.5)'}, 'led_effect set_logo_leds': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nstatic         0  0     top        (1.0,  1.0, 1.0)'}, 'gcode_macro set_logo_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds STOP=1'}, 'gcode_macro set_logo_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1'}, 'gcode_macro status_off': {'gcode': '\nSTOP_LED_EFFECTS'}, 'gcode_macro status_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=rainbow'}, 'gcode_macro status_part_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready'}, 'gcode_macro status_busy': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_busy\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_heating\nSET_LED_EFFECT EFFECT=sb_nozzle_heating'}, 'gcode_macro status_cooling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cooling\nSET_LED_EFFECT EFFECT=sb_nozzle_cooling'}, 'gcode_macro status_leveling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_leveling\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_homing\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cleaning\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_meshing\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_calibrating_z\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_printing\nset_nozzle_leds_on'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_sam4e8e_00313753364B37373032303038303139-if00'}, 'mcu EBBCan': {'canbus_uuid': '8250861450f7'}, 'adxl345': {'cs_pin': 'EBBCan:gpio1', 'spi_software_sclk_pin': 'EBBCan:gpio2', 'spi_software_mosi_pin': 'EBBCan:gpio0', 'spi_software_miso_pin': 'EBBCan:gpio3', 'axes_map': 'z,-y,x'}, 'resonance_tester': {'probe_points': '100, 100, 20', 'accel_chip': 'adxl345'}, 'input_shaper': {'shaper_freq_x': '45', 'shaper_type': '3hump_ei'}, 'stepper_x': {'step_pin': 'PD6', 'dir_pin': '!PD11', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'EBBCan:gpio24', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '40'}, 'tmc2660 stepper_x': {'cs_pin': 'PD14', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'stepper_y': {'step_pin': 'PD7', 'dir_pin': '!PD12', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'PA2', 'position_endstop': '0', 'position_max': '225', 'position_min': '-4', 'homing_speed': '35', 'homing_retract_dist': '0'}, 'tmc2660 stepper_y': {'cs_pin': 'PC9', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'stepper_z': {'step_pin': 'PD8', 'dir_pin': '!PD13', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '230', 'position_min': '-2.5', 'homing_speed': '35.0'}, 'tmc2660 stepper_z': {'cs_pin': 'PC10', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'adc_temperature my_thermistor': {'temperature1': '0', 'resistance1': '1000', 'temperature2': '80', 'resistance2': '1309'}, 'extruder': {'step_pin': '!EBBCan:gpio18', 'dir_pin': 'EBBCan:gpio19', 'enable_pin': '!EBBCan:gpio17', 'microsteps': '32', 'rotation_distance': '21.63024711', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'pressure_advance': '0.065', 'pressure_advance_smooth_time': '0.02', 'gear_ratio': '50:10', 'heater_pin': 'EBBCan:gpio7', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'EBBCan:gpio27', 'control': 'pid', 'pid_kp': '21.527', 'pid_ki': '1.063', 'pid_kd': '108.982', 'min_temp': '0', 'max_temp': '250'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan:gpio20', 'run_current': '0.5', 'stealthchop_threshold': '999999'}, 'filament_switch_sensor extruder': {'pause_on_runout': 'True', 'switch_pin': 'EBBCan:gpio21'}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu'}, 'thermistor chamber_temp': {'temperature1': '25', 'resistance1': '10000', 'beta': '3950'}, 'heater_bed': {'heater_pin': '!PA19', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PC13', 'control': 'watermark', 'min_temp': '0', 'max_temp': '120'}, 'heater_fan extruder_fan': {'pin': 'EBBCan:gpio13', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'EBBCan:gpio14', 'cycle_time': '.08', 'kick_start_time': '.25'}, 'probe': {'pin': '^EBBCan:gpio22', 'x_offset': '0', 'y_offset': '0', 'samples': '3', 'samples_result': 'median', 'sample_retract_dist': '3', 'samples_tolerance': '0.015', 'samples_tolerance_retries': '3', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'z_offset': '-1.350'}, 'homing_override': {'axes': 'z', 'set_position_z': '0', 'gcode': '\nstatus_homing\nG90\nG0 Z5 F500\nG28 X0 Y0\nG0 X150 Y100 F9000\nG28 Z0\nG0 Z5 F500\nstatus_ready'}, 'bed_mesh': {'speed': '150', 'horizontal_move_z': '5', 'mesh_min': '25,35.0', 'mesh_max': '225.0,220', 'probe_count': '6,6', 'algorithm': 'bicubic', 'fade_start': '1', 'fade_end': '10', 'fade_target': '0'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\nSTATUS_HEATING\nM109 S150\nSTATUS_HOMING\nM117 Homing...\nG28 Y0 X0 Z0\nSTATUS_MESHING\nBED_MESH_CALIBRATE ADAPTIVE=1\n\n\n\n\n\n\n\n\n\n\n\nSTATUS_HEATING\nM107\nM117 Heating bed\nM190 S{ params.BED }\nM117 Heating nozzle\nM109 S{target_extruder}\nstatus_ready\nG1 Z15.0 F600\nG1 X125 Y125 F3000\nG92 E0\nG1 F9000\nstatus_printing\nM117 Printing...'}, 'gcode_macro PRINT_END': {'gcode': '\nstatus_busy\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\n\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y} F3600\nM117 Finished!\nstatus_off'}, 'gcode_macro M600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state'}, 'printer': {'kinematics': 'corexz', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '5', 'max_z_accel': '100'}, 'force_move': {'enable_force_move': 'true'}, 'exclude_object': {}, 'bed_mesh default': {'version': '1', 'points': '\n-0.100000, -0.025000, 0.012500, 0.037500, 0.125000, 0.212500\n-0.187500, -0.100000, -0.025000, 0.025000, 0.100000, 0.212500\n-0.262500, -0.162500, -0.075000, -0.012500, 0.075000, 0.187500\n-0.262500, -0.162500, -0.087500, -0.000000, 0.100000, 0.237500\n-0.200000, -0.100000, -0.012500, 0.062500, 0.200000, 0.350000\n-0.225000, -0.075000, -0.000000, 0.087500, 0.225000, 0.387500', 'x_count': '6', 'y_count': '6', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'bicubic', 'tension': '0.2', 'min_x': '25.0', 'max_x': '225.0', 'min_y': '35.0', 'max_y': '220.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_sam4e8e_00313753364B37373032303038303139-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu ebbcan': {'canbus_uuid': '8250861450f7', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set allow_park = client.park_at_cancel | default(false) | lower == \'true\' %}\n{% set retract = client.cancel_retract | default(5.0) | abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x | default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y | default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x | length > 0 or park_y | length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro | default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set idle_timeout = client.idle_timeout | default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE | default(1) | int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro | default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move | default(velocity) %}\n{% set runout_resume = True if client.runout_sensor | default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state | upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro | default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY | default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'neopixel sb_leds': {'pin': 'EBBCan:gpio16', 'chain_count': 3, 'color_order': ['GRB'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'led_effect sb_logo_busy': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1,0,0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_cleaning': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.02, 0.5)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_calibrating_z': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 0.35)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1, 0.18, 0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0, 0, 1)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_homing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.6, 0.2)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_leveling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.5, 0.1, 0.4)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_meshing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.2, 1.0, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_printing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.3, 0.3, 0.0),(0.3, 0.1, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_standby': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.01, 0.01, 0.01)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 1.0, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_nozzle_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1.0, 0.18, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 1.0, 0.1)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_standby': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.6, 0.0, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.6, 1.0, 0.0, 0.1)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_critical_error': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': True, 'endstops': '', 'layers': '\nstrobe         1  1.5   add        (1.0,  1.0, 1.0)\nbreathing      2  0     difference (0.95, 0.0, 0.0)\nstatic         1  0     top        (1.0,  0.0, 0.0)', 'leds': '\nneopixel:sb_leds'}, 'led_effect rainbow': {'frame_rate': 24.0, 'autostart': True, 'run_on_error': False, 'endstops': '', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.0, 0.3, 0.0),(0.0, 0.0, 0.3)', 'leds': '\nneopixel:sb_leds'}, 'led_effect set_nozzle_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic         0  0     top        (0.5,  0.5, 0.5)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect set_logo_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic         0  0     top        (1.0,  1.0, 1.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'gcode_macro set_logo_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nSTOP_LED_EFFECTS', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=rainbow', 'description': 'G-Code macro'}, 'gcode_macro status_part_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_busy\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_heating\nSET_LED_EFFECT EFFECT=sb_nozzle_heating', 'description': 'G-Code macro'}, 'gcode_macro status_cooling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cooling\nSET_LED_EFFECT EFFECT=sb_nozzle_cooling', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_leveling\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_homing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cleaning\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_meshing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_calibrating_z\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_printing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'adxl345': {'axes_map': ['z', '-y', 'x'], 'rate': 3200, 'cs_pin': 'EBBCan:gpio1', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'EBBCan:gpio2', 'spi_software_miso_pin': 'EBBCan:gpio3', 'spi_software_mosi_pin': 'EBBCan:gpio0'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[100.0, 100.0, 20.0]], 'accel_chip': 'adxl345'}, 'input_shaper': {'shaper_type': '3hump_ei', 'shaper_type_x': '3hump_ei', 'damping_ratio_x': 0.1, 'shaper_freq_x': 45.0, 'shaper_type_y': '3hump_ei', 'damping_ratio_y': 0.1, 'shaper_freq_y': 0.0}, 'tmc2660 stepper_x': {'cs_pin': 'PD14', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PD6', 'dir_pin': '!PD11', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'EBBCan:gpio24', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2660 stepper_y': {'cs_pin': 'PC9', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PD7', 'dir_pin': '!PD12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'PA2', 'position_endstop': 0.0, 'position_min': -4.0, 'position_max': 225.0, 'homing_speed': 35.0, 'second_homing_speed': 17.5, 'homing_retract_speed': 35.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2660 stepper_z': {'cs_pin': 'PC10', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PD8', 'dir_pin': '!PD13', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -2.5, 'position_max': 230.0, 'homing_speed': 35.0, 'second_homing_speed': 17.5, 'homing_retract_speed': 35.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'adc_temperature my_thermistor': {'resistance1': 1000.0, 'temperature1': 0.0, 'temperature2': 80.0, 'resistance2': 1309.0}, 'tmc2209 extruder': {'uart_pin': 'EBBCan:gpio20', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan:gpio27', 'min_temp': 0.0, 'max_temp': 250.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 21.527, 'pid_ki': 1.063, 'pid_kd': 108.982, 'heater_pin': 'EBBCan:gpio7', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': '!EBBCan:gpio18', 'pressure_advance': 0.065, 'pressure_advance_smooth_time': 0.02, 'dir_pin': 'EBBCan:gpio19', 'rotation_distance': 21.63024711, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!EBBCan:gpio17'}, 'filament_switch_sensor extruder': {'switch_pin': 'EBBCan:gpio21', 'pause_on_runout': True, 'runout_gcode': '', 'pause_delay': 0.5, 'event_delay': 3.0}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'thermistor chamber_temp': {'temperature1': 25.0, 'resistance1': 10000.0, 'beta': 3950.0}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PC13', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'watermark', 'max_delta': 2.0, 'heater_pin': '!PA19', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan extruder_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'EBBCan:gpio13', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.25, 'off_below': 0.0, 'cycle_time': 0.08, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'EBBCan:gpio14'}, 'probe': {'z_offset': -1.35, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': '^EBBCan:gpio22', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 3, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.015, 'samples_tolerance_retries': 3}, 'homing_override': {'set_position_z': 0.0, 'axes': 'z', 'gcode': '\nstatus_homing\nG90\nG0 Z5 F500\nG28 X0 Y0\nG0 X150 Y100 F9000\nG28 Z0\nG0 Z5 F500\nstatus_ready'}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [6, 6], 'mesh_min': [25.0, 35.0], 'mesh_max': [225.0, 220.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 150.0, 'fade_start': 1.0, 'fade_end': 10.0, 'fade_target': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[-0.1, -0.025, 0.0125, 0.0375, 0.125, 0.2125], [-0.1875, -0.1, -0.025, 0.025, 0.1, 0.2125], [-0.2625, -0.1625, -0.075, -0.0125, 0.075, 0.1875], [-0.2625, -0.1625, -0.0875, -0.0, 0.1, 0.2375], [-0.2, -0.1, -0.0125, 0.0625, 0.2, 0.35], [-0.225, -0.075, -0.0, 0.0875, 0.225, 0.3875]], 'min_x': 25.0, 'max_x': 225.0, 'min_y': 35.0, 'max_y': 220.0, 'x_count': 6, 'y_count': 6, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'bicubic', 'tension': 0.2}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\nSTATUS_HEATING\nM109 S150\nSTATUS_HOMING\nM117 Homing...\nG28 Y0 X0 Z0\nSTATUS_MESHING\nBED_MESH_CALIBRATE ADAPTIVE=1\n\n\n\n\n\n\n\n\n\n\n\nSTATUS_HEATING\nM107\nM117 Heating bed\nM190 S{ params.BED }\nM117 Heating nozzle\nM109 S{target_extruder}\nstatus_ready\nG1 Z15.0 F600\nG1 X125 Y125 F3000\nG92 E0\nG1 F9000\nstatus_printing\nM117 Printing...', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\nstatus_busy\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\n\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y} F3600\nM117 Finished!\nstatus_off', 'description': 'G-Code macro'}, 'gcode_macro m600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state', 'description': 'G-Code macro'}, 'force_move': {'enable_force_move': True}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexz', 'max_z_velocity': 5.0, 'max_z_accel': 100.0}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-04-27 21:58:32,701 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-04-27 21:58:32,702 [printer.py:reinit()] - Klipper version: v0.12.0-132-ge37b007f-dirty
2024-04-27 21:58:32,702 [printer.py:reinit()] - # Extruders: 1
2024-04-27 21:58:32,702 [printer.py:reinit()] - # Temperature devices: 2
2024-04-27 21:58:32,703 [printer.py:reinit()] - # Fans: 2
2024-04-27 21:58:32,703 [printer.py:reinit()] - # Output pins: 0
2024-04-27 21:58:32,703 [printer.py:reinit()] - # Leds: 20
2024-04-27 21:58:32,703 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-04-27 21:58:32,721 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-04-27 21:58:32,723 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor mcu&fan&heater_fan extruder_fan&filament_switch_sensor extruder&neopixel sb_leds
2024-04-27 21:58:33,013 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-04-27 21:58:33,013 [screen.py:init_klipper()] - Printer initialized
2024-04-27 21:58:33,013 [printer.py:change_state()] - Changing state from 'disconnected' to 'printing'
2024-04-27 21:58:33,014 [printer.py:change_state()] - Adding callback for state: printing
2024-04-27 21:58:33,130 [screen.py:_load_panel()] - Loading panel: job_status
2024-04-27 21:58:33,332 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-04-27 21:58:33,341 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-04-27 21:58:33,367 [job_status.py:update_file_metadata()] - Cannot find file metadata. Listening for updated metadata
2024-04-27 21:58:33,369 [job_status.py:show_file_thumbnail()] - tfic-angled-honeycomb_0.2mm_PLA_MK3S_5h2m.gcode
2024-04-27 21:58:33,369 [job_status.py:show_file_thumbnail()] - no pixbuf
2024-04-27 21:58:33,387 [job_status.py:update_file_metadata()] - Update Metadata. File: tfic-angled-honeycomb_0.2mm_PLA_MK3S_5h2m.gcode Size: 15746614
2024-04-27 21:58:33,393 [job_status.py:show_file_thumbnail()] - tfic-angled-honeycomb_0.2mm_PLA_MK3S_5h2m.gcode
2024-04-27 22:00:06,613 [functions.py:log_start()] - --------------------KlipperScreen Log Start--------------------
2024-04-27 22:00:06,614 [functions.py:log_start()] - KlipperScreen Version: v0.3.9-50-gdaed9a0
2024-04-27 22:00:06,614 [functions.py:log_start()] - Python version: 3.11
2024-04-27 22:00:06,764 [config.py:get_config_file_location()] - Passed config (-c): .
2024-04-27 22:00:06,765 [config.py:__init__()] - Config path location: /home/pi/printer_data/config/KlipperScreen.conf
2024-04-27 22:00:06,789 [config.py:log_config()] -  ===== Config File =====

=======================
2024-04-27 22:00:06,792 [config.py:__init__()] - ====== Saved Def ======

[main]
use_dpms = False
print_sort_dir = date_desc

=======================
2024-04-27 22:00:06,792 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2024-04-27 22:00:06,902 [config.py:create_translations()] - Selected lang: None OS lang: en_GB
2024-04-27 22:00:06,903 [config.py:install_language()] - Using lang en
2024-04-27 22:00:06,921 [screen.py:__init__()] - Monitors: 1 using number: 0
2024-04-27 22:00:06,923 [screen.py:__init__()] - Wayland: False Display name: :100
2024-04-27 22:00:06,926 [screen.py:__init__()] - Screen resolution: 984x540
2024-04-27 22:00:06,927 [KlippyGtk.py:__init__()] - Font size: 18.6 (medium)
2024-04-27 22:00:07,572 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2024-04-27 22:00:07,572 [screen.py:set_screenblanking_timeout()] - Not using DPMS
2024-04-27 22:00:07,582 [screen.py:initial_connection()] - Default printer: None
2024-04-27 22:00:07,673 [screen.py:connect_printer()] - Connecting to printer: Printer
2024-04-27 22:00:07,674 [screen.py:_load_panel()] - Loading panel: splash_screen
2024-04-27 22:00:07,750 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-04-27 22:00:07,768 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-04-27 22:00:07,768 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-27 22:00:07,787 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/access/oneshot_token
2024-04-27 22:00:07,799 [KlippyWebsocket.py:connect()] - Starting websocket thread
2024-04-27 22:00:07,808 [_logging.py:info()] - Websocket connected
2024-04-27 22:00:07,810 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2024-04-27 22:00:07,824 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-27 22:00:07,837 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-04-27 22:00:07,848 [printer.py:configure_cameras()] - Cameras: []
2024-04-27 22:00:07,849 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'ready', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'octoprint_compat', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 3, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-04-27 22:00:07,849 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-04-27 22:00:07,862 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-04-27 22:00:08,012 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set allow_park = client.park_at_cancel | default(false) | lower == \'true\' %}\n{% set retract = client.cancel_retract | default(5.0) | abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x | default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y | default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x | length > 0 or park_y | length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro | default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set idle_timeout = client.idle_timeout | default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE | default(1) | int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro | default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move | default(velocity) %}\n{% set runout_resume = True if client.runout_sensor | default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state | upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro | default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY | default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}"}, 'neopixel sb_leds': {'pin': 'EBBCan:gpio16', 'chain_count': '3', 'color_order': 'GRB', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0'}, 'led_effect sb_logo_busy': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (1,0,0)'}, 'led_effect sb_logo_cleaning': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.02, 0.5)'}, 'led_effect sb_logo_calibrating_z': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 0.35)'}, 'led_effect sb_logo_heating': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nbreathing  3 1 top (1, 0.18, 0)'}, 'led_effect sb_logo_cooling': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nbreathing  3 1 top (0, 0, 1)'}, 'led_effect sb_logo_homing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.6, 0.2)'}, 'led_effect sb_logo_leveling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.5, 0.1, 0.4)'}, 'led_effect sb_logo_meshing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.2, 1.0, 0.0)'}, 'led_effect sb_logo_printing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.3, 0.3, 0.0),(0.3, 0.1, 0.0)'}, 'led_effect sb_logo_standby': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.01, 0.01, 0.01)'}, 'led_effect sb_logo_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 1.0, 0.0)'}, 'led_effect sb_nozzle_heating': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (1.0, 0.18, 0.0, 0.0)'}, 'led_effect sb_nozzle_cooling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 1.0, 0.1)'}, 'led_effect sb_nozzle_standby': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.6, 0.0, 0.0, 0.0)'}, 'led_effect sb_nozzle_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.6, 1.0, 0.0, 0.1)'}, 'led_effect sb_critical_error': {'leds': '\nneopixel:sb_leds', 'layers': '\nstrobe         1  1.5   add        (1.0,  1.0, 1.0)\nbreathing      2  0     difference (0.95, 0.0, 0.0)\nstatic         1  0     top        (1.0,  0.0, 0.0)', 'autostart': 'false', 'frame_rate': '24', 'run_on_error': 'true'}, 'led_effect rainbow': {'leds': '\nneopixel:sb_leds', 'autostart': 'true', 'frame_rate': '24', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.0, 0.3, 0.0),(0.0, 0.0, 0.3)'}, 'led_effect set_nozzle_leds': {'leds': '\nneopixel:sb_leds (2,3)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nstatic         0  0     top        (0.5,  0.5, 0.5)'}, 'led_effect set_logo_leds': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nstatic         0  0     top        (1.0,  1.0, 1.0)'}, 'gcode_macro set_logo_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds STOP=1'}, 'gcode_macro set_logo_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1'}, 'gcode_macro status_off': {'gcode': '\nSTOP_LED_EFFECTS'}, 'gcode_macro status_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=rainbow'}, 'gcode_macro status_part_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready'}, 'gcode_macro status_busy': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_busy\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_heating\nSET_LED_EFFECT EFFECT=sb_nozzle_heating'}, 'gcode_macro status_cooling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cooling\nSET_LED_EFFECT EFFECT=sb_nozzle_cooling'}, 'gcode_macro status_leveling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_leveling\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_homing\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cleaning\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_meshing\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_calibrating_z\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_printing\nset_nozzle_leds_on'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_sam4e8e_00313753364B37373032303038303139-if00'}, 'mcu EBBCan': {'canbus_uuid': '8250861450f7'}, 'adxl345': {'cs_pin': 'EBBCan:gpio1', 'spi_software_sclk_pin': 'EBBCan:gpio2', 'spi_software_mosi_pin': 'EBBCan:gpio0', 'spi_software_miso_pin': 'EBBCan:gpio3', 'axes_map': 'z,-y,x'}, 'resonance_tester': {'probe_points': '100, 100, 20', 'accel_chip': 'adxl345'}, 'input_shaper': {'shaper_freq_x': '45', 'shaper_type': '3hump_ei'}, 'stepper_x': {'step_pin': 'PD6', 'dir_pin': '!PD11', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'EBBCan:gpio24', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '40'}, 'tmc2660 stepper_x': {'cs_pin': 'PD14', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'stepper_y': {'step_pin': 'PD7', 'dir_pin': '!PD12', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'PA2', 'position_endstop': '0', 'position_max': '225', 'position_min': '-4', 'homing_speed': '35', 'homing_retract_dist': '0'}, 'tmc2660 stepper_y': {'cs_pin': 'PC9', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'stepper_z': {'step_pin': 'PD8', 'dir_pin': '!PD13', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '230', 'position_min': '-2.5', 'homing_speed': '35.0'}, 'tmc2660 stepper_z': {'cs_pin': 'PC10', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'adc_temperature my_thermistor': {'temperature1': '0', 'resistance1': '1000', 'temperature2': '80', 'resistance2': '1309'}, 'extruder': {'step_pin': '!EBBCan:gpio18', 'dir_pin': 'EBBCan:gpio19', 'enable_pin': '!EBBCan:gpio17', 'microsteps': '32', 'rotation_distance': '21.63024711', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'pressure_advance': '0.065', 'pressure_advance_smooth_time': '0.02', 'gear_ratio': '50:10', 'heater_pin': 'EBBCan:gpio7', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'EBBCan:gpio27', 'control': 'pid', 'pid_kp': '21.527', 'pid_ki': '1.063', 'pid_kd': '108.982', 'min_temp': '0', 'max_temp': '250'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan:gpio20', 'run_current': '0.5', 'stealthchop_threshold': '999999'}, 'filament_switch_sensor extruder': {'pause_on_runout': 'True', 'switch_pin': 'EBBCan:gpio21'}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu'}, 'thermistor chamber_temp': {'temperature1': '25', 'resistance1': '10000', 'beta': '3950'}, 'heater_bed': {'heater_pin': '!PA19', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PC13', 'control': 'watermark', 'min_temp': '0', 'max_temp': '120'}, 'heater_fan extruder_fan': {'pin': 'EBBCan:gpio13', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'EBBCan:gpio14', 'cycle_time': '.08', 'kick_start_time': '.25'}, 'probe': {'pin': '^EBBCan:gpio22', 'x_offset': '0', 'y_offset': '0', 'samples': '3', 'samples_result': 'median', 'sample_retract_dist': '3', 'samples_tolerance': '0.015', 'samples_tolerance_retries': '3', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'z_offset': '-1.350'}, 'homing_override': {'axes': 'z', 'set_position_z': '0', 'gcode': '\nstatus_homing\nG90\nG0 Z5 F500\nG28 X0 Y0\nG0 X150 Y100 F9000\nG28 Z0\nG0 Z5 F500\nstatus_ready'}, 'bed_mesh': {'speed': '150', 'horizontal_move_z': '5', 'mesh_min': '25,35.0', 'mesh_max': '225.0,220', 'probe_count': '6,6', 'algorithm': 'bicubic', 'fade_start': '1', 'fade_end': '10', 'fade_target': '0'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\nSTATUS_HEATING\nM109 S150\nSTATUS_HOMING\nM117 Homing...\nG28 Y0 X0 Z0\nSTATUS_MESHING\nBED_MESH_CALIBRATE ADAPTIVE=1\n\n\n\n\n\n\n\n\n\n\n\nSTATUS_HEATING\nM107\nM117 Heating bed\nM190 S{ params.BED }\nM117 Heating nozzle\nM109 S{target_extruder}\nstatus_ready\nG1 Z15.0 F600\nG1 X125 Y125 F3000\nG92 E0\nG1 F9000\nstatus_printing\nM117 Printing...'}, 'gcode_macro PRINT_END': {'gcode': '\nstatus_busy\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\n\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y} F3600\nM117 Finished!\nstatus_off'}, 'gcode_macro M600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state'}, 'printer': {'kinematics': 'corexz', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '5', 'max_z_accel': '100'}, 'force_move': {'enable_force_move': 'true'}, 'exclude_object': {}, 'bed_mesh default': {'version': '1', 'points': '\n-0.100000, -0.025000, 0.012500, 0.037500, 0.125000, 0.212500\n-0.187500, -0.100000, -0.025000, 0.025000, 0.100000, 0.212500\n-0.262500, -0.162500, -0.075000, -0.012500, 0.075000, 0.187500\n-0.262500, -0.162500, -0.087500, -0.000000, 0.100000, 0.237500\n-0.200000, -0.100000, -0.012500, 0.062500, 0.200000, 0.350000\n-0.225000, -0.075000, -0.000000, 0.087500, 0.225000, 0.387500', 'x_count': '6', 'y_count': '6', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'bicubic', 'tension': '0.2', 'min_x': '25.0', 'max_x': '225.0', 'min_y': '35.0', 'max_y': '220.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_sam4e8e_00313753364B37373032303038303139-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu ebbcan': {'canbus_uuid': '8250861450f7', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set allow_park = client.park_at_cancel | default(false) | lower == \'true\' %}\n{% set retract = client.cancel_retract | default(5.0) | abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x | default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y | default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x | length > 0 or park_y | length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro | default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set idle_timeout = client.idle_timeout | default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE | default(1) | int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro | default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move | default(velocity) %}\n{% set runout_resume = True if client.runout_sensor | default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state | upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro | default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY | default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'neopixel sb_leds': {'pin': 'EBBCan:gpio16', 'chain_count': 3, 'color_order': ['GRB'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'led_effect sb_logo_busy': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1,0,0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_cleaning': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.02, 0.5)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_calibrating_z': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 0.35)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1, 0.18, 0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0, 0, 1)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_homing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.6, 0.2)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_leveling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.5, 0.1, 0.4)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_meshing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.2, 1.0, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_printing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.3, 0.3, 0.0),(0.3, 0.1, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_standby': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.01, 0.01, 0.01)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 1.0, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_nozzle_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1.0, 0.18, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 1.0, 0.1)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_standby': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.6, 0.0, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.6, 1.0, 0.0, 0.1)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_critical_error': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': True, 'endstops': '', 'layers': '\nstrobe         1  1.5   add        (1.0,  1.0, 1.0)\nbreathing      2  0     difference (0.95, 0.0, 0.0)\nstatic         1  0     top        (1.0,  0.0, 0.0)', 'leds': '\nneopixel:sb_leds'}, 'led_effect rainbow': {'frame_rate': 24.0, 'autostart': True, 'run_on_error': False, 'endstops': '', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.0, 0.3, 0.0),(0.0, 0.0, 0.3)', 'leds': '\nneopixel:sb_leds'}, 'led_effect set_nozzle_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic         0  0     top        (0.5,  0.5, 0.5)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect set_logo_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic         0  0     top        (1.0,  1.0, 1.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'gcode_macro set_logo_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nSTOP_LED_EFFECTS', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=rainbow', 'description': 'G-Code macro'}, 'gcode_macro status_part_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_busy\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_heating\nSET_LED_EFFECT EFFECT=sb_nozzle_heating', 'description': 'G-Code macro'}, 'gcode_macro status_cooling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cooling\nSET_LED_EFFECT EFFECT=sb_nozzle_cooling', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_leveling\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_homing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cleaning\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_meshing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_calibrating_z\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_printing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'adxl345': {'axes_map': ['z', '-y', 'x'], 'rate': 3200, 'cs_pin': 'EBBCan:gpio1', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'EBBCan:gpio2', 'spi_software_miso_pin': 'EBBCan:gpio3', 'spi_software_mosi_pin': 'EBBCan:gpio0'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[100.0, 100.0, 20.0]], 'accel_chip': 'adxl345'}, 'input_shaper': {'shaper_type': '3hump_ei', 'shaper_type_x': '3hump_ei', 'damping_ratio_x': 0.1, 'shaper_freq_x': 45.0, 'shaper_type_y': '3hump_ei', 'damping_ratio_y': 0.1, 'shaper_freq_y': 0.0}, 'tmc2660 stepper_x': {'cs_pin': 'PD14', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PD6', 'dir_pin': '!PD11', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'EBBCan:gpio24', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2660 stepper_y': {'cs_pin': 'PC9', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PD7', 'dir_pin': '!PD12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'PA2', 'position_endstop': 0.0, 'position_min': -4.0, 'position_max': 225.0, 'homing_speed': 35.0, 'second_homing_speed': 17.5, 'homing_retract_speed': 35.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2660 stepper_z': {'cs_pin': 'PC10', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PD8', 'dir_pin': '!PD13', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -2.5, 'position_max': 230.0, 'homing_speed': 35.0, 'second_homing_speed': 17.5, 'homing_retract_speed': 35.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'adc_temperature my_thermistor': {'resistance1': 1000.0, 'temperature1': 0.0, 'temperature2': 80.0, 'resistance2': 1309.0}, 'tmc2209 extruder': {'uart_pin': 'EBBCan:gpio20', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan:gpio27', 'min_temp': 0.0, 'max_temp': 250.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 21.527, 'pid_ki': 1.063, 'pid_kd': 108.982, 'heater_pin': 'EBBCan:gpio7', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': '!EBBCan:gpio18', 'pressure_advance': 0.065, 'pressure_advance_smooth_time': 0.02, 'dir_pin': 'EBBCan:gpio19', 'rotation_distance': 21.63024711, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!EBBCan:gpio17'}, 'filament_switch_sensor extruder': {'switch_pin': 'EBBCan:gpio21', 'pause_on_runout': True, 'runout_gcode': '', 'pause_delay': 0.5, 'event_delay': 3.0}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'thermistor chamber_temp': {'temperature1': 25.0, 'resistance1': 10000.0, 'beta': 3950.0}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PC13', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'watermark', 'max_delta': 2.0, 'heater_pin': '!PA19', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan extruder_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'EBBCan:gpio13', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.25, 'off_below': 0.0, 'cycle_time': 0.08, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'EBBCan:gpio14'}, 'probe': {'z_offset': -1.35, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': '^EBBCan:gpio22', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 3, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.015, 'samples_tolerance_retries': 3}, 'homing_override': {'set_position_z': 0.0, 'axes': 'z', 'gcode': '\nstatus_homing\nG90\nG0 Z5 F500\nG28 X0 Y0\nG0 X150 Y100 F9000\nG28 Z0\nG0 Z5 F500\nstatus_ready'}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [6, 6], 'mesh_min': [25.0, 35.0], 'mesh_max': [225.0, 220.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 150.0, 'fade_start': 1.0, 'fade_end': 10.0, 'fade_target': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[-0.1, -0.025, 0.0125, 0.0375, 0.125, 0.2125], [-0.1875, -0.1, -0.025, 0.025, 0.1, 0.2125], [-0.2625, -0.1625, -0.075, -0.0125, 0.075, 0.1875], [-0.2625, -0.1625, -0.0875, -0.0, 0.1, 0.2375], [-0.2, -0.1, -0.0125, 0.0625, 0.2, 0.35], [-0.225, -0.075, -0.0, 0.0875, 0.225, 0.3875]], 'min_x': 25.0, 'max_x': 225.0, 'min_y': 35.0, 'max_y': 220.0, 'x_count': 6, 'y_count': 6, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'bicubic', 'tension': 0.2}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\nSTATUS_HEATING\nM109 S150\nSTATUS_HOMING\nM117 Homing...\nG28 Y0 X0 Z0\nSTATUS_MESHING\nBED_MESH_CALIBRATE ADAPTIVE=1\n\n\n\n\n\n\n\n\n\n\n\nSTATUS_HEATING\nM107\nM117 Heating bed\nM190 S{ params.BED }\nM117 Heating nozzle\nM109 S{target_extruder}\nstatus_ready\nG1 Z15.0 F600\nG1 X125 Y125 F3000\nG92 E0\nG1 F9000\nstatus_printing\nM117 Printing...', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\nstatus_busy\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\n\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y} F3600\nM117 Finished!\nstatus_off', 'description': 'G-Code macro'}, 'gcode_macro m600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state', 'description': 'G-Code macro'}, 'force_move': {'enable_force_move': True}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexz', 'max_z_velocity': 5.0, 'max_z_accel': 100.0}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-04-27 22:00:08,015 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-04-27 22:00:08,016 [printer.py:reinit()] - Klipper version: v0.12.0-132-ge37b007f-dirty
2024-04-27 22:00:08,017 [printer.py:reinit()] - # Extruders: 1
2024-04-27 22:00:08,017 [printer.py:reinit()] - # Temperature devices: 2
2024-04-27 22:00:08,017 [printer.py:reinit()] - # Fans: 2
2024-04-27 22:00:08,017 [printer.py:reinit()] - # Output pins: 0
2024-04-27 22:00:08,017 [printer.py:reinit()] - # Leds: 20
2024-04-27 22:00:08,017 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-04-27 22:00:08,035 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-04-27 22:00:08,038 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor mcu&fan&heater_fan extruder_fan&filament_switch_sensor extruder&neopixel sb_leds
2024-04-27 22:00:08,330 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-04-27 22:00:08,330 [screen.py:init_klipper()] - Printer initialized
2024-04-27 22:00:08,331 [printer.py:change_state()] - Changing state from 'disconnected' to 'printing'
2024-04-27 22:00:08,331 [printer.py:change_state()] - Adding callback for state: printing
2024-04-27 22:00:08,449 [screen.py:_load_panel()] - Loading panel: job_status
2024-04-27 22:00:08,642 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-04-27 22:00:08,652 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-04-27 22:00:08,678 [job_status.py:update_file_metadata()] - Cannot find file metadata. Listening for updated metadata
2024-04-27 22:00:08,680 [job_status.py:show_file_thumbnail()] - tfic-angled-honeycomb_0.2mm_PLA_MK3S_5h2m.gcode
2024-04-27 22:00:08,680 [job_status.py:show_file_thumbnail()] - no pixbuf
2024-04-27 22:00:08,700 [job_status.py:update_file_metadata()] - Update Metadata. File: tfic-angled-honeycomb_0.2mm_PLA_MK3S_5h2m.gcode Size: 15746614
2024-04-27 22:00:08,707 [job_status.py:show_file_thumbnail()] - tfic-angled-honeycomb_0.2mm_PLA_MK3S_5h2m.gcode
2024-04-27 22:26:26,060 [functions.py:log_start()] - --------------------KlipperScreen Log Start--------------------
2024-04-27 22:26:26,061 [functions.py:log_start()] - KlipperScreen Version: v0.3.9-50-gdaed9a0
2024-04-27 22:26:26,061 [functions.py:log_start()] - Python version: 3.11
2024-04-27 22:26:26,201 [config.py:get_config_file_location()] - Passed config (-c): .
2024-04-27 22:26:26,202 [config.py:__init__()] - Config path location: /home/pi/printer_data/config/KlipperScreen.conf
2024-04-27 22:26:26,228 [config.py:log_config()] -  ===== Config File =====

=======================
2024-04-27 22:26:26,231 [config.py:__init__()] - ====== Saved Def ======

[main]
use_dpms = False
print_sort_dir = date_desc

=======================
2024-04-27 22:26:26,233 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2024-04-27 22:26:26,348 [config.py:create_translations()] - Selected lang: None OS lang: en_GB
2024-04-27 22:26:26,348 [config.py:install_language()] - Using lang en
2024-04-27 22:26:26,368 [screen.py:__init__()] - Monitors: 1 using number: 0
2024-04-27 22:26:26,369 [screen.py:__init__()] - Wayland: False Display name: :100
2024-04-27 22:26:26,372 [screen.py:__init__()] - Screen resolution: 984x540
2024-04-27 22:26:26,374 [KlippyGtk.py:__init__()] - Font size: 18.6 (medium)
2024-04-27 22:26:26,923 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2024-04-27 22:26:26,923 [screen.py:set_screenblanking_timeout()] - Not using DPMS
2024-04-27 22:26:26,933 [screen.py:initial_connection()] - Default printer: None
2024-04-27 22:26:26,999 [screen.py:connect_printer()] - Connecting to printer: Printer
2024-04-27 22:26:27,000 [screen.py:_load_panel()] - Loading panel: splash_screen
2024-04-27 22:26:27,069 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-04-27 22:26:27,090 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-04-27 22:26:27,090 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-27 22:26:27,108 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/access/oneshot_token
2024-04-27 22:26:27,120 [KlippyWebsocket.py:connect()] - Starting websocket thread
2024-04-27 22:26:27,129 [_logging.py:info()] - Websocket connected
2024-04-27 22:26:27,130 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2024-04-27 22:26:27,144 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-27 22:26:27,156 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-04-27 22:26:27,167 [printer.py:configure_cameras()] - Cameras: []
2024-04-27 22:26:27,168 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'ready', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'octoprint_compat', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 3, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-04-27 22:26:27,168 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-04-27 22:26:27,181 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-04-27 22:26:27,334 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set allow_park = client.park_at_cancel | default(false) | lower == \'true\' %}\n{% set retract = client.cancel_retract | default(5.0) | abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x | default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y | default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x | length > 0 or park_y | length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro | default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set idle_timeout = client.idle_timeout | default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE | default(1) | int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro | default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move | default(velocity) %}\n{% set runout_resume = True if client.runout_sensor | default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state | upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro | default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY | default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}"}, 'neopixel sb_leds': {'pin': 'EBBCan:gpio16', 'chain_count': '3', 'color_order': 'GRB', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0'}, 'led_effect sb_logo_busy': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (1,0,0)'}, 'led_effect sb_logo_cleaning': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.02, 0.5)'}, 'led_effect sb_logo_calibrating_z': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 0.35)'}, 'led_effect sb_logo_heating': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nbreathing  3 1 top (1, 0.18, 0)'}, 'led_effect sb_logo_cooling': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nbreathing  3 1 top (0, 0, 1)'}, 'led_effect sb_logo_homing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.6, 0.2)'}, 'led_effect sb_logo_leveling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.5, 0.1, 0.4)'}, 'led_effect sb_logo_meshing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.2, 1.0, 0.0)'}, 'led_effect sb_logo_printing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.3, 0.3, 0.0),(0.3, 0.1, 0.0)'}, 'led_effect sb_logo_standby': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.01, 0.01, 0.01)'}, 'led_effect sb_logo_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 1.0, 0.0)'}, 'led_effect sb_nozzle_heating': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (1.0, 0.18, 0.0, 0.0)'}, 'led_effect sb_nozzle_cooling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 1.0, 0.1)'}, 'led_effect sb_nozzle_standby': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.6, 0.0, 0.0, 0.0)'}, 'led_effect sb_nozzle_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.6, 1.0, 0.0, 0.1)'}, 'led_effect sb_critical_error': {'leds': '\nneopixel:sb_leds', 'layers': '\nstrobe         1  1.5   add        (1.0,  1.0, 1.0)\nbreathing      2  0     difference (0.95, 0.0, 0.0)\nstatic         1  0     top        (1.0,  0.0, 0.0)', 'autostart': 'false', 'frame_rate': '24', 'run_on_error': 'true'}, 'led_effect rainbow': {'leds': '\nneopixel:sb_leds', 'autostart': 'true', 'frame_rate': '24', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.0, 0.3, 0.0),(0.0, 0.0, 0.3)'}, 'led_effect set_nozzle_leds': {'leds': '\nneopixel:sb_leds (2,3)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nstatic         0  0     top        (0.5,  0.5, 0.5)'}, 'led_effect set_logo_leds': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nstatic         0  0     top        (1.0,  1.0, 1.0)'}, 'gcode_macro set_logo_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds STOP=1'}, 'gcode_macro set_logo_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1'}, 'gcode_macro status_off': {'gcode': '\nSTOP_LED_EFFECTS'}, 'gcode_macro status_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=rainbow'}, 'gcode_macro status_part_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready'}, 'gcode_macro status_busy': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_busy\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_heating\nSET_LED_EFFECT EFFECT=sb_nozzle_heating'}, 'gcode_macro status_cooling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cooling\nSET_LED_EFFECT EFFECT=sb_nozzle_cooling'}, 'gcode_macro status_leveling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_leveling\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_homing\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cleaning\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_meshing\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_calibrating_z\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_printing\nset_nozzle_leds_on'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_sam4e8e_00313753364B37373032303038303139-if00'}, 'mcu EBBCan': {'canbus_uuid': '8250861450f7'}, 'adxl345': {'cs_pin': 'EBBCan:gpio1', 'spi_software_sclk_pin': 'EBBCan:gpio2', 'spi_software_mosi_pin': 'EBBCan:gpio0', 'spi_software_miso_pin': 'EBBCan:gpio3', 'axes_map': 'z,-y,x'}, 'resonance_tester': {'probe_points': '100, 100, 20', 'accel_chip': 'adxl345'}, 'input_shaper': {'shaper_freq_x': '45', 'shaper_type': '3hump_ei'}, 'stepper_x': {'step_pin': 'PD6', 'dir_pin': '!PD11', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'EBBCan:gpio24', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '40'}, 'tmc2660 stepper_x': {'cs_pin': 'PD14', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'stepper_y': {'step_pin': 'PD7', 'dir_pin': '!PD12', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'PA2', 'position_endstop': '0', 'position_max': '225', 'position_min': '-4', 'homing_speed': '35', 'homing_retract_dist': '0'}, 'tmc2660 stepper_y': {'cs_pin': 'PC9', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'stepper_z': {'step_pin': 'PD8', 'dir_pin': '!PD13', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '230', 'position_min': '-2.5', 'homing_speed': '35.0'}, 'tmc2660 stepper_z': {'cs_pin': 'PC10', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'adc_temperature my_thermistor': {'temperature1': '0', 'resistance1': '1000', 'temperature2': '80', 'resistance2': '1309'}, 'extruder': {'step_pin': '!EBBCan:gpio18', 'dir_pin': 'EBBCan:gpio19', 'enable_pin': '!EBBCan:gpio17', 'microsteps': '32', 'rotation_distance': '21.63024711', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'pressure_advance': '0.065', 'pressure_advance_smooth_time': '0.02', 'gear_ratio': '50:10', 'heater_pin': 'EBBCan:gpio7', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'EBBCan:gpio27', 'control': 'pid', 'pid_kp': '21.527', 'pid_ki': '1.063', 'pid_kd': '108.982', 'min_temp': '0', 'max_temp': '250'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan:gpio20', 'run_current': '0.5', 'stealthchop_threshold': '999999'}, 'filament_switch_sensor extruder': {'pause_on_runout': 'True', 'switch_pin': 'EBBCan:gpio21'}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu'}, 'thermistor chamber_temp': {'temperature1': '25', 'resistance1': '10000', 'beta': '3950'}, 'heater_bed': {'heater_pin': '!PA19', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PC13', 'control': 'watermark', 'min_temp': '0', 'max_temp': '120'}, 'heater_fan extruder_fan': {'pin': 'EBBCan:gpio13', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'EBBCan:gpio14', 'cycle_time': '.08', 'kick_start_time': '.25'}, 'probe': {'pin': '^EBBCan:gpio22', 'x_offset': '0', 'y_offset': '0', 'samples': '3', 'samples_result': 'median', 'sample_retract_dist': '3', 'samples_tolerance': '0.015', 'samples_tolerance_retries': '3', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'z_offset': '-1.350'}, 'homing_override': {'axes': 'z', 'set_position_z': '0', 'gcode': '\nstatus_homing\nG90\nG0 Z5 F500\nG28 X0 Y0\nG0 X150 Y100 F9000\nG28 Z0\nG0 Z5 F500\nstatus_ready'}, 'bed_mesh': {'speed': '150', 'horizontal_move_z': '5', 'mesh_min': '25,35.0', 'mesh_max': '225.0,220', 'probe_count': '6,6', 'algorithm': 'bicubic', 'fade_start': '1', 'fade_end': '10', 'fade_target': '0'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\nSTATUS_HEATING\nM109 S150\nSTATUS_HOMING\nM117 Homing...\nG28 Y0 X0 Z0\nSTATUS_MESHING\nBED_MESH_CALIBRATE ADAPTIVE=1\n\n\n\n\n\n\n\n\n\n\n\nSTATUS_HEATING\nM107\nM117 Heating bed\nM190 S{ params.BED }\nM117 Heating nozzle\nM109 S{target_extruder}\nstatus_ready\nG1 Z15.0 F600\nG1 X125 Y125 F3000\nG92 E0\nG1 F9000\nstatus_printing\nM117 Printing...'}, 'gcode_macro PRINT_END': {'gcode': '\nstatus_busy\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\n\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y} F3600\nM117 Finished!\nstatus_off'}, 'gcode_macro M600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state'}, 'printer': {'kinematics': 'corexz', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '5', 'max_z_accel': '100'}, 'force_move': {'enable_force_move': 'true'}, 'exclude_object': {}, 'bed_mesh default': {'version': '1', 'points': '\n-0.100000, -0.025000, 0.012500, 0.037500, 0.125000, 0.212500\n-0.187500, -0.100000, -0.025000, 0.025000, 0.100000, 0.212500\n-0.262500, -0.162500, -0.075000, -0.012500, 0.075000, 0.187500\n-0.262500, -0.162500, -0.087500, -0.000000, 0.100000, 0.237500\n-0.200000, -0.100000, -0.012500, 0.062500, 0.200000, 0.350000\n-0.225000, -0.075000, -0.000000, 0.087500, 0.225000, 0.387500', 'x_count': '6', 'y_count': '6', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'bicubic', 'tension': '0.2', 'min_x': '25.0', 'max_x': '225.0', 'min_y': '35.0', 'max_y': '220.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_sam4e8e_00313753364B37373032303038303139-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu ebbcan': {'canbus_uuid': '8250861450f7', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set allow_park = client.park_at_cancel | default(false) | lower == \'true\' %}\n{% set retract = client.cancel_retract | default(5.0) | abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x | default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y | default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x | length > 0 or park_y | length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro | default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set idle_timeout = client.idle_timeout | default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE | default(1) | int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro | default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move | default(velocity) %}\n{% set runout_resume = True if client.runout_sensor | default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state | upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro | default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY | default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'neopixel sb_leds': {'pin': 'EBBCan:gpio16', 'chain_count': 3, 'color_order': ['GRB'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'led_effect sb_logo_busy': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1,0,0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_cleaning': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.02, 0.5)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_calibrating_z': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 0.35)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1, 0.18, 0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0, 0, 1)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_homing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.6, 0.2)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_leveling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.5, 0.1, 0.4)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_meshing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.2, 1.0, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_printing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.3, 0.3, 0.0),(0.3, 0.1, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_standby': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.01, 0.01, 0.01)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 1.0, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_nozzle_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1.0, 0.18, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 1.0, 0.1)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_standby': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.6, 0.0, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.6, 1.0, 0.0, 0.1)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_critical_error': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': True, 'endstops': '', 'layers': '\nstrobe         1  1.5   add        (1.0,  1.0, 1.0)\nbreathing      2  0     difference (0.95, 0.0, 0.0)\nstatic         1  0     top        (1.0,  0.0, 0.0)', 'leds': '\nneopixel:sb_leds'}, 'led_effect rainbow': {'frame_rate': 24.0, 'autostart': True, 'run_on_error': False, 'endstops': '', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.0, 0.3, 0.0),(0.0, 0.0, 0.3)', 'leds': '\nneopixel:sb_leds'}, 'led_effect set_nozzle_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic         0  0     top        (0.5,  0.5, 0.5)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect set_logo_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic         0  0     top        (1.0,  1.0, 1.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'gcode_macro set_logo_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nSTOP_LED_EFFECTS', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=rainbow', 'description': 'G-Code macro'}, 'gcode_macro status_part_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_busy\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_heating\nSET_LED_EFFECT EFFECT=sb_nozzle_heating', 'description': 'G-Code macro'}, 'gcode_macro status_cooling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cooling\nSET_LED_EFFECT EFFECT=sb_nozzle_cooling', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_leveling\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_homing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cleaning\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_meshing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_calibrating_z\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_printing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'adxl345': {'axes_map': ['z', '-y', 'x'], 'rate': 3200, 'cs_pin': 'EBBCan:gpio1', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'EBBCan:gpio2', 'spi_software_miso_pin': 'EBBCan:gpio3', 'spi_software_mosi_pin': 'EBBCan:gpio0'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[100.0, 100.0, 20.0]], 'accel_chip': 'adxl345'}, 'input_shaper': {'shaper_type': '3hump_ei', 'shaper_type_x': '3hump_ei', 'damping_ratio_x': 0.1, 'shaper_freq_x': 45.0, 'shaper_type_y': '3hump_ei', 'damping_ratio_y': 0.1, 'shaper_freq_y': 0.0}, 'tmc2660 stepper_x': {'cs_pin': 'PD14', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PD6', 'dir_pin': '!PD11', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'EBBCan:gpio24', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2660 stepper_y': {'cs_pin': 'PC9', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PD7', 'dir_pin': '!PD12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'PA2', 'position_endstop': 0.0, 'position_min': -4.0, 'position_max': 225.0, 'homing_speed': 35.0, 'second_homing_speed': 17.5, 'homing_retract_speed': 35.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2660 stepper_z': {'cs_pin': 'PC10', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PD8', 'dir_pin': '!PD13', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -2.5, 'position_max': 230.0, 'homing_speed': 35.0, 'second_homing_speed': 17.5, 'homing_retract_speed': 35.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'adc_temperature my_thermistor': {'resistance1': 1000.0, 'temperature1': 0.0, 'temperature2': 80.0, 'resistance2': 1309.0}, 'tmc2209 extruder': {'uart_pin': 'EBBCan:gpio20', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan:gpio27', 'min_temp': 0.0, 'max_temp': 250.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 21.527, 'pid_ki': 1.063, 'pid_kd': 108.982, 'heater_pin': 'EBBCan:gpio7', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': '!EBBCan:gpio18', 'pressure_advance': 0.065, 'pressure_advance_smooth_time': 0.02, 'dir_pin': 'EBBCan:gpio19', 'rotation_distance': 21.63024711, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!EBBCan:gpio17'}, 'filament_switch_sensor extruder': {'switch_pin': 'EBBCan:gpio21', 'pause_on_runout': True, 'runout_gcode': '', 'pause_delay': 0.5, 'event_delay': 3.0}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'thermistor chamber_temp': {'temperature1': 25.0, 'resistance1': 10000.0, 'beta': 3950.0}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PC13', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'watermark', 'max_delta': 2.0, 'heater_pin': '!PA19', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan extruder_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'EBBCan:gpio13', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.25, 'off_below': 0.0, 'cycle_time': 0.08, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'EBBCan:gpio14'}, 'probe': {'z_offset': -1.35, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': '^EBBCan:gpio22', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 3, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.015, 'samples_tolerance_retries': 3}, 'homing_override': {'set_position_z': 0.0, 'axes': 'z', 'gcode': '\nstatus_homing\nG90\nG0 Z5 F500\nG28 X0 Y0\nG0 X150 Y100 F9000\nG28 Z0\nG0 Z5 F500\nstatus_ready'}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [6, 6], 'mesh_min': [25.0, 35.0], 'mesh_max': [225.0, 220.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 150.0, 'fade_start': 1.0, 'fade_end': 10.0, 'fade_target': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[-0.1, -0.025, 0.0125, 0.0375, 0.125, 0.2125], [-0.1875, -0.1, -0.025, 0.025, 0.1, 0.2125], [-0.2625, -0.1625, -0.075, -0.0125, 0.075, 0.1875], [-0.2625, -0.1625, -0.0875, -0.0, 0.1, 0.2375], [-0.2, -0.1, -0.0125, 0.0625, 0.2, 0.35], [-0.225, -0.075, -0.0, 0.0875, 0.225, 0.3875]], 'min_x': 25.0, 'max_x': 225.0, 'min_y': 35.0, 'max_y': 220.0, 'x_count': 6, 'y_count': 6, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'bicubic', 'tension': 0.2}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\nSTATUS_HEATING\nM109 S150\nSTATUS_HOMING\nM117 Homing...\nG28 Y0 X0 Z0\nSTATUS_MESHING\nBED_MESH_CALIBRATE ADAPTIVE=1\n\n\n\n\n\n\n\n\n\n\n\nSTATUS_HEATING\nM107\nM117 Heating bed\nM190 S{ params.BED }\nM117 Heating nozzle\nM109 S{target_extruder}\nstatus_ready\nG1 Z15.0 F600\nG1 X125 Y125 F3000\nG92 E0\nG1 F9000\nstatus_printing\nM117 Printing...', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\nstatus_busy\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\n\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y} F3600\nM117 Finished!\nstatus_off', 'description': 'G-Code macro'}, 'gcode_macro m600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state', 'description': 'G-Code macro'}, 'force_move': {'enable_force_move': True}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexz', 'max_z_velocity': 5.0, 'max_z_accel': 100.0}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-04-27 22:26:27,337 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-04-27 22:26:27,339 [printer.py:reinit()] - Klipper version: v0.12.0-132-ge37b007f-dirty
2024-04-27 22:26:27,339 [printer.py:reinit()] - # Extruders: 1
2024-04-27 22:26:27,339 [printer.py:reinit()] - # Temperature devices: 2
2024-04-27 22:26:27,339 [printer.py:reinit()] - # Fans: 2
2024-04-27 22:26:27,339 [printer.py:reinit()] - # Output pins: 0
2024-04-27 22:26:27,339 [printer.py:reinit()] - # Leds: 20
2024-04-27 22:26:27,340 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-04-27 22:26:27,357 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-04-27 22:26:27,360 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor mcu&fan&heater_fan extruder_fan&filament_switch_sensor extruder&neopixel sb_leds
2024-04-27 22:26:27,652 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-04-27 22:26:27,653 [screen.py:init_klipper()] - Printer initialized
2024-04-27 22:26:27,653 [printer.py:change_state()] - Changing state from 'disconnected' to 'printing'
2024-04-27 22:26:27,653 [printer.py:change_state()] - Adding callback for state: printing
2024-04-27 22:26:27,766 [screen.py:_load_panel()] - Loading panel: job_status
2024-04-27 22:26:27,960 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-04-27 22:26:27,969 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-04-27 22:26:27,995 [job_status.py:update_file_metadata()] - Cannot find file metadata. Listening for updated metadata
2024-04-27 22:26:27,996 [job_status.py:show_file_thumbnail()] - tfic-angled-honeycomb_0.2mm_PLA_MK3S_5h2m.gcode
2024-04-27 22:26:27,996 [job_status.py:show_file_thumbnail()] - no pixbuf
2024-04-27 22:26:28,017 [job_status.py:update_file_metadata()] - Update Metadata. File: tfic-angled-honeycomb_0.2mm_PLA_MK3S_5h2m.gcode Size: 15746614
2024-04-27 22:26:28,023 [job_status.py:show_file_thumbnail()] - tfic-angled-honeycomb_0.2mm_PLA_MK3S_5h2m.gcode
2024-04-27 22:36:51,516 [functions.py:log_start()] - --------------------KlipperScreen Log Start--------------------
2024-04-27 22:36:51,517 [functions.py:log_start()] - KlipperScreen Version: v0.3.9-50-gdaed9a0
2024-04-27 22:36:51,517 [functions.py:log_start()] - Python version: 3.11
2024-04-27 22:36:51,657 [config.py:get_config_file_location()] - Passed config (-c): .
2024-04-27 22:36:51,657 [config.py:__init__()] - Config path location: /home/pi/printer_data/config/KlipperScreen.conf
2024-04-27 22:36:51,682 [config.py:log_config()] -  ===== Config File =====

=======================
2024-04-27 22:36:51,684 [config.py:__init__()] - ====== Saved Def ======

[main]
use_dpms = False
print_sort_dir = date_desc

=======================
2024-04-27 22:36:51,685 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2024-04-27 22:36:51,796 [config.py:create_translations()] - Selected lang: None OS lang: en_GB
2024-04-27 22:36:51,796 [config.py:install_language()] - Using lang en
2024-04-27 22:36:51,818 [screen.py:__init__()] - Monitors: 1 using number: 0
2024-04-27 22:36:51,820 [screen.py:__init__()] - Wayland: False Display name: :100
2024-04-27 22:36:51,823 [screen.py:__init__()] - Screen resolution: 984x540
2024-04-27 22:36:51,824 [KlippyGtk.py:__init__()] - Font size: 18.6 (medium)
2024-04-27 22:36:52,429 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2024-04-27 22:36:52,429 [screen.py:set_screenblanking_timeout()] - Not using DPMS
2024-04-27 22:36:52,439 [screen.py:initial_connection()] - Default printer: None
2024-04-27 22:36:52,512 [screen.py:connect_printer()] - Connecting to printer: Printer
2024-04-27 22:36:52,512 [screen.py:_load_panel()] - Loading panel: splash_screen
2024-04-27 22:36:52,583 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-04-27 22:36:52,601 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-04-27 22:36:52,601 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-27 22:36:52,618 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/access/oneshot_token
2024-04-27 22:36:52,630 [KlippyWebsocket.py:connect()] - Starting websocket thread
2024-04-27 22:36:52,640 [_logging.py:info()] - Websocket connected
2024-04-27 22:36:52,640 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2024-04-27 22:36:52,655 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-27 22:36:52,668 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-04-27 22:36:52,679 [printer.py:configure_cameras()] - Cameras: []
2024-04-27 22:36:52,680 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'ready', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'octoprint_compat', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 3, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-04-27 22:36:52,680 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-04-27 22:36:52,693 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-04-27 22:36:52,729 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set allow_park = client.park_at_cancel | default(false) | lower == \'true\' %}\n{% set retract = client.cancel_retract | default(5.0) | abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x | default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y | default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x | length > 0 or park_y | length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro | default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set idle_timeout = client.idle_timeout | default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE | default(1) | int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro | default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move | default(velocity) %}\n{% set runout_resume = True if client.runout_sensor | default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state | upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro | default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY | default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}"}, 'neopixel sb_leds': {'pin': 'EBBCan:gpio16', 'chain_count': '3', 'color_order': 'GRB', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0'}, 'led_effect sb_logo_busy': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (1,0,0)'}, 'led_effect sb_logo_cleaning': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.02, 0.5)'}, 'led_effect sb_logo_calibrating_z': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 0.35)'}, 'led_effect sb_logo_heating': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nbreathing  3 1 top (1, 0.18, 0)'}, 'led_effect sb_logo_cooling': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nbreathing  3 1 top (0, 0, 1)'}, 'led_effect sb_logo_homing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.6, 0.2)'}, 'led_effect sb_logo_leveling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.5, 0.1, 0.4)'}, 'led_effect sb_logo_meshing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.2, 1.0, 0.0)'}, 'led_effect sb_logo_printing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.3, 0.3, 0.0),(0.3, 0.1, 0.0)'}, 'led_effect sb_logo_standby': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.01, 0.01, 0.01)'}, 'led_effect sb_logo_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 1.0, 0.0)'}, 'led_effect sb_nozzle_heating': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (1.0, 0.18, 0.0, 0.0)'}, 'led_effect sb_nozzle_cooling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 1.0, 0.1)'}, 'led_effect sb_nozzle_standby': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.6, 0.0, 0.0, 0.0)'}, 'led_effect sb_nozzle_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.6, 1.0, 0.0, 0.1)'}, 'led_effect sb_critical_error': {'leds': '\nneopixel:sb_leds', 'layers': '\nstrobe         1  1.5   add        (1.0,  1.0, 1.0)\nbreathing      2  0     difference (0.95, 0.0, 0.0)\nstatic         1  0     top        (1.0,  0.0, 0.0)', 'autostart': 'false', 'frame_rate': '24', 'run_on_error': 'true'}, 'led_effect rainbow': {'leds': '\nneopixel:sb_leds', 'autostart': 'true', 'frame_rate': '24', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.0, 0.3, 0.0),(0.0, 0.0, 0.3)'}, 'led_effect set_nozzle_leds': {'leds': '\nneopixel:sb_leds (2,3)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nstatic         0  0     top        (0.5,  0.5, 0.5)'}, 'led_effect set_logo_leds': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nstatic         0  0     top        (1.0,  1.0, 1.0)'}, 'gcode_macro set_logo_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds STOP=1'}, 'gcode_macro set_logo_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1'}, 'gcode_macro status_off': {'gcode': '\nSTOP_LED_EFFECTS'}, 'gcode_macro status_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=rainbow'}, 'gcode_macro status_part_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready'}, 'gcode_macro status_busy': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_busy\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_heating\nSET_LED_EFFECT EFFECT=sb_nozzle_heating'}, 'gcode_macro status_cooling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cooling\nSET_LED_EFFECT EFFECT=sb_nozzle_cooling'}, 'gcode_macro status_leveling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_leveling\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_homing\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cleaning\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_meshing\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_calibrating_z\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_printing\nset_nozzle_leds_on'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_sam4e8e_00313753364B37373032303038303139-if00'}, 'mcu EBBCan': {'canbus_uuid': '8250861450f7'}, 'adxl345': {'cs_pin': 'EBBCan:gpio1', 'spi_software_sclk_pin': 'EBBCan:gpio2', 'spi_software_mosi_pin': 'EBBCan:gpio0', 'spi_software_miso_pin': 'EBBCan:gpio3', 'axes_map': 'z,-y,x'}, 'resonance_tester': {'probe_points': '100, 100, 20', 'accel_chip': 'adxl345'}, 'input_shaper': {'shaper_freq_x': '45', 'shaper_type': '3hump_ei'}, 'stepper_x': {'step_pin': 'PD6', 'dir_pin': '!PD11', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'EBBCan:gpio24', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '40'}, 'tmc2660 stepper_x': {'cs_pin': 'PD14', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'stepper_y': {'step_pin': 'PD7', 'dir_pin': '!PD12', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'PA2', 'position_endstop': '0', 'position_max': '225', 'position_min': '-4', 'homing_speed': '35', 'homing_retract_dist': '0'}, 'tmc2660 stepper_y': {'cs_pin': 'PC9', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'stepper_z': {'step_pin': 'PD8', 'dir_pin': '!PD13', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '230', 'position_min': '-2.5', 'homing_speed': '35.0'}, 'tmc2660 stepper_z': {'cs_pin': 'PC10', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'adc_temperature my_thermistor': {'temperature1': '0', 'resistance1': '1000', 'temperature2': '80', 'resistance2': '1309'}, 'extruder': {'step_pin': '!EBBCan:gpio18', 'dir_pin': 'EBBCan:gpio19', 'enable_pin': '!EBBCan:gpio17', 'microsteps': '32', 'rotation_distance': '21.63024711', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'pressure_advance': '0.065', 'pressure_advance_smooth_time': '0.02', 'gear_ratio': '50:10', 'heater_pin': 'EBBCan:gpio7', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'EBBCan:gpio27', 'control': 'pid', 'pid_kp': '21.527', 'pid_ki': '1.063', 'pid_kd': '108.982', 'min_temp': '0', 'max_temp': '250'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan:gpio20', 'run_current': '0.5', 'stealthchop_threshold': '999999'}, 'filament_switch_sensor extruder': {'pause_on_runout': 'True', 'switch_pin': 'EBBCan:gpio21'}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu'}, 'thermistor chamber_temp': {'temperature1': '25', 'resistance1': '10000', 'beta': '3950'}, 'heater_bed': {'heater_pin': '!PA19', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PC13', 'control': 'watermark', 'min_temp': '0', 'max_temp': '120'}, 'heater_fan extruder_fan': {'pin': 'EBBCan:gpio13', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'EBBCan:gpio14', 'cycle_time': '.08', 'kick_start_time': '.25'}, 'probe': {'pin': '^EBBCan:gpio22', 'x_offset': '0', 'y_offset': '0', 'samples': '3', 'samples_result': 'median', 'sample_retract_dist': '3', 'samples_tolerance': '0.015', 'samples_tolerance_retries': '3', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'z_offset': '-1.350'}, 'homing_override': {'axes': 'z', 'set_position_z': '0', 'gcode': '\nstatus_homing\nG90\nG0 Z5 F500\nG28 X0 Y0\nG0 X150 Y100 F9000\nG28 Z0\nG0 Z5 F500\nstatus_ready'}, 'bed_mesh': {'speed': '150', 'horizontal_move_z': '5', 'mesh_min': '25,35.0', 'mesh_max': '225.0,220', 'probe_count': '6,6', 'algorithm': 'bicubic', 'fade_start': '1', 'fade_end': '10', 'fade_target': '0'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\nSTATUS_HEATING\nM109 S150\nSTATUS_HOMING\nM117 Homing...\nG28 Y0 X0 Z0\nSTATUS_MESHING\nBED_MESH_CALIBRATE ADAPTIVE=1\n\n\n\n\n\n\n\n\n\n\n\nSTATUS_HEATING\nM107\nM117 Heating bed\nM190 S{ params.BED }\nM117 Heating nozzle\nM109 S{target_extruder}\nstatus_ready\nG1 Z15.0 F600\nG1 X125 Y125 F3000\nG92 E0\nG1 F9000\nstatus_printing\nM117 Printing...'}, 'gcode_macro PRINT_END': {'gcode': '\nstatus_busy\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\n\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y} F3600\nM117 Finished!\nstatus_off'}, 'gcode_macro M600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state'}, 'printer': {'kinematics': 'corexz', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '5', 'max_z_accel': '100'}, 'force_move': {'enable_force_move': 'true'}, 'exclude_object': {}, 'bed_mesh default': {'version': '1', 'points': '\n-0.100000, -0.025000, 0.012500, 0.037500, 0.125000, 0.212500\n-0.187500, -0.100000, -0.025000, 0.025000, 0.100000, 0.212500\n-0.262500, -0.162500, -0.075000, -0.012500, 0.075000, 0.187500\n-0.262500, -0.162500, -0.087500, -0.000000, 0.100000, 0.237500\n-0.200000, -0.100000, -0.012500, 0.062500, 0.200000, 0.350000\n-0.225000, -0.075000, -0.000000, 0.087500, 0.225000, 0.387500', 'x_count': '6', 'y_count': '6', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'bicubic', 'tension': '0.2', 'min_x': '25.0', 'max_x': '225.0', 'min_y': '35.0', 'max_y': '220.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_sam4e8e_00313753364B37373032303038303139-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu ebbcan': {'canbus_uuid': '8250861450f7', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set allow_park = client.park_at_cancel | default(false) | lower == \'true\' %}\n{% set retract = client.cancel_retract | default(5.0) | abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x | default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y | default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x | length > 0 or park_y | length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro | default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set idle_timeout = client.idle_timeout | default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE | default(1) | int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro | default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move | default(velocity) %}\n{% set runout_resume = True if client.runout_sensor | default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state | upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro | default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY | default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'neopixel sb_leds': {'pin': 'EBBCan:gpio16', 'chain_count': 3, 'color_order': ['GRB'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'led_effect sb_logo_busy': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1,0,0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_cleaning': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.02, 0.5)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_calibrating_z': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 0.35)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1, 0.18, 0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0, 0, 1)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_homing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.6, 0.2)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_leveling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.5, 0.1, 0.4)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_meshing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.2, 1.0, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_printing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.3, 0.3, 0.0),(0.3, 0.1, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_standby': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.01, 0.01, 0.01)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 1.0, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_nozzle_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1.0, 0.18, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 1.0, 0.1)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_standby': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.6, 0.0, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.6, 1.0, 0.0, 0.1)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_critical_error': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': True, 'endstops': '', 'layers': '\nstrobe         1  1.5   add        (1.0,  1.0, 1.0)\nbreathing      2  0     difference (0.95, 0.0, 0.0)\nstatic         1  0     top        (1.0,  0.0, 0.0)', 'leds': '\nneopixel:sb_leds'}, 'led_effect rainbow': {'frame_rate': 24.0, 'autostart': True, 'run_on_error': False, 'endstops': '', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.0, 0.3, 0.0),(0.0, 0.0, 0.3)', 'leds': '\nneopixel:sb_leds'}, 'led_effect set_nozzle_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic         0  0     top        (0.5,  0.5, 0.5)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect set_logo_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic         0  0     top        (1.0,  1.0, 1.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'gcode_macro set_logo_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nSTOP_LED_EFFECTS', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=rainbow', 'description': 'G-Code macro'}, 'gcode_macro status_part_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_busy\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_heating\nSET_LED_EFFECT EFFECT=sb_nozzle_heating', 'description': 'G-Code macro'}, 'gcode_macro status_cooling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cooling\nSET_LED_EFFECT EFFECT=sb_nozzle_cooling', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_leveling\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_homing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cleaning\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_meshing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_calibrating_z\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_printing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'adxl345': {'axes_map': ['z', '-y', 'x'], 'rate': 3200, 'cs_pin': 'EBBCan:gpio1', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'EBBCan:gpio2', 'spi_software_miso_pin': 'EBBCan:gpio3', 'spi_software_mosi_pin': 'EBBCan:gpio0'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[100.0, 100.0, 20.0]], 'accel_chip': 'adxl345'}, 'input_shaper': {'shaper_type': '3hump_ei', 'shaper_type_x': '3hump_ei', 'damping_ratio_x': 0.1, 'shaper_freq_x': 45.0, 'shaper_type_y': '3hump_ei', 'damping_ratio_y': 0.1, 'shaper_freq_y': 0.0}, 'tmc2660 stepper_x': {'cs_pin': 'PD14', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PD6', 'dir_pin': '!PD11', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'EBBCan:gpio24', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2660 stepper_y': {'cs_pin': 'PC9', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PD7', 'dir_pin': '!PD12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'PA2', 'position_endstop': 0.0, 'position_min': -4.0, 'position_max': 225.0, 'homing_speed': 35.0, 'second_homing_speed': 17.5, 'homing_retract_speed': 35.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2660 stepper_z': {'cs_pin': 'PC10', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PD8', 'dir_pin': '!PD13', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -2.5, 'position_max': 230.0, 'homing_speed': 35.0, 'second_homing_speed': 17.5, 'homing_retract_speed': 35.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'adc_temperature my_thermistor': {'resistance1': 1000.0, 'temperature1': 0.0, 'temperature2': 80.0, 'resistance2': 1309.0}, 'tmc2209 extruder': {'uart_pin': 'EBBCan:gpio20', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan:gpio27', 'min_temp': 0.0, 'max_temp': 250.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 21.527, 'pid_ki': 1.063, 'pid_kd': 108.982, 'heater_pin': 'EBBCan:gpio7', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': '!EBBCan:gpio18', 'pressure_advance': 0.065, 'pressure_advance_smooth_time': 0.02, 'dir_pin': 'EBBCan:gpio19', 'rotation_distance': 21.63024711, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!EBBCan:gpio17'}, 'filament_switch_sensor extruder': {'switch_pin': 'EBBCan:gpio21', 'pause_on_runout': True, 'runout_gcode': '', 'pause_delay': 0.5, 'event_delay': 3.0}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'thermistor chamber_temp': {'temperature1': 25.0, 'resistance1': 10000.0, 'beta': 3950.0}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PC13', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'watermark', 'max_delta': 2.0, 'heater_pin': '!PA19', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan extruder_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'EBBCan:gpio13', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.25, 'off_below': 0.0, 'cycle_time': 0.08, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'EBBCan:gpio14'}, 'probe': {'z_offset': -1.35, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': '^EBBCan:gpio22', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 3, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.015, 'samples_tolerance_retries': 3}, 'homing_override': {'set_position_z': 0.0, 'axes': 'z', 'gcode': '\nstatus_homing\nG90\nG0 Z5 F500\nG28 X0 Y0\nG0 X150 Y100 F9000\nG28 Z0\nG0 Z5 F500\nstatus_ready'}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [6, 6], 'mesh_min': [25.0, 35.0], 'mesh_max': [225.0, 220.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 150.0, 'fade_start': 1.0, 'fade_end': 10.0, 'fade_target': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[-0.1, -0.025, 0.0125, 0.0375, 0.125, 0.2125], [-0.1875, -0.1, -0.025, 0.025, 0.1, 0.2125], [-0.2625, -0.1625, -0.075, -0.0125, 0.075, 0.1875], [-0.2625, -0.1625, -0.0875, -0.0, 0.1, 0.2375], [-0.2, -0.1, -0.0125, 0.0625, 0.2, 0.35], [-0.225, -0.075, -0.0, 0.0875, 0.225, 0.3875]], 'min_x': 25.0, 'max_x': 225.0, 'min_y': 35.0, 'max_y': 220.0, 'x_count': 6, 'y_count': 6, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'bicubic', 'tension': 0.2}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\nSTATUS_HEATING\nM109 S150\nSTATUS_HOMING\nM117 Homing...\nG28 Y0 X0 Z0\nSTATUS_MESHING\nBED_MESH_CALIBRATE ADAPTIVE=1\n\n\n\n\n\n\n\n\n\n\n\nSTATUS_HEATING\nM107\nM117 Heating bed\nM190 S{ params.BED }\nM117 Heating nozzle\nM109 S{target_extruder}\nstatus_ready\nG1 Z15.0 F600\nG1 X125 Y125 F3000\nG92 E0\nG1 F9000\nstatus_printing\nM117 Printing...', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\nstatus_busy\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\n\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y} F3600\nM117 Finished!\nstatus_off', 'description': 'G-Code macro'}, 'gcode_macro m600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state', 'description': 'G-Code macro'}, 'force_move': {'enable_force_move': True}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexz', 'max_z_velocity': 5.0, 'max_z_accel': 100.0}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-04-27 22:36:52,732 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-04-27 22:36:52,734 [printer.py:reinit()] - Klipper version: v0.12.0-132-ge37b007f-dirty
2024-04-27 22:36:52,734 [printer.py:reinit()] - # Extruders: 1
2024-04-27 22:36:52,734 [printer.py:reinit()] - # Temperature devices: 2
2024-04-27 22:36:52,734 [printer.py:reinit()] - # Fans: 2
2024-04-27 22:36:52,734 [printer.py:reinit()] - # Output pins: 0
2024-04-27 22:36:52,734 [printer.py:reinit()] - # Leds: 20
2024-04-27 22:36:52,735 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-04-27 22:36:52,752 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-04-27 22:36:52,755 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor mcu&fan&heater_fan extruder_fan&filament_switch_sensor extruder&neopixel sb_leds
2024-04-27 22:36:53,027 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-04-27 22:36:53,028 [screen.py:init_klipper()] - Printer initialized
2024-04-27 22:36:53,028 [printer.py:change_state()] - Changing state from 'disconnected' to 'printing'
2024-04-27 22:36:53,028 [printer.py:change_state()] - Adding callback for state: printing
2024-04-27 22:36:53,152 [screen.py:_load_panel()] - Loading panel: job_status
2024-04-27 22:36:53,359 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-04-27 22:36:53,371 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-04-27 22:36:53,399 [job_status.py:update_file_metadata()] - Cannot find file metadata. Listening for updated metadata
2024-04-27 22:36:53,400 [job_status.py:show_file_thumbnail()] - tfic-angled-honeycomb_0.2mm_PLA_MK3S_5h2m.gcode
2024-04-27 22:36:53,400 [job_status.py:show_file_thumbnail()] - no pixbuf
2024-04-27 22:36:53,419 [job_status.py:update_file_metadata()] - Update Metadata. File: tfic-angled-honeycomb_0.2mm_PLA_MK3S_5h2m.gcode Size: 15746614
2024-04-27 22:36:53,425 [job_status.py:show_file_thumbnail()] - tfic-angled-honeycomb_0.2mm_PLA_MK3S_5h2m.gcode
2024-04-27 22:38:13,622 [functions.py:log_start()] - --------------------KlipperScreen Log Start--------------------
2024-04-27 22:38:13,622 [functions.py:log_start()] - KlipperScreen Version: v0.3.9-50-gdaed9a0
2024-04-27 22:38:13,622 [functions.py:log_start()] - Python version: 3.11
2024-04-27 22:38:13,761 [config.py:get_config_file_location()] - Passed config (-c): .
2024-04-27 22:38:13,762 [config.py:__init__()] - Config path location: /home/pi/printer_data/config/KlipperScreen.conf
2024-04-27 22:38:13,787 [config.py:log_config()] -  ===== Config File =====

=======================
2024-04-27 22:38:13,789 [config.py:__init__()] - ====== Saved Def ======

[main]
use_dpms = False
print_sort_dir = date_desc

=======================
2024-04-27 22:38:13,790 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2024-04-27 22:38:13,903 [config.py:create_translations()] - Selected lang: None OS lang: en_GB
2024-04-27 22:38:13,906 [config.py:install_language()] - Using lang en
2024-04-27 22:38:13,926 [screen.py:__init__()] - Monitors: 1 using number: 0
2024-04-27 22:38:13,928 [screen.py:__init__()] - Wayland: False Display name: :100
2024-04-27 22:38:13,930 [screen.py:__init__()] - Screen resolution: 984x540
2024-04-27 22:38:13,932 [KlippyGtk.py:__init__()] - Font size: 18.6 (medium)
2024-04-27 22:38:14,499 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2024-04-27 22:38:14,499 [screen.py:set_screenblanking_timeout()] - Not using DPMS
2024-04-27 22:38:14,507 [screen.py:initial_connection()] - Default printer: None
2024-04-27 22:38:14,578 [screen.py:connect_printer()] - Connecting to printer: Printer
2024-04-27 22:38:14,578 [screen.py:_load_panel()] - Loading panel: splash_screen
2024-04-27 22:38:14,647 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-04-27 22:38:14,665 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-04-27 22:38:14,665 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-27 22:38:14,684 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/access/oneshot_token
2024-04-27 22:38:14,696 [KlippyWebsocket.py:connect()] - Starting websocket thread
2024-04-27 22:38:14,706 [_logging.py:info()] - Websocket connected
2024-04-27 22:38:14,706 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2024-04-27 22:38:14,721 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-27 22:38:14,733 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-04-27 22:38:14,745 [printer.py:configure_cameras()] - Cameras: []
2024-04-27 22:38:14,746 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'ready', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'octoprint_compat', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 3, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-04-27 22:38:14,746 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-04-27 22:38:14,766 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-04-27 22:38:15,003 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set allow_park = client.park_at_cancel | default(false) | lower == \'true\' %}\n{% set retract = client.cancel_retract | default(5.0) | abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x | default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y | default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x | length > 0 or park_y | length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro | default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set idle_timeout = client.idle_timeout | default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE | default(1) | int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro | default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move | default(velocity) %}\n{% set runout_resume = True if client.runout_sensor | default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state | upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro | default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY | default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}"}, 'neopixel sb_leds': {'pin': 'EBBCan:gpio16', 'chain_count': '3', 'color_order': 'GRB', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0'}, 'led_effect sb_logo_busy': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (1,0,0)'}, 'led_effect sb_logo_cleaning': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.02, 0.5)'}, 'led_effect sb_logo_calibrating_z': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 0.35)'}, 'led_effect sb_logo_heating': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nbreathing  3 1 top (1, 0.18, 0)'}, 'led_effect sb_logo_cooling': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nbreathing  3 1 top (0, 0, 1)'}, 'led_effect sb_logo_homing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.6, 0.2)'}, 'led_effect sb_logo_leveling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.5, 0.1, 0.4)'}, 'led_effect sb_logo_meshing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.2, 1.0, 0.0)'}, 'led_effect sb_logo_printing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.3, 0.3, 0.0),(0.3, 0.1, 0.0)'}, 'led_effect sb_logo_standby': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.01, 0.01, 0.01)'}, 'led_effect sb_logo_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 1.0, 0.0)'}, 'led_effect sb_nozzle_heating': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (1.0, 0.18, 0.0, 0.0)'}, 'led_effect sb_nozzle_cooling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 1.0, 0.1)'}, 'led_effect sb_nozzle_standby': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.6, 0.0, 0.0, 0.0)'}, 'led_effect sb_nozzle_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.6, 1.0, 0.0, 0.1)'}, 'led_effect sb_critical_error': {'leds': '\nneopixel:sb_leds', 'layers': '\nstrobe         1  1.5   add        (1.0,  1.0, 1.0)\nbreathing      2  0     difference (0.95, 0.0, 0.0)\nstatic         1  0     top        (1.0,  0.0, 0.0)', 'autostart': 'false', 'frame_rate': '24', 'run_on_error': 'true'}, 'led_effect rainbow': {'leds': '\nneopixel:sb_leds', 'autostart': 'true', 'frame_rate': '24', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.0, 0.3, 0.0),(0.0, 0.0, 0.3)'}, 'led_effect set_nozzle_leds': {'leds': '\nneopixel:sb_leds (2,3)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nstatic         0  0     top        (0.5,  0.5, 0.5)'}, 'led_effect set_logo_leds': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nstatic         0  0     top        (1.0,  1.0, 1.0)'}, 'gcode_macro set_logo_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds STOP=1'}, 'gcode_macro set_logo_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1'}, 'gcode_macro status_off': {'gcode': '\nSTOP_LED_EFFECTS'}, 'gcode_macro status_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=rainbow'}, 'gcode_macro status_part_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready'}, 'gcode_macro status_busy': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_busy\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_heating\nSET_LED_EFFECT EFFECT=sb_nozzle_heating'}, 'gcode_macro status_cooling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cooling\nSET_LED_EFFECT EFFECT=sb_nozzle_cooling'}, 'gcode_macro status_leveling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_leveling\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_homing\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cleaning\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_meshing\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_calibrating_z\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_printing\nset_nozzle_leds_on'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_sam4e8e_00313753364B37373032303038303139-if00'}, 'mcu EBBCan': {'canbus_uuid': '8250861450f7'}, 'adxl345': {'cs_pin': 'EBBCan:gpio1', 'spi_software_sclk_pin': 'EBBCan:gpio2', 'spi_software_mosi_pin': 'EBBCan:gpio0', 'spi_software_miso_pin': 'EBBCan:gpio3', 'axes_map': 'z,-y,x'}, 'resonance_tester': {'probe_points': '100, 100, 20', 'accel_chip': 'adxl345'}, 'input_shaper': {'shaper_freq_x': '45', 'shaper_type': '3hump_ei'}, 'stepper_x': {'step_pin': 'PD6', 'dir_pin': '!PD11', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'EBBCan:gpio24', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '40'}, 'tmc2660 stepper_x': {'cs_pin': 'PD14', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'stepper_y': {'step_pin': 'PD7', 'dir_pin': '!PD12', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'PA2', 'position_endstop': '0', 'position_max': '225', 'position_min': '-4', 'homing_speed': '35', 'homing_retract_dist': '0'}, 'tmc2660 stepper_y': {'cs_pin': 'PC9', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'stepper_z': {'step_pin': 'PD8', 'dir_pin': '!PD13', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '230', 'position_min': '-2.5', 'homing_speed': '35.0'}, 'tmc2660 stepper_z': {'cs_pin': 'PC10', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'adc_temperature my_thermistor': {'temperature1': '0', 'resistance1': '1000', 'temperature2': '80', 'resistance2': '1309'}, 'extruder': {'step_pin': '!EBBCan:gpio18', 'dir_pin': 'EBBCan:gpio19', 'enable_pin': '!EBBCan:gpio17', 'microsteps': '32', 'rotation_distance': '21.63024711', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'pressure_advance': '0.065', 'pressure_advance_smooth_time': '0.02', 'gear_ratio': '50:10', 'heater_pin': 'EBBCan:gpio7', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'EBBCan:gpio27', 'control': 'pid', 'pid_kp': '21.527', 'pid_ki': '1.063', 'pid_kd': '108.982', 'min_temp': '0', 'max_temp': '250'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan:gpio20', 'run_current': '0.5', 'stealthchop_threshold': '999999'}, 'filament_switch_sensor extruder': {'pause_on_runout': 'True', 'switch_pin': 'EBBCan:gpio21'}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu'}, 'thermistor chamber_temp': {'temperature1': '25', 'resistance1': '10000', 'beta': '3950'}, 'heater_bed': {'heater_pin': '!PA19', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PC13', 'control': 'watermark', 'min_temp': '0', 'max_temp': '120'}, 'heater_fan extruder_fan': {'pin': 'EBBCan:gpio13', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'EBBCan:gpio14', 'cycle_time': '.08', 'kick_start_time': '.25'}, 'probe': {'pin': '^EBBCan:gpio22', 'x_offset': '0', 'y_offset': '0', 'samples': '3', 'samples_result': 'median', 'sample_retract_dist': '3', 'samples_tolerance': '0.015', 'samples_tolerance_retries': '3', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'z_offset': '-1.350'}, 'homing_override': {'axes': 'z', 'set_position_z': '0', 'gcode': '\nstatus_homing\nG90\nG0 Z5 F500\nG28 X0 Y0\nG0 X150 Y100 F9000\nG28 Z0\nG0 Z5 F500\nstatus_ready'}, 'bed_mesh': {'speed': '150', 'horizontal_move_z': '5', 'mesh_min': '25,35.0', 'mesh_max': '225.0,220', 'probe_count': '6,6', 'algorithm': 'bicubic', 'fade_start': '1', 'fade_end': '10', 'fade_target': '0'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\nSTATUS_HEATING\nM109 S150\nSTATUS_HOMING\nM117 Homing...\nG28 Y0 X0 Z0\nSTATUS_MESHING\nBED_MESH_CALIBRATE ADAPTIVE=1\n\n\n\n\n\n\n\n\n\n\n\nSTATUS_HEATING\nM107\nM117 Heating bed\nM190 S{ params.BED }\nM117 Heating nozzle\nM109 S{target_extruder}\nstatus_ready\nG1 Z15.0 F600\nG1 X125 Y125 F3000\nG92 E0\nG1 F9000\nstatus_printing\nM117 Printing...'}, 'gcode_macro PRINT_END': {'gcode': '\nstatus_busy\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\n\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y} F3600\nM117 Finished!\nstatus_off'}, 'gcode_macro M600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state'}, 'printer': {'kinematics': 'corexz', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '5', 'max_z_accel': '100'}, 'force_move': {'enable_force_move': 'true'}, 'exclude_object': {}, 'bed_mesh default': {'version': '1', 'points': '\n-0.100000, -0.025000, 0.012500, 0.037500, 0.125000, 0.212500\n-0.187500, -0.100000, -0.025000, 0.025000, 0.100000, 0.212500\n-0.262500, -0.162500, -0.075000, -0.012500, 0.075000, 0.187500\n-0.262500, -0.162500, -0.087500, -0.000000, 0.100000, 0.237500\n-0.200000, -0.100000, -0.012500, 0.062500, 0.200000, 0.350000\n-0.225000, -0.075000, -0.000000, 0.087500, 0.225000, 0.387500', 'x_count': '6', 'y_count': '6', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'bicubic', 'tension': '0.2', 'min_x': '25.0', 'max_x': '225.0', 'min_y': '35.0', 'max_y': '220.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_sam4e8e_00313753364B37373032303038303139-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu ebbcan': {'canbus_uuid': '8250861450f7', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set allow_park = client.park_at_cancel | default(false) | lower == \'true\' %}\n{% set retract = client.cancel_retract | default(5.0) | abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x | default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y | default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x | length > 0 or park_y | length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro | default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set idle_timeout = client.idle_timeout | default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE | default(1) | int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro | default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move | default(velocity) %}\n{% set runout_resume = True if client.runout_sensor | default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state | upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro | default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY | default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'neopixel sb_leds': {'pin': 'EBBCan:gpio16', 'chain_count': 3, 'color_order': ['GRB'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'led_effect sb_logo_busy': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1,0,0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_cleaning': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.02, 0.5)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_calibrating_z': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 0.35)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1, 0.18, 0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0, 0, 1)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_homing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.6, 0.2)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_leveling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.5, 0.1, 0.4)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_meshing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.2, 1.0, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_printing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.3, 0.3, 0.0),(0.3, 0.1, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_standby': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.01, 0.01, 0.01)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 1.0, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_nozzle_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1.0, 0.18, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 1.0, 0.1)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_standby': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.6, 0.0, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.6, 1.0, 0.0, 0.1)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_critical_error': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': True, 'endstops': '', 'layers': '\nstrobe         1  1.5   add        (1.0,  1.0, 1.0)\nbreathing      2  0     difference (0.95, 0.0, 0.0)\nstatic         1  0     top        (1.0,  0.0, 0.0)', 'leds': '\nneopixel:sb_leds'}, 'led_effect rainbow': {'frame_rate': 24.0, 'autostart': True, 'run_on_error': False, 'endstops': '', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.0, 0.3, 0.0),(0.0, 0.0, 0.3)', 'leds': '\nneopixel:sb_leds'}, 'led_effect set_nozzle_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic         0  0     top        (0.5,  0.5, 0.5)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect set_logo_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic         0  0     top        (1.0,  1.0, 1.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'gcode_macro set_logo_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nSTOP_LED_EFFECTS', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=rainbow', 'description': 'G-Code macro'}, 'gcode_macro status_part_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_busy\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_heating\nSET_LED_EFFECT EFFECT=sb_nozzle_heating', 'description': 'G-Code macro'}, 'gcode_macro status_cooling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cooling\nSET_LED_EFFECT EFFECT=sb_nozzle_cooling', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_leveling\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_homing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cleaning\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_meshing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_calibrating_z\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_printing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'adxl345': {'axes_map': ['z', '-y', 'x'], 'rate': 3200, 'cs_pin': 'EBBCan:gpio1', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'EBBCan:gpio2', 'spi_software_miso_pin': 'EBBCan:gpio3', 'spi_software_mosi_pin': 'EBBCan:gpio0'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[100.0, 100.0, 20.0]], 'accel_chip': 'adxl345'}, 'input_shaper': {'shaper_type': '3hump_ei', 'shaper_type_x': '3hump_ei', 'damping_ratio_x': 0.1, 'shaper_freq_x': 45.0, 'shaper_type_y': '3hump_ei', 'damping_ratio_y': 0.1, 'shaper_freq_y': 0.0}, 'tmc2660 stepper_x': {'cs_pin': 'PD14', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PD6', 'dir_pin': '!PD11', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'EBBCan:gpio24', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2660 stepper_y': {'cs_pin': 'PC9', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PD7', 'dir_pin': '!PD12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'PA2', 'position_endstop': 0.0, 'position_min': -4.0, 'position_max': 225.0, 'homing_speed': 35.0, 'second_homing_speed': 17.5, 'homing_retract_speed': 35.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2660 stepper_z': {'cs_pin': 'PC10', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PD8', 'dir_pin': '!PD13', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -2.5, 'position_max': 230.0, 'homing_speed': 35.0, 'second_homing_speed': 17.5, 'homing_retract_speed': 35.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'adc_temperature my_thermistor': {'resistance1': 1000.0, 'temperature1': 0.0, 'temperature2': 80.0, 'resistance2': 1309.0}, 'tmc2209 extruder': {'uart_pin': 'EBBCan:gpio20', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan:gpio27', 'min_temp': 0.0, 'max_temp': 250.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 21.527, 'pid_ki': 1.063, 'pid_kd': 108.982, 'heater_pin': 'EBBCan:gpio7', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': '!EBBCan:gpio18', 'pressure_advance': 0.065, 'pressure_advance_smooth_time': 0.02, 'dir_pin': 'EBBCan:gpio19', 'rotation_distance': 21.63024711, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!EBBCan:gpio17'}, 'filament_switch_sensor extruder': {'switch_pin': 'EBBCan:gpio21', 'pause_on_runout': True, 'runout_gcode': '', 'pause_delay': 0.5, 'event_delay': 3.0}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'thermistor chamber_temp': {'temperature1': 25.0, 'resistance1': 10000.0, 'beta': 3950.0}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PC13', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'watermark', 'max_delta': 2.0, 'heater_pin': '!PA19', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan extruder_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'EBBCan:gpio13', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.25, 'off_below': 0.0, 'cycle_time': 0.08, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'EBBCan:gpio14'}, 'probe': {'z_offset': -1.35, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': '^EBBCan:gpio22', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 3, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.015, 'samples_tolerance_retries': 3}, 'homing_override': {'set_position_z': 0.0, 'axes': 'z', 'gcode': '\nstatus_homing\nG90\nG0 Z5 F500\nG28 X0 Y0\nG0 X150 Y100 F9000\nG28 Z0\nG0 Z5 F500\nstatus_ready'}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [6, 6], 'mesh_min': [25.0, 35.0], 'mesh_max': [225.0, 220.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 150.0, 'fade_start': 1.0, 'fade_end': 10.0, 'fade_target': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[-0.1, -0.025, 0.0125, 0.0375, 0.125, 0.2125], [-0.1875, -0.1, -0.025, 0.025, 0.1, 0.2125], [-0.2625, -0.1625, -0.075, -0.0125, 0.075, 0.1875], [-0.2625, -0.1625, -0.0875, -0.0, 0.1, 0.2375], [-0.2, -0.1, -0.0125, 0.0625, 0.2, 0.35], [-0.225, -0.075, -0.0, 0.0875, 0.225, 0.3875]], 'min_x': 25.0, 'max_x': 225.0, 'min_y': 35.0, 'max_y': 220.0, 'x_count': 6, 'y_count': 6, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'bicubic', 'tension': 0.2}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\nSTATUS_HEATING\nM109 S150\nSTATUS_HOMING\nM117 Homing...\nG28 Y0 X0 Z0\nSTATUS_MESHING\nBED_MESH_CALIBRATE ADAPTIVE=1\n\n\n\n\n\n\n\n\n\n\n\nSTATUS_HEATING\nM107\nM117 Heating bed\nM190 S{ params.BED }\nM117 Heating nozzle\nM109 S{target_extruder}\nstatus_ready\nG1 Z15.0 F600\nG1 X125 Y125 F3000\nG92 E0\nG1 F9000\nstatus_printing\nM117 Printing...', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\nstatus_busy\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\n\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y} F3600\nM117 Finished!\nstatus_off', 'description': 'G-Code macro'}, 'gcode_macro m600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state', 'description': 'G-Code macro'}, 'force_move': {'enable_force_move': True}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexz', 'max_z_velocity': 5.0, 'max_z_accel': 100.0}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-04-27 22:38:15,006 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-04-27 22:38:15,008 [printer.py:reinit()] - Klipper version: v0.12.0-132-ge37b007f-dirty
2024-04-27 22:38:15,008 [printer.py:reinit()] - # Extruders: 1
2024-04-27 22:38:15,008 [printer.py:reinit()] - # Temperature devices: 2
2024-04-27 22:38:15,009 [printer.py:reinit()] - # Fans: 2
2024-04-27 22:38:15,009 [printer.py:reinit()] - # Output pins: 0
2024-04-27 22:38:15,009 [printer.py:reinit()] - # Leds: 20
2024-04-27 22:38:15,009 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-04-27 22:38:15,027 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-04-27 22:38:15,030 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor mcu&fan&heater_fan extruder_fan&filament_switch_sensor extruder&neopixel sb_leds
2024-04-27 22:38:15,317 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-04-27 22:38:15,317 [screen.py:init_klipper()] - Printer initialized
2024-04-27 22:38:15,317 [printer.py:change_state()] - Changing state from 'disconnected' to 'printing'
2024-04-27 22:38:15,317 [printer.py:change_state()] - Adding callback for state: printing
2024-04-27 22:38:15,422 [screen.py:_load_panel()] - Loading panel: job_status
2024-04-27 22:38:15,618 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-04-27 22:38:15,628 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-04-27 22:38:15,652 [job_status.py:update_file_metadata()] - Cannot find file metadata. Listening for updated metadata
2024-04-27 22:38:15,653 [job_status.py:show_file_thumbnail()] - tfic-angled-honeycomb_0.2mm_PLA_MK3S_5h2m.gcode
2024-04-27 22:38:15,654 [job_status.py:show_file_thumbnail()] - no pixbuf
2024-04-27 22:38:15,675 [job_status.py:update_file_metadata()] - Update Metadata. File: tfic-angled-honeycomb_0.2mm_PLA_MK3S_5h2m.gcode Size: 15746614
2024-04-27 22:38:15,681 [job_status.py:show_file_thumbnail()] - tfic-angled-honeycomb_0.2mm_PLA_MK3S_5h2m.gcode
2024-04-27 22:40:59,323 [functions.py:log_start()] - --------------------KlipperScreen Log Start--------------------
2024-04-27 22:40:59,324 [functions.py:log_start()] - KlipperScreen Version: v0.3.9-50-gdaed9a0
2024-04-27 22:40:59,324 [functions.py:log_start()] - Python version: 3.11
2024-04-27 22:40:59,464 [config.py:get_config_file_location()] - Passed config (-c): .
2024-04-27 22:40:59,465 [config.py:__init__()] - Config path location: /home/pi/printer_data/config/KlipperScreen.conf
2024-04-27 22:40:59,489 [config.py:log_config()] -  ===== Config File =====

=======================
2024-04-27 22:40:59,492 [config.py:__init__()] - ====== Saved Def ======

[main]
use_dpms = False
print_sort_dir = date_desc

=======================
2024-04-27 22:40:59,492 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2024-04-27 22:40:59,604 [config.py:create_translations()] - Selected lang: None OS lang: en_GB
2024-04-27 22:40:59,604 [config.py:install_language()] - Using lang en
2024-04-27 22:40:59,624 [screen.py:__init__()] - Monitors: 1 using number: 0
2024-04-27 22:40:59,626 [screen.py:__init__()] - Wayland: False Display name: :100
2024-04-27 22:40:59,628 [screen.py:__init__()] - Screen resolution: 984x540
2024-04-27 22:40:59,630 [KlippyGtk.py:__init__()] - Font size: 18.6 (medium)
2024-04-27 22:41:00,211 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2024-04-27 22:41:00,211 [screen.py:set_screenblanking_timeout()] - Not using DPMS
2024-04-27 22:41:00,220 [screen.py:initial_connection()] - Default printer: None
2024-04-27 22:41:00,289 [screen.py:connect_printer()] - Connecting to printer: Printer
2024-04-27 22:41:00,290 [screen.py:_load_panel()] - Loading panel: splash_screen
2024-04-27 22:41:00,358 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-04-27 22:41:00,375 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-04-27 22:41:00,376 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-27 22:41:00,394 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/access/oneshot_token
2024-04-27 22:41:00,405 [KlippyWebsocket.py:connect()] - Starting websocket thread
2024-04-27 22:41:00,415 [_logging.py:info()] - Websocket connected
2024-04-27 22:41:00,415 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2024-04-27 22:41:00,421 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-27 22:41:00,433 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-04-27 22:41:00,445 [printer.py:configure_cameras()] - Cameras: []
2024-04-27 22:41:00,445 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'ready', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'octoprint_compat', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 3, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-04-27 22:41:00,446 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-04-27 22:41:00,459 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-04-27 22:41:00,522 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set allow_park = client.park_at_cancel | default(false) | lower == \'true\' %}\n{% set retract = client.cancel_retract | default(5.0) | abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x | default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y | default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x | length > 0 or park_y | length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro | default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set idle_timeout = client.idle_timeout | default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE | default(1) | int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro | default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move | default(velocity) %}\n{% set runout_resume = True if client.runout_sensor | default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state | upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro | default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY | default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}"}, 'neopixel sb_leds': {'pin': 'EBBCan:gpio16', 'chain_count': '3', 'color_order': 'GRB', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0'}, 'led_effect sb_logo_busy': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (1,0,0)'}, 'led_effect sb_logo_cleaning': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.02, 0.5)'}, 'led_effect sb_logo_calibrating_z': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 0.35)'}, 'led_effect sb_logo_heating': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nbreathing  3 1 top (1, 0.18, 0)'}, 'led_effect sb_logo_cooling': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nbreathing  3 1 top (0, 0, 1)'}, 'led_effect sb_logo_homing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.6, 0.2)'}, 'led_effect sb_logo_leveling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.5, 0.1, 0.4)'}, 'led_effect sb_logo_meshing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.2, 1.0, 0.0)'}, 'led_effect sb_logo_printing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.3, 0.3, 0.0),(0.3, 0.1, 0.0)'}, 'led_effect sb_logo_standby': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.01, 0.01, 0.01)'}, 'led_effect sb_logo_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 1.0, 0.0)'}, 'led_effect sb_nozzle_heating': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (1.0, 0.18, 0.0, 0.0)'}, 'led_effect sb_nozzle_cooling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 1.0, 0.1)'}, 'led_effect sb_nozzle_standby': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.6, 0.0, 0.0, 0.0)'}, 'led_effect sb_nozzle_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.6, 1.0, 0.0, 0.1)'}, 'led_effect sb_critical_error': {'leds': '\nneopixel:sb_leds', 'layers': '\nstrobe         1  1.5   add        (1.0,  1.0, 1.0)\nbreathing      2  0     difference (0.95, 0.0, 0.0)\nstatic         1  0     top        (1.0,  0.0, 0.0)', 'autostart': 'false', 'frame_rate': '24', 'run_on_error': 'true'}, 'led_effect rainbow': {'leds': '\nneopixel:sb_leds', 'autostart': 'true', 'frame_rate': '24', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.0, 0.3, 0.0),(0.0, 0.0, 0.3)'}, 'led_effect set_nozzle_leds': {'leds': '\nneopixel:sb_leds (2,3)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nstatic         0  0     top        (0.5,  0.5, 0.5)'}, 'led_effect set_logo_leds': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nstatic         0  0     top        (1.0,  1.0, 1.0)'}, 'gcode_macro set_logo_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds STOP=1'}, 'gcode_macro set_logo_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1'}, 'gcode_macro status_off': {'gcode': '\nSTOP_LED_EFFECTS'}, 'gcode_macro status_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=rainbow'}, 'gcode_macro status_part_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready'}, 'gcode_macro status_busy': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_busy\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_heating\nSET_LED_EFFECT EFFECT=sb_nozzle_heating'}, 'gcode_macro status_cooling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cooling\nSET_LED_EFFECT EFFECT=sb_nozzle_cooling'}, 'gcode_macro status_leveling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_leveling\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_homing\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cleaning\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_meshing\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_calibrating_z\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_printing\nset_nozzle_leds_on'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_sam4e8e_00313753364B37373032303038303139-if00'}, 'mcu EBBCan': {'canbus_uuid': '8250861450f7'}, 'adxl345': {'cs_pin': 'EBBCan:gpio1', 'spi_software_sclk_pin': 'EBBCan:gpio2', 'spi_software_mosi_pin': 'EBBCan:gpio0', 'spi_software_miso_pin': 'EBBCan:gpio3', 'axes_map': 'z,-y,x'}, 'resonance_tester': {'probe_points': '100, 100, 20', 'accel_chip': 'adxl345'}, 'input_shaper': {'shaper_freq_x': '45', 'shaper_type': '3hump_ei'}, 'stepper_x': {'step_pin': 'PD6', 'dir_pin': '!PD11', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'EBBCan:gpio24', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '40'}, 'tmc2660 stepper_x': {'cs_pin': 'PD14', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'stepper_y': {'step_pin': 'PD7', 'dir_pin': '!PD12', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'PA2', 'position_endstop': '0', 'position_max': '225', 'position_min': '-4', 'homing_speed': '35', 'homing_retract_dist': '0'}, 'tmc2660 stepper_y': {'cs_pin': 'PC9', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'stepper_z': {'step_pin': 'PD8', 'dir_pin': '!PD13', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '230', 'position_min': '-2.5', 'homing_speed': '35.0'}, 'tmc2660 stepper_z': {'cs_pin': 'PC10', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'adc_temperature my_thermistor': {'temperature1': '0', 'resistance1': '1000', 'temperature2': '80', 'resistance2': '1309'}, 'extruder': {'step_pin': '!EBBCan:gpio18', 'dir_pin': 'EBBCan:gpio19', 'enable_pin': '!EBBCan:gpio17', 'microsteps': '32', 'rotation_distance': '21.63024711', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'pressure_advance': '0.065', 'pressure_advance_smooth_time': '0.02', 'gear_ratio': '50:10', 'heater_pin': 'EBBCan:gpio7', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'EBBCan:gpio27', 'control': 'pid', 'pid_kp': '21.527', 'pid_ki': '1.063', 'pid_kd': '108.982', 'min_temp': '0', 'max_temp': '250'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan:gpio20', 'run_current': '0.5', 'stealthchop_threshold': '999999'}, 'filament_switch_sensor extruder': {'pause_on_runout': 'True', 'switch_pin': 'EBBCan:gpio21'}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu'}, 'thermistor chamber_temp': {'temperature1': '25', 'resistance1': '10000', 'beta': '3950'}, 'heater_bed': {'heater_pin': '!PA19', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PC13', 'control': 'watermark', 'min_temp': '0', 'max_temp': '120'}, 'heater_fan extruder_fan': {'pin': 'EBBCan:gpio13', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'EBBCan:gpio14', 'cycle_time': '.08', 'kick_start_time': '.25'}, 'probe': {'pin': '^EBBCan:gpio22', 'x_offset': '0', 'y_offset': '0', 'samples': '3', 'samples_result': 'median', 'sample_retract_dist': '3', 'samples_tolerance': '0.015', 'samples_tolerance_retries': '3', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'z_offset': '-1.350'}, 'homing_override': {'axes': 'z', 'set_position_z': '0', 'gcode': '\nstatus_homing\nG90\nG0 Z5 F500\nG28 X0 Y0\nG0 X150 Y100 F9000\nG28 Z0\nG0 Z5 F500\nstatus_ready'}, 'bed_mesh': {'speed': '150', 'horizontal_move_z': '5', 'mesh_min': '25,35.0', 'mesh_max': '225.0,220', 'probe_count': '6,6', 'algorithm': 'bicubic', 'fade_start': '1', 'fade_end': '10', 'fade_target': '0'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\nSTATUS_HEATING\nM109 S150\nSTATUS_HOMING\nM117 Homing...\nG28 Y0 X0 Z0\nSTATUS_MESHING\nBED_MESH_CALIBRATE ADAPTIVE=1\n\n\n\n\n\n\n\n\n\n\n\nSTATUS_HEATING\nM107\nM117 Heating bed\nM190 S{ params.BED }\nM117 Heating nozzle\nM109 S{target_extruder}\nstatus_ready\nG1 Z15.0 F600\nG1 X125 Y125 F3000\nG92 E0\nG1 F9000\nstatus_printing\nM117 Printing...'}, 'gcode_macro PRINT_END': {'gcode': '\nstatus_busy\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\n\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y} F3600\nM117 Finished!\nstatus_off'}, 'gcode_macro M600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state'}, 'printer': {'kinematics': 'corexz', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '5', 'max_z_accel': '100'}, 'force_move': {'enable_force_move': 'true'}, 'exclude_object': {}, 'bed_mesh default': {'version': '1', 'points': '\n-0.100000, -0.025000, 0.012500, 0.037500, 0.125000, 0.212500\n-0.187500, -0.100000, -0.025000, 0.025000, 0.100000, 0.212500\n-0.262500, -0.162500, -0.075000, -0.012500, 0.075000, 0.187500\n-0.262500, -0.162500, -0.087500, -0.000000, 0.100000, 0.237500\n-0.200000, -0.100000, -0.012500, 0.062500, 0.200000, 0.350000\n-0.225000, -0.075000, -0.000000, 0.087500, 0.225000, 0.387500', 'x_count': '6', 'y_count': '6', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'bicubic', 'tension': '0.2', 'min_x': '25.0', 'max_x': '225.0', 'min_y': '35.0', 'max_y': '220.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_sam4e8e_00313753364B37373032303038303139-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu ebbcan': {'canbus_uuid': '8250861450f7', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set allow_park = client.park_at_cancel | default(false) | lower == \'true\' %}\n{% set retract = client.cancel_retract | default(5.0) | abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x | default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y | default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x | length > 0 or park_y | length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro | default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set idle_timeout = client.idle_timeout | default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE | default(1) | int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro | default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move | default(velocity) %}\n{% set runout_resume = True if client.runout_sensor | default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state | upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro | default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY | default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'neopixel sb_leds': {'pin': 'EBBCan:gpio16', 'chain_count': 3, 'color_order': ['GRB'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'led_effect sb_logo_busy': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1,0,0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_cleaning': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.02, 0.5)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_calibrating_z': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 0.35)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1, 0.18, 0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0, 0, 1)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_homing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.6, 0.2)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_leveling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.5, 0.1, 0.4)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_meshing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.2, 1.0, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_printing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.3, 0.3, 0.0),(0.3, 0.1, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_standby': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.01, 0.01, 0.01)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 1.0, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_nozzle_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1.0, 0.18, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 1.0, 0.1)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_standby': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.6, 0.0, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.6, 1.0, 0.0, 0.1)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_critical_error': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': True, 'endstops': '', 'layers': '\nstrobe         1  1.5   add        (1.0,  1.0, 1.0)\nbreathing      2  0     difference (0.95, 0.0, 0.0)\nstatic         1  0     top        (1.0,  0.0, 0.0)', 'leds': '\nneopixel:sb_leds'}, 'led_effect rainbow': {'frame_rate': 24.0, 'autostart': True, 'run_on_error': False, 'endstops': '', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.0, 0.3, 0.0),(0.0, 0.0, 0.3)', 'leds': '\nneopixel:sb_leds'}, 'led_effect set_nozzle_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic         0  0     top        (0.5,  0.5, 0.5)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect set_logo_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic         0  0     top        (1.0,  1.0, 1.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'gcode_macro set_logo_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nSTOP_LED_EFFECTS', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=rainbow', 'description': 'G-Code macro'}, 'gcode_macro status_part_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_busy\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_heating\nSET_LED_EFFECT EFFECT=sb_nozzle_heating', 'description': 'G-Code macro'}, 'gcode_macro status_cooling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cooling\nSET_LED_EFFECT EFFECT=sb_nozzle_cooling', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_leveling\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_homing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cleaning\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_meshing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_calibrating_z\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_printing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'adxl345': {'axes_map': ['z', '-y', 'x'], 'rate': 3200, 'cs_pin': 'EBBCan:gpio1', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'EBBCan:gpio2', 'spi_software_miso_pin': 'EBBCan:gpio3', 'spi_software_mosi_pin': 'EBBCan:gpio0'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[100.0, 100.0, 20.0]], 'accel_chip': 'adxl345'}, 'input_shaper': {'shaper_type': '3hump_ei', 'shaper_type_x': '3hump_ei', 'damping_ratio_x': 0.1, 'shaper_freq_x': 45.0, 'shaper_type_y': '3hump_ei', 'damping_ratio_y': 0.1, 'shaper_freq_y': 0.0}, 'tmc2660 stepper_x': {'cs_pin': 'PD14', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PD6', 'dir_pin': '!PD11', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'EBBCan:gpio24', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2660 stepper_y': {'cs_pin': 'PC9', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PD7', 'dir_pin': '!PD12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'PA2', 'position_endstop': 0.0, 'position_min': -4.0, 'position_max': 225.0, 'homing_speed': 35.0, 'second_homing_speed': 17.5, 'homing_retract_speed': 35.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2660 stepper_z': {'cs_pin': 'PC10', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PD8', 'dir_pin': '!PD13', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -2.5, 'position_max': 230.0, 'homing_speed': 35.0, 'second_homing_speed': 17.5, 'homing_retract_speed': 35.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'adc_temperature my_thermistor': {'resistance1': 1000.0, 'temperature1': 0.0, 'temperature2': 80.0, 'resistance2': 1309.0}, 'tmc2209 extruder': {'uart_pin': 'EBBCan:gpio20', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan:gpio27', 'min_temp': 0.0, 'max_temp': 250.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 21.527, 'pid_ki': 1.063, 'pid_kd': 108.982, 'heater_pin': 'EBBCan:gpio7', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': '!EBBCan:gpio18', 'pressure_advance': 0.065, 'pressure_advance_smooth_time': 0.02, 'dir_pin': 'EBBCan:gpio19', 'rotation_distance': 21.63024711, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!EBBCan:gpio17'}, 'filament_switch_sensor extruder': {'switch_pin': 'EBBCan:gpio21', 'pause_on_runout': True, 'runout_gcode': '', 'pause_delay': 0.5, 'event_delay': 3.0}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'thermistor chamber_temp': {'temperature1': 25.0, 'resistance1': 10000.0, 'beta': 3950.0}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PC13', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'watermark', 'max_delta': 2.0, 'heater_pin': '!PA19', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan extruder_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'EBBCan:gpio13', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.25, 'off_below': 0.0, 'cycle_time': 0.08, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'EBBCan:gpio14'}, 'probe': {'z_offset': -1.35, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': '^EBBCan:gpio22', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 3, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.015, 'samples_tolerance_retries': 3}, 'homing_override': {'set_position_z': 0.0, 'axes': 'z', 'gcode': '\nstatus_homing\nG90\nG0 Z5 F500\nG28 X0 Y0\nG0 X150 Y100 F9000\nG28 Z0\nG0 Z5 F500\nstatus_ready'}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [6, 6], 'mesh_min': [25.0, 35.0], 'mesh_max': [225.0, 220.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 150.0, 'fade_start': 1.0, 'fade_end': 10.0, 'fade_target': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[-0.1, -0.025, 0.0125, 0.0375, 0.125, 0.2125], [-0.1875, -0.1, -0.025, 0.025, 0.1, 0.2125], [-0.2625, -0.1625, -0.075, -0.0125, 0.075, 0.1875], [-0.2625, -0.1625, -0.0875, -0.0, 0.1, 0.2375], [-0.2, -0.1, -0.0125, 0.0625, 0.2, 0.35], [-0.225, -0.075, -0.0, 0.0875, 0.225, 0.3875]], 'min_x': 25.0, 'max_x': 225.0, 'min_y': 35.0, 'max_y': 220.0, 'x_count': 6, 'y_count': 6, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'bicubic', 'tension': 0.2}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\nSTATUS_HEATING\nM109 S150\nSTATUS_HOMING\nM117 Homing...\nG28 Y0 X0 Z0\nSTATUS_MESHING\nBED_MESH_CALIBRATE ADAPTIVE=1\n\n\n\n\n\n\n\n\n\n\n\nSTATUS_HEATING\nM107\nM117 Heating bed\nM190 S{ params.BED }\nM117 Heating nozzle\nM109 S{target_extruder}\nstatus_ready\nG1 Z15.0 F600\nG1 X125 Y125 F3000\nG92 E0\nG1 F9000\nstatus_printing\nM117 Printing...', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\nstatus_busy\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\n\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y} F3600\nM117 Finished!\nstatus_off', 'description': 'G-Code macro'}, 'gcode_macro m600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state', 'description': 'G-Code macro'}, 'force_move': {'enable_force_move': True}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexz', 'max_z_velocity': 5.0, 'max_z_accel': 100.0}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-04-27 22:41:00,525 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-04-27 22:41:00,527 [printer.py:reinit()] - Klipper version: v0.12.0-132-ge37b007f-dirty
2024-04-27 22:41:00,527 [printer.py:reinit()] - # Extruders: 1
2024-04-27 22:41:00,527 [printer.py:reinit()] - # Temperature devices: 2
2024-04-27 22:41:00,527 [printer.py:reinit()] - # Fans: 2
2024-04-27 22:41:00,527 [printer.py:reinit()] - # Output pins: 0
2024-04-27 22:41:00,528 [printer.py:reinit()] - # Leds: 20
2024-04-27 22:41:00,528 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-04-27 22:41:00,545 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-04-27 22:41:00,548 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor mcu&fan&heater_fan extruder_fan&filament_switch_sensor extruder&neopixel sb_leds
2024-04-27 22:41:00,836 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-04-27 22:41:00,836 [screen.py:init_klipper()] - Printer initialized
2024-04-27 22:41:00,837 [printer.py:change_state()] - Changing state from 'disconnected' to 'printing'
2024-04-27 22:41:00,837 [printer.py:change_state()] - Adding callback for state: printing
2024-04-27 22:41:00,968 [screen.py:_load_panel()] - Loading panel: job_status
2024-04-27 22:41:01,166 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-04-27 22:41:01,175 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-04-27 22:41:01,201 [job_status.py:update_file_metadata()] - Cannot find file metadata. Listening for updated metadata
2024-04-27 22:41:01,207 [job_status.py:show_file_thumbnail()] - tfic-angled-honeycomb_0.2mm_PLA_MK3S_5h2m.gcode
2024-04-27 22:41:01,208 [job_status.py:show_file_thumbnail()] - no pixbuf
2024-04-27 22:41:01,229 [job_status.py:update_file_metadata()] - Update Metadata. File: tfic-angled-honeycomb_0.2mm_PLA_MK3S_5h2m.gcode Size: 15746614
2024-04-27 22:41:01,234 [job_status.py:show_file_thumbnail()] - tfic-angled-honeycomb_0.2mm_PLA_MK3S_5h2m.gcode
2024-04-27 22:47:03,916 [functions.py:log_start()] - --------------------KlipperScreen Log Start--------------------
2024-04-27 22:47:03,916 [functions.py:log_start()] - KlipperScreen Version: v0.3.9-50-gdaed9a0
2024-04-27 22:47:03,917 [functions.py:log_start()] - Python version: 3.11
2024-04-27 22:47:04,058 [config.py:get_config_file_location()] - Passed config (-c): .
2024-04-27 22:47:04,059 [config.py:__init__()] - Config path location: /home/pi/printer_data/config/KlipperScreen.conf
2024-04-27 22:47:04,084 [config.py:log_config()] -  ===== Config File =====

=======================
2024-04-27 22:47:04,086 [config.py:__init__()] - ====== Saved Def ======

[main]
use_dpms = False
print_sort_dir = date_desc

=======================
2024-04-27 22:47:04,087 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2024-04-27 22:47:04,195 [config.py:create_translations()] - Selected lang: None OS lang: en_GB
2024-04-27 22:47:04,198 [config.py:install_language()] - Using lang en
2024-04-27 22:47:04,218 [screen.py:__init__()] - Monitors: 1 using number: 0
2024-04-27 22:47:04,220 [screen.py:__init__()] - Wayland: False Display name: :100
2024-04-27 22:47:04,222 [screen.py:__init__()] - Screen resolution: 984x540
2024-04-27 22:47:04,224 [KlippyGtk.py:__init__()] - Font size: 18.6 (medium)
2024-04-27 22:47:04,994 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2024-04-27 22:47:04,995 [screen.py:set_screenblanking_timeout()] - Not using DPMS
2024-04-27 22:47:05,004 [screen.py:initial_connection()] - Default printer: None
2024-04-27 22:47:05,071 [screen.py:connect_printer()] - Connecting to printer: Printer
2024-04-27 22:47:05,071 [screen.py:_load_panel()] - Loading panel: splash_screen
2024-04-27 22:47:05,142 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-04-27 22:47:05,160 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-04-27 22:47:05,160 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-27 22:47:05,177 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/access/oneshot_token
2024-04-27 22:47:05,189 [KlippyWebsocket.py:connect()] - Starting websocket thread
2024-04-27 22:47:05,200 [_logging.py:info()] - Websocket connected
2024-04-27 22:47:05,200 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2024-04-27 22:47:05,226 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-27 22:47:05,238 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-04-27 22:47:05,250 [printer.py:configure_cameras()] - Cameras: []
2024-04-27 22:47:05,250 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'ready', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'octoprint_compat', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 3, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-04-27 22:47:05,250 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-04-27 22:47:05,264 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-04-27 22:47:05,361 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set allow_park = client.park_at_cancel | default(false) | lower == \'true\' %}\n{% set retract = client.cancel_retract | default(5.0) | abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x | default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y | default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x | length > 0 or park_y | length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro | default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set idle_timeout = client.idle_timeout | default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE | default(1) | int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro | default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move | default(velocity) %}\n{% set runout_resume = True if client.runout_sensor | default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state | upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro | default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY | default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}"}, 'neopixel sb_leds': {'pin': 'EBBCan:gpio16', 'chain_count': '3', 'color_order': 'GRB', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0'}, 'led_effect sb_logo_busy': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (1,0,0)'}, 'led_effect sb_logo_cleaning': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.02, 0.5)'}, 'led_effect sb_logo_calibrating_z': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 0.35)'}, 'led_effect sb_logo_heating': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nbreathing  3 1 top (1, 0.18, 0)'}, 'led_effect sb_logo_cooling': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nbreathing  3 1 top (0, 0, 1)'}, 'led_effect sb_logo_homing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.6, 0.2)'}, 'led_effect sb_logo_leveling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.5, 0.1, 0.4)'}, 'led_effect sb_logo_meshing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.2, 1.0, 0.0)'}, 'led_effect sb_logo_printing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.3, 0.3, 0.0),(0.3, 0.1, 0.0)'}, 'led_effect sb_logo_standby': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.01, 0.01, 0.01)'}, 'led_effect sb_logo_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 1.0, 0.0)'}, 'led_effect sb_nozzle_heating': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (1.0, 0.18, 0.0, 0.0)'}, 'led_effect sb_nozzle_cooling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 1.0, 0.1)'}, 'led_effect sb_nozzle_standby': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.6, 0.0, 0.0, 0.0)'}, 'led_effect sb_nozzle_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.6, 1.0, 0.0, 0.1)'}, 'led_effect sb_critical_error': {'leds': '\nneopixel:sb_leds', 'layers': '\nstrobe         1  1.5   add        (1.0,  1.0, 1.0)\nbreathing      2  0     difference (0.95, 0.0, 0.0)\nstatic         1  0     top        (1.0,  0.0, 0.0)', 'autostart': 'false', 'frame_rate': '24', 'run_on_error': 'true'}, 'led_effect rainbow': {'leds': '\nneopixel:sb_leds', 'autostart': 'true', 'frame_rate': '24', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.0, 0.3, 0.0),(0.0, 0.0, 0.3)'}, 'led_effect set_nozzle_leds': {'leds': '\nneopixel:sb_leds (2,3)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nstatic         0  0     top        (0.5,  0.5, 0.5)'}, 'led_effect set_logo_leds': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nstatic         0  0     top        (1.0,  1.0, 1.0)'}, 'gcode_macro set_logo_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds STOP=1'}, 'gcode_macro set_logo_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1'}, 'gcode_macro status_off': {'gcode': '\nSTOP_LED_EFFECTS'}, 'gcode_macro status_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=rainbow'}, 'gcode_macro status_part_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready'}, 'gcode_macro status_busy': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_busy\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_heating\nSET_LED_EFFECT EFFECT=sb_nozzle_heating'}, 'gcode_macro status_cooling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cooling\nSET_LED_EFFECT EFFECT=sb_nozzle_cooling'}, 'gcode_macro status_leveling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_leveling\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_homing\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cleaning\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_meshing\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_calibrating_z\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_printing\nset_nozzle_leds_on'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_sam4e8e_00313753364B37373032303038303139-if00'}, 'mcu EBBCan': {'canbus_uuid': '8250861450f7'}, 'adxl345': {'cs_pin': 'EBBCan:gpio1', 'spi_software_sclk_pin': 'EBBCan:gpio2', 'spi_software_mosi_pin': 'EBBCan:gpio0', 'spi_software_miso_pin': 'EBBCan:gpio3', 'axes_map': 'z,-y,x'}, 'resonance_tester': {'probe_points': '100, 100, 20', 'accel_chip': 'adxl345'}, 'input_shaper': {'shaper_freq_x': '45', 'shaper_type': '3hump_ei'}, 'stepper_x': {'step_pin': 'PD6', 'dir_pin': '!PD11', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'EBBCan:gpio24', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '40'}, 'tmc2660 stepper_x': {'cs_pin': 'PD14', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'stepper_y': {'step_pin': 'PD7', 'dir_pin': '!PD12', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'PA2', 'position_endstop': '0', 'position_max': '225', 'position_min': '-4', 'homing_speed': '35', 'homing_retract_dist': '0'}, 'tmc2660 stepper_y': {'cs_pin': 'PC9', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'stepper_z': {'step_pin': 'PD8', 'dir_pin': '!PD13', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '230', 'position_min': '-2.5', 'homing_speed': '35.0'}, 'tmc2660 stepper_z': {'cs_pin': 'PC10', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'adc_temperature my_thermistor': {'temperature1': '0', 'resistance1': '1000', 'temperature2': '80', 'resistance2': '1309'}, 'extruder': {'step_pin': '!EBBCan:gpio18', 'dir_pin': 'EBBCan:gpio19', 'enable_pin': '!EBBCan:gpio17', 'microsteps': '32', 'rotation_distance': '21.63024711', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'pressure_advance': '0.065', 'pressure_advance_smooth_time': '0.02', 'gear_ratio': '50:10', 'heater_pin': 'EBBCan:gpio7', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'EBBCan:gpio27', 'control': 'pid', 'pid_kp': '21.527', 'pid_ki': '1.063', 'pid_kd': '108.982', 'min_temp': '0', 'max_temp': '250'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan:gpio20', 'run_current': '0.5', 'stealthchop_threshold': '999999'}, 'filament_switch_sensor extruder': {'pause_on_runout': 'True', 'switch_pin': 'EBBCan:gpio21'}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu'}, 'thermistor chamber_temp': {'temperature1': '25', 'resistance1': '10000', 'beta': '3950'}, 'heater_bed': {'heater_pin': '!PA19', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PC13', 'control': 'watermark', 'min_temp': '0', 'max_temp': '120'}, 'heater_fan extruder_fan': {'pin': 'EBBCan:gpio13', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'EBBCan:gpio14', 'cycle_time': '.08', 'kick_start_time': '.25'}, 'probe': {'pin': '^EBBCan:gpio22', 'x_offset': '0', 'y_offset': '0', 'samples': '3', 'samples_result': 'median', 'sample_retract_dist': '3', 'samples_tolerance': '0.015', 'samples_tolerance_retries': '3', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'z_offset': '-1.350'}, 'homing_override': {'axes': 'z', 'set_position_z': '0', 'gcode': '\nstatus_homing\nG90\nG0 Z5 F500\nG28 X0 Y0\nG0 X150 Y100 F9000\nG28 Z0\nG0 Z5 F500\nstatus_ready'}, 'bed_mesh': {'speed': '150', 'horizontal_move_z': '5', 'mesh_min': '25,35.0', 'mesh_max': '225.0,220', 'probe_count': '6,6', 'algorithm': 'bicubic', 'fade_start': '1', 'fade_end': '10', 'fade_target': '0'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\nSTATUS_HEATING\nM109 S150\nSTATUS_HOMING\nM117 Homing...\nG28 Y0 X0 Z0\nSTATUS_MESHING\nBED_MESH_CALIBRATE ADAPTIVE=1\n\n\n\n\n\n\n\n\n\n\n\nSTATUS_HEATING\nM107\nM117 Heating bed\nM190 S{ params.BED }\nM117 Heating nozzle\nM109 S{target_extruder}\nstatus_ready\nG1 Z15.0 F600\nG1 X125 Y125 F3000\nG92 E0\nG1 F9000\nstatus_printing\nM117 Printing...'}, 'gcode_macro PRINT_END': {'gcode': '\nstatus_busy\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\n\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y} F3600\nM117 Finished!\nstatus_off'}, 'gcode_macro M600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state'}, 'printer': {'kinematics': 'corexz', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '5', 'max_z_accel': '100'}, 'force_move': {'enable_force_move': 'true'}, 'exclude_object': {}, 'bed_mesh default': {'version': '1', 'points': '\n-0.100000, -0.025000, 0.012500, 0.037500, 0.125000, 0.212500\n-0.187500, -0.100000, -0.025000, 0.025000, 0.100000, 0.212500\n-0.262500, -0.162500, -0.075000, -0.012500, 0.075000, 0.187500\n-0.262500, -0.162500, -0.087500, -0.000000, 0.100000, 0.237500\n-0.200000, -0.100000, -0.012500, 0.062500, 0.200000, 0.350000\n-0.225000, -0.075000, -0.000000, 0.087500, 0.225000, 0.387500', 'x_count': '6', 'y_count': '6', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'bicubic', 'tension': '0.2', 'min_x': '25.0', 'max_x': '225.0', 'min_y': '35.0', 'max_y': '220.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_sam4e8e_00313753364B37373032303038303139-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu ebbcan': {'canbus_uuid': '8250861450f7', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set allow_park = client.park_at_cancel | default(false) | lower == \'true\' %}\n{% set retract = client.cancel_retract | default(5.0) | abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x | default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y | default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x | length > 0 or park_y | length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro | default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set idle_timeout = client.idle_timeout | default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE | default(1) | int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro | default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move | default(velocity) %}\n{% set runout_resume = True if client.runout_sensor | default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state | upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro | default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY | default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'neopixel sb_leds': {'pin': 'EBBCan:gpio16', 'chain_count': 3, 'color_order': ['GRB'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'led_effect sb_logo_busy': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1,0,0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_cleaning': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.02, 0.5)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_calibrating_z': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 0.35)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1, 0.18, 0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0, 0, 1)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_homing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.6, 0.2)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_leveling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.5, 0.1, 0.4)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_meshing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.2, 1.0, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_printing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.3, 0.3, 0.0),(0.3, 0.1, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_standby': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.01, 0.01, 0.01)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 1.0, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_nozzle_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1.0, 0.18, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 1.0, 0.1)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_standby': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.6, 0.0, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.6, 1.0, 0.0, 0.1)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_critical_error': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': True, 'endstops': '', 'layers': '\nstrobe         1  1.5   add        (1.0,  1.0, 1.0)\nbreathing      2  0     difference (0.95, 0.0, 0.0)\nstatic         1  0     top        (1.0,  0.0, 0.0)', 'leds': '\nneopixel:sb_leds'}, 'led_effect rainbow': {'frame_rate': 24.0, 'autostart': True, 'run_on_error': False, 'endstops': '', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.0, 0.3, 0.0),(0.0, 0.0, 0.3)', 'leds': '\nneopixel:sb_leds'}, 'led_effect set_nozzle_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic         0  0     top        (0.5,  0.5, 0.5)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect set_logo_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic         0  0     top        (1.0,  1.0, 1.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'gcode_macro set_logo_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nSTOP_LED_EFFECTS', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=rainbow', 'description': 'G-Code macro'}, 'gcode_macro status_part_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_busy\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_heating\nSET_LED_EFFECT EFFECT=sb_nozzle_heating', 'description': 'G-Code macro'}, 'gcode_macro status_cooling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cooling\nSET_LED_EFFECT EFFECT=sb_nozzle_cooling', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_leveling\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_homing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cleaning\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_meshing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_calibrating_z\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_printing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'adxl345': {'axes_map': ['z', '-y', 'x'], 'rate': 3200, 'cs_pin': 'EBBCan:gpio1', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'EBBCan:gpio2', 'spi_software_miso_pin': 'EBBCan:gpio3', 'spi_software_mosi_pin': 'EBBCan:gpio0'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[100.0, 100.0, 20.0]], 'accel_chip': 'adxl345'}, 'input_shaper': {'shaper_type': '3hump_ei', 'shaper_type_x': '3hump_ei', 'damping_ratio_x': 0.1, 'shaper_freq_x': 45.0, 'shaper_type_y': '3hump_ei', 'damping_ratio_y': 0.1, 'shaper_freq_y': 0.0}, 'tmc2660 stepper_x': {'cs_pin': 'PD14', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PD6', 'dir_pin': '!PD11', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'EBBCan:gpio24', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2660 stepper_y': {'cs_pin': 'PC9', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PD7', 'dir_pin': '!PD12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'PA2', 'position_endstop': 0.0, 'position_min': -4.0, 'position_max': 225.0, 'homing_speed': 35.0, 'second_homing_speed': 17.5, 'homing_retract_speed': 35.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2660 stepper_z': {'cs_pin': 'PC10', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PD8', 'dir_pin': '!PD13', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -2.5, 'position_max': 230.0, 'homing_speed': 35.0, 'second_homing_speed': 17.5, 'homing_retract_speed': 35.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'adc_temperature my_thermistor': {'resistance1': 1000.0, 'temperature1': 0.0, 'temperature2': 80.0, 'resistance2': 1309.0}, 'tmc2209 extruder': {'uart_pin': 'EBBCan:gpio20', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan:gpio27', 'min_temp': 0.0, 'max_temp': 250.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 21.527, 'pid_ki': 1.063, 'pid_kd': 108.982, 'heater_pin': 'EBBCan:gpio7', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': '!EBBCan:gpio18', 'pressure_advance': 0.065, 'pressure_advance_smooth_time': 0.02, 'dir_pin': 'EBBCan:gpio19', 'rotation_distance': 21.63024711, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!EBBCan:gpio17'}, 'filament_switch_sensor extruder': {'switch_pin': 'EBBCan:gpio21', 'pause_on_runout': True, 'runout_gcode': '', 'pause_delay': 0.5, 'event_delay': 3.0}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'thermistor chamber_temp': {'temperature1': 25.0, 'resistance1': 10000.0, 'beta': 3950.0}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PC13', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'watermark', 'max_delta': 2.0, 'heater_pin': '!PA19', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan extruder_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'EBBCan:gpio13', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.25, 'off_below': 0.0, 'cycle_time': 0.08, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'EBBCan:gpio14'}, 'probe': {'z_offset': -1.35, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': '^EBBCan:gpio22', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 3, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.015, 'samples_tolerance_retries': 3}, 'homing_override': {'set_position_z': 0.0, 'axes': 'z', 'gcode': '\nstatus_homing\nG90\nG0 Z5 F500\nG28 X0 Y0\nG0 X150 Y100 F9000\nG28 Z0\nG0 Z5 F500\nstatus_ready'}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [6, 6], 'mesh_min': [25.0, 35.0], 'mesh_max': [225.0, 220.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 150.0, 'fade_start': 1.0, 'fade_end': 10.0, 'fade_target': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[-0.1, -0.025, 0.0125, 0.0375, 0.125, 0.2125], [-0.1875, -0.1, -0.025, 0.025, 0.1, 0.2125], [-0.2625, -0.1625, -0.075, -0.0125, 0.075, 0.1875], [-0.2625, -0.1625, -0.0875, -0.0, 0.1, 0.2375], [-0.2, -0.1, -0.0125, 0.0625, 0.2, 0.35], [-0.225, -0.075, -0.0, 0.0875, 0.225, 0.3875]], 'min_x': 25.0, 'max_x': 225.0, 'min_y': 35.0, 'max_y': 220.0, 'x_count': 6, 'y_count': 6, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'bicubic', 'tension': 0.2}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\nSTATUS_HEATING\nM109 S150\nSTATUS_HOMING\nM117 Homing...\nG28 Y0 X0 Z0\nSTATUS_MESHING\nBED_MESH_CALIBRATE ADAPTIVE=1\n\n\n\n\n\n\n\n\n\n\n\nSTATUS_HEATING\nM107\nM117 Heating bed\nM190 S{ params.BED }\nM117 Heating nozzle\nM109 S{target_extruder}\nstatus_ready\nG1 Z15.0 F600\nG1 X125 Y125 F3000\nG92 E0\nG1 F9000\nstatus_printing\nM117 Printing...', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\nstatus_busy\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\n\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y} F3600\nM117 Finished!\nstatus_off', 'description': 'G-Code macro'}, 'gcode_macro m600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state', 'description': 'G-Code macro'}, 'force_move': {'enable_force_move': True}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexz', 'max_z_velocity': 5.0, 'max_z_accel': 100.0}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-04-27 22:47:05,364 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-04-27 22:47:05,366 [printer.py:reinit()] - Klipper version: v0.12.0-132-ge37b007f-dirty
2024-04-27 22:47:05,366 [printer.py:reinit()] - # Extruders: 1
2024-04-27 22:47:05,366 [printer.py:reinit()] - # Temperature devices: 2
2024-04-27 22:47:05,366 [printer.py:reinit()] - # Fans: 2
2024-04-27 22:47:05,366 [printer.py:reinit()] - # Output pins: 0
2024-04-27 22:47:05,366 [printer.py:reinit()] - # Leds: 20
2024-04-27 22:47:05,366 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-04-27 22:47:05,385 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-04-27 22:47:05,387 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor mcu&fan&heater_fan extruder_fan&filament_switch_sensor extruder&neopixel sb_leds
2024-04-27 22:47:05,676 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-04-27 22:47:05,676 [screen.py:init_klipper()] - Printer initialized
2024-04-27 22:47:05,676 [printer.py:change_state()] - Changing state from 'disconnected' to 'printing'
2024-04-27 22:47:05,676 [printer.py:change_state()] - Adding callback for state: printing
2024-04-27 22:47:05,806 [screen.py:_load_panel()] - Loading panel: job_status
2024-04-27 22:47:06,000 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-04-27 22:47:06,009 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-04-27 22:47:06,035 [job_status.py:update_file_metadata()] - Cannot find file metadata. Listening for updated metadata
2024-04-27 22:47:06,041 [job_status.py:show_file_thumbnail()] - tfic-angled-honeycomb_0.2mm_PLA_MK3S_5h2m.gcode
2024-04-27 22:47:06,041 [job_status.py:show_file_thumbnail()] - no pixbuf
2024-04-27 22:47:06,057 [job_status.py:update_file_metadata()] - Update Metadata. File: tfic-angled-honeycomb_0.2mm_PLA_MK3S_5h2m.gcode Size: 15746614
2024-04-27 22:47:06,063 [job_status.py:show_file_thumbnail()] - tfic-angled-honeycomb_0.2mm_PLA_MK3S_5h2m.gcode
2024-04-27 22:56:05,608 [functions.py:log_start()] - --------------------KlipperScreen Log Start--------------------
2024-04-27 22:56:05,609 [functions.py:log_start()] - KlipperScreen Version: v0.3.9-50-gdaed9a0
2024-04-27 22:56:05,609 [functions.py:log_start()] - Python version: 3.11
2024-04-27 22:56:05,749 [config.py:get_config_file_location()] - Passed config (-c): .
2024-04-27 22:56:05,750 [config.py:__init__()] - Config path location: /home/pi/printer_data/config/KlipperScreen.conf
2024-04-27 22:56:05,775 [config.py:log_config()] -  ===== Config File =====

=======================
2024-04-27 22:56:05,777 [config.py:__init__()] - ====== Saved Def ======

[main]
use_dpms = False
print_sort_dir = date_desc

=======================
2024-04-27 22:56:05,778 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2024-04-27 22:56:05,887 [config.py:create_translations()] - Selected lang: None OS lang: en_GB
2024-04-27 22:56:05,887 [config.py:install_language()] - Using lang en
2024-04-27 22:56:05,906 [screen.py:__init__()] - Monitors: 1 using number: 0
2024-04-27 22:56:05,908 [screen.py:__init__()] - Wayland: False Display name: :100
2024-04-27 22:56:05,911 [screen.py:__init__()] - Screen resolution: 984x540
2024-04-27 22:56:05,912 [KlippyGtk.py:__init__()] - Font size: 18.6 (medium)
2024-04-27 22:56:06,520 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2024-04-27 22:56:06,520 [screen.py:set_screenblanking_timeout()] - Not using DPMS
2024-04-27 22:56:06,529 [screen.py:initial_connection()] - Default printer: None
2024-04-27 22:56:06,596 [screen.py:connect_printer()] - Connecting to printer: Printer
2024-04-27 22:56:06,597 [screen.py:_load_panel()] - Loading panel: splash_screen
2024-04-27 22:56:06,664 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-04-27 22:56:06,682 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-04-27 22:56:06,682 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-27 22:56:06,700 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/access/oneshot_token
2024-04-27 22:56:06,712 [KlippyWebsocket.py:connect()] - Starting websocket thread
2024-04-27 22:56:06,723 [_logging.py:info()] - Websocket connected
2024-04-27 22:56:06,723 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2024-04-27 22:56:06,773 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-27 22:56:06,785 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-04-27 22:56:06,797 [printer.py:configure_cameras()] - Cameras: []
2024-04-27 22:56:06,797 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'ready', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'octoprint_compat', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 3, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-04-27 22:56:06,797 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-04-27 22:56:06,818 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-04-27 22:56:06,953 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set allow_park = client.park_at_cancel | default(false) | lower == \'true\' %}\n{% set retract = client.cancel_retract | default(5.0) | abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x | default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y | default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x | length > 0 or park_y | length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro | default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set idle_timeout = client.idle_timeout | default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE | default(1) | int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro | default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move | default(velocity) %}\n{% set runout_resume = True if client.runout_sensor | default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state | upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro | default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY | default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}"}, 'neopixel sb_leds': {'pin': 'EBBCan:gpio16', 'chain_count': '3', 'color_order': 'GRB', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0'}, 'led_effect sb_logo_busy': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (1,0,0)'}, 'led_effect sb_logo_cleaning': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.02, 0.5)'}, 'led_effect sb_logo_calibrating_z': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 0.35)'}, 'led_effect sb_logo_heating': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nbreathing  3 1 top (1, 0.18, 0)'}, 'led_effect sb_logo_cooling': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nbreathing  3 1 top (0, 0, 1)'}, 'led_effect sb_logo_homing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.6, 0.2)'}, 'led_effect sb_logo_leveling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.5, 0.1, 0.4)'}, 'led_effect sb_logo_meshing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.2, 1.0, 0.0)'}, 'led_effect sb_logo_printing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.3, 0.3, 0.0),(0.3, 0.1, 0.0)'}, 'led_effect sb_logo_standby': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.01, 0.01, 0.01)'}, 'led_effect sb_logo_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 1.0, 0.0)'}, 'led_effect sb_nozzle_heating': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (1.0, 0.18, 0.0, 0.0)'}, 'led_effect sb_nozzle_cooling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 1.0, 0.1)'}, 'led_effect sb_nozzle_standby': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.6, 0.0, 0.0, 0.0)'}, 'led_effect sb_nozzle_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.6, 1.0, 0.0, 0.1)'}, 'led_effect sb_critical_error': {'leds': '\nneopixel:sb_leds', 'layers': '\nstrobe         1  1.5   add        (1.0,  1.0, 1.0)\nbreathing      2  0     difference (0.95, 0.0, 0.0)\nstatic         1  0     top        (1.0,  0.0, 0.0)', 'autostart': 'false', 'frame_rate': '24', 'run_on_error': 'true'}, 'led_effect rainbow': {'leds': '\nneopixel:sb_leds', 'autostart': 'true', 'frame_rate': '24', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.0, 0.3, 0.0),(0.0, 0.0, 0.3)'}, 'led_effect set_nozzle_leds': {'leds': '\nneopixel:sb_leds (2,3)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nstatic         0  0     top        (0.5,  0.5, 0.5)'}, 'led_effect set_logo_leds': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nstatic         0  0     top        (1.0,  1.0, 1.0)'}, 'gcode_macro set_logo_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds STOP=1'}, 'gcode_macro set_logo_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1'}, 'gcode_macro status_off': {'gcode': '\nSTOP_LED_EFFECTS'}, 'gcode_macro status_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=rainbow'}, 'gcode_macro status_part_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready'}, 'gcode_macro status_busy': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_busy\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_heating\nSET_LED_EFFECT EFFECT=sb_nozzle_heating'}, 'gcode_macro status_cooling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cooling\nSET_LED_EFFECT EFFECT=sb_nozzle_cooling'}, 'gcode_macro status_leveling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_leveling\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_homing\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cleaning\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_meshing\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_calibrating_z\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_printing\nset_nozzle_leds_on'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_sam4e8e_00313753364B37373032303038303139-if00'}, 'mcu EBBCan': {'canbus_uuid': '8250861450f7'}, 'adxl345': {'cs_pin': 'EBBCan:gpio1', 'spi_software_sclk_pin': 'EBBCan:gpio2', 'spi_software_mosi_pin': 'EBBCan:gpio0', 'spi_software_miso_pin': 'EBBCan:gpio3', 'axes_map': 'z,-y,x'}, 'resonance_tester': {'probe_points': '100, 100, 20', 'accel_chip': 'adxl345'}, 'input_shaper': {'shaper_freq_x': '45', 'shaper_type': '3hump_ei'}, 'stepper_x': {'step_pin': 'PD6', 'dir_pin': '!PD11', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'EBBCan:gpio24', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '40'}, 'tmc2660 stepper_x': {'cs_pin': 'PD14', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'stepper_y': {'step_pin': 'PD7', 'dir_pin': '!PD12', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'PA2', 'position_endstop': '0', 'position_max': '225', 'position_min': '-4', 'homing_speed': '35', 'homing_retract_dist': '0'}, 'tmc2660 stepper_y': {'cs_pin': 'PC9', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'stepper_z': {'step_pin': 'PD8', 'dir_pin': '!PD13', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '230', 'position_min': '-2.5', 'homing_speed': '35.0'}, 'tmc2660 stepper_z': {'cs_pin': 'PC10', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'adc_temperature my_thermistor': {'temperature1': '0', 'resistance1': '1000', 'temperature2': '80', 'resistance2': '1309'}, 'extruder': {'step_pin': '!EBBCan:gpio18', 'dir_pin': 'EBBCan:gpio19', 'enable_pin': '!EBBCan:gpio17', 'microsteps': '32', 'rotation_distance': '21.63024711', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'pressure_advance': '0.065', 'pressure_advance_smooth_time': '0.02', 'gear_ratio': '50:10', 'heater_pin': 'EBBCan:gpio7', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'EBBCan:gpio27', 'control': 'pid', 'pid_kp': '21.527', 'pid_ki': '1.063', 'pid_kd': '108.982', 'min_temp': '0', 'max_temp': '250'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan:gpio20', 'run_current': '0.5', 'stealthchop_threshold': '999999'}, 'filament_switch_sensor extruder': {'pause_on_runout': 'True', 'switch_pin': 'EBBCan:gpio21'}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu'}, 'thermistor chamber_temp': {'temperature1': '25', 'resistance1': '10000', 'beta': '3950'}, 'heater_bed': {'heater_pin': '!PA19', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PC13', 'control': 'watermark', 'min_temp': '0', 'max_temp': '120'}, 'heater_fan extruder_fan': {'pin': 'EBBCan:gpio13', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'EBBCan:gpio14', 'cycle_time': '.08', 'kick_start_time': '.25'}, 'probe': {'pin': '^EBBCan:gpio22', 'x_offset': '0', 'y_offset': '0', 'samples': '3', 'samples_result': 'median', 'sample_retract_dist': '3', 'samples_tolerance': '0.015', 'samples_tolerance_retries': '3', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'z_offset': '-1.350'}, 'homing_override': {'axes': 'z', 'set_position_z': '0', 'gcode': '\nstatus_homing\nG90\nG0 Z5 F500\nG28 X0 Y0\nG0 X150 Y100 F9000\nG28 Z0\nG0 Z5 F500\nstatus_ready'}, 'bed_mesh': {'speed': '150', 'horizontal_move_z': '5', 'mesh_min': '25,35.0', 'mesh_max': '225.0,220', 'probe_count': '6,6', 'algorithm': 'bicubic', 'fade_start': '1', 'fade_end': '10', 'fade_target': '0'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\nSTATUS_HEATING\nM109 S150\nSTATUS_HOMING\nM117 Homing...\nG28 Y0 X0 Z0\nSTATUS_MESHING\nBED_MESH_CALIBRATE ADAPTIVE=1\n\n\n\n\n\n\n\n\n\n\n\nSTATUS_HEATING\nM107\nM117 Heating bed\nM190 S{ params.BED }\nM117 Heating nozzle\nM109 S{target_extruder}\nstatus_ready\nG1 Z15.0 F600\nG1 X125 Y125 F3000\nG92 E0\nG1 F9000\nstatus_printing\nM117 Printing...'}, 'gcode_macro PRINT_END': {'gcode': '\nstatus_busy\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\n\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y} F3600\nM117 Finished!\nstatus_off'}, 'gcode_macro M600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state'}, 'printer': {'kinematics': 'corexz', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '5', 'max_z_accel': '100'}, 'force_move': {'enable_force_move': 'true'}, 'exclude_object': {}, 'bed_mesh default': {'version': '1', 'points': '\n-0.100000, -0.025000, 0.012500, 0.037500, 0.125000, 0.212500\n-0.187500, -0.100000, -0.025000, 0.025000, 0.100000, 0.212500\n-0.262500, -0.162500, -0.075000, -0.012500, 0.075000, 0.187500\n-0.262500, -0.162500, -0.087500, -0.000000, 0.100000, 0.237500\n-0.200000, -0.100000, -0.012500, 0.062500, 0.200000, 0.350000\n-0.225000, -0.075000, -0.000000, 0.087500, 0.225000, 0.387500', 'x_count': '6', 'y_count': '6', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'bicubic', 'tension': '0.2', 'min_x': '25.0', 'max_x': '225.0', 'min_y': '35.0', 'max_y': '220.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_sam4e8e_00313753364B37373032303038303139-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu ebbcan': {'canbus_uuid': '8250861450f7', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set allow_park = client.park_at_cancel | default(false) | lower == \'true\' %}\n{% set retract = client.cancel_retract | default(5.0) | abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x | default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y | default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x | length > 0 or park_y | length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro | default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set idle_timeout = client.idle_timeout | default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE | default(1) | int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro | default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move | default(velocity) %}\n{% set runout_resume = True if client.runout_sensor | default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state | upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro | default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY | default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'neopixel sb_leds': {'pin': 'EBBCan:gpio16', 'chain_count': 3, 'color_order': ['GRB'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'led_effect sb_logo_busy': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1,0,0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_cleaning': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.02, 0.5)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_calibrating_z': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 0.35)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1, 0.18, 0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0, 0, 1)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_homing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.6, 0.2)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_leveling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.5, 0.1, 0.4)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_meshing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.2, 1.0, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_printing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.3, 0.3, 0.0),(0.3, 0.1, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_standby': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.01, 0.01, 0.01)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 1.0, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_nozzle_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1.0, 0.18, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 1.0, 0.1)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_standby': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.6, 0.0, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.6, 1.0, 0.0, 0.1)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_critical_error': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': True, 'endstops': '', 'layers': '\nstrobe         1  1.5   add        (1.0,  1.0, 1.0)\nbreathing      2  0     difference (0.95, 0.0, 0.0)\nstatic         1  0     top        (1.0,  0.0, 0.0)', 'leds': '\nneopixel:sb_leds'}, 'led_effect rainbow': {'frame_rate': 24.0, 'autostart': True, 'run_on_error': False, 'endstops': '', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.0, 0.3, 0.0),(0.0, 0.0, 0.3)', 'leds': '\nneopixel:sb_leds'}, 'led_effect set_nozzle_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic         0  0     top        (0.5,  0.5, 0.5)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect set_logo_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic         0  0     top        (1.0,  1.0, 1.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'gcode_macro set_logo_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nSTOP_LED_EFFECTS', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=rainbow', 'description': 'G-Code macro'}, 'gcode_macro status_part_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_busy\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_heating\nSET_LED_EFFECT EFFECT=sb_nozzle_heating', 'description': 'G-Code macro'}, 'gcode_macro status_cooling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cooling\nSET_LED_EFFECT EFFECT=sb_nozzle_cooling', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_leveling\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_homing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cleaning\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_meshing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_calibrating_z\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_printing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'adxl345': {'axes_map': ['z', '-y', 'x'], 'rate': 3200, 'cs_pin': 'EBBCan:gpio1', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'EBBCan:gpio2', 'spi_software_miso_pin': 'EBBCan:gpio3', 'spi_software_mosi_pin': 'EBBCan:gpio0'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[100.0, 100.0, 20.0]], 'accel_chip': 'adxl345'}, 'input_shaper': {'shaper_type': '3hump_ei', 'shaper_type_x': '3hump_ei', 'damping_ratio_x': 0.1, 'shaper_freq_x': 45.0, 'shaper_type_y': '3hump_ei', 'damping_ratio_y': 0.1, 'shaper_freq_y': 0.0}, 'tmc2660 stepper_x': {'cs_pin': 'PD14', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PD6', 'dir_pin': '!PD11', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'EBBCan:gpio24', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2660 stepper_y': {'cs_pin': 'PC9', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PD7', 'dir_pin': '!PD12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'PA2', 'position_endstop': 0.0, 'position_min': -4.0, 'position_max': 225.0, 'homing_speed': 35.0, 'second_homing_speed': 17.5, 'homing_retract_speed': 35.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2660 stepper_z': {'cs_pin': 'PC10', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PD8', 'dir_pin': '!PD13', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -2.5, 'position_max': 230.0, 'homing_speed': 35.0, 'second_homing_speed': 17.5, 'homing_retract_speed': 35.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'adc_temperature my_thermistor': {'resistance1': 1000.0, 'temperature1': 0.0, 'temperature2': 80.0, 'resistance2': 1309.0}, 'tmc2209 extruder': {'uart_pin': 'EBBCan:gpio20', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan:gpio27', 'min_temp': 0.0, 'max_temp': 250.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 21.527, 'pid_ki': 1.063, 'pid_kd': 108.982, 'heater_pin': 'EBBCan:gpio7', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': '!EBBCan:gpio18', 'pressure_advance': 0.065, 'pressure_advance_smooth_time': 0.02, 'dir_pin': 'EBBCan:gpio19', 'rotation_distance': 21.63024711, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!EBBCan:gpio17'}, 'filament_switch_sensor extruder': {'switch_pin': 'EBBCan:gpio21', 'pause_on_runout': True, 'runout_gcode': '', 'pause_delay': 0.5, 'event_delay': 3.0}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'thermistor chamber_temp': {'temperature1': 25.0, 'resistance1': 10000.0, 'beta': 3950.0}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PC13', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'watermark', 'max_delta': 2.0, 'heater_pin': '!PA19', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan extruder_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'EBBCan:gpio13', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.25, 'off_below': 0.0, 'cycle_time': 0.08, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'EBBCan:gpio14'}, 'probe': {'z_offset': -1.35, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': '^EBBCan:gpio22', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 3, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.015, 'samples_tolerance_retries': 3}, 'homing_override': {'set_position_z': 0.0, 'axes': 'z', 'gcode': '\nstatus_homing\nG90\nG0 Z5 F500\nG28 X0 Y0\nG0 X150 Y100 F9000\nG28 Z0\nG0 Z5 F500\nstatus_ready'}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [6, 6], 'mesh_min': [25.0, 35.0], 'mesh_max': [225.0, 220.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 150.0, 'fade_start': 1.0, 'fade_end': 10.0, 'fade_target': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[-0.1, -0.025, 0.0125, 0.0375, 0.125, 0.2125], [-0.1875, -0.1, -0.025, 0.025, 0.1, 0.2125], [-0.2625, -0.1625, -0.075, -0.0125, 0.075, 0.1875], [-0.2625, -0.1625, -0.0875, -0.0, 0.1, 0.2375], [-0.2, -0.1, -0.0125, 0.0625, 0.2, 0.35], [-0.225, -0.075, -0.0, 0.0875, 0.225, 0.3875]], 'min_x': 25.0, 'max_x': 225.0, 'min_y': 35.0, 'max_y': 220.0, 'x_count': 6, 'y_count': 6, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'bicubic', 'tension': 0.2}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\nSTATUS_HEATING\nM109 S150\nSTATUS_HOMING\nM117 Homing...\nG28 Y0 X0 Z0\nSTATUS_MESHING\nBED_MESH_CALIBRATE ADAPTIVE=1\n\n\n\n\n\n\n\n\n\n\n\nSTATUS_HEATING\nM107\nM117 Heating bed\nM190 S{ params.BED }\nM117 Heating nozzle\nM109 S{target_extruder}\nstatus_ready\nG1 Z15.0 F600\nG1 X125 Y125 F3000\nG92 E0\nG1 F9000\nstatus_printing\nM117 Printing...', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\nstatus_busy\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\n\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y} F3600\nM117 Finished!\nstatus_off', 'description': 'G-Code macro'}, 'gcode_macro m600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state', 'description': 'G-Code macro'}, 'force_move': {'enable_force_move': True}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexz', 'max_z_velocity': 5.0, 'max_z_accel': 100.0}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-04-27 22:56:06,957 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-04-27 22:56:06,959 [printer.py:reinit()] - Klipper version: v0.12.0-132-ge37b007f-dirty
2024-04-27 22:56:06,959 [printer.py:reinit()] - # Extruders: 1
2024-04-27 22:56:06,959 [printer.py:reinit()] - # Temperature devices: 2
2024-04-27 22:56:06,959 [printer.py:reinit()] - # Fans: 2
2024-04-27 22:56:06,959 [printer.py:reinit()] - # Output pins: 0
2024-04-27 22:56:06,959 [printer.py:reinit()] - # Leds: 20
2024-04-27 22:56:06,960 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-04-27 22:56:06,978 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-04-27 22:56:06,981 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor mcu&fan&heater_fan extruder_fan&filament_switch_sensor extruder&neopixel sb_leds
2024-04-27 22:56:07,263 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-04-27 22:56:07,263 [screen.py:init_klipper()] - Printer initialized
2024-04-27 22:56:07,264 [printer.py:change_state()] - Changing state from 'disconnected' to 'printing'
2024-04-27 22:56:07,264 [printer.py:change_state()] - Adding callback for state: printing
2024-04-27 22:56:07,409 [screen.py:_load_panel()] - Loading panel: job_status
2024-04-27 22:56:07,603 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-04-27 22:56:07,613 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-04-27 22:56:07,638 [job_status.py:update_file_metadata()] - Cannot find file metadata. Listening for updated metadata
2024-04-27 22:56:07,640 [job_status.py:show_file_thumbnail()] - tfic-angled-honeycomb_0.2mm_PLA_MK3S_5h2m.gcode
2024-04-27 22:56:07,640 [job_status.py:show_file_thumbnail()] - no pixbuf
2024-04-27 22:56:07,663 [job_status.py:update_file_metadata()] - Update Metadata. File: tfic-angled-honeycomb_0.2mm_PLA_MK3S_5h2m.gcode Size: 15746614
2024-04-27 22:56:07,669 [job_status.py:show_file_thumbnail()] - tfic-angled-honeycomb_0.2mm_PLA_MK3S_5h2m.gcode
2024-04-27 23:02:25,048 [functions.py:log_start()] - --------------------KlipperScreen Log Start--------------------
2024-04-27 23:02:25,049 [functions.py:log_start()] - KlipperScreen Version: v0.3.9-50-gdaed9a0
2024-04-27 23:02:25,049 [functions.py:log_start()] - Python version: 3.11
2024-04-27 23:02:25,188 [config.py:get_config_file_location()] - Passed config (-c): .
2024-04-27 23:02:25,189 [config.py:__init__()] - Config path location: /home/pi/printer_data/config/KlipperScreen.conf
2024-04-27 23:02:25,214 [config.py:log_config()] -  ===== Config File =====

=======================
2024-04-27 23:02:25,216 [config.py:__init__()] - ====== Saved Def ======

[main]
use_dpms = False
print_sort_dir = date_desc

=======================
2024-04-27 23:02:25,217 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2024-04-27 23:02:25,326 [config.py:create_translations()] - Selected lang: None OS lang: en_GB
2024-04-27 23:02:25,327 [config.py:install_language()] - Using lang en
2024-04-27 23:02:25,347 [screen.py:__init__()] - Monitors: 1 using number: 0
2024-04-27 23:02:25,348 [screen.py:__init__()] - Wayland: False Display name: :100
2024-04-27 23:02:25,351 [screen.py:__init__()] - Screen resolution: 984x540
2024-04-27 23:02:25,352 [KlippyGtk.py:__init__()] - Font size: 18.6 (medium)
2024-04-27 23:02:25,990 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2024-04-27 23:02:25,991 [screen.py:set_screenblanking_timeout()] - Not using DPMS
2024-04-27 23:02:25,999 [screen.py:initial_connection()] - Default printer: None
2024-04-27 23:02:26,068 [screen.py:connect_printer()] - Connecting to printer: Printer
2024-04-27 23:02:26,068 [screen.py:_load_panel()] - Loading panel: splash_screen
2024-04-27 23:02:26,136 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-04-27 23:02:26,154 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-04-27 23:02:26,154 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-27 23:02:26,172 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/access/oneshot_token
2024-04-27 23:02:26,184 [KlippyWebsocket.py:connect()] - Starting websocket thread
2024-04-27 23:02:26,194 [_logging.py:info()] - Websocket connected
2024-04-27 23:02:26,195 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2024-04-27 23:02:26,212 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-27 23:02:26,224 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-04-27 23:02:26,235 [printer.py:configure_cameras()] - Cameras: []
2024-04-27 23:02:26,236 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'ready', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'octoprint_compat', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 3, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-04-27 23:02:26,236 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-04-27 23:02:26,249 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-04-27 23:02:26,521 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set allow_park = client.park_at_cancel | default(false) | lower == \'true\' %}\n{% set retract = client.cancel_retract | default(5.0) | abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x | default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y | default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x | length > 0 or park_y | length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro | default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set idle_timeout = client.idle_timeout | default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE | default(1) | int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro | default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move | default(velocity) %}\n{% set runout_resume = True if client.runout_sensor | default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state | upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro | default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY | default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}"}, 'neopixel sb_leds': {'pin': 'EBBCan:gpio16', 'chain_count': '3', 'color_order': 'GRB', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0'}, 'led_effect sb_logo_busy': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (1,0,0)'}, 'led_effect sb_logo_cleaning': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.02, 0.5)'}, 'led_effect sb_logo_calibrating_z': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 0.35)'}, 'led_effect sb_logo_heating': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nbreathing  3 1 top (1, 0.18, 0)'}, 'led_effect sb_logo_cooling': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nbreathing  3 1 top (0, 0, 1)'}, 'led_effect sb_logo_homing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.6, 0.2)'}, 'led_effect sb_logo_leveling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.5, 0.1, 0.4)'}, 'led_effect sb_logo_meshing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.2, 1.0, 0.0)'}, 'led_effect sb_logo_printing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.3, 0.3, 0.0),(0.3, 0.1, 0.0)'}, 'led_effect sb_logo_standby': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.01, 0.01, 0.01)'}, 'led_effect sb_logo_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 1.0, 0.0)'}, 'led_effect sb_nozzle_heating': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (1.0, 0.18, 0.0, 0.0)'}, 'led_effect sb_nozzle_cooling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 1.0, 0.1)'}, 'led_effect sb_nozzle_standby': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.6, 0.0, 0.0, 0.0)'}, 'led_effect sb_nozzle_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.6, 1.0, 0.0, 0.1)'}, 'led_effect sb_critical_error': {'leds': '\nneopixel:sb_leds', 'layers': '\nstrobe         1  1.5   add        (1.0,  1.0, 1.0)\nbreathing      2  0     difference (0.95, 0.0, 0.0)\nstatic         1  0     top        (1.0,  0.0, 0.0)', 'autostart': 'false', 'frame_rate': '24', 'run_on_error': 'true'}, 'led_effect rainbow': {'leds': '\nneopixel:sb_leds', 'autostart': 'true', 'frame_rate': '24', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.0, 0.3, 0.0),(0.0, 0.0, 0.3)'}, 'led_effect set_nozzle_leds': {'leds': '\nneopixel:sb_leds (2,3)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nstatic         0  0     top        (0.5,  0.5, 0.5)'}, 'led_effect set_logo_leds': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nstatic         0  0     top        (1.0,  1.0, 1.0)'}, 'gcode_macro set_logo_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds STOP=1'}, 'gcode_macro set_logo_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1'}, 'gcode_macro status_off': {'gcode': '\nSTOP_LED_EFFECTS'}, 'gcode_macro status_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=rainbow'}, 'gcode_macro status_part_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready'}, 'gcode_macro status_busy': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_busy\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_heating\nSET_LED_EFFECT EFFECT=sb_nozzle_heating'}, 'gcode_macro status_cooling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cooling\nSET_LED_EFFECT EFFECT=sb_nozzle_cooling'}, 'gcode_macro status_leveling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_leveling\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_homing\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cleaning\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_meshing\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_calibrating_z\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_printing\nset_nozzle_leds_on'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_sam4e8e_00313753364B37373032303038303139-if00'}, 'mcu EBBCan': {'canbus_uuid': '8250861450f7'}, 'adxl345': {'cs_pin': 'EBBCan:gpio1', 'spi_software_sclk_pin': 'EBBCan:gpio2', 'spi_software_mosi_pin': 'EBBCan:gpio0', 'spi_software_miso_pin': 'EBBCan:gpio3', 'axes_map': 'z,-y,x'}, 'resonance_tester': {'probe_points': '100, 100, 20', 'accel_chip': 'adxl345'}, 'input_shaper': {'shaper_freq_x': '45', 'shaper_type': '3hump_ei'}, 'stepper_x': {'step_pin': 'PD6', 'dir_pin': '!PD11', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'EBBCan:gpio24', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '40'}, 'tmc2660 stepper_x': {'cs_pin': 'PD14', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'stepper_y': {'step_pin': 'PD7', 'dir_pin': '!PD12', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'PA2', 'position_endstop': '0', 'position_max': '225', 'position_min': '-4', 'homing_speed': '35', 'homing_retract_dist': '0'}, 'tmc2660 stepper_y': {'cs_pin': 'PC9', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'stepper_z': {'step_pin': 'PD8', 'dir_pin': '!PD13', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '230', 'position_min': '-2.5', 'homing_speed': '35.0'}, 'tmc2660 stepper_z': {'cs_pin': 'PC10', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'adc_temperature my_thermistor': {'temperature1': '0', 'resistance1': '1000', 'temperature2': '80', 'resistance2': '1309'}, 'extruder': {'step_pin': '!EBBCan:gpio18', 'dir_pin': 'EBBCan:gpio19', 'enable_pin': '!EBBCan:gpio17', 'microsteps': '32', 'rotation_distance': '21.63024711', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'pressure_advance': '0.065', 'pressure_advance_smooth_time': '0.02', 'gear_ratio': '50:10', 'heater_pin': 'EBBCan:gpio7', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'EBBCan:gpio27', 'control': 'pid', 'pid_kp': '21.527', 'pid_ki': '1.063', 'pid_kd': '108.982', 'min_temp': '0', 'max_temp': '250'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan:gpio20', 'run_current': '0.5', 'stealthchop_threshold': '999999'}, 'filament_switch_sensor extruder': {'pause_on_runout': 'True', 'switch_pin': 'EBBCan:gpio21'}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu'}, 'thermistor chamber_temp': {'temperature1': '25', 'resistance1': '10000', 'beta': '3950'}, 'heater_bed': {'heater_pin': '!PA19', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PC13', 'control': 'watermark', 'min_temp': '0', 'max_temp': '120'}, 'heater_fan extruder_fan': {'pin': 'EBBCan:gpio13', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'EBBCan:gpio14', 'cycle_time': '.08', 'kick_start_time': '.25'}, 'probe': {'pin': '^EBBCan:gpio22', 'x_offset': '0', 'y_offset': '0', 'samples': '3', 'samples_result': 'median', 'sample_retract_dist': '3', 'samples_tolerance': '0.015', 'samples_tolerance_retries': '3', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'z_offset': '-1.350'}, 'homing_override': {'axes': 'z', 'set_position_z': '0', 'gcode': '\nstatus_homing\nG90\nG0 Z5 F500\nG28 X0 Y0\nG0 X150 Y100 F9000\nG28 Z0\nG0 Z5 F500\nstatus_ready'}, 'bed_mesh': {'speed': '150', 'horizontal_move_z': '5', 'mesh_min': '25,35.0', 'mesh_max': '225.0,220', 'probe_count': '6,6', 'algorithm': 'bicubic', 'fade_start': '1', 'fade_end': '10', 'fade_target': '0'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\nSTATUS_HEATING\nM109 S150\nSTATUS_HOMING\nM117 Homing...\nG28 Y0 X0 Z0\nSTATUS_MESHING\nBED_MESH_CALIBRATE ADAPTIVE=1\n\n\n\n\n\n\n\n\n\n\n\nSTATUS_HEATING\nM107\nM117 Heating bed\nM190 S{ params.BED }\nM117 Heating nozzle\nM109 S{target_extruder}\nstatus_ready\nG1 Z15.0 F600\nG1 X125 Y125 F3000\nG92 E0\nG1 F9000\nstatus_printing\nM117 Printing...'}, 'gcode_macro PRINT_END': {'gcode': '\nstatus_busy\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\n\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y} F3600\nM117 Finished!\nstatus_off'}, 'gcode_macro M600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state'}, 'printer': {'kinematics': 'corexz', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '5', 'max_z_accel': '100'}, 'force_move': {'enable_force_move': 'true'}, 'exclude_object': {}, 'bed_mesh default': {'version': '1', 'points': '\n-0.100000, -0.025000, 0.012500, 0.037500, 0.125000, 0.212500\n-0.187500, -0.100000, -0.025000, 0.025000, 0.100000, 0.212500\n-0.262500, -0.162500, -0.075000, -0.012500, 0.075000, 0.187500\n-0.262500, -0.162500, -0.087500, -0.000000, 0.100000, 0.237500\n-0.200000, -0.100000, -0.012500, 0.062500, 0.200000, 0.350000\n-0.225000, -0.075000, -0.000000, 0.087500, 0.225000, 0.387500', 'x_count': '6', 'y_count': '6', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'bicubic', 'tension': '0.2', 'min_x': '25.0', 'max_x': '225.0', 'min_y': '35.0', 'max_y': '220.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_sam4e8e_00313753364B37373032303038303139-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu ebbcan': {'canbus_uuid': '8250861450f7', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set allow_park = client.park_at_cancel | default(false) | lower == \'true\' %}\n{% set retract = client.cancel_retract | default(5.0) | abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x | default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y | default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x | length > 0 or park_y | length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro | default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set idle_timeout = client.idle_timeout | default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE | default(1) | int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro | default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move | default(velocity) %}\n{% set runout_resume = True if client.runout_sensor | default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state | upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro | default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY | default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'neopixel sb_leds': {'pin': 'EBBCan:gpio16', 'chain_count': 3, 'color_order': ['GRB'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'led_effect sb_logo_busy': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1,0,0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_cleaning': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.02, 0.5)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_calibrating_z': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 0.35)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1, 0.18, 0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0, 0, 1)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_homing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.6, 0.2)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_leveling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.5, 0.1, 0.4)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_meshing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.2, 1.0, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_printing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.3, 0.3, 0.0),(0.3, 0.1, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_standby': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.01, 0.01, 0.01)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 1.0, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_nozzle_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1.0, 0.18, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 1.0, 0.1)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_standby': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.6, 0.0, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.6, 1.0, 0.0, 0.1)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_critical_error': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': True, 'endstops': '', 'layers': '\nstrobe         1  1.5   add        (1.0,  1.0, 1.0)\nbreathing      2  0     difference (0.95, 0.0, 0.0)\nstatic         1  0     top        (1.0,  0.0, 0.0)', 'leds': '\nneopixel:sb_leds'}, 'led_effect rainbow': {'frame_rate': 24.0, 'autostart': True, 'run_on_error': False, 'endstops': '', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.0, 0.3, 0.0),(0.0, 0.0, 0.3)', 'leds': '\nneopixel:sb_leds'}, 'led_effect set_nozzle_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic         0  0     top        (0.5,  0.5, 0.5)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect set_logo_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic         0  0     top        (1.0,  1.0, 1.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'gcode_macro set_logo_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nSTOP_LED_EFFECTS', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=rainbow', 'description': 'G-Code macro'}, 'gcode_macro status_part_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_busy\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_heating\nSET_LED_EFFECT EFFECT=sb_nozzle_heating', 'description': 'G-Code macro'}, 'gcode_macro status_cooling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cooling\nSET_LED_EFFECT EFFECT=sb_nozzle_cooling', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_leveling\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_homing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cleaning\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_meshing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_calibrating_z\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_printing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'adxl345': {'axes_map': ['z', '-y', 'x'], 'rate': 3200, 'cs_pin': 'EBBCan:gpio1', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'EBBCan:gpio2', 'spi_software_miso_pin': 'EBBCan:gpio3', 'spi_software_mosi_pin': 'EBBCan:gpio0'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[100.0, 100.0, 20.0]], 'accel_chip': 'adxl345'}, 'input_shaper': {'shaper_type': '3hump_ei', 'shaper_type_x': '3hump_ei', 'damping_ratio_x': 0.1, 'shaper_freq_x': 45.0, 'shaper_type_y': '3hump_ei', 'damping_ratio_y': 0.1, 'shaper_freq_y': 0.0}, 'tmc2660 stepper_x': {'cs_pin': 'PD14', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PD6', 'dir_pin': '!PD11', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'EBBCan:gpio24', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2660 stepper_y': {'cs_pin': 'PC9', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PD7', 'dir_pin': '!PD12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'PA2', 'position_endstop': 0.0, 'position_min': -4.0, 'position_max': 225.0, 'homing_speed': 35.0, 'second_homing_speed': 17.5, 'homing_retract_speed': 35.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2660 stepper_z': {'cs_pin': 'PC10', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PD8', 'dir_pin': '!PD13', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -2.5, 'position_max': 230.0, 'homing_speed': 35.0, 'second_homing_speed': 17.5, 'homing_retract_speed': 35.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'adc_temperature my_thermistor': {'resistance1': 1000.0, 'temperature1': 0.0, 'temperature2': 80.0, 'resistance2': 1309.0}, 'tmc2209 extruder': {'uart_pin': 'EBBCan:gpio20', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan:gpio27', 'min_temp': 0.0, 'max_temp': 250.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 21.527, 'pid_ki': 1.063, 'pid_kd': 108.982, 'heater_pin': 'EBBCan:gpio7', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': '!EBBCan:gpio18', 'pressure_advance': 0.065, 'pressure_advance_smooth_time': 0.02, 'dir_pin': 'EBBCan:gpio19', 'rotation_distance': 21.63024711, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!EBBCan:gpio17'}, 'filament_switch_sensor extruder': {'switch_pin': 'EBBCan:gpio21', 'pause_on_runout': True, 'runout_gcode': '', 'pause_delay': 0.5, 'event_delay': 3.0}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'thermistor chamber_temp': {'temperature1': 25.0, 'resistance1': 10000.0, 'beta': 3950.0}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PC13', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'watermark', 'max_delta': 2.0, 'heater_pin': '!PA19', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan extruder_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'EBBCan:gpio13', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.25, 'off_below': 0.0, 'cycle_time': 0.08, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'EBBCan:gpio14'}, 'probe': {'z_offset': -1.35, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': '^EBBCan:gpio22', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 3, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.015, 'samples_tolerance_retries': 3}, 'homing_override': {'set_position_z': 0.0, 'axes': 'z', 'gcode': '\nstatus_homing\nG90\nG0 Z5 F500\nG28 X0 Y0\nG0 X150 Y100 F9000\nG28 Z0\nG0 Z5 F500\nstatus_ready'}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [6, 6], 'mesh_min': [25.0, 35.0], 'mesh_max': [225.0, 220.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 150.0, 'fade_start': 1.0, 'fade_end': 10.0, 'fade_target': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[-0.1, -0.025, 0.0125, 0.0375, 0.125, 0.2125], [-0.1875, -0.1, -0.025, 0.025, 0.1, 0.2125], [-0.2625, -0.1625, -0.075, -0.0125, 0.075, 0.1875], [-0.2625, -0.1625, -0.0875, -0.0, 0.1, 0.2375], [-0.2, -0.1, -0.0125, 0.0625, 0.2, 0.35], [-0.225, -0.075, -0.0, 0.0875, 0.225, 0.3875]], 'min_x': 25.0, 'max_x': 225.0, 'min_y': 35.0, 'max_y': 220.0, 'x_count': 6, 'y_count': 6, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'bicubic', 'tension': 0.2}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\nSTATUS_HEATING\nM109 S150\nSTATUS_HOMING\nM117 Homing...\nG28 Y0 X0 Z0\nSTATUS_MESHING\nBED_MESH_CALIBRATE ADAPTIVE=1\n\n\n\n\n\n\n\n\n\n\n\nSTATUS_HEATING\nM107\nM117 Heating bed\nM190 S{ params.BED }\nM117 Heating nozzle\nM109 S{target_extruder}\nstatus_ready\nG1 Z15.0 F600\nG1 X125 Y125 F3000\nG92 E0\nG1 F9000\nstatus_printing\nM117 Printing...', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\nstatus_busy\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\n\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y} F3600\nM117 Finished!\nstatus_off', 'description': 'G-Code macro'}, 'gcode_macro m600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state', 'description': 'G-Code macro'}, 'force_move': {'enable_force_move': True}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexz', 'max_z_velocity': 5.0, 'max_z_accel': 100.0}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-04-27 23:02:26,524 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-04-27 23:02:26,526 [printer.py:reinit()] - Klipper version: v0.12.0-132-ge37b007f-dirty
2024-04-27 23:02:26,526 [printer.py:reinit()] - # Extruders: 1
2024-04-27 23:02:26,526 [printer.py:reinit()] - # Temperature devices: 2
2024-04-27 23:02:26,526 [printer.py:reinit()] - # Fans: 2
2024-04-27 23:02:26,527 [printer.py:reinit()] - # Output pins: 0
2024-04-27 23:02:26,527 [printer.py:reinit()] - # Leds: 20
2024-04-27 23:02:26,527 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-04-27 23:02:26,545 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-04-27 23:02:26,547 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor mcu&fan&heater_fan extruder_fan&filament_switch_sensor extruder&neopixel sb_leds
2024-04-27 23:02:26,822 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-04-27 23:02:26,822 [screen.py:init_klipper()] - Printer initialized
2024-04-27 23:02:26,823 [printer.py:change_state()] - Changing state from 'disconnected' to 'printing'
2024-04-27 23:02:26,823 [printer.py:change_state()] - Adding callback for state: printing
2024-04-27 23:02:26,958 [screen.py:_load_panel()] - Loading panel: job_status
2024-04-27 23:02:27,151 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-04-27 23:02:27,161 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-04-27 23:02:27,187 [job_status.py:update_file_metadata()] - Cannot find file metadata. Listening for updated metadata
2024-04-27 23:02:27,191 [job_status.py:show_file_thumbnail()] - tfic-angled-honeycomb_0.2mm_PLA_MK3S_5h2m.gcode
2024-04-27 23:02:27,192 [job_status.py:show_file_thumbnail()] - no pixbuf
2024-04-27 23:02:27,220 [job_status.py:update_file_metadata()] - Update Metadata. File: tfic-angled-honeycomb_0.2mm_PLA_MK3S_5h2m.gcode Size: 15746614
2024-04-27 23:02:27,227 [job_status.py:show_file_thumbnail()] - tfic-angled-honeycomb_0.2mm_PLA_MK3S_5h2m.gcode
2024-04-27 23:08:06,323 [functions.py:log_start()] - --------------------KlipperScreen Log Start--------------------
2024-04-27 23:08:06,323 [functions.py:log_start()] - KlipperScreen Version: v0.3.9-50-gdaed9a0
2024-04-27 23:08:06,323 [functions.py:log_start()] - Python version: 3.11
2024-04-27 23:08:06,463 [config.py:get_config_file_location()] - Passed config (-c): .
2024-04-27 23:08:06,464 [config.py:__init__()] - Config path location: /home/pi/printer_data/config/KlipperScreen.conf
2024-04-27 23:08:06,490 [config.py:log_config()] -  ===== Config File =====

=======================
2024-04-27 23:08:06,492 [config.py:__init__()] - ====== Saved Def ======

[main]
use_dpms = False
print_sort_dir = date_desc

=======================
2024-04-27 23:08:06,493 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2024-04-27 23:08:06,601 [config.py:create_translations()] - Selected lang: None OS lang: en_GB
2024-04-27 23:08:06,604 [config.py:install_language()] - Using lang en
2024-04-27 23:08:06,623 [screen.py:__init__()] - Monitors: 1 using number: 0
2024-04-27 23:08:06,625 [screen.py:__init__()] - Wayland: False Display name: :100
2024-04-27 23:08:06,628 [screen.py:__init__()] - Screen resolution: 984x540
2024-04-27 23:08:06,629 [KlippyGtk.py:__init__()] - Font size: 18.6 (medium)
2024-04-27 23:08:07,186 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2024-04-27 23:08:07,186 [screen.py:set_screenblanking_timeout()] - Not using DPMS
2024-04-27 23:08:07,196 [screen.py:initial_connection()] - Default printer: None
2024-04-27 23:08:07,264 [screen.py:connect_printer()] - Connecting to printer: Printer
2024-04-27 23:08:07,264 [screen.py:_load_panel()] - Loading panel: splash_screen
2024-04-27 23:08:07,340 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-04-27 23:08:07,358 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-04-27 23:08:07,358 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-27 23:08:07,376 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/access/oneshot_token
2024-04-27 23:08:07,388 [KlippyWebsocket.py:connect()] - Starting websocket thread
2024-04-27 23:08:07,397 [_logging.py:info()] - Websocket connected
2024-04-27 23:08:07,397 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2024-04-27 23:08:07,408 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-27 23:08:07,420 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-04-27 23:08:07,432 [printer.py:configure_cameras()] - Cameras: []
2024-04-27 23:08:07,432 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'ready', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'octoprint_compat', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 3, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-04-27 23:08:07,433 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-04-27 23:08:07,445 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-04-27 23:08:07,486 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set allow_park = client.park_at_cancel | default(false) | lower == \'true\' %}\n{% set retract = client.cancel_retract | default(5.0) | abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x | default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y | default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x | length > 0 or park_y | length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro | default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set idle_timeout = client.idle_timeout | default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE | default(1) | int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro | default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move | default(velocity) %}\n{% set runout_resume = True if client.runout_sensor | default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state | upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro | default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY | default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}"}, 'neopixel sb_leds': {'pin': 'EBBCan:gpio16', 'chain_count': '3', 'color_order': 'GRB', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0'}, 'led_effect sb_logo_busy': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (1,0,0)'}, 'led_effect sb_logo_cleaning': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.02, 0.5)'}, 'led_effect sb_logo_calibrating_z': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 0.35)'}, 'led_effect sb_logo_heating': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nbreathing  3 1 top (1, 0.18, 0)'}, 'led_effect sb_logo_cooling': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nbreathing  3 1 top (0, 0, 1)'}, 'led_effect sb_logo_homing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.6, 0.2)'}, 'led_effect sb_logo_leveling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.5, 0.1, 0.4)'}, 'led_effect sb_logo_meshing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.2, 1.0, 0.0)'}, 'led_effect sb_logo_printing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.3, 0.3, 0.0),(0.3, 0.1, 0.0)'}, 'led_effect sb_logo_standby': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.01, 0.01, 0.01)'}, 'led_effect sb_logo_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 1.0, 0.0)'}, 'led_effect sb_nozzle_heating': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (1.0, 0.18, 0.0, 0.0)'}, 'led_effect sb_nozzle_cooling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 1.0, 0.1)'}, 'led_effect sb_nozzle_standby': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.6, 0.0, 0.0, 0.0)'}, 'led_effect sb_nozzle_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.6, 1.0, 0.0, 0.1)'}, 'led_effect sb_critical_error': {'leds': '\nneopixel:sb_leds', 'layers': '\nstrobe         1  1.5   add        (1.0,  1.0, 1.0)\nbreathing      2  0     difference (0.95, 0.0, 0.0)\nstatic         1  0     top        (1.0,  0.0, 0.0)', 'autostart': 'false', 'frame_rate': '24', 'run_on_error': 'true'}, 'led_effect rainbow': {'leds': '\nneopixel:sb_leds', 'autostart': 'true', 'frame_rate': '24', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.0, 0.3, 0.0),(0.0, 0.0, 0.3)'}, 'led_effect set_nozzle_leds': {'leds': '\nneopixel:sb_leds (2,3)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nstatic         0  0     top        (0.5,  0.5, 0.5)'}, 'led_effect set_logo_leds': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nstatic         0  0     top        (1.0,  1.0, 1.0)'}, 'gcode_macro set_logo_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds STOP=1'}, 'gcode_macro set_logo_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1'}, 'gcode_macro status_off': {'gcode': '\nSTOP_LED_EFFECTS'}, 'gcode_macro status_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=rainbow'}, 'gcode_macro status_part_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready'}, 'gcode_macro status_busy': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_busy\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_heating\nSET_LED_EFFECT EFFECT=sb_nozzle_heating'}, 'gcode_macro status_cooling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cooling\nSET_LED_EFFECT EFFECT=sb_nozzle_cooling'}, 'gcode_macro status_leveling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_leveling\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_homing\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cleaning\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_meshing\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_calibrating_z\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_printing\nset_nozzle_leds_on'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_sam4e8e_00313753364B37373032303038303139-if00'}, 'mcu EBBCan': {'canbus_uuid': '8250861450f7'}, 'adxl345': {'cs_pin': 'EBBCan:gpio1', 'spi_software_sclk_pin': 'EBBCan:gpio2', 'spi_software_mosi_pin': 'EBBCan:gpio0', 'spi_software_miso_pin': 'EBBCan:gpio3', 'axes_map': 'z,-y,x'}, 'resonance_tester': {'probe_points': '100, 100, 20', 'accel_chip': 'adxl345'}, 'input_shaper': {'shaper_freq_x': '45', 'shaper_type': '3hump_ei'}, 'stepper_x': {'step_pin': 'PD6', 'dir_pin': '!PD11', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'EBBCan:gpio24', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '40'}, 'tmc2660 stepper_x': {'cs_pin': 'PD14', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'stepper_y': {'step_pin': 'PD7', 'dir_pin': '!PD12', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'PA2', 'position_endstop': '0', 'position_max': '225', 'position_min': '-4', 'homing_speed': '35', 'homing_retract_dist': '0'}, 'tmc2660 stepper_y': {'cs_pin': 'PC9', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'stepper_z': {'step_pin': 'PD8', 'dir_pin': '!PD13', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '230', 'position_min': '-2.5', 'homing_speed': '35.0'}, 'tmc2660 stepper_z': {'cs_pin': 'PC10', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'adc_temperature my_thermistor': {'temperature1': '0', 'resistance1': '1000', 'temperature2': '80', 'resistance2': '1309'}, 'extruder': {'step_pin': '!EBBCan:gpio18', 'dir_pin': 'EBBCan:gpio19', 'enable_pin': '!EBBCan:gpio17', 'microsteps': '32', 'rotation_distance': '21.63024711', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'pressure_advance': '0.065', 'pressure_advance_smooth_time': '0.02', 'gear_ratio': '50:10', 'heater_pin': 'EBBCan:gpio7', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'EBBCan:gpio27', 'control': 'pid', 'pid_kp': '21.527', 'pid_ki': '1.063', 'pid_kd': '108.982', 'min_temp': '0', 'max_temp': '250'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan:gpio20', 'run_current': '0.5', 'stealthchop_threshold': '999999'}, 'filament_switch_sensor extruder': {'pause_on_runout': 'True', 'switch_pin': 'EBBCan:gpio21'}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu'}, 'thermistor chamber_temp': {'temperature1': '25', 'resistance1': '10000', 'beta': '3950'}, 'heater_bed': {'heater_pin': '!PA19', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PC13', 'control': 'watermark', 'min_temp': '0', 'max_temp': '120'}, 'heater_fan extruder_fan': {'pin': 'EBBCan:gpio13', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'EBBCan:gpio14', 'cycle_time': '.08', 'kick_start_time': '.25'}, 'probe': {'pin': '^EBBCan:gpio22', 'x_offset': '0', 'y_offset': '0', 'samples': '3', 'samples_result': 'median', 'sample_retract_dist': '3', 'samples_tolerance': '0.015', 'samples_tolerance_retries': '3', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'z_offset': '-1.350'}, 'homing_override': {'axes': 'z', 'set_position_z': '0', 'gcode': '\nstatus_homing\nG90\nG0 Z5 F500\nG28 X0 Y0\nG0 X150 Y100 F9000\nG28 Z0\nG0 Z5 F500\nstatus_ready'}, 'bed_mesh': {'speed': '150', 'horizontal_move_z': '5', 'mesh_min': '25,35.0', 'mesh_max': '225.0,220', 'probe_count': '6,6', 'algorithm': 'bicubic', 'fade_start': '1', 'fade_end': '10', 'fade_target': '0'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\nSTATUS_HEATING\nM109 S150\nSTATUS_HOMING\nM117 Homing...\nG28 Y0 X0 Z0\nSTATUS_MESHING\nBED_MESH_CALIBRATE ADAPTIVE=1\n\n\n\n\n\n\n\n\n\n\n\nSTATUS_HEATING\nM107\nM117 Heating bed\nM190 S{ params.BED }\nM117 Heating nozzle\nM109 S{target_extruder}\nstatus_ready\nG1 Z15.0 F600\nG1 X125 Y125 F3000\nG92 E0\nG1 F9000\nstatus_printing\nM117 Printing...'}, 'gcode_macro PRINT_END': {'gcode': '\nstatus_busy\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\n\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y} F3600\nM117 Finished!\nstatus_off'}, 'gcode_macro M600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state'}, 'printer': {'kinematics': 'corexz', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '5', 'max_z_accel': '100'}, 'force_move': {'enable_force_move': 'true'}, 'exclude_object': {}, 'bed_mesh default': {'version': '1', 'points': '\n-0.100000, -0.025000, 0.012500, 0.037500, 0.125000, 0.212500\n-0.187500, -0.100000, -0.025000, 0.025000, 0.100000, 0.212500\n-0.262500, -0.162500, -0.075000, -0.012500, 0.075000, 0.187500\n-0.262500, -0.162500, -0.087500, -0.000000, 0.100000, 0.237500\n-0.200000, -0.100000, -0.012500, 0.062500, 0.200000, 0.350000\n-0.225000, -0.075000, -0.000000, 0.087500, 0.225000, 0.387500', 'x_count': '6', 'y_count': '6', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'bicubic', 'tension': '0.2', 'min_x': '25.0', 'max_x': '225.0', 'min_y': '35.0', 'max_y': '220.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_sam4e8e_00313753364B37373032303038303139-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu ebbcan': {'canbus_uuid': '8250861450f7', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set allow_park = client.park_at_cancel | default(false) | lower == \'true\' %}\n{% set retract = client.cancel_retract | default(5.0) | abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x | default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y | default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x | length > 0 or park_y | length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro | default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set idle_timeout = client.idle_timeout | default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE | default(1) | int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro | default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move | default(velocity) %}\n{% set runout_resume = True if client.runout_sensor | default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state | upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro | default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY | default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'neopixel sb_leds': {'pin': 'EBBCan:gpio16', 'chain_count': 3, 'color_order': ['GRB'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'led_effect sb_logo_busy': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1,0,0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_cleaning': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.02, 0.5)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_calibrating_z': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 0.35)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1, 0.18, 0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0, 0, 1)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_homing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.6, 0.2)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_leveling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.5, 0.1, 0.4)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_meshing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.2, 1.0, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_printing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.3, 0.3, 0.0),(0.3, 0.1, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_standby': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.01, 0.01, 0.01)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 1.0, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_nozzle_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1.0, 0.18, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 1.0, 0.1)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_standby': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.6, 0.0, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.6, 1.0, 0.0, 0.1)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_critical_error': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': True, 'endstops': '', 'layers': '\nstrobe         1  1.5   add        (1.0,  1.0, 1.0)\nbreathing      2  0     difference (0.95, 0.0, 0.0)\nstatic         1  0     top        (1.0,  0.0, 0.0)', 'leds': '\nneopixel:sb_leds'}, 'led_effect rainbow': {'frame_rate': 24.0, 'autostart': True, 'run_on_error': False, 'endstops': '', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.0, 0.3, 0.0),(0.0, 0.0, 0.3)', 'leds': '\nneopixel:sb_leds'}, 'led_effect set_nozzle_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic         0  0     top        (0.5,  0.5, 0.5)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect set_logo_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic         0  0     top        (1.0,  1.0, 1.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'gcode_macro set_logo_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nSTOP_LED_EFFECTS', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=rainbow', 'description': 'G-Code macro'}, 'gcode_macro status_part_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_busy\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_heating\nSET_LED_EFFECT EFFECT=sb_nozzle_heating', 'description': 'G-Code macro'}, 'gcode_macro status_cooling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cooling\nSET_LED_EFFECT EFFECT=sb_nozzle_cooling', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_leveling\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_homing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cleaning\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_meshing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_calibrating_z\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_printing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'adxl345': {'axes_map': ['z', '-y', 'x'], 'rate': 3200, 'cs_pin': 'EBBCan:gpio1', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'EBBCan:gpio2', 'spi_software_miso_pin': 'EBBCan:gpio3', 'spi_software_mosi_pin': 'EBBCan:gpio0'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[100.0, 100.0, 20.0]], 'accel_chip': 'adxl345'}, 'input_shaper': {'shaper_type': '3hump_ei', 'shaper_type_x': '3hump_ei', 'damping_ratio_x': 0.1, 'shaper_freq_x': 45.0, 'shaper_type_y': '3hump_ei', 'damping_ratio_y': 0.1, 'shaper_freq_y': 0.0}, 'tmc2660 stepper_x': {'cs_pin': 'PD14', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PD6', 'dir_pin': '!PD11', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'EBBCan:gpio24', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2660 stepper_y': {'cs_pin': 'PC9', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PD7', 'dir_pin': '!PD12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'PA2', 'position_endstop': 0.0, 'position_min': -4.0, 'position_max': 225.0, 'homing_speed': 35.0, 'second_homing_speed': 17.5, 'homing_retract_speed': 35.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2660 stepper_z': {'cs_pin': 'PC10', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PD8', 'dir_pin': '!PD13', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -2.5, 'position_max': 230.0, 'homing_speed': 35.0, 'second_homing_speed': 17.5, 'homing_retract_speed': 35.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'adc_temperature my_thermistor': {'resistance1': 1000.0, 'temperature1': 0.0, 'temperature2': 80.0, 'resistance2': 1309.0}, 'tmc2209 extruder': {'uart_pin': 'EBBCan:gpio20', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan:gpio27', 'min_temp': 0.0, 'max_temp': 250.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 21.527, 'pid_ki': 1.063, 'pid_kd': 108.982, 'heater_pin': 'EBBCan:gpio7', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': '!EBBCan:gpio18', 'pressure_advance': 0.065, 'pressure_advance_smooth_time': 0.02, 'dir_pin': 'EBBCan:gpio19', 'rotation_distance': 21.63024711, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!EBBCan:gpio17'}, 'filament_switch_sensor extruder': {'switch_pin': 'EBBCan:gpio21', 'pause_on_runout': True, 'runout_gcode': '', 'pause_delay': 0.5, 'event_delay': 3.0}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'thermistor chamber_temp': {'temperature1': 25.0, 'resistance1': 10000.0, 'beta': 3950.0}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PC13', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'watermark', 'max_delta': 2.0, 'heater_pin': '!PA19', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan extruder_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'EBBCan:gpio13', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.25, 'off_below': 0.0, 'cycle_time': 0.08, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'EBBCan:gpio14'}, 'probe': {'z_offset': -1.35, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': '^EBBCan:gpio22', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 3, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.015, 'samples_tolerance_retries': 3}, 'homing_override': {'set_position_z': 0.0, 'axes': 'z', 'gcode': '\nstatus_homing\nG90\nG0 Z5 F500\nG28 X0 Y0\nG0 X150 Y100 F9000\nG28 Z0\nG0 Z5 F500\nstatus_ready'}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [6, 6], 'mesh_min': [25.0, 35.0], 'mesh_max': [225.0, 220.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 150.0, 'fade_start': 1.0, 'fade_end': 10.0, 'fade_target': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[-0.1, -0.025, 0.0125, 0.0375, 0.125, 0.2125], [-0.1875, -0.1, -0.025, 0.025, 0.1, 0.2125], [-0.2625, -0.1625, -0.075, -0.0125, 0.075, 0.1875], [-0.2625, -0.1625, -0.0875, -0.0, 0.1, 0.2375], [-0.2, -0.1, -0.0125, 0.0625, 0.2, 0.35], [-0.225, -0.075, -0.0, 0.0875, 0.225, 0.3875]], 'min_x': 25.0, 'max_x': 225.0, 'min_y': 35.0, 'max_y': 220.0, 'x_count': 6, 'y_count': 6, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'bicubic', 'tension': 0.2}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\nSTATUS_HEATING\nM109 S150\nSTATUS_HOMING\nM117 Homing...\nG28 Y0 X0 Z0\nSTATUS_MESHING\nBED_MESH_CALIBRATE ADAPTIVE=1\n\n\n\n\n\n\n\n\n\n\n\nSTATUS_HEATING\nM107\nM117 Heating bed\nM190 S{ params.BED }\nM117 Heating nozzle\nM109 S{target_extruder}\nstatus_ready\nG1 Z15.0 F600\nG1 X125 Y125 F3000\nG92 E0\nG1 F9000\nstatus_printing\nM117 Printing...', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\nstatus_busy\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\n\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y} F3600\nM117 Finished!\nstatus_off', 'description': 'G-Code macro'}, 'gcode_macro m600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state', 'description': 'G-Code macro'}, 'force_move': {'enable_force_move': True}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexz', 'max_z_velocity': 5.0, 'max_z_accel': 100.0}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-04-27 23:08:07,490 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-04-27 23:08:07,491 [printer.py:reinit()] - Klipper version: v0.12.0-132-ge37b007f-dirty
2024-04-27 23:08:07,492 [printer.py:reinit()] - # Extruders: 1
2024-04-27 23:08:07,492 [printer.py:reinit()] - # Temperature devices: 2
2024-04-27 23:08:07,492 [printer.py:reinit()] - # Fans: 2
2024-04-27 23:08:07,492 [printer.py:reinit()] - # Output pins: 0
2024-04-27 23:08:07,492 [printer.py:reinit()] - # Leds: 20
2024-04-27 23:08:07,492 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-04-27 23:08:07,511 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-04-27 23:08:07,514 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor mcu&fan&heater_fan extruder_fan&filament_switch_sensor extruder&neopixel sb_leds
2024-04-27 23:08:07,800 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-04-27 23:08:07,800 [screen.py:init_klipper()] - Printer initialized
2024-04-27 23:08:07,801 [printer.py:change_state()] - Changing state from 'disconnected' to 'printing'
2024-04-27 23:08:07,801 [printer.py:change_state()] - Adding callback for state: printing
2024-04-27 23:08:07,904 [screen.py:_load_panel()] - Loading panel: job_status
2024-04-27 23:08:08,099 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-04-27 23:08:08,108 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-04-27 23:08:08,134 [job_status.py:update_file_metadata()] - Cannot find file metadata. Listening for updated metadata
2024-04-27 23:08:08,135 [job_status.py:show_file_thumbnail()] - tfic-angled-honeycomb_0.2mm_PLA_MK3S_5h2m.gcode
2024-04-27 23:08:08,135 [job_status.py:show_file_thumbnail()] - no pixbuf
2024-04-27 23:08:08,156 [job_status.py:update_file_metadata()] - Update Metadata. File: tfic-angled-honeycomb_0.2mm_PLA_MK3S_5h2m.gcode Size: 15746614
2024-04-27 23:08:08,162 [job_status.py:show_file_thumbnail()] - tfic-angled-honeycomb_0.2mm_PLA_MK3S_5h2m.gcode
2024-04-27 23:15:41,098 [functions.py:log_start()] - --------------------KlipperScreen Log Start--------------------
2024-04-27 23:15:41,099 [functions.py:log_start()] - KlipperScreen Version: v0.3.9-50-gdaed9a0
2024-04-27 23:15:41,099 [functions.py:log_start()] - Python version: 3.11
2024-04-27 23:15:41,237 [config.py:get_config_file_location()] - Passed config (-c): .
2024-04-27 23:15:41,237 [config.py:__init__()] - Config path location: /home/pi/printer_data/config/KlipperScreen.conf
2024-04-27 23:15:41,263 [config.py:log_config()] -  ===== Config File =====

=======================
2024-04-27 23:15:41,265 [config.py:__init__()] - ====== Saved Def ======

[main]
use_dpms = False
print_sort_dir = date_desc

=======================
2024-04-27 23:15:41,266 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2024-04-27 23:15:41,375 [config.py:create_translations()] - Selected lang: None OS lang: en_GB
2024-04-27 23:15:41,375 [config.py:install_language()] - Using lang en
2024-04-27 23:15:41,395 [screen.py:__init__()] - Monitors: 1 using number: 0
2024-04-27 23:15:41,397 [screen.py:__init__()] - Wayland: False Display name: :100
2024-04-27 23:15:41,399 [screen.py:__init__()] - Screen resolution: 984x540
2024-04-27 23:15:41,401 [KlippyGtk.py:__init__()] - Font size: 18.6 (medium)
2024-04-27 23:15:41,929 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2024-04-27 23:15:41,930 [screen.py:set_screenblanking_timeout()] - Not using DPMS
2024-04-27 23:15:41,938 [screen.py:initial_connection()] - Default printer: None
2024-04-27 23:15:42,006 [screen.py:connect_printer()] - Connecting to printer: Printer
2024-04-27 23:15:42,007 [screen.py:_load_panel()] - Loading panel: splash_screen
2024-04-27 23:15:42,075 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-04-27 23:15:42,093 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-04-27 23:15:42,093 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-27 23:15:42,110 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/access/oneshot_token
2024-04-27 23:15:42,122 [KlippyWebsocket.py:connect()] - Starting websocket thread
2024-04-27 23:15:42,133 [_logging.py:info()] - Websocket connected
2024-04-27 23:15:42,133 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2024-04-27 23:15:42,144 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-27 23:15:42,156 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-04-27 23:15:42,167 [printer.py:configure_cameras()] - Cameras: []
2024-04-27 23:15:42,168 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'ready', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'octoprint_compat', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 3, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-04-27 23:15:42,168 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-04-27 23:15:42,181 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-04-27 23:15:42,253 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set allow_park = client.park_at_cancel | default(false) | lower == \'true\' %}\n{% set retract = client.cancel_retract | default(5.0) | abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x | default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y | default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x | length > 0 or park_y | length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro | default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set idle_timeout = client.idle_timeout | default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE | default(1) | int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro | default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move | default(velocity) %}\n{% set runout_resume = True if client.runout_sensor | default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state | upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro | default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY | default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}"}, 'neopixel sb_leds': {'pin': 'EBBCan:gpio16', 'chain_count': '3', 'color_order': 'GRB', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0'}, 'led_effect sb_logo_busy': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (1,0,0)'}, 'led_effect sb_logo_cleaning': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.02, 0.5)'}, 'led_effect sb_logo_calibrating_z': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 0.35)'}, 'led_effect sb_logo_heating': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nbreathing  3 1 top (1, 0.18, 0)'}, 'led_effect sb_logo_cooling': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nbreathing  3 1 top (0, 0, 1)'}, 'led_effect sb_logo_homing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.6, 0.2)'}, 'led_effect sb_logo_leveling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.5, 0.1, 0.4)'}, 'led_effect sb_logo_meshing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.2, 1.0, 0.0)'}, 'led_effect sb_logo_printing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.3, 0.3, 0.0),(0.3, 0.1, 0.0)'}, 'led_effect sb_logo_standby': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.01, 0.01, 0.01)'}, 'led_effect sb_logo_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 1.0, 0.0)'}, 'led_effect sb_nozzle_heating': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (1.0, 0.18, 0.0, 0.0)'}, 'led_effect sb_nozzle_cooling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 1.0, 0.1)'}, 'led_effect sb_nozzle_standby': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.6, 0.0, 0.0, 0.0)'}, 'led_effect sb_nozzle_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.6, 1.0, 0.0, 0.1)'}, 'led_effect sb_critical_error': {'leds': '\nneopixel:sb_leds', 'layers': '\nstrobe         1  1.5   add        (1.0,  1.0, 1.0)\nbreathing      2  0     difference (0.95, 0.0, 0.0)\nstatic         1  0     top        (1.0,  0.0, 0.0)', 'autostart': 'false', 'frame_rate': '24', 'run_on_error': 'true'}, 'led_effect rainbow': {'leds': '\nneopixel:sb_leds', 'autostart': 'true', 'frame_rate': '24', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.0, 0.3, 0.0),(0.0, 0.0, 0.3)'}, 'led_effect set_nozzle_leds': {'leds': '\nneopixel:sb_leds (2,3)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nstatic         0  0     top        (0.5,  0.5, 0.5)'}, 'led_effect set_logo_leds': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nstatic         0  0     top        (1.0,  1.0, 1.0)'}, 'gcode_macro set_logo_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds STOP=1'}, 'gcode_macro set_logo_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1'}, 'gcode_macro status_off': {'gcode': '\nSTOP_LED_EFFECTS'}, 'gcode_macro status_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=rainbow'}, 'gcode_macro status_part_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready'}, 'gcode_macro status_busy': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_busy\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_heating\nSET_LED_EFFECT EFFECT=sb_nozzle_heating'}, 'gcode_macro status_cooling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cooling\nSET_LED_EFFECT EFFECT=sb_nozzle_cooling'}, 'gcode_macro status_leveling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_leveling\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_homing\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cleaning\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_meshing\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_calibrating_z\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_printing\nset_nozzle_leds_on'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_sam4e8e_00313753364B37373032303038303139-if00'}, 'mcu EBBCan': {'canbus_uuid': '8250861450f7'}, 'adxl345': {'cs_pin': 'EBBCan:gpio1', 'spi_software_sclk_pin': 'EBBCan:gpio2', 'spi_software_mosi_pin': 'EBBCan:gpio0', 'spi_software_miso_pin': 'EBBCan:gpio3', 'axes_map': 'z,-y,x'}, 'resonance_tester': {'probe_points': '100, 100, 20', 'accel_chip': 'adxl345'}, 'input_shaper': {'shaper_freq_x': '45', 'shaper_type': '3hump_ei'}, 'stepper_x': {'step_pin': 'PD6', 'dir_pin': '!PD11', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'EBBCan:gpio24', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '40'}, 'tmc2660 stepper_x': {'cs_pin': 'PD14', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'stepper_y': {'step_pin': 'PD7', 'dir_pin': '!PD12', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'PA2', 'position_endstop': '0', 'position_max': '225', 'position_min': '-4', 'homing_speed': '35', 'homing_retract_dist': '0'}, 'tmc2660 stepper_y': {'cs_pin': 'PC9', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'stepper_z': {'step_pin': 'PD8', 'dir_pin': '!PD13', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '230', 'position_min': '-2.5', 'homing_speed': '35.0'}, 'tmc2660 stepper_z': {'cs_pin': 'PC10', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'adc_temperature my_thermistor': {'temperature1': '0', 'resistance1': '1000', 'temperature2': '80', 'resistance2': '1309'}, 'extruder': {'step_pin': '!EBBCan:gpio18', 'dir_pin': 'EBBCan:gpio19', 'enable_pin': '!EBBCan:gpio17', 'microsteps': '32', 'rotation_distance': '21.63024711', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'pressure_advance': '0.065', 'pressure_advance_smooth_time': '0.02', 'gear_ratio': '50:10', 'heater_pin': 'EBBCan:gpio7', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'EBBCan:gpio27', 'control': 'pid', 'pid_kp': '21.527', 'pid_ki': '1.063', 'pid_kd': '108.982', 'min_temp': '0', 'max_temp': '250'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan:gpio20', 'run_current': '0.5', 'stealthchop_threshold': '999999'}, 'filament_switch_sensor extruder': {'pause_on_runout': 'True', 'switch_pin': 'EBBCan:gpio21'}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu'}, 'thermistor chamber_temp': {'temperature1': '25', 'resistance1': '10000', 'beta': '3950'}, 'heater_bed': {'heater_pin': '!PA19', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PC13', 'control': 'watermark', 'min_temp': '0', 'max_temp': '120'}, 'heater_fan extruder_fan': {'pin': 'EBBCan:gpio13', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'EBBCan:gpio14', 'cycle_time': '.08', 'kick_start_time': '.25'}, 'probe': {'pin': '^EBBCan:gpio22', 'x_offset': '0', 'y_offset': '0', 'samples': '3', 'samples_result': 'median', 'sample_retract_dist': '3', 'samples_tolerance': '0.015', 'samples_tolerance_retries': '3', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'z_offset': '-1.350'}, 'homing_override': {'axes': 'z', 'set_position_z': '0', 'gcode': '\nstatus_homing\nG90\nG0 Z5 F500\nG28 X0 Y0\nG0 X150 Y100 F9000\nG28 Z0\nG0 Z5 F500\nstatus_ready'}, 'bed_mesh': {'speed': '150', 'horizontal_move_z': '5', 'mesh_min': '25,35.0', 'mesh_max': '225.0,220', 'probe_count': '6,6', 'algorithm': 'bicubic', 'fade_start': '1', 'fade_end': '10', 'fade_target': '0'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\nSTATUS_HEATING\nM109 S150\nSTATUS_HOMING\nM117 Homing...\nG28 Y0 X0 Z0\nSTATUS_MESHING\nBED_MESH_CALIBRATE ADAPTIVE=1\n\n\n\n\n\n\n\n\n\n\n\nSTATUS_HEATING\nM107\nM117 Heating bed\nM190 S{ params.BED }\nM117 Heating nozzle\nM109 S{target_extruder}\nstatus_ready\nG1 Z15.0 F600\nG1 X125 Y125 F3000\nG92 E0\nG1 F9000\nstatus_printing\nM117 Printing...'}, 'gcode_macro PRINT_END': {'gcode': '\nstatus_busy\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\n\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y} F3600\nM117 Finished!\nstatus_off'}, 'gcode_macro M600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state'}, 'printer': {'kinematics': 'corexz', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '5', 'max_z_accel': '100'}, 'force_move': {'enable_force_move': 'true'}, 'exclude_object': {}, 'bed_mesh default': {'version': '1', 'points': '\n-0.100000, -0.025000, 0.012500, 0.037500, 0.125000, 0.212500\n-0.187500, -0.100000, -0.025000, 0.025000, 0.100000, 0.212500\n-0.262500, -0.162500, -0.075000, -0.012500, 0.075000, 0.187500\n-0.262500, -0.162500, -0.087500, -0.000000, 0.100000, 0.237500\n-0.200000, -0.100000, -0.012500, 0.062500, 0.200000, 0.350000\n-0.225000, -0.075000, -0.000000, 0.087500, 0.225000, 0.387500', 'x_count': '6', 'y_count': '6', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'bicubic', 'tension': '0.2', 'min_x': '25.0', 'max_x': '225.0', 'min_y': '35.0', 'max_y': '220.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_sam4e8e_00313753364B37373032303038303139-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu ebbcan': {'canbus_uuid': '8250861450f7', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set allow_park = client.park_at_cancel | default(false) | lower == \'true\' %}\n{% set retract = client.cancel_retract | default(5.0) | abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x | default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y | default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x | length > 0 or park_y | length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro | default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set idle_timeout = client.idle_timeout | default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE | default(1) | int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro | default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move | default(velocity) %}\n{% set runout_resume = True if client.runout_sensor | default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state | upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro | default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY | default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'neopixel sb_leds': {'pin': 'EBBCan:gpio16', 'chain_count': 3, 'color_order': ['GRB'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'led_effect sb_logo_busy': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1,0,0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_cleaning': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.02, 0.5)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_calibrating_z': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 0.35)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1, 0.18, 0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0, 0, 1)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_homing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.6, 0.2)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_leveling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.5, 0.1, 0.4)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_meshing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.2, 1.0, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_printing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.3, 0.3, 0.0),(0.3, 0.1, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_standby': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.01, 0.01, 0.01)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 1.0, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_nozzle_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1.0, 0.18, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 1.0, 0.1)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_standby': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.6, 0.0, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.6, 1.0, 0.0, 0.1)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_critical_error': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': True, 'endstops': '', 'layers': '\nstrobe         1  1.5   add        (1.0,  1.0, 1.0)\nbreathing      2  0     difference (0.95, 0.0, 0.0)\nstatic         1  0     top        (1.0,  0.0, 0.0)', 'leds': '\nneopixel:sb_leds'}, 'led_effect rainbow': {'frame_rate': 24.0, 'autostart': True, 'run_on_error': False, 'endstops': '', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.0, 0.3, 0.0),(0.0, 0.0, 0.3)', 'leds': '\nneopixel:sb_leds'}, 'led_effect set_nozzle_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic         0  0     top        (0.5,  0.5, 0.5)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect set_logo_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic         0  0     top        (1.0,  1.0, 1.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'gcode_macro set_logo_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nSTOP_LED_EFFECTS', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=rainbow', 'description': 'G-Code macro'}, 'gcode_macro status_part_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_busy\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_heating\nSET_LED_EFFECT EFFECT=sb_nozzle_heating', 'description': 'G-Code macro'}, 'gcode_macro status_cooling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cooling\nSET_LED_EFFECT EFFECT=sb_nozzle_cooling', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_leveling\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_homing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cleaning\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_meshing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_calibrating_z\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_printing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'adxl345': {'axes_map': ['z', '-y', 'x'], 'rate': 3200, 'cs_pin': 'EBBCan:gpio1', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'EBBCan:gpio2', 'spi_software_miso_pin': 'EBBCan:gpio3', 'spi_software_mosi_pin': 'EBBCan:gpio0'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[100.0, 100.0, 20.0]], 'accel_chip': 'adxl345'}, 'input_shaper': {'shaper_type': '3hump_ei', 'shaper_type_x': '3hump_ei', 'damping_ratio_x': 0.1, 'shaper_freq_x': 45.0, 'shaper_type_y': '3hump_ei', 'damping_ratio_y': 0.1, 'shaper_freq_y': 0.0}, 'tmc2660 stepper_x': {'cs_pin': 'PD14', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PD6', 'dir_pin': '!PD11', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'EBBCan:gpio24', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2660 stepper_y': {'cs_pin': 'PC9', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PD7', 'dir_pin': '!PD12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'PA2', 'position_endstop': 0.0, 'position_min': -4.0, 'position_max': 225.0, 'homing_speed': 35.0, 'second_homing_speed': 17.5, 'homing_retract_speed': 35.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2660 stepper_z': {'cs_pin': 'PC10', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PD8', 'dir_pin': '!PD13', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -2.5, 'position_max': 230.0, 'homing_speed': 35.0, 'second_homing_speed': 17.5, 'homing_retract_speed': 35.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'adc_temperature my_thermistor': {'resistance1': 1000.0, 'temperature1': 0.0, 'temperature2': 80.0, 'resistance2': 1309.0}, 'tmc2209 extruder': {'uart_pin': 'EBBCan:gpio20', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan:gpio27', 'min_temp': 0.0, 'max_temp': 250.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 21.527, 'pid_ki': 1.063, 'pid_kd': 108.982, 'heater_pin': 'EBBCan:gpio7', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': '!EBBCan:gpio18', 'pressure_advance': 0.065, 'pressure_advance_smooth_time': 0.02, 'dir_pin': 'EBBCan:gpio19', 'rotation_distance': 21.63024711, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!EBBCan:gpio17'}, 'filament_switch_sensor extruder': {'switch_pin': 'EBBCan:gpio21', 'pause_on_runout': True, 'runout_gcode': '', 'pause_delay': 0.5, 'event_delay': 3.0}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'thermistor chamber_temp': {'temperature1': 25.0, 'resistance1': 10000.0, 'beta': 3950.0}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PC13', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'watermark', 'max_delta': 2.0, 'heater_pin': '!PA19', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan extruder_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'EBBCan:gpio13', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.25, 'off_below': 0.0, 'cycle_time': 0.08, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'EBBCan:gpio14'}, 'probe': {'z_offset': -1.35, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': '^EBBCan:gpio22', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 3, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.015, 'samples_tolerance_retries': 3}, 'homing_override': {'set_position_z': 0.0, 'axes': 'z', 'gcode': '\nstatus_homing\nG90\nG0 Z5 F500\nG28 X0 Y0\nG0 X150 Y100 F9000\nG28 Z0\nG0 Z5 F500\nstatus_ready'}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [6, 6], 'mesh_min': [25.0, 35.0], 'mesh_max': [225.0, 220.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 150.0, 'fade_start': 1.0, 'fade_end': 10.0, 'fade_target': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[-0.1, -0.025, 0.0125, 0.0375, 0.125, 0.2125], [-0.1875, -0.1, -0.025, 0.025, 0.1, 0.2125], [-0.2625, -0.1625, -0.075, -0.0125, 0.075, 0.1875], [-0.2625, -0.1625, -0.0875, -0.0, 0.1, 0.2375], [-0.2, -0.1, -0.0125, 0.0625, 0.2, 0.35], [-0.225, -0.075, -0.0, 0.0875, 0.225, 0.3875]], 'min_x': 25.0, 'max_x': 225.0, 'min_y': 35.0, 'max_y': 220.0, 'x_count': 6, 'y_count': 6, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'bicubic', 'tension': 0.2}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\nSTATUS_HEATING\nM109 S150\nSTATUS_HOMING\nM117 Homing...\nG28 Y0 X0 Z0\nSTATUS_MESHING\nBED_MESH_CALIBRATE ADAPTIVE=1\n\n\n\n\n\n\n\n\n\n\n\nSTATUS_HEATING\nM107\nM117 Heating bed\nM190 S{ params.BED }\nM117 Heating nozzle\nM109 S{target_extruder}\nstatus_ready\nG1 Z15.0 F600\nG1 X125 Y125 F3000\nG92 E0\nG1 F9000\nstatus_printing\nM117 Printing...', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\nstatus_busy\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\n\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y} F3600\nM117 Finished!\nstatus_off', 'description': 'G-Code macro'}, 'gcode_macro m600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state', 'description': 'G-Code macro'}, 'force_move': {'enable_force_move': True}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexz', 'max_z_velocity': 5.0, 'max_z_accel': 100.0}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-04-27 23:15:42,256 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-04-27 23:15:42,258 [printer.py:reinit()] - Klipper version: v0.12.0-132-ge37b007f-dirty
2024-04-27 23:15:42,258 [printer.py:reinit()] - # Extruders: 1
2024-04-27 23:15:42,258 [printer.py:reinit()] - # Temperature devices: 2
2024-04-27 23:15:42,258 [printer.py:reinit()] - # Fans: 2
2024-04-27 23:15:42,258 [printer.py:reinit()] - # Output pins: 0
2024-04-27 23:15:42,258 [printer.py:reinit()] - # Leds: 20
2024-04-27 23:15:42,259 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-04-27 23:15:42,277 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-04-27 23:15:42,279 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor mcu&fan&heater_fan extruder_fan&filament_switch_sensor extruder&neopixel sb_leds
2024-04-27 23:15:42,560 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-04-27 23:15:42,560 [screen.py:init_klipper()] - Printer initialized
2024-04-27 23:15:42,560 [printer.py:change_state()] - Changing state from 'disconnected' to 'printing'
2024-04-27 23:15:42,561 [printer.py:change_state()] - Adding callback for state: printing
2024-04-27 23:15:42,690 [screen.py:_load_panel()] - Loading panel: job_status
2024-04-27 23:15:42,885 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-04-27 23:15:42,894 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-04-27 23:15:42,919 [job_status.py:update_file_metadata()] - Cannot find file metadata. Listening for updated metadata
2024-04-27 23:15:42,921 [job_status.py:show_file_thumbnail()] - tfic-angled-honeycomb_0.2mm_PLA_MK3S_5h2m.gcode
2024-04-27 23:15:42,921 [job_status.py:show_file_thumbnail()] - no pixbuf
2024-04-27 23:15:42,940 [job_status.py:update_file_metadata()] - Update Metadata. File: tfic-angled-honeycomb_0.2mm_PLA_MK3S_5h2m.gcode Size: 15746614
2024-04-27 23:15:42,947 [job_status.py:show_file_thumbnail()] - tfic-angled-honeycomb_0.2mm_PLA_MK3S_5h2m.gcode
2024-04-28 00:15:42,024 [screen.py:show_screensaver()] - Showing Screensaver
2024-04-28 00:16:58,191 [printer.py:change_state()] - Changing state from 'printing' to 'paused'
2024-04-28 00:16:58,192 [printer.py:change_state()] - Adding callback for state: paused
2024-04-28 00:16:58,197 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'paused'
2024-04-28 00:16:58,201 [screen.py:close_screensaver()] - Closing Screensaver
2024-04-28 00:16:58,261 [screen.py:show_panel()] - Reinitializing panel
2024-04-28 00:16:58,463 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-04-28 00:16:58,473 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'paused'
2024-04-28 00:16:58,491 [job_status.py:update_file_metadata()] - Update Metadata. File: tfic-angled-honeycomb_0.2mm_PLA_MK3S_5h2m.gcode Size: 15746614
2024-04-28 00:16:58,497 [job_status.py:show_file_thumbnail()] - tfic-angled-honeycomb_0.2mm_PLA_MK3S_5h2m.gcode
2024-04-28 00:16:58,505 [screen.py:_load_panel()] - Loading panel: extrude
2024-04-28 00:16:58,623 [screen.py:attach_panel()] - Current panel hierarchy: job_status > extrude
2024-04-28 00:16:58,626 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: SET_FILAMENT_SENSOR SENSOR=extruder ENABLE=1
2024-04-28 00:16:58,628 [extrude.py:process_update()] - filament_switch_sensor extruder: {'filament_detected': False, 'enabled': True}
2024-04-28 00:35:20,281 [functions.py:log_start()] - --------------------KlipperScreen Log Start--------------------
2024-04-28 00:35:20,281 [functions.py:log_start()] - KlipperScreen Version: v0.3.9-50-gdaed9a0
2024-04-28 00:35:20,281 [functions.py:log_start()] - Python version: 3.11
2024-04-28 00:35:20,419 [config.py:get_config_file_location()] - Passed config (-c): .
2024-04-28 00:35:20,419 [config.py:__init__()] - Config path location: /home/pi/printer_data/config/KlipperScreen.conf
2024-04-28 00:35:20,444 [config.py:log_config()] -  ===== Config File =====

=======================
2024-04-28 00:35:20,446 [config.py:__init__()] - ====== Saved Def ======

[main]
use_dpms = False
print_sort_dir = date_desc

=======================
2024-04-28 00:35:20,447 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2024-04-28 00:35:20,554 [config.py:create_translations()] - Selected lang: None OS lang: en_GB
2024-04-28 00:35:20,555 [config.py:install_language()] - Using lang en
2024-04-28 00:35:20,574 [screen.py:__init__()] - Monitors: 1 using number: 0
2024-04-28 00:35:20,575 [screen.py:__init__()] - Wayland: False Display name: :100
2024-04-28 00:35:20,578 [screen.py:__init__()] - Screen resolution: 984x540
2024-04-28 00:35:20,579 [KlippyGtk.py:__init__()] - Font size: 18.6 (medium)
2024-04-28 00:35:21,499 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2024-04-28 00:35:21,499 [screen.py:set_screenblanking_timeout()] - Not using DPMS
2024-04-28 00:35:21,507 [screen.py:initial_connection()] - Default printer: None
2024-04-28 00:35:21,574 [screen.py:connect_printer()] - Connecting to printer: Printer
2024-04-28 00:35:21,574 [screen.py:_load_panel()] - Loading panel: splash_screen
2024-04-28 00:35:21,641 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-04-28 00:35:21,658 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-04-28 00:35:21,658 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-28 00:35:21,676 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/access/oneshot_token
2024-04-28 00:35:21,688 [KlippyWebsocket.py:connect()] - Starting websocket thread
2024-04-28 00:35:21,696 [_logging.py:info()] - Websocket connected
2024-04-28 00:35:21,697 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2024-04-28 00:35:21,749 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-28 00:35:21,761 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-04-28 00:35:21,772 [printer.py:configure_cameras()] - Cameras: []
2024-04-28 00:35:21,773 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'ready', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'octoprint_compat', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 3, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-04-28 00:35:21,773 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-04-28 00:35:21,786 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-04-28 00:35:21,975 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set allow_park = client.park_at_cancel | default(false) | lower == \'true\' %}\n{% set retract = client.cancel_retract | default(5.0) | abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x | default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y | default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x | length > 0 or park_y | length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro | default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set idle_timeout = client.idle_timeout | default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE | default(1) | int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro | default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move | default(velocity) %}\n{% set runout_resume = True if client.runout_sensor | default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state | upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro | default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY | default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}"}, 'neopixel sb_leds': {'pin': 'EBBCan:gpio16', 'chain_count': '3', 'color_order': 'GRB', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0'}, 'led_effect sb_logo_busy': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (1,0,0)'}, 'led_effect sb_logo_cleaning': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.02, 0.5)'}, 'led_effect sb_logo_calibrating_z': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 0.35)'}, 'led_effect sb_logo_heating': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nbreathing  3 1 top (1, 0.18, 0)'}, 'led_effect sb_logo_cooling': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nbreathing  3 1 top (0, 0, 1)'}, 'led_effect sb_logo_homing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.6, 0.2)'}, 'led_effect sb_logo_leveling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.5, 0.1, 0.4)'}, 'led_effect sb_logo_meshing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.2, 1.0, 0.0)'}, 'led_effect sb_logo_printing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.3, 0.3, 0.0),(0.3, 0.1, 0.0)'}, 'led_effect sb_logo_standby': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.01, 0.01, 0.01)'}, 'led_effect sb_logo_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 1.0, 0.0)'}, 'led_effect sb_nozzle_heating': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (1.0, 0.18, 0.0, 0.0)'}, 'led_effect sb_nozzle_cooling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 1.0, 0.1)'}, 'led_effect sb_nozzle_standby': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.6, 0.0, 0.0, 0.0)'}, 'led_effect sb_nozzle_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.6, 1.0, 0.0, 0.1)'}, 'led_effect sb_critical_error': {'leds': '\nneopixel:sb_leds', 'layers': '\nstrobe         1  1.5   add        (1.0,  1.0, 1.0)\nbreathing      2  0     difference (0.95, 0.0, 0.0)\nstatic         1  0     top        (1.0,  0.0, 0.0)', 'autostart': 'false', 'frame_rate': '24', 'run_on_error': 'true'}, 'led_effect rainbow': {'leds': '\nneopixel:sb_leds', 'autostart': 'true', 'frame_rate': '24', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.0, 0.3, 0.0),(0.0, 0.0, 0.3)'}, 'led_effect set_nozzle_leds': {'leds': '\nneopixel:sb_leds (2,3)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nstatic         0  0     top        (0.5,  0.5, 0.5)'}, 'led_effect set_logo_leds': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nstatic         0  0     top        (1.0,  1.0, 1.0)'}, 'gcode_macro set_logo_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds STOP=1'}, 'gcode_macro set_logo_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1'}, 'gcode_macro status_off': {'gcode': '\nSTOP_LED_EFFECTS'}, 'gcode_macro status_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=rainbow'}, 'gcode_macro status_part_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready'}, 'gcode_macro status_busy': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_busy\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_heating\nSET_LED_EFFECT EFFECT=sb_nozzle_heating'}, 'gcode_macro status_cooling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cooling\nSET_LED_EFFECT EFFECT=sb_nozzle_cooling'}, 'gcode_macro status_leveling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_leveling\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_homing\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cleaning\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_meshing\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_calibrating_z\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_printing\nset_nozzle_leds_on'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_sam4e8e_00313753364B37373032303038303139-if00'}, 'mcu EBBCan': {'canbus_uuid': '8250861450f7'}, 'adxl345': {'cs_pin': 'EBBCan:gpio1', 'spi_software_sclk_pin': 'EBBCan:gpio2', 'spi_software_mosi_pin': 'EBBCan:gpio0', 'spi_software_miso_pin': 'EBBCan:gpio3', 'axes_map': 'z,-y,x'}, 'resonance_tester': {'probe_points': '100, 100, 20', 'accel_chip': 'adxl345'}, 'input_shaper': {'shaper_freq_x': '45', 'shaper_type': '3hump_ei'}, 'stepper_x': {'step_pin': 'PD6', 'dir_pin': '!PD11', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'EBBCan:gpio24', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '40'}, 'tmc2660 stepper_x': {'cs_pin': 'PD14', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'stepper_y': {'step_pin': 'PD7', 'dir_pin': '!PD12', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'PA2', 'position_endstop': '0', 'position_max': '225', 'position_min': '-4', 'homing_speed': '35', 'homing_retract_dist': '0'}, 'tmc2660 stepper_y': {'cs_pin': 'PC9', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'stepper_z': {'step_pin': 'PD8', 'dir_pin': '!PD13', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '230', 'position_min': '-2.5', 'homing_speed': '35.0'}, 'tmc2660 stepper_z': {'cs_pin': 'PC10', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'adc_temperature my_thermistor': {'temperature1': '0', 'resistance1': '1000', 'temperature2': '80', 'resistance2': '1309'}, 'extruder': {'step_pin': '!EBBCan:gpio18', 'dir_pin': 'EBBCan:gpio19', 'enable_pin': '!EBBCan:gpio17', 'microsteps': '32', 'rotation_distance': '21.63024711', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'pressure_advance': '0.065', 'pressure_advance_smooth_time': '0.02', 'gear_ratio': '50:10', 'heater_pin': 'EBBCan:gpio7', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'EBBCan:gpio27', 'control': 'pid', 'pid_kp': '21.527', 'pid_ki': '1.063', 'pid_kd': '108.982', 'min_temp': '0', 'max_temp': '250'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan:gpio20', 'run_current': '0.5', 'stealthchop_threshold': '999999'}, 'filament_switch_sensor extruder': {'pause_on_runout': 'True', 'switch_pin': 'EBBCan:gpio21'}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu'}, 'thermistor chamber_temp': {'temperature1': '25', 'resistance1': '10000', 'beta': '3950'}, 'heater_bed': {'heater_pin': '!PA19', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PC13', 'control': 'watermark', 'min_temp': '0', 'max_temp': '120'}, 'heater_fan extruder_fan': {'pin': 'EBBCan:gpio13', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'EBBCan:gpio14', 'cycle_time': '.08', 'kick_start_time': '.25'}, 'probe': {'pin': '^EBBCan:gpio22', 'x_offset': '0', 'y_offset': '0', 'samples': '3', 'samples_result': 'median', 'sample_retract_dist': '3', 'samples_tolerance': '0.015', 'samples_tolerance_retries': '3', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'z_offset': '-1.350'}, 'homing_override': {'axes': 'z', 'set_position_z': '0', 'gcode': '\nstatus_homing\nG90\nG0 Z5 F500\nG28 X0 Y0\nG0 X150 Y100 F9000\nG28 Z0\nG0 Z5 F500\nstatus_ready'}, 'bed_mesh': {'speed': '150', 'horizontal_move_z': '5', 'mesh_min': '25,35.0', 'mesh_max': '225.0,220', 'probe_count': '6,6', 'algorithm': 'bicubic', 'fade_start': '1', 'fade_end': '10', 'fade_target': '0'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\nSTATUS_HEATING\nM109 S150\nSTATUS_HOMING\nM117 Homing...\nG28 Y0 X0 Z0\nSTATUS_MESHING\nBED_MESH_CALIBRATE ADAPTIVE=1\n\n\n\n\n\n\n\n\n\n\n\nSTATUS_HEATING\nM107\nM117 Heating bed\nM190 S{ params.BED }\nM117 Heating nozzle\nM109 S{target_extruder}\nstatus_ready\nG1 Z15.0 F600\nG1 X125 Y125 F3000\nG92 E0\nG1 F9000\nstatus_printing\nM117 Printing...'}, 'gcode_macro PRINT_END': {'gcode': '\nstatus_busy\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\n\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y} F3600\nM117 Finished!\nstatus_off'}, 'gcode_macro M600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state'}, 'printer': {'kinematics': 'corexz', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '5', 'max_z_accel': '100'}, 'force_move': {'enable_force_move': 'true'}, 'exclude_object': {}, 'bed_mesh default': {'version': '1', 'points': '\n-0.100000, -0.025000, 0.012500, 0.037500, 0.125000, 0.212500\n-0.187500, -0.100000, -0.025000, 0.025000, 0.100000, 0.212500\n-0.262500, -0.162500, -0.075000, -0.012500, 0.075000, 0.187500\n-0.262500, -0.162500, -0.087500, -0.000000, 0.100000, 0.237500\n-0.200000, -0.100000, -0.012500, 0.062500, 0.200000, 0.350000\n-0.225000, -0.075000, -0.000000, 0.087500, 0.225000, 0.387500', 'x_count': '6', 'y_count': '6', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'bicubic', 'tension': '0.2', 'min_x': '25.0', 'max_x': '225.0', 'min_y': '35.0', 'max_y': '220.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_sam4e8e_00313753364B37373032303038303139-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu ebbcan': {'canbus_uuid': '8250861450f7', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set allow_park = client.park_at_cancel | default(false) | lower == \'true\' %}\n{% set retract = client.cancel_retract | default(5.0) | abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x | default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y | default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x | length > 0 or park_y | length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro | default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set idle_timeout = client.idle_timeout | default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE | default(1) | int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro | default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move | default(velocity) %}\n{% set runout_resume = True if client.runout_sensor | default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state | upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro | default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY | default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'neopixel sb_leds': {'pin': 'EBBCan:gpio16', 'chain_count': 3, 'color_order': ['GRB'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'led_effect sb_logo_busy': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1,0,0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_cleaning': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.02, 0.5)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_calibrating_z': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 0.35)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1, 0.18, 0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0, 0, 1)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_homing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.6, 0.2)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_leveling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.5, 0.1, 0.4)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_meshing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.2, 1.0, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_printing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.3, 0.3, 0.0),(0.3, 0.1, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_standby': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.01, 0.01, 0.01)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 1.0, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_nozzle_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1.0, 0.18, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 1.0, 0.1)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_standby': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.6, 0.0, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.6, 1.0, 0.0, 0.1)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_critical_error': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': True, 'endstops': '', 'layers': '\nstrobe         1  1.5   add        (1.0,  1.0, 1.0)\nbreathing      2  0     difference (0.95, 0.0, 0.0)\nstatic         1  0     top        (1.0,  0.0, 0.0)', 'leds': '\nneopixel:sb_leds'}, 'led_effect rainbow': {'frame_rate': 24.0, 'autostart': True, 'run_on_error': False, 'endstops': '', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.0, 0.3, 0.0),(0.0, 0.0, 0.3)', 'leds': '\nneopixel:sb_leds'}, 'led_effect set_nozzle_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic         0  0     top        (0.5,  0.5, 0.5)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect set_logo_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic         0  0     top        (1.0,  1.0, 1.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'gcode_macro set_logo_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nSTOP_LED_EFFECTS', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=rainbow', 'description': 'G-Code macro'}, 'gcode_macro status_part_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_busy\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_heating\nSET_LED_EFFECT EFFECT=sb_nozzle_heating', 'description': 'G-Code macro'}, 'gcode_macro status_cooling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cooling\nSET_LED_EFFECT EFFECT=sb_nozzle_cooling', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_leveling\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_homing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cleaning\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_meshing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_calibrating_z\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_printing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'adxl345': {'axes_map': ['z', '-y', 'x'], 'rate': 3200, 'cs_pin': 'EBBCan:gpio1', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'EBBCan:gpio2', 'spi_software_miso_pin': 'EBBCan:gpio3', 'spi_software_mosi_pin': 'EBBCan:gpio0'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[100.0, 100.0, 20.0]], 'accel_chip': 'adxl345'}, 'input_shaper': {'shaper_type': '3hump_ei', 'shaper_type_x': '3hump_ei', 'damping_ratio_x': 0.1, 'shaper_freq_x': 45.0, 'shaper_type_y': '3hump_ei', 'damping_ratio_y': 0.1, 'shaper_freq_y': 0.0}, 'tmc2660 stepper_x': {'cs_pin': 'PD14', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PD6', 'dir_pin': '!PD11', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'EBBCan:gpio24', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2660 stepper_y': {'cs_pin': 'PC9', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PD7', 'dir_pin': '!PD12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'PA2', 'position_endstop': 0.0, 'position_min': -4.0, 'position_max': 225.0, 'homing_speed': 35.0, 'second_homing_speed': 17.5, 'homing_retract_speed': 35.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2660 stepper_z': {'cs_pin': 'PC10', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PD8', 'dir_pin': '!PD13', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -2.5, 'position_max': 230.0, 'homing_speed': 35.0, 'second_homing_speed': 17.5, 'homing_retract_speed': 35.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'adc_temperature my_thermistor': {'resistance1': 1000.0, 'temperature1': 0.0, 'temperature2': 80.0, 'resistance2': 1309.0}, 'tmc2209 extruder': {'uart_pin': 'EBBCan:gpio20', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan:gpio27', 'min_temp': 0.0, 'max_temp': 250.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 21.527, 'pid_ki': 1.063, 'pid_kd': 108.982, 'heater_pin': 'EBBCan:gpio7', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': '!EBBCan:gpio18', 'pressure_advance': 0.065, 'pressure_advance_smooth_time': 0.02, 'dir_pin': 'EBBCan:gpio19', 'rotation_distance': 21.63024711, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!EBBCan:gpio17'}, 'filament_switch_sensor extruder': {'switch_pin': 'EBBCan:gpio21', 'pause_on_runout': True, 'runout_gcode': '', 'pause_delay': 0.5, 'event_delay': 3.0}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'thermistor chamber_temp': {'temperature1': 25.0, 'resistance1': 10000.0, 'beta': 3950.0}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PC13', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'watermark', 'max_delta': 2.0, 'heater_pin': '!PA19', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan extruder_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'EBBCan:gpio13', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.25, 'off_below': 0.0, 'cycle_time': 0.08, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'EBBCan:gpio14'}, 'probe': {'z_offset': -1.35, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': '^EBBCan:gpio22', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 3, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.015, 'samples_tolerance_retries': 3}, 'homing_override': {'set_position_z': 0.0, 'axes': 'z', 'gcode': '\nstatus_homing\nG90\nG0 Z5 F500\nG28 X0 Y0\nG0 X150 Y100 F9000\nG28 Z0\nG0 Z5 F500\nstatus_ready'}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [6, 6], 'mesh_min': [25.0, 35.0], 'mesh_max': [225.0, 220.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 150.0, 'fade_start': 1.0, 'fade_end': 10.0, 'fade_target': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[-0.1, -0.025, 0.0125, 0.0375, 0.125, 0.2125], [-0.1875, -0.1, -0.025, 0.025, 0.1, 0.2125], [-0.2625, -0.1625, -0.075, -0.0125, 0.075, 0.1875], [-0.2625, -0.1625, -0.0875, -0.0, 0.1, 0.2375], [-0.2, -0.1, -0.0125, 0.0625, 0.2, 0.35], [-0.225, -0.075, -0.0, 0.0875, 0.225, 0.3875]], 'min_x': 25.0, 'max_x': 225.0, 'min_y': 35.0, 'max_y': 220.0, 'x_count': 6, 'y_count': 6, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'bicubic', 'tension': 0.2}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\nSTATUS_HEATING\nM109 S150\nSTATUS_HOMING\nM117 Homing...\nG28 Y0 X0 Z0\nSTATUS_MESHING\nBED_MESH_CALIBRATE ADAPTIVE=1\n\n\n\n\n\n\n\n\n\n\n\nSTATUS_HEATING\nM107\nM117 Heating bed\nM190 S{ params.BED }\nM117 Heating nozzle\nM109 S{target_extruder}\nstatus_ready\nG1 Z15.0 F600\nG1 X125 Y125 F3000\nG92 E0\nG1 F9000\nstatus_printing\nM117 Printing...', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\nstatus_busy\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\n\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y} F3600\nM117 Finished!\nstatus_off', 'description': 'G-Code macro'}, 'gcode_macro m600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state', 'description': 'G-Code macro'}, 'force_move': {'enable_force_move': True}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexz', 'max_z_velocity': 5.0, 'max_z_accel': 100.0}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-04-28 00:35:21,979 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-04-28 00:35:21,980 [printer.py:reinit()] - Klipper version: v0.12.0-132-ge37b007f-dirty
2024-04-28 00:35:21,980 [printer.py:reinit()] - # Extruders: 1
2024-04-28 00:35:21,981 [printer.py:reinit()] - # Temperature devices: 2
2024-04-28 00:35:21,981 [printer.py:reinit()] - # Fans: 2
2024-04-28 00:35:21,981 [printer.py:reinit()] - # Output pins: 0
2024-04-28 00:35:21,981 [printer.py:reinit()] - # Leds: 20
2024-04-28 00:35:21,981 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-04-28 00:35:21,999 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-04-28 00:35:22,001 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor mcu&fan&heater_fan extruder_fan&filament_switch_sensor extruder&neopixel sb_leds
2024-04-28 00:35:22,290 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-04-28 00:35:22,290 [screen.py:init_klipper()] - Printer initialized
2024-04-28 00:35:22,290 [printer.py:change_state()] - Changing state from 'disconnected' to 'paused'
2024-04-28 00:35:22,291 [printer.py:change_state()] - Adding callback for state: paused
2024-04-28 00:35:22,394 [screen.py:_load_panel()] - Loading panel: job_status
2024-04-28 00:35:22,582 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-04-28 00:35:22,592 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'paused'
2024-04-28 00:35:22,616 [job_status.py:update_file_metadata()] - Cannot find file metadata. Listening for updated metadata
2024-04-28 00:35:22,618 [job_status.py:show_file_thumbnail()] - tfic-angled-honeycomb_0.2mm_PLA_MK3S_5h2m.gcode
2024-04-28 00:35:22,618 [job_status.py:show_file_thumbnail()] - no pixbuf
2024-04-28 00:35:22,628 [screen.py:_load_panel()] - Loading panel: extrude
2024-04-28 00:35:22,724 [screen.py:attach_panel()] - Current panel hierarchy: job_status > extrude
2024-04-28 00:35:22,727 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: SET_FILAMENT_SENSOR SENSOR=extruder ENABLE=1
2024-04-28 00:35:22,729 [extrude.py:process_update()] - filament_switch_sensor extruder: {'filament_detected': False, 'enabled': True}
2024-04-28 01:35:22,024 [screen.py:show_screensaver()] - Showing Screensaver
2024-04-28 03:36:20,982 [KlippyGtk.py:Dialog()] - Showing dialog Updating (width=984, height=540)
2024-04-28 03:36:45,131 [printer.py:change_state()] - Changing state from 'paused' to 'disconnected'
2024-04-28 03:36:45,131 [printer.py:change_state()] - Adding callback for state: disconnected
2024-04-28 03:36:45,453 [screen.py:state_disconnected()] - ### Going to disconnected
2024-04-28 03:36:45,453 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-04-28 03:36:45,453 [screen.py:close_screensaver()] - Closing Screensaver
2024-04-28 03:36:45,478 [screen.py:close_screensaver()] - Restoring Dialog <Gtk.Dialog object at 0x7fa64edd80 (GtkDialog at 0x221ad150)>
2024-04-28 03:36:45,481 [screen.py:show_panel()] - Reinitializing panel
2024-04-28 03:36:45,546 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-04-28 03:36:49,024 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-28 03:36:49,040 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-04-28 03:36:49,053 [printer.py:configure_cameras()] - Cameras: []
2024-04-28 03:36:49,054 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'octoprint_compat', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 3, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-04-28 03:36:49,054 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-04-28 03:36:49,420 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-04-28 03:36:49,487 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set allow_park = client.park_at_cancel | default(false) | lower == \'true\' %}\n{% set retract = client.cancel_retract | default(5.0) | abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x | default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y | default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x | length > 0 or park_y | length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro | default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set idle_timeout = client.idle_timeout | default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE | default(1) | int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro | default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move | default(velocity) %}\n{% set runout_resume = True if client.runout_sensor | default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state | upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro | default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY | default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}"}, 'neopixel sb_leds': {'pin': 'EBBCan:gpio16', 'chain_count': '3', 'color_order': 'GRB', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0'}, 'led_effect sb_logo_busy': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (1,0,0)'}, 'led_effect sb_logo_cleaning': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.02, 0.5)'}, 'led_effect sb_logo_calibrating_z': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 0.35)'}, 'led_effect sb_logo_heating': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nbreathing  3 1 top (1, 0.18, 0)'}, 'led_effect sb_logo_cooling': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nbreathing  3 1 top (0, 0, 1)'}, 'led_effect sb_logo_homing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.6, 0.2)'}, 'led_effect sb_logo_leveling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.5, 0.1, 0.4)'}, 'led_effect sb_logo_meshing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.2, 1.0, 0.0)'}, 'led_effect sb_logo_printing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.3, 0.3, 0.0),(0.3, 0.1, 0.0)'}, 'led_effect sb_logo_standby': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.01, 0.01, 0.01)'}, 'led_effect sb_logo_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 1.0, 0.0)'}, 'led_effect sb_nozzle_heating': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (1.0, 0.18, 0.0, 0.0)'}, 'led_effect sb_nozzle_cooling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 1.0, 0.1)'}, 'led_effect sb_nozzle_standby': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.6, 0.0, 0.0, 0.0)'}, 'led_effect sb_nozzle_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.6, 1.0, 0.0, 0.1)'}, 'led_effect sb_critical_error': {'leds': '\nneopixel:sb_leds', 'layers': '\nstrobe         1  1.5   add        (1.0,  1.0, 1.0)\nbreathing      2  0     difference (0.95, 0.0, 0.0)\nstatic         1  0     top        (1.0,  0.0, 0.0)', 'autostart': 'false', 'frame_rate': '24', 'run_on_error': 'true'}, 'led_effect rainbow': {'leds': '\nneopixel:sb_leds', 'autostart': 'true', 'frame_rate': '24', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.0, 0.3, 0.0),(0.0, 0.0, 0.3)'}, 'led_effect set_nozzle_leds': {'leds': '\nneopixel:sb_leds (2,3)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nstatic         0  0     top        (0.5,  0.5, 0.5)'}, 'led_effect set_logo_leds': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nstatic         0  0     top        (1.0,  1.0, 1.0)'}, 'gcode_macro set_logo_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds STOP=1'}, 'gcode_macro set_logo_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1'}, 'gcode_macro status_off': {'gcode': '\nSTOP_LED_EFFECTS'}, 'gcode_macro status_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=rainbow'}, 'gcode_macro status_part_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready'}, 'gcode_macro status_busy': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_busy\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_heating\nSET_LED_EFFECT EFFECT=sb_nozzle_heating'}, 'gcode_macro status_cooling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cooling\nSET_LED_EFFECT EFFECT=sb_nozzle_cooling'}, 'gcode_macro status_leveling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_leveling\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_homing\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cleaning\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_meshing\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_calibrating_z\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_printing\nset_nozzle_leds_on'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_sam4e8e_00313753364B37373032303038303139-if00'}, 'mcu EBBCan': {'canbus_uuid': '8250861450f7'}, 'adxl345': {'cs_pin': 'EBBCan:gpio1', 'spi_software_sclk_pin': 'EBBCan:gpio2', 'spi_software_mosi_pin': 'EBBCan:gpio0', 'spi_software_miso_pin': 'EBBCan:gpio3', 'axes_map': 'z,-y,x'}, 'resonance_tester': {'probe_points': '100, 100, 20', 'accel_chip': 'adxl345'}, 'input_shaper': {'shaper_freq_x': '45', 'shaper_type': '3hump_ei'}, 'stepper_x': {'step_pin': 'PD6', 'dir_pin': '!PD11', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'EBBCan:gpio24', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '40'}, 'tmc2660 stepper_x': {'cs_pin': 'PD14', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'stepper_y': {'step_pin': 'PD7', 'dir_pin': '!PD12', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'PA2', 'position_endstop': '0', 'position_max': '225', 'position_min': '-4', 'homing_speed': '35', 'homing_retract_dist': '0'}, 'tmc2660 stepper_y': {'cs_pin': 'PC9', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'stepper_z': {'step_pin': 'PD8', 'dir_pin': '!PD13', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '230', 'position_min': '-2.5', 'homing_speed': '35.0'}, 'tmc2660 stepper_z': {'cs_pin': 'PC10', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'adc_temperature my_thermistor': {'temperature1': '0', 'resistance1': '1000', 'temperature2': '80', 'resistance2': '1309'}, 'extruder': {'step_pin': '!EBBCan:gpio18', 'dir_pin': 'EBBCan:gpio19', 'enable_pin': '!EBBCan:gpio17', 'microsteps': '32', 'rotation_distance': '21.63024711', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'pressure_advance': '0.065', 'pressure_advance_smooth_time': '0.02', 'gear_ratio': '50:10', 'heater_pin': 'EBBCan:gpio7', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'EBBCan:gpio27', 'control': 'pid', 'pid_kp': '21.527', 'pid_ki': '1.063', 'pid_kd': '108.982', 'min_temp': '0', 'max_temp': '250'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan:gpio20', 'run_current': '0.5', 'stealthchop_threshold': '999999'}, 'filament_switch_sensor extruder': {'pause_on_runout': 'True', 'switch_pin': 'EBBCan:gpio21'}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu'}, 'thermistor chamber_temp': {'temperature1': '25', 'resistance1': '10000', 'beta': '3950'}, 'heater_bed': {'heater_pin': '!PA19', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PC13', 'control': 'watermark', 'min_temp': '0', 'max_temp': '120'}, 'heater_fan extruder_fan': {'pin': 'EBBCan:gpio13', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'EBBCan:gpio14', 'cycle_time': '.08', 'kick_start_time': '.25'}, 'probe': {'pin': '^EBBCan:gpio22', 'x_offset': '0', 'y_offset': '0', 'samples': '3', 'samples_result': 'median', 'sample_retract_dist': '3', 'samples_tolerance': '0.015', 'samples_tolerance_retries': '3', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'z_offset': '-1.350'}, 'homing_override': {'axes': 'z', 'set_position_z': '0', 'gcode': '\nstatus_homing\nG90\nG0 Z5 F500\nG28 X0 Y0\nG0 X150 Y100 F9000\nG28 Z0\nG0 Z5 F500\nstatus_ready'}, 'bed_mesh': {'speed': '150', 'horizontal_move_z': '5', 'mesh_min': '25,35.0', 'mesh_max': '225.0,220', 'probe_count': '6,6', 'algorithm': 'bicubic', 'fade_start': '1', 'fade_end': '10', 'fade_target': '0'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\nSTATUS_HEATING\nM109 S150\nSTATUS_HOMING\nM117 Homing...\nG28 Y0 X0 Z0\nSTATUS_MESHING\nBED_MESH_CALIBRATE ADAPTIVE=1\n\n\n\n\n\n\n\n\n\n\n\nSTATUS_HEATING\nM107\nM117 Heating bed\nM190 S{ params.BED }\nM117 Heating nozzle\nM109 S{target_extruder}\nstatus_ready\nG1 Z15.0 F600\nG1 X125 Y125 F3000\nG92 E0\nG1 F9000\nstatus_printing\nM117 Printing...'}, 'gcode_macro PRINT_END': {'gcode': '\nstatus_busy\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\n\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y} F3600\nM117 Finished!\nstatus_off'}, 'gcode_macro M600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state'}, 'printer': {'kinematics': 'corexz', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '5', 'max_z_accel': '100'}, 'force_move': {'enable_force_move': 'true'}, 'exclude_object': {}, 'bed_mesh default': {'version': '1', 'points': '\n-0.100000, -0.025000, 0.012500, 0.037500, 0.125000, 0.212500\n-0.187500, -0.100000, -0.025000, 0.025000, 0.100000, 0.212500\n-0.262500, -0.162500, -0.075000, -0.012500, 0.075000, 0.187500\n-0.262500, -0.162500, -0.087500, -0.000000, 0.100000, 0.237500\n-0.200000, -0.100000, -0.012500, 0.062500, 0.200000, 0.350000\n-0.225000, -0.075000, -0.000000, 0.087500, 0.225000, 0.387500', 'x_count': '6', 'y_count': '6', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'bicubic', 'tension': '0.2', 'min_x': '25.0', 'max_x': '225.0', 'min_y': '35.0', 'max_y': '220.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_sam4e8e_00313753364B37373032303038303139-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu ebbcan': {'canbus_uuid': '8250861450f7', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set allow_park = client.park_at_cancel | default(false) | lower == \'true\' %}\n{% set retract = client.cancel_retract | default(5.0) | abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x | default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y | default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x | length > 0 or park_y | length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro | default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set idle_timeout = client.idle_timeout | default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE | default(1) | int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro | default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move | default(velocity) %}\n{% set runout_resume = True if client.runout_sensor | default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state | upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro | default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY | default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'neopixel sb_leds': {'pin': 'EBBCan:gpio16', 'chain_count': 3, 'color_order': ['GRB'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'led_effect sb_logo_busy': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1,0,0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_cleaning': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.02, 0.5)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_calibrating_z': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 0.35)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1, 0.18, 0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0, 0, 1)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_homing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.6, 0.2)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_leveling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.5, 0.1, 0.4)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_meshing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.2, 1.0, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_printing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.3, 0.3, 0.0),(0.3, 0.1, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_standby': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.01, 0.01, 0.01)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 1.0, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_nozzle_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1.0, 0.18, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 1.0, 0.1)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_standby': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.6, 0.0, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.6, 1.0, 0.0, 0.1)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_critical_error': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': True, 'endstops': '', 'layers': '\nstrobe         1  1.5   add        (1.0,  1.0, 1.0)\nbreathing      2  0     difference (0.95, 0.0, 0.0)\nstatic         1  0     top        (1.0,  0.0, 0.0)', 'leds': '\nneopixel:sb_leds'}, 'led_effect rainbow': {'frame_rate': 24.0, 'autostart': True, 'run_on_error': False, 'endstops': '', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.0, 0.3, 0.0),(0.0, 0.0, 0.3)', 'leds': '\nneopixel:sb_leds'}, 'led_effect set_nozzle_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic         0  0     top        (0.5,  0.5, 0.5)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect set_logo_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic         0  0     top        (1.0,  1.0, 1.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'gcode_macro set_logo_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nSTOP_LED_EFFECTS', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=rainbow', 'description': 'G-Code macro'}, 'gcode_macro status_part_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_busy\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_heating\nSET_LED_EFFECT EFFECT=sb_nozzle_heating', 'description': 'G-Code macro'}, 'gcode_macro status_cooling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cooling\nSET_LED_EFFECT EFFECT=sb_nozzle_cooling', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_leveling\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_homing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cleaning\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_meshing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_calibrating_z\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_printing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'adxl345': {'axes_map': ['z', '-y', 'x'], 'rate': 3200, 'cs_pin': 'EBBCan:gpio1', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'EBBCan:gpio2', 'spi_software_miso_pin': 'EBBCan:gpio3', 'spi_software_mosi_pin': 'EBBCan:gpio0'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[100.0, 100.0, 20.0]], 'accel_chip': 'adxl345'}, 'input_shaper': {'shaper_type': '3hump_ei', 'shaper_type_x': '3hump_ei', 'damping_ratio_x': 0.1, 'shaper_freq_x': 45.0, 'shaper_type_y': '3hump_ei', 'damping_ratio_y': 0.1, 'shaper_freq_y': 0.0}, 'tmc2660 stepper_x': {'cs_pin': 'PD14', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PD6', 'dir_pin': '!PD11', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'EBBCan:gpio24', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2660 stepper_y': {'cs_pin': 'PC9', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PD7', 'dir_pin': '!PD12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'PA2', 'position_endstop': 0.0, 'position_min': -4.0, 'position_max': 225.0, 'homing_speed': 35.0, 'second_homing_speed': 17.5, 'homing_retract_speed': 35.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2660 stepper_z': {'cs_pin': 'PC10', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PD8', 'dir_pin': '!PD13', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -2.5, 'position_max': 230.0, 'homing_speed': 35.0, 'second_homing_speed': 17.5, 'homing_retract_speed': 35.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'adc_temperature my_thermistor': {'resistance1': 1000.0, 'temperature1': 0.0, 'temperature2': 80.0, 'resistance2': 1309.0}, 'tmc2209 extruder': {'uart_pin': 'EBBCan:gpio20', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan:gpio27', 'min_temp': 0.0, 'max_temp': 250.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 21.527, 'pid_ki': 1.063, 'pid_kd': 108.982, 'heater_pin': 'EBBCan:gpio7', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': '!EBBCan:gpio18', 'pressure_advance': 0.065, 'pressure_advance_smooth_time': 0.02, 'dir_pin': 'EBBCan:gpio19', 'rotation_distance': 21.63024711, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!EBBCan:gpio17'}, 'filament_switch_sensor extruder': {'switch_pin': 'EBBCan:gpio21', 'pause_on_runout': True, 'runout_gcode': '', 'pause_delay': 0.5, 'event_delay': 3.0}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'thermistor chamber_temp': {'temperature1': 25.0, 'resistance1': 10000.0, 'beta': 3950.0}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PC13', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'watermark', 'max_delta': 2.0, 'heater_pin': '!PA19', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan extruder_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'EBBCan:gpio13', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.25, 'off_below': 0.0, 'cycle_time': 0.08, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'EBBCan:gpio14'}, 'probe': {'z_offset': -1.35, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': '^EBBCan:gpio22', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 3, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.015, 'samples_tolerance_retries': 3}, 'homing_override': {'set_position_z': 0.0, 'axes': 'z', 'gcode': '\nstatus_homing\nG90\nG0 Z5 F500\nG28 X0 Y0\nG0 X150 Y100 F9000\nG28 Z0\nG0 Z5 F500\nstatus_ready'}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [6, 6], 'mesh_min': [25.0, 35.0], 'mesh_max': [225.0, 220.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 150.0, 'fade_start': 1.0, 'fade_end': 10.0, 'fade_target': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[-0.1, -0.025, 0.0125, 0.0375, 0.125, 0.2125], [-0.1875, -0.1, -0.025, 0.025, 0.1, 0.2125], [-0.2625, -0.1625, -0.075, -0.0125, 0.075, 0.1875], [-0.2625, -0.1625, -0.0875, -0.0, 0.1, 0.2375], [-0.2, -0.1, -0.0125, 0.0625, 0.2, 0.35], [-0.225, -0.075, -0.0, 0.0875, 0.225, 0.3875]], 'min_x': 25.0, 'max_x': 225.0, 'min_y': 35.0, 'max_y': 220.0, 'x_count': 6, 'y_count': 6, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'bicubic', 'tension': 0.2}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\nSTATUS_HEATING\nM109 S150\nSTATUS_HOMING\nM117 Homing...\nG28 Y0 X0 Z0\nSTATUS_MESHING\nBED_MESH_CALIBRATE ADAPTIVE=1\n\n\n\n\n\n\n\n\n\n\n\nSTATUS_HEATING\nM107\nM117 Heating bed\nM190 S{ params.BED }\nM117 Heating nozzle\nM109 S{target_extruder}\nstatus_ready\nG1 Z15.0 F600\nG1 X125 Y125 F3000\nG92 E0\nG1 F9000\nstatus_printing\nM117 Printing...', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\nstatus_busy\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\n\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y} F3600\nM117 Finished!\nstatus_off', 'description': 'G-Code macro'}, 'gcode_macro m600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state', 'description': 'G-Code macro'}, 'force_move': {'enable_force_move': True}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'minimum_cruise_ratio': 0.5, 'square_corner_velocity': 5.0, 'kinematics': 'corexz', 'max_z_velocity': 5.0, 'max_z_accel': 100.0}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-04-28 03:36:49,491 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-04-28 03:36:49,493 [printer.py:reinit()] - Klipper version: v0.12.0-175-g7b490f3e-dirty
2024-04-28 03:36:49,493 [printer.py:reinit()] - # Extruders: 1
2024-04-28 03:36:49,493 [printer.py:reinit()] - # Temperature devices: 2
2024-04-28 03:36:49,493 [printer.py:reinit()] - # Fans: 2
2024-04-28 03:36:49,493 [printer.py:reinit()] - # Output pins: 0
2024-04-28 03:36:49,493 [printer.py:reinit()] - # Leds: 20
2024-04-28 03:36:49,494 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-04-28 03:36:49,513 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-04-28 03:36:49,516 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor mcu&fan&heater_fan extruder_fan&filament_switch_sensor extruder&neopixel sb_leds
2024-04-28 03:36:49,781 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-04-28 03:36:49,782 [screen.py:init_klipper()] - Printer initialized
2024-04-28 03:36:49,782 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-04-28 03:36:49,782 [printer.py:change_state()] - Adding callback for state: startup
2024-04-28 03:36:50,494 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-04-28 03:36:50,494 [printer.py:change_state()] - Adding callback for state: ready
2024-04-28 03:36:50,494 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-04-28 03:36:50,500 [screen.py:_load_panel()] - Loading panel: main_menu
2024-04-28 03:36:50,615 [main_menu.py:__init__()] - ### Making MainMenu
2024-04-28 03:36:50,630 [main_menu.py:add_device()] - Adding device: extruder
2024-04-28 03:36:50,639 [main_menu.py:add_device()] - Adding device: heater_bed
2024-04-28 03:36:50,647 [main_menu.py:add_device()] - Adding device: temperature_sensor mcu
2024-04-28 03:36:50,704 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-28 03:36:50,706 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-28 03:36:50,747 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor mcu', 'heater_bed', 'extruder']
2024-04-28 03:36:50,750 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-04-28 03:36:50,766 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-04-28 03:37:25,602 [base_panel.py:process_update()] - Update complete
2024-04-28 03:37:25,802 [KlippyWebsocket.py:on_close()] - Server Shutdown
2024-04-28 03:37:25,803 [KlippyWebsocket.py:on_close()] - Moonraker Websocket Closed
2024-04-28 03:37:26,296 [screen.py:websocket_disconnected()] - ### websocket_disconnected
2024-04-28 03:37:26,300 [screen.py:show_panel()] - Reinitializing panel
2024-04-28 03:37:26,403 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-04-28 03:37:26,507 [screen.py:connect_printer()] - Connecting to printer: Printer
2024-04-28 03:37:26,509 [screen.py:show_panel()] - Reinitializing panel
2024-04-28 03:37:26,590 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-04-28 03:37:26,616 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-04-28 03:37:26,616 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-28 03:37:26,623 [KlippyRest.py:_do_request()] - host=127.0.0.1, port=7125>>Max retries exceeded with url>>Failed to establish a new connection>>[Errno 111] Connection refused
2024-04-28 03:37:37,026 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-04-28 03:37:37,026 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-28 03:37:37,048 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/access/oneshot_token
2024-04-28 03:37:37,069 [KlippyWebsocket.py:connect()] - Starting websocket thread
2024-04-28 03:37:37,087 [_logging.py:info()] - Websocket connected
2024-04-28 03:37:37,088 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2024-04-28 03:37:37,089 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-28 03:37:37,109 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-04-28 03:37:37,127 [printer.py:configure_cameras()] - Cameras: []
2024-04-28 03:37:37,127 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'ready', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'update_manager', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-337-g546a17f', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-04-28 03:37:37,128 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-04-28 03:37:37,141 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-04-28 03:37:37,230 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set allow_park = client.park_at_cancel | default(false) | lower == \'true\' %}\n{% set retract = client.cancel_retract | default(5.0) | abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x | default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y | default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x | length > 0 or park_y | length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro | default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set idle_timeout = client.idle_timeout | default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE | default(1) | int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro | default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move | default(velocity) %}\n{% set runout_resume = True if client.runout_sensor | default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state | upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro | default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY | default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}"}, 'neopixel sb_leds': {'pin': 'EBBCan:gpio16', 'chain_count': '3', 'color_order': 'GRB', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0'}, 'led_effect sb_logo_busy': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (1,0,0)'}, 'led_effect sb_logo_cleaning': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.02, 0.5)'}, 'led_effect sb_logo_calibrating_z': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 0.35)'}, 'led_effect sb_logo_heating': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nbreathing  3 1 top (1, 0.18, 0)'}, 'led_effect sb_logo_cooling': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nbreathing  3 1 top (0, 0, 1)'}, 'led_effect sb_logo_homing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.6, 0.2)'}, 'led_effect sb_logo_leveling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.5, 0.1, 0.4)'}, 'led_effect sb_logo_meshing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.2, 1.0, 0.0)'}, 'led_effect sb_logo_printing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.3, 0.3, 0.0),(0.3, 0.1, 0.0)'}, 'led_effect sb_logo_standby': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.01, 0.01, 0.01)'}, 'led_effect sb_logo_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 1.0, 0.0)'}, 'led_effect sb_nozzle_heating': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (1.0, 0.18, 0.0, 0.0)'}, 'led_effect sb_nozzle_cooling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 1.0, 0.1)'}, 'led_effect sb_nozzle_standby': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.6, 0.0, 0.0, 0.0)'}, 'led_effect sb_nozzle_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.6, 1.0, 0.0, 0.1)'}, 'led_effect sb_critical_error': {'leds': '\nneopixel:sb_leds', 'layers': '\nstrobe         1  1.5   add        (1.0,  1.0, 1.0)\nbreathing      2  0     difference (0.95, 0.0, 0.0)\nstatic         1  0     top        (1.0,  0.0, 0.0)', 'autostart': 'false', 'frame_rate': '24', 'run_on_error': 'true'}, 'led_effect rainbow': {'leds': '\nneopixel:sb_leds', 'autostart': 'true', 'frame_rate': '24', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.0, 0.3, 0.0),(0.0, 0.0, 0.3)'}, 'led_effect set_nozzle_leds': {'leds': '\nneopixel:sb_leds (2,3)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nstatic         0  0     top        (0.5,  0.5, 0.5)'}, 'led_effect set_logo_leds': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nstatic         0  0     top        (1.0,  1.0, 1.0)'}, 'gcode_macro set_logo_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds STOP=1'}, 'gcode_macro set_logo_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1'}, 'gcode_macro status_off': {'gcode': '\nSTOP_LED_EFFECTS'}, 'gcode_macro status_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=rainbow'}, 'gcode_macro status_part_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready'}, 'gcode_macro status_busy': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_busy\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_heating\nSET_LED_EFFECT EFFECT=sb_nozzle_heating'}, 'gcode_macro status_cooling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cooling\nSET_LED_EFFECT EFFECT=sb_nozzle_cooling'}, 'gcode_macro status_leveling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_leveling\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_homing\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cleaning\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_meshing\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_calibrating_z\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_printing\nset_nozzle_leds_on'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_sam4e8e_00313753364B37373032303038303139-if00'}, 'mcu EBBCan': {'canbus_uuid': '8250861450f7'}, 'adxl345': {'cs_pin': 'EBBCan:gpio1', 'spi_software_sclk_pin': 'EBBCan:gpio2', 'spi_software_mosi_pin': 'EBBCan:gpio0', 'spi_software_miso_pin': 'EBBCan:gpio3', 'axes_map': 'z,-y,x'}, 'resonance_tester': {'probe_points': '100, 100, 20', 'accel_chip': 'adxl345'}, 'input_shaper': {'shaper_freq_x': '45', 'shaper_type': '3hump_ei'}, 'stepper_x': {'step_pin': 'PD6', 'dir_pin': '!PD11', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'EBBCan:gpio24', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '40'}, 'tmc2660 stepper_x': {'cs_pin': 'PD14', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'stepper_y': {'step_pin': 'PD7', 'dir_pin': '!PD12', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'PA2', 'position_endstop': '0', 'position_max': '225', 'position_min': '-4', 'homing_speed': '35', 'homing_retract_dist': '0'}, 'tmc2660 stepper_y': {'cs_pin': 'PC9', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'stepper_z': {'step_pin': 'PD8', 'dir_pin': '!PD13', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '230', 'position_min': '-2.5', 'homing_speed': '35.0'}, 'tmc2660 stepper_z': {'cs_pin': 'PC10', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'adc_temperature my_thermistor': {'temperature1': '0', 'resistance1': '1000', 'temperature2': '80', 'resistance2': '1309'}, 'extruder': {'step_pin': '!EBBCan:gpio18', 'dir_pin': 'EBBCan:gpio19', 'enable_pin': '!EBBCan:gpio17', 'microsteps': '32', 'rotation_distance': '21.63024711', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'pressure_advance': '0.065', 'pressure_advance_smooth_time': '0.02', 'gear_ratio': '50:10', 'heater_pin': 'EBBCan:gpio7', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'EBBCan:gpio27', 'control': 'pid', 'pid_kp': '21.527', 'pid_ki': '1.063', 'pid_kd': '108.982', 'min_temp': '0', 'max_temp': '250'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan:gpio20', 'run_current': '0.5', 'stealthchop_threshold': '999999'}, 'filament_switch_sensor extruder': {'pause_on_runout': 'True', 'switch_pin': 'EBBCan:gpio21'}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu'}, 'thermistor chamber_temp': {'temperature1': '25', 'resistance1': '10000', 'beta': '3950'}, 'heater_bed': {'heater_pin': '!PA19', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PC13', 'control': 'watermark', 'min_temp': '0', 'max_temp': '120'}, 'heater_fan extruder_fan': {'pin': 'EBBCan:gpio13', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'EBBCan:gpio14', 'cycle_time': '.08', 'kick_start_time': '.25'}, 'probe': {'pin': '^EBBCan:gpio22', 'x_offset': '0', 'y_offset': '0', 'samples': '3', 'samples_result': 'median', 'sample_retract_dist': '3', 'samples_tolerance': '0.015', 'samples_tolerance_retries': '3', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'z_offset': '-1.350'}, 'homing_override': {'axes': 'z', 'set_position_z': '0', 'gcode': '\nstatus_homing\nG90\nG0 Z5 F500\nG28 X0 Y0\nG0 X150 Y100 F9000\nG28 Z0\nG0 Z5 F500\nstatus_ready'}, 'bed_mesh': {'speed': '150', 'horizontal_move_z': '5', 'mesh_min': '25,35.0', 'mesh_max': '225.0,220', 'probe_count': '6,6', 'algorithm': 'bicubic', 'fade_start': '1', 'fade_end': '10', 'fade_target': '0'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\nSTATUS_HEATING\nM109 S150\nSTATUS_HOMING\nM117 Homing...\nG28 Y0 X0 Z0\nSTATUS_MESHING\nBED_MESH_CALIBRATE ADAPTIVE=1\n\n\n\n\n\n\n\n\n\n\n\nSTATUS_HEATING\nM107\nM117 Heating bed\nM190 S{ params.BED }\nM117 Heating nozzle\nM109 S{target_extruder}\nstatus_ready\nG1 Z15.0 F600\nG1 X125 Y125 F3000\nG92 E0\nG1 F9000\nstatus_printing\nM117 Printing...'}, 'gcode_macro PRINT_END': {'gcode': '\nstatus_busy\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\n\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y} F3600\nM117 Finished!\nstatus_off'}, 'gcode_macro M600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state'}, 'printer': {'kinematics': 'corexz', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '5', 'max_z_accel': '100'}, 'force_move': {'enable_force_move': 'true'}, 'exclude_object': {}, 'bed_mesh default': {'version': '1', 'points': '\n-0.100000, -0.025000, 0.012500, 0.037500, 0.125000, 0.212500\n-0.187500, -0.100000, -0.025000, 0.025000, 0.100000, 0.212500\n-0.262500, -0.162500, -0.075000, -0.012500, 0.075000, 0.187500\n-0.262500, -0.162500, -0.087500, -0.000000, 0.100000, 0.237500\n-0.200000, -0.100000, -0.012500, 0.062500, 0.200000, 0.350000\n-0.225000, -0.075000, -0.000000, 0.087500, 0.225000, 0.387500', 'x_count': '6', 'y_count': '6', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'bicubic', 'tension': '0.2', 'min_x': '25.0', 'max_x': '225.0', 'min_y': '35.0', 'max_y': '220.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_sam4e8e_00313753364B37373032303038303139-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu ebbcan': {'canbus_uuid': '8250861450f7', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set allow_park = client.park_at_cancel | default(false) | lower == \'true\' %}\n{% set retract = client.cancel_retract | default(5.0) | abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x | default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y | default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x | length > 0 or park_y | length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro | default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set idle_timeout = client.idle_timeout | default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE | default(1) | int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro | default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move | default(velocity) %}\n{% set runout_resume = True if client.runout_sensor | default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state | upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro | default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY | default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'neopixel sb_leds': {'pin': 'EBBCan:gpio16', 'chain_count': 3, 'color_order': ['GRB'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'led_effect sb_logo_busy': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1,0,0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_cleaning': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.02, 0.5)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_calibrating_z': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 0.35)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1, 0.18, 0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0, 0, 1)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_homing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.6, 0.2)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_leveling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.5, 0.1, 0.4)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_meshing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.2, 1.0, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_printing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.3, 0.3, 0.0),(0.3, 0.1, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_standby': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.01, 0.01, 0.01)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 1.0, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_nozzle_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1.0, 0.18, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 1.0, 0.1)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_standby': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.6, 0.0, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.6, 1.0, 0.0, 0.1)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_critical_error': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': True, 'endstops': '', 'layers': '\nstrobe         1  1.5   add        (1.0,  1.0, 1.0)\nbreathing      2  0     difference (0.95, 0.0, 0.0)\nstatic         1  0     top        (1.0,  0.0, 0.0)', 'leds': '\nneopixel:sb_leds'}, 'led_effect rainbow': {'frame_rate': 24.0, 'autostart': True, 'run_on_error': False, 'endstops': '', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.0, 0.3, 0.0),(0.0, 0.0, 0.3)', 'leds': '\nneopixel:sb_leds'}, 'led_effect set_nozzle_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic         0  0     top        (0.5,  0.5, 0.5)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect set_logo_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic         0  0     top        (1.0,  1.0, 1.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'gcode_macro set_logo_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nSTOP_LED_EFFECTS', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=rainbow', 'description': 'G-Code macro'}, 'gcode_macro status_part_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_busy\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_heating\nSET_LED_EFFECT EFFECT=sb_nozzle_heating', 'description': 'G-Code macro'}, 'gcode_macro status_cooling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cooling\nSET_LED_EFFECT EFFECT=sb_nozzle_cooling', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_leveling\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_homing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cleaning\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_meshing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_calibrating_z\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_printing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'adxl345': {'axes_map': ['z', '-y', 'x'], 'rate': 3200, 'cs_pin': 'EBBCan:gpio1', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'EBBCan:gpio2', 'spi_software_miso_pin': 'EBBCan:gpio3', 'spi_software_mosi_pin': 'EBBCan:gpio0'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[100.0, 100.0, 20.0]], 'accel_chip': 'adxl345'}, 'input_shaper': {'shaper_type': '3hump_ei', 'shaper_type_x': '3hump_ei', 'damping_ratio_x': 0.1, 'shaper_freq_x': 45.0, 'shaper_type_y': '3hump_ei', 'damping_ratio_y': 0.1, 'shaper_freq_y': 0.0}, 'tmc2660 stepper_x': {'cs_pin': 'PD14', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PD6', 'dir_pin': '!PD11', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'EBBCan:gpio24', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2660 stepper_y': {'cs_pin': 'PC9', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PD7', 'dir_pin': '!PD12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'PA2', 'position_endstop': 0.0, 'position_min': -4.0, 'position_max': 225.0, 'homing_speed': 35.0, 'second_homing_speed': 17.5, 'homing_retract_speed': 35.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2660 stepper_z': {'cs_pin': 'PC10', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PD8', 'dir_pin': '!PD13', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -2.5, 'position_max': 230.0, 'homing_speed': 35.0, 'second_homing_speed': 17.5, 'homing_retract_speed': 35.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'adc_temperature my_thermistor': {'resistance1': 1000.0, 'temperature1': 0.0, 'temperature2': 80.0, 'resistance2': 1309.0}, 'tmc2209 extruder': {'uart_pin': 'EBBCan:gpio20', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan:gpio27', 'min_temp': 0.0, 'max_temp': 250.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 21.527, 'pid_ki': 1.063, 'pid_kd': 108.982, 'heater_pin': 'EBBCan:gpio7', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': '!EBBCan:gpio18', 'pressure_advance': 0.065, 'pressure_advance_smooth_time': 0.02, 'dir_pin': 'EBBCan:gpio19', 'rotation_distance': 21.63024711, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!EBBCan:gpio17'}, 'filament_switch_sensor extruder': {'switch_pin': 'EBBCan:gpio21', 'pause_on_runout': True, 'runout_gcode': '', 'pause_delay': 0.5, 'event_delay': 3.0}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'thermistor chamber_temp': {'temperature1': 25.0, 'resistance1': 10000.0, 'beta': 3950.0}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PC13', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'watermark', 'max_delta': 2.0, 'heater_pin': '!PA19', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan extruder_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'EBBCan:gpio13', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.25, 'off_below': 0.0, 'cycle_time': 0.08, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'EBBCan:gpio14'}, 'probe': {'z_offset': -1.35, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': '^EBBCan:gpio22', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 3, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.015, 'samples_tolerance_retries': 3}, 'homing_override': {'set_position_z': 0.0, 'axes': 'z', 'gcode': '\nstatus_homing\nG90\nG0 Z5 F500\nG28 X0 Y0\nG0 X150 Y100 F9000\nG28 Z0\nG0 Z5 F500\nstatus_ready'}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [6, 6], 'mesh_min': [25.0, 35.0], 'mesh_max': [225.0, 220.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 150.0, 'fade_start': 1.0, 'fade_end': 10.0, 'fade_target': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[-0.1, -0.025, 0.0125, 0.0375, 0.125, 0.2125], [-0.1875, -0.1, -0.025, 0.025, 0.1, 0.2125], [-0.2625, -0.1625, -0.075, -0.0125, 0.075, 0.1875], [-0.2625, -0.1625, -0.0875, -0.0, 0.1, 0.2375], [-0.2, -0.1, -0.0125, 0.0625, 0.2, 0.35], [-0.225, -0.075, -0.0, 0.0875, 0.225, 0.3875]], 'min_x': 25.0, 'max_x': 225.0, 'min_y': 35.0, 'max_y': 220.0, 'x_count': 6, 'y_count': 6, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'bicubic', 'tension': 0.2}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\nSTATUS_HEATING\nM109 S150\nSTATUS_HOMING\nM117 Homing...\nG28 Y0 X0 Z0\nSTATUS_MESHING\nBED_MESH_CALIBRATE ADAPTIVE=1\n\n\n\n\n\n\n\n\n\n\n\nSTATUS_HEATING\nM107\nM117 Heating bed\nM190 S{ params.BED }\nM117 Heating nozzle\nM109 S{target_extruder}\nstatus_ready\nG1 Z15.0 F600\nG1 X125 Y125 F3000\nG92 E0\nG1 F9000\nstatus_printing\nM117 Printing...', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\nstatus_busy\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\n\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y} F3600\nM117 Finished!\nstatus_off', 'description': 'G-Code macro'}, 'gcode_macro m600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state', 'description': 'G-Code macro'}, 'force_move': {'enable_force_move': True}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'minimum_cruise_ratio': 0.5, 'square_corner_velocity': 5.0, 'kinematics': 'corexz', 'max_z_velocity': 5.0, 'max_z_accel': 100.0}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-04-28 03:37:37,234 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-04-28 03:37:37,236 [printer.py:reinit()] - Klipper version: v0.12.0-175-g7b490f3e-dirty
2024-04-28 03:37:37,236 [printer.py:reinit()] - # Extruders: 1
2024-04-28 03:37:37,236 [printer.py:reinit()] - # Temperature devices: 2
2024-04-28 03:37:37,237 [printer.py:reinit()] - # Fans: 2
2024-04-28 03:37:37,237 [printer.py:reinit()] - # Output pins: 0
2024-04-28 03:37:37,237 [printer.py:reinit()] - # Leds: 20
2024-04-28 03:37:37,237 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-04-28 03:37:37,255 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-04-28 03:37:37,257 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor mcu&fan&heater_fan extruder_fan&filament_switch_sensor extruder&neopixel sb_leds
2024-04-28 03:37:37,531 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-04-28 03:37:37,531 [screen.py:init_klipper()] - Printer initialized
2024-04-28 03:37:37,531 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2024-04-28 03:37:37,532 [printer.py:change_state()] - Adding callback for state: ready
2024-04-28 03:37:37,533 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-04-28 03:37:37,537 [screen.py:show_panel()] - Reinitializing panel
2024-04-28 03:37:37,644 [main_menu.py:__init__()] - ### Making MainMenu
2024-04-28 03:37:37,659 [main_menu.py:add_device()] - Adding device: extruder
2024-04-28 03:37:37,668 [main_menu.py:add_device()] - Adding device: heater_bed
2024-04-28 03:37:37,677 [main_menu.py:add_device()] - Adding device: temperature_sensor mcu
2024-04-28 03:37:37,729 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-28 03:37:37,732 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-28 03:37:37,758 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor mcu', 'heater_bed', 'extruder']
2024-04-28 03:37:37,760 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-04-28 03:37:37,772 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-04-28 03:55:17,254 [base_panel.py:finish_updating()] - Finishing update
2024-04-28 03:55:17,269 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2024-04-28 03:55:17,270 [screen.py:_menu_go_back()] - #### Menu go home
2024-04-28 03:55:17,313 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-28 04:55:17,025 [screen.py:show_screensaver()] - Showing Screensaver
2024-07-16 20:51:56,314 [functions.py:log_start()] - --------------------KlipperScreen Log Start--------------------
2024-07-16 20:51:56,314 [functions.py:log_start()] - KlipperScreen Version: v0.3.9-50-gdaed9a0
2024-07-16 20:51:56,314 [functions.py:log_start()] - Python version: 3.11
2024-07-16 20:51:56,572 [config.py:get_config_file_location()] - Passed config (-c): .
2024-07-16 20:51:56,573 [config.py:__init__()] - Config path location: /home/pi/printer_data/config/KlipperScreen.conf
2024-07-16 20:51:56,613 [config.py:log_config()] -  ===== Config File =====

=======================
2024-07-16 20:51:56,615 [config.py:__init__()] - ====== Saved Def ======

[main]
use_dpms = False
print_sort_dir = date_desc

=======================
2024-07-16 20:51:56,616 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2024-07-16 20:51:56,889 [config.py:create_translations()] - Selected lang: None OS lang: en_GB
2024-07-16 20:51:56,890 [config.py:install_language()] - Using lang en
2024-07-16 20:51:56,918 [screen.py:__init__()] - Monitors: 1 using number: 0
2024-07-16 20:51:56,920 [screen.py:__init__()] - Wayland: False Display name: :100
2024-07-16 20:51:56,923 [screen.py:__init__()] - Screen resolution: 984x540
2024-07-16 20:51:56,925 [KlippyGtk.py:__init__()] - Font size: 18.6 (medium)
2024-07-16 20:51:58,758 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2024-07-16 20:51:58,759 [screen.py:set_screenblanking_timeout()] - Not using DPMS
2024-07-16 20:51:58,773 [screen.py:initial_connection()] - Default printer: None
2024-07-16 20:51:58,863 [screen.py:connect_printer()] - Connecting to printer: Printer
2024-07-16 20:51:58,864 [screen.py:_load_panel()] - Loading panel: splash_screen
2024-07-16 20:51:58,963 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-07-16 20:51:58,981 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-07-16 20:51:58,981 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-07-16 20:51:59,008 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/access/oneshot_token
2024-07-16 20:51:59,022 [KlippyWebsocket.py:connect()] - Starting websocket thread
2024-07-16 20:51:59,033 [_logging.py:info()] - Websocket connected
2024-07-16 20:51:59,034 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2024-07-16 20:51:59,465 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-07-16 20:51:59,478 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-07-16 20:51:59,490 [printer.py:configure_cameras()] - Cameras: []
2024-07-16 20:51:59,490 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'octoprint_compat', 'update_manager', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-337-g546a17f', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-07-16 20:51:59,491 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-07-16 20:51:59,504 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-07-16 20:51:59,529 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set allow_park = client.park_at_cancel | default(false) | lower == \'true\' %}\n{% set retract = client.cancel_retract | default(5.0) | abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x | default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y | default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x | length > 0 or park_y | length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro | default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set idle_timeout = client.idle_timeout | default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE | default(1) | int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro | default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move | default(velocity) %}\n{% set runout_resume = True if client.runout_sensor | default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state | upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro | default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY | default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}"}, 'neopixel sb_leds': {'pin': 'EBBCan:gpio16', 'chain_count': '3', 'color_order': 'GRB', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0'}, 'led_effect sb_logo_busy': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (1,0,0)'}, 'led_effect sb_logo_cleaning': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.02, 0.5)'}, 'led_effect sb_logo_calibrating_z': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 0.35)'}, 'led_effect sb_logo_heating': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nbreathing  3 1 top (1, 0.18, 0)'}, 'led_effect sb_logo_cooling': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nbreathing  3 1 top (0, 0, 1)'}, 'led_effect sb_logo_homing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.6, 0.2)'}, 'led_effect sb_logo_leveling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.5, 0.1, 0.4)'}, 'led_effect sb_logo_meshing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.2, 1.0, 0.0)'}, 'led_effect sb_logo_printing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.3, 0.3, 0.0),(0.3, 0.1, 0.0)'}, 'led_effect sb_logo_standby': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.01, 0.01, 0.01)'}, 'led_effect sb_logo_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 1.0, 0.0)'}, 'led_effect sb_nozzle_heating': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (1.0, 0.18, 0.0, 0.0)'}, 'led_effect sb_nozzle_cooling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 1.0, 0.1)'}, 'led_effect sb_nozzle_standby': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.6, 0.0, 0.0, 0.0)'}, 'led_effect sb_nozzle_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.6, 1.0, 0.0, 0.1)'}, 'led_effect sb_critical_error': {'leds': '\nneopixel:sb_leds', 'layers': '\nstrobe         1  1.5   add        (1.0,  1.0, 1.0)\nbreathing      2  0     difference (0.95, 0.0, 0.0)\nstatic         1  0     top        (1.0,  0.0, 0.0)', 'autostart': 'false', 'frame_rate': '24', 'run_on_error': 'true'}, 'led_effect rainbow': {'leds': '\nneopixel:sb_leds', 'autostart': 'true', 'frame_rate': '24', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.0, 0.3, 0.0),(0.0, 0.0, 0.3)'}, 'led_effect set_nozzle_leds': {'leds': '\nneopixel:sb_leds (2,3)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nstatic         0  0     top        (0.5,  0.5, 0.5)'}, 'led_effect set_logo_leds': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nstatic         0  0     top        (1.0,  1.0, 1.0)'}, 'gcode_macro set_logo_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds STOP=1'}, 'gcode_macro set_logo_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1'}, 'gcode_macro status_off': {'gcode': '\nSTOP_LED_EFFECTS'}, 'gcode_macro status_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=rainbow'}, 'gcode_macro status_part_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready'}, 'gcode_macro status_busy': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_busy\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_heating\nSET_LED_EFFECT EFFECT=sb_nozzle_heating'}, 'gcode_macro status_cooling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cooling\nSET_LED_EFFECT EFFECT=sb_nozzle_cooling'}, 'gcode_macro status_leveling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_leveling\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_homing\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cleaning\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_meshing\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_calibrating_z\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_printing\nset_nozzle_leds_on'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_sam4e8e_00313753364B37373032303038303139-if00'}, 'mcu EBBCan': {'canbus_uuid': '8250861450f7'}, 'adxl345': {'cs_pin': 'EBBCan:gpio1', 'spi_software_sclk_pin': 'EBBCan:gpio2', 'spi_software_mosi_pin': 'EBBCan:gpio0', 'spi_software_miso_pin': 'EBBCan:gpio3', 'axes_map': 'z,-y,x'}, 'resonance_tester': {'probe_points': '100, 100, 20', 'accel_chip': 'adxl345'}, 'input_shaper': {'shaper_freq_x': '45', 'shaper_type': '3hump_ei'}, 'stepper_x': {'step_pin': 'PD6', 'dir_pin': '!PD11', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'EBBCan:gpio24', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '40'}, 'tmc2660 stepper_x': {'cs_pin': 'PD14', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'stepper_y': {'step_pin': 'PD7', 'dir_pin': '!PD12', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'PA2', 'position_endstop': '0', 'position_max': '225', 'position_min': '-4', 'homing_speed': '35', 'homing_retract_dist': '0'}, 'tmc2660 stepper_y': {'cs_pin': 'PC9', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'stepper_z': {'step_pin': 'PD8', 'dir_pin': '!PD13', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '230', 'position_min': '-2.5', 'homing_speed': '35.0'}, 'tmc2660 stepper_z': {'cs_pin': 'PC10', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'adc_temperature my_thermistor': {'temperature1': '0', 'resistance1': '1000', 'temperature2': '80', 'resistance2': '1309'}, 'extruder': {'step_pin': '!EBBCan:gpio18', 'dir_pin': 'EBBCan:gpio19', 'enable_pin': '!EBBCan:gpio17', 'microsteps': '32', 'rotation_distance': '21.63024711', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'pressure_advance': '0.065', 'pressure_advance_smooth_time': '0.02', 'gear_ratio': '50:10', 'heater_pin': 'EBBCan:gpio7', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'EBBCan:gpio27', 'control': 'pid', 'pid_kp': '21.527', 'pid_ki': '1.063', 'pid_kd': '108.982', 'min_temp': '0', 'max_temp': '250'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan:gpio20', 'run_current': '0.5', 'stealthchop_threshold': '999999'}, 'filament_switch_sensor extruder': {'pause_on_runout': 'True', 'switch_pin': 'EBBCan:gpio21'}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu'}, 'thermistor chamber_temp': {'temperature1': '25', 'resistance1': '10000', 'beta': '3950'}, 'heater_bed': {'heater_pin': '!PA19', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PC13', 'control': 'watermark', 'min_temp': '0', 'max_temp': '120'}, 'heater_fan extruder_fan': {'pin': 'EBBCan:gpio13', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'EBBCan:gpio14', 'cycle_time': '.08', 'kick_start_time': '.25'}, 'probe': {'pin': '^EBBCan:gpio22', 'x_offset': '0', 'y_offset': '0', 'samples': '3', 'samples_result': 'median', 'sample_retract_dist': '3', 'samples_tolerance': '0.015', 'samples_tolerance_retries': '3', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'z_offset': '-1.350'}, 'homing_override': {'axes': 'z', 'set_position_z': '0', 'gcode': '\nstatus_homing\nG90\nG0 Z5 F500\nG28 X0 Y0\nG0 X150 Y100 F9000\nG28 Z0\nG0 Z5 F500\nstatus_ready'}, 'bed_mesh': {'speed': '150', 'horizontal_move_z': '5', 'mesh_min': '25,35.0', 'mesh_max': '225.0,220', 'probe_count': '6,6', 'algorithm': 'bicubic', 'fade_start': '1', 'fade_end': '10', 'fade_target': '0'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\nSTATUS_HEATING\nM109 S150\nSTATUS_HOMING\nM117 Homing...\nG28 Y0 X0 Z0\nSTATUS_MESHING\nBED_MESH_CALIBRATE ADAPTIVE=1\n\n\n\n\n\n\n\n\n\n\n\nSTATUS_HEATING\nM107\nM117 Heating bed\nM190 S{ params.BED }\nM117 Heating nozzle\nM109 S{target_extruder}\nstatus_ready\nG1 Z15.0 F600\nG1 X125 Y125 F3000\nG92 E0\nG1 F9000\nstatus_printing\nM117 Printing...'}, 'gcode_macro PRINT_END': {'gcode': '\nstatus_busy\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\n\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y} F3600\nM117 Finished!\nstatus_off'}, 'gcode_macro M600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state'}, 'printer': {'kinematics': 'corexz', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '5', 'max_z_accel': '100'}, 'force_move': {'enable_force_move': 'true'}, 'exclude_object': {}, 'bed_mesh default': {'version': '1', 'points': '\n-0.100000, -0.025000, 0.012500, 0.037500, 0.125000, 0.212500\n-0.187500, -0.100000, -0.025000, 0.025000, 0.100000, 0.212500\n-0.262500, -0.162500, -0.075000, -0.012500, 0.075000, 0.187500\n-0.262500, -0.162500, -0.087500, -0.000000, 0.100000, 0.237500\n-0.200000, -0.100000, -0.012500, 0.062500, 0.200000, 0.350000\n-0.225000, -0.075000, -0.000000, 0.087500, 0.225000, 0.387500', 'x_count': '6', 'y_count': '6', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'bicubic', 'tension': '0.2', 'min_x': '25.0', 'max_x': '225.0', 'min_y': '35.0', 'max_y': '220.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_sam4e8e_00313753364B37373032303038303139-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu ebbcan': {'canbus_uuid': '8250861450f7', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set allow_park = client.park_at_cancel | default(false) | lower == \'true\' %}\n{% set retract = client.cancel_retract | default(5.0) | abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x | default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y | default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x | length > 0 or park_y | length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro | default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set idle_timeout = client.idle_timeout | default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE | default(1) | int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro | default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move | default(velocity) %}\n{% set runout_resume = True if client.runout_sensor | default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state | upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro | default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY | default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'neopixel sb_leds': {'pin': 'EBBCan:gpio16', 'chain_count': 3, 'color_order': ['GRB'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'led_effect sb_logo_busy': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1,0,0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_cleaning': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.02, 0.5)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_calibrating_z': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 0.35)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1, 0.18, 0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0, 0, 1)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_homing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.6, 0.2)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_leveling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.5, 0.1, 0.4)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_meshing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.2, 1.0, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_printing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.3, 0.3, 0.0),(0.3, 0.1, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_standby': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.01, 0.01, 0.01)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 1.0, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_nozzle_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1.0, 0.18, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 1.0, 0.1)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_standby': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.6, 0.0, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.6, 1.0, 0.0, 0.1)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_critical_error': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': True, 'endstops': '', 'layers': '\nstrobe         1  1.5   add        (1.0,  1.0, 1.0)\nbreathing      2  0     difference (0.95, 0.0, 0.0)\nstatic         1  0     top        (1.0,  0.0, 0.0)', 'leds': '\nneopixel:sb_leds'}, 'led_effect rainbow': {'frame_rate': 24.0, 'autostart': True, 'run_on_error': False, 'endstops': '', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.0, 0.3, 0.0),(0.0, 0.0, 0.3)', 'leds': '\nneopixel:sb_leds'}, 'led_effect set_nozzle_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic         0  0     top        (0.5,  0.5, 0.5)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect set_logo_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic         0  0     top        (1.0,  1.0, 1.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'gcode_macro set_logo_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nSTOP_LED_EFFECTS', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=rainbow', 'description': 'G-Code macro'}, 'gcode_macro status_part_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_busy\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_heating\nSET_LED_EFFECT EFFECT=sb_nozzle_heating', 'description': 'G-Code macro'}, 'gcode_macro status_cooling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cooling\nSET_LED_EFFECT EFFECT=sb_nozzle_cooling', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_leveling\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_homing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cleaning\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_meshing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_calibrating_z\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_printing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'adxl345': {'axes_map': ['z', '-y', 'x'], 'rate': 3200, 'cs_pin': 'EBBCan:gpio1', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'EBBCan:gpio2', 'spi_software_miso_pin': 'EBBCan:gpio3', 'spi_software_mosi_pin': 'EBBCan:gpio0'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[100.0, 100.0, 20.0]], 'accel_chip': 'adxl345'}, 'input_shaper': {'shaper_type': '3hump_ei', 'shaper_type_x': '3hump_ei', 'damping_ratio_x': 0.1, 'shaper_freq_x': 45.0, 'shaper_type_y': '3hump_ei', 'damping_ratio_y': 0.1, 'shaper_freq_y': 0.0}, 'tmc2660 stepper_x': {'cs_pin': 'PD14', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PD6', 'dir_pin': '!PD11', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'EBBCan:gpio24', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2660 stepper_y': {'cs_pin': 'PC9', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PD7', 'dir_pin': '!PD12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'PA2', 'position_endstop': 0.0, 'position_min': -4.0, 'position_max': 225.0, 'homing_speed': 35.0, 'second_homing_speed': 17.5, 'homing_retract_speed': 35.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2660 stepper_z': {'cs_pin': 'PC10', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PD8', 'dir_pin': '!PD13', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -2.5, 'position_max': 230.0, 'homing_speed': 35.0, 'second_homing_speed': 17.5, 'homing_retract_speed': 35.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'adc_temperature my_thermistor': {'resistance1': 1000.0, 'temperature1': 0.0, 'temperature2': 80.0, 'resistance2': 1309.0}, 'tmc2209 extruder': {'uart_pin': 'EBBCan:gpio20', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan:gpio27', 'min_temp': 0.0, 'max_temp': 250.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 21.527, 'pid_ki': 1.063, 'pid_kd': 108.982, 'heater_pin': 'EBBCan:gpio7', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': '!EBBCan:gpio18', 'pressure_advance': 0.065, 'pressure_advance_smooth_time': 0.02, 'dir_pin': 'EBBCan:gpio19', 'rotation_distance': 21.63024711, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!EBBCan:gpio17'}, 'filament_switch_sensor extruder': {'switch_pin': 'EBBCan:gpio21', 'pause_on_runout': True, 'runout_gcode': '', 'pause_delay': 0.5, 'event_delay': 3.0}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'thermistor chamber_temp': {'temperature1': 25.0, 'resistance1': 10000.0, 'beta': 3950.0}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PC13', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'watermark', 'max_delta': 2.0, 'heater_pin': '!PA19', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan extruder_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'EBBCan:gpio13', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.25, 'off_below': 0.0, 'cycle_time': 0.08, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'EBBCan:gpio14'}, 'probe': {'z_offset': -1.35, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': '^EBBCan:gpio22', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 3, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.015, 'samples_tolerance_retries': 3}, 'homing_override': {'set_position_z': 0.0, 'axes': 'z', 'gcode': '\nstatus_homing\nG90\nG0 Z5 F500\nG28 X0 Y0\nG0 X150 Y100 F9000\nG28 Z0\nG0 Z5 F500\nstatus_ready'}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [6, 6], 'mesh_min': [25.0, 35.0], 'mesh_max': [225.0, 220.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 150.0, 'fade_start': 1.0, 'fade_end': 10.0, 'fade_target': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[-0.1, -0.025, 0.0125, 0.0375, 0.125, 0.2125], [-0.1875, -0.1, -0.025, 0.025, 0.1, 0.2125], [-0.2625, -0.1625, -0.075, -0.0125, 0.075, 0.1875], [-0.2625, -0.1625, -0.0875, -0.0, 0.1, 0.2375], [-0.2, -0.1, -0.0125, 0.0625, 0.2, 0.35], [-0.225, -0.075, -0.0, 0.0875, 0.225, 0.3875]], 'min_x': 25.0, 'max_x': 225.0, 'min_y': 35.0, 'max_y': 220.0, 'x_count': 6, 'y_count': 6, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'bicubic', 'tension': 0.2}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\nSTATUS_HEATING\nM109 S150\nSTATUS_HOMING\nM117 Homing...\nG28 Y0 X0 Z0\nSTATUS_MESHING\nBED_MESH_CALIBRATE ADAPTIVE=1\n\n\n\n\n\n\n\n\n\n\n\nSTATUS_HEATING\nM107\nM117 Heating bed\nM190 S{ params.BED }\nM117 Heating nozzle\nM109 S{target_extruder}\nstatus_ready\nG1 Z15.0 F600\nG1 X125 Y125 F3000\nG92 E0\nG1 F9000\nstatus_printing\nM117 Printing...', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\nstatus_busy\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\n\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y} F3600\nM117 Finished!\nstatus_off', 'description': 'G-Code macro'}, 'gcode_macro m600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state', 'description': 'G-Code macro'}, 'force_move': {'enable_force_move': True}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'minimum_cruise_ratio': 0.5, 'square_corner_velocity': 5.0, 'kinematics': 'corexz', 'max_z_velocity': 5.0, 'max_z_accel': 100.0}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-07-16 20:51:59,532 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-07-16 20:51:59,534 [printer.py:reinit()] - Klipper version: v0.12.0-175-g7b490f3e-dirty
2024-07-16 20:51:59,534 [printer.py:reinit()] - # Extruders: 1
2024-07-16 20:51:59,534 [printer.py:reinit()] - # Temperature devices: 2
2024-07-16 20:51:59,534 [printer.py:reinit()] - # Fans: 2
2024-07-16 20:51:59,534 [printer.py:reinit()] - # Output pins: 0
2024-07-16 20:51:59,535 [printer.py:reinit()] - # Leds: 20
2024-07-16 20:51:59,535 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-07-16 20:51:59,552 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-07-16 20:51:59,554 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor mcu&fan&heater_fan extruder_fan&filament_switch_sensor extruder&neopixel sb_leds
2024-07-16 20:51:59,825 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-07-16 20:51:59,825 [screen.py:init_klipper()] - Printer initialized
2024-07-16 20:51:59,826 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-07-16 20:51:59,826 [printer.py:change_state()] - Adding callback for state: startup
2024-07-16 20:52:16,684 [printer.py:change_state()] - Changing state from 'startup' to 'error'
2024-07-16 20:52:16,684 [printer.py:change_state()] - Adding callback for state: error
2024-07-16 20:52:16,688 [screen.py:show_panel()] - Reinitializing panel
2024-07-16 20:52:16,791 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-07-16 20:52:41,504 [functions.py:log_start()] - --------------------KlipperScreen Log Start--------------------
2024-07-16 20:52:41,504 [functions.py:log_start()] - KlipperScreen Version: v0.3.9-50-gdaed9a0
2024-07-16 20:52:41,504 [functions.py:log_start()] - Python version: 3.11
2024-07-16 20:52:41,640 [config.py:get_config_file_location()] - Passed config (-c): .
2024-07-16 20:52:41,640 [config.py:__init__()] - Config path location: /home/pi/printer_data/config/KlipperScreen.conf
2024-07-16 20:52:41,665 [config.py:log_config()] -  ===== Config File =====

=======================
2024-07-16 20:52:41,667 [config.py:__init__()] - ====== Saved Def ======

[main]
use_dpms = False
print_sort_dir = date_desc

=======================
2024-07-16 20:52:41,668 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2024-07-16 20:52:41,770 [config.py:create_translations()] - Selected lang: None OS lang: en_GB
2024-07-16 20:52:41,774 [config.py:install_language()] - Using lang en
2024-07-16 20:52:41,792 [screen.py:__init__()] - Monitors: 1 using number: 0
2024-07-16 20:52:41,794 [screen.py:__init__()] - Wayland: False Display name: :100
2024-07-16 20:52:41,796 [screen.py:__init__()] - Screen resolution: 984x540
2024-07-16 20:52:41,798 [KlippyGtk.py:__init__()] - Font size: 18.6 (medium)
2024-07-16 20:52:42,310 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2024-07-16 20:52:42,311 [screen.py:set_screenblanking_timeout()] - Not using DPMS
2024-07-16 20:52:42,319 [screen.py:initial_connection()] - Default printer: None
2024-07-16 20:52:42,384 [screen.py:connect_printer()] - Connecting to printer: Printer
2024-07-16 20:52:42,384 [screen.py:_load_panel()] - Loading panel: splash_screen
2024-07-16 20:52:42,450 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-07-16 20:52:42,467 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-07-16 20:52:42,467 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-07-16 20:52:42,484 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/access/oneshot_token
2024-07-16 20:52:42,496 [KlippyWebsocket.py:connect()] - Starting websocket thread
2024-07-16 20:52:42,506 [_logging.py:info()] - Websocket connected
2024-07-16 20:52:42,506 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2024-07-16 20:52:42,537 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-07-16 20:52:42,548 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-07-16 20:52:42,559 [printer.py:configure_cameras()] - Cameras: []
2024-07-16 20:52:42,560 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'error', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'octoprint_compat', 'update_manager', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-337-g546a17f', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-07-16 20:52:42,560 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-07-16 20:52:42,573 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-07-16 20:52:42,781 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set allow_park = client.park_at_cancel | default(false) | lower == \'true\' %}\n{% set retract = client.cancel_retract | default(5.0) | abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x | default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y | default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x | length > 0 or park_y | length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro | default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set idle_timeout = client.idle_timeout | default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE | default(1) | int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro | default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move | default(velocity) %}\n{% set runout_resume = True if client.runout_sensor | default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state | upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro | default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY | default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}"}, 'neopixel sb_leds': {'pin': 'EBBCan:gpio16', 'chain_count': '3', 'color_order': 'GRB', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0'}, 'led_effect sb_logo_busy': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (1,0,0)'}, 'led_effect sb_logo_cleaning': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.02, 0.5)'}, 'led_effect sb_logo_calibrating_z': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 0.35)'}, 'led_effect sb_logo_heating': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nbreathing  3 1 top (1, 0.18, 0)'}, 'led_effect sb_logo_cooling': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nbreathing  3 1 top (0, 0, 1)'}, 'led_effect sb_logo_homing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.6, 0.2)'}, 'led_effect sb_logo_leveling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.5, 0.1, 0.4)'}, 'led_effect sb_logo_meshing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.2, 1.0, 0.0)'}, 'led_effect sb_logo_printing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.3, 0.3, 0.0),(0.3, 0.1, 0.0)'}, 'led_effect sb_logo_standby': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.01, 0.01, 0.01)'}, 'led_effect sb_logo_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 1.0, 0.0)'}, 'led_effect sb_nozzle_heating': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (1.0, 0.18, 0.0, 0.0)'}, 'led_effect sb_nozzle_cooling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 1.0, 0.1)'}, 'led_effect sb_nozzle_standby': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.6, 0.0, 0.0, 0.0)'}, 'led_effect sb_nozzle_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.6, 1.0, 0.0, 0.1)'}, 'led_effect sb_critical_error': {'leds': '\nneopixel:sb_leds', 'layers': '\nstrobe         1  1.5   add        (1.0,  1.0, 1.0)\nbreathing      2  0     difference (0.95, 0.0, 0.0)\nstatic         1  0     top        (1.0,  0.0, 0.0)', 'autostart': 'false', 'frame_rate': '24', 'run_on_error': 'true'}, 'led_effect rainbow': {'leds': '\nneopixel:sb_leds', 'autostart': 'true', 'frame_rate': '24', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.0, 0.3, 0.0),(0.0, 0.0, 0.3)'}, 'led_effect set_nozzle_leds': {'leds': '\nneopixel:sb_leds (2,3)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nstatic         0  0     top        (0.5,  0.5, 0.5)'}, 'led_effect set_logo_leds': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nstatic         0  0     top        (1.0,  1.0, 1.0)'}, 'gcode_macro set_logo_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds STOP=1'}, 'gcode_macro set_logo_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1'}, 'gcode_macro status_off': {'gcode': '\nSTOP_LED_EFFECTS'}, 'gcode_macro status_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=rainbow'}, 'gcode_macro status_part_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready'}, 'gcode_macro status_busy': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_busy\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_heating\nSET_LED_EFFECT EFFECT=sb_nozzle_heating'}, 'gcode_macro status_cooling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cooling\nSET_LED_EFFECT EFFECT=sb_nozzle_cooling'}, 'gcode_macro status_leveling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_leveling\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_homing\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cleaning\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_meshing\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_calibrating_z\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_printing\nset_nozzle_leds_on'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_sam4e8e_00313753364B37373032303038303139-if00'}, 'mcu EBBCan': {'canbus_uuid': '8250861450f7'}, 'adxl345': {'cs_pin': 'EBBCan:gpio1', 'spi_software_sclk_pin': 'EBBCan:gpio2', 'spi_software_mosi_pin': 'EBBCan:gpio0', 'spi_software_miso_pin': 'EBBCan:gpio3', 'axes_map': 'z,-y,x'}, 'resonance_tester': {'probe_points': '100, 100, 20', 'accel_chip': 'adxl345'}, 'input_shaper': {'shaper_freq_x': '45', 'shaper_type': '3hump_ei'}, 'stepper_x': {'step_pin': 'PD6', 'dir_pin': '!PD11', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'EBBCan:gpio24', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '40'}, 'tmc2660 stepper_x': {'cs_pin': 'PD14', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'stepper_y': {'step_pin': 'PD7', 'dir_pin': '!PD12', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'PA2', 'position_endstop': '0', 'position_max': '225', 'position_min': '-4', 'homing_speed': '35', 'homing_retract_dist': '0'}, 'tmc2660 stepper_y': {'cs_pin': 'PC9', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'stepper_z': {'step_pin': 'PD8', 'dir_pin': '!PD13', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '230', 'position_min': '-2.5', 'homing_speed': '35.0'}, 'tmc2660 stepper_z': {'cs_pin': 'PC10', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'adc_temperature my_thermistor': {'temperature1': '0', 'resistance1': '1000', 'temperature2': '80', 'resistance2': '1309'}, 'extruder': {'step_pin': '!EBBCan:gpio18', 'dir_pin': 'EBBCan:gpio19', 'enable_pin': '!EBBCan:gpio17', 'microsteps': '32', 'rotation_distance': '21.63024711', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'pressure_advance': '0.065', 'pressure_advance_smooth_time': '0.02', 'gear_ratio': '50:10', 'heater_pin': 'EBBCan:gpio7', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'EBBCan:gpio27', 'control': 'pid', 'pid_kp': '21.527', 'pid_ki': '1.063', 'pid_kd': '108.982', 'min_temp': '0', 'max_temp': '250'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan:gpio20', 'run_current': '0.5', 'stealthchop_threshold': '999999'}, 'filament_switch_sensor extruder': {'pause_on_runout': 'True', 'switch_pin': 'EBBCan:gpio21'}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu'}, 'thermistor chamber_temp': {'temperature1': '25', 'resistance1': '10000', 'beta': '3950'}, 'heater_bed': {'heater_pin': '!PA19', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PC13', 'control': 'watermark', 'min_temp': '0', 'max_temp': '120'}, 'heater_fan extruder_fan': {'pin': 'EBBCan:gpio13', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'EBBCan:gpio14', 'cycle_time': '.08', 'kick_start_time': '.25'}, 'probe': {'pin': '^EBBCan:gpio22', 'x_offset': '0', 'y_offset': '0', 'samples': '3', 'samples_result': 'median', 'sample_retract_dist': '3', 'samples_tolerance': '0.015', 'samples_tolerance_retries': '3', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'z_offset': '-1.350'}, 'homing_override': {'axes': 'z', 'set_position_z': '0', 'gcode': '\nstatus_homing\nG90\nG0 Z5 F500\nG28 X0 Y0\nG0 X150 Y100 F9000\nG28 Z0\nG0 Z5 F500\nstatus_ready'}, 'bed_mesh': {'speed': '150', 'horizontal_move_z': '5', 'mesh_min': '25,35.0', 'mesh_max': '225.0,220', 'probe_count': '6,6', 'algorithm': 'bicubic', 'fade_start': '1', 'fade_end': '10', 'fade_target': '0'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\nSTATUS_HEATING\nM109 S150\nSTATUS_HOMING\nM117 Homing...\nG28 Y0 X0 Z0\nSTATUS_MESHING\nBED_MESH_CALIBRATE ADAPTIVE=1\n\n\n\n\n\n\n\n\n\n\n\nSTATUS_HEATING\nM107\nM117 Heating bed\nM190 S{ params.BED }\nM117 Heating nozzle\nM109 S{target_extruder}\nstatus_ready\nG1 Z15.0 F600\nG1 X125 Y125 F3000\nG92 E0\nG1 F9000\nstatus_printing\nM117 Printing...'}, 'gcode_macro PRINT_END': {'gcode': '\nstatus_busy\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\n\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y} F3600\nM117 Finished!\nstatus_off'}, 'gcode_macro M600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state'}, 'printer': {'kinematics': 'corexz', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '5', 'max_z_accel': '100'}, 'force_move': {'enable_force_move': 'true'}, 'exclude_object': {}, 'bed_mesh default': {'version': '1', 'points': '\n-0.100000, -0.025000, 0.012500, 0.037500, 0.125000, 0.212500\n-0.187500, -0.100000, -0.025000, 0.025000, 0.100000, 0.212500\n-0.262500, -0.162500, -0.075000, -0.012500, 0.075000, 0.187500\n-0.262500, -0.162500, -0.087500, -0.000000, 0.100000, 0.237500\n-0.200000, -0.100000, -0.012500, 0.062500, 0.200000, 0.350000\n-0.225000, -0.075000, -0.000000, 0.087500, 0.225000, 0.387500', 'x_count': '6', 'y_count': '6', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'bicubic', 'tension': '0.2', 'min_x': '25.0', 'max_x': '225.0', 'min_y': '35.0', 'max_y': '220.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_sam4e8e_00313753364B37373032303038303139-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu ebbcan': {'canbus_uuid': '8250861450f7', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set allow_park = client.park_at_cancel | default(false) | lower == \'true\' %}\n{% set retract = client.cancel_retract | default(5.0) | abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x | default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y | default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x | length > 0 or park_y | length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro | default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set idle_timeout = client.idle_timeout | default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE | default(1) | int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro | default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move | default(velocity) %}\n{% set runout_resume = True if client.runout_sensor | default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state | upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro | default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY | default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'neopixel sb_leds': {'pin': 'EBBCan:gpio16', 'chain_count': 3, 'color_order': ['GRB'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'led_effect sb_logo_busy': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1,0,0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_cleaning': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.02, 0.5)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_calibrating_z': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 0.35)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1, 0.18, 0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0, 0, 1)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_homing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.6, 0.2)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_leveling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.5, 0.1, 0.4)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_meshing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.2, 1.0, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_printing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.3, 0.3, 0.0),(0.3, 0.1, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_standby': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.01, 0.01, 0.01)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 1.0, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_nozzle_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1.0, 0.18, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 1.0, 0.1)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_standby': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.6, 0.0, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.6, 1.0, 0.0, 0.1)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_critical_error': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': True, 'endstops': '', 'layers': '\nstrobe         1  1.5   add        (1.0,  1.0, 1.0)\nbreathing      2  0     difference (0.95, 0.0, 0.0)\nstatic         1  0     top        (1.0,  0.0, 0.0)', 'leds': '\nneopixel:sb_leds'}, 'led_effect rainbow': {'frame_rate': 24.0, 'autostart': True, 'run_on_error': False, 'endstops': '', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.0, 0.3, 0.0),(0.0, 0.0, 0.3)', 'leds': '\nneopixel:sb_leds'}, 'led_effect set_nozzle_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic         0  0     top        (0.5,  0.5, 0.5)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect set_logo_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic         0  0     top        (1.0,  1.0, 1.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'gcode_macro set_logo_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nSTOP_LED_EFFECTS', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=rainbow', 'description': 'G-Code macro'}, 'gcode_macro status_part_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_busy\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_heating\nSET_LED_EFFECT EFFECT=sb_nozzle_heating', 'description': 'G-Code macro'}, 'gcode_macro status_cooling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cooling\nSET_LED_EFFECT EFFECT=sb_nozzle_cooling', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_leveling\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_homing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cleaning\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_meshing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_calibrating_z\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_printing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'adxl345': {'axes_map': ['z', '-y', 'x'], 'rate': 3200, 'cs_pin': 'EBBCan:gpio1', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'EBBCan:gpio2', 'spi_software_miso_pin': 'EBBCan:gpio3', 'spi_software_mosi_pin': 'EBBCan:gpio0'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[100.0, 100.0, 20.0]], 'accel_chip': 'adxl345'}, 'input_shaper': {'shaper_type': '3hump_ei', 'shaper_type_x': '3hump_ei', 'damping_ratio_x': 0.1, 'shaper_freq_x': 45.0, 'shaper_type_y': '3hump_ei', 'damping_ratio_y': 0.1, 'shaper_freq_y': 0.0}, 'tmc2660 stepper_x': {'cs_pin': 'PD14', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PD6', 'dir_pin': '!PD11', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'EBBCan:gpio24', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2660 stepper_y': {'cs_pin': 'PC9', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PD7', 'dir_pin': '!PD12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'PA2', 'position_endstop': 0.0, 'position_min': -4.0, 'position_max': 225.0, 'homing_speed': 35.0, 'second_homing_speed': 17.5, 'homing_retract_speed': 35.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2660 stepper_z': {'cs_pin': 'PC10', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PD8', 'dir_pin': '!PD13', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -2.5, 'position_max': 230.0, 'homing_speed': 35.0, 'second_homing_speed': 17.5, 'homing_retract_speed': 35.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'adc_temperature my_thermistor': {'resistance1': 1000.0, 'temperature1': 0.0, 'temperature2': 80.0, 'resistance2': 1309.0}, 'tmc2209 extruder': {'uart_pin': 'EBBCan:gpio20', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan:gpio27', 'min_temp': 0.0, 'max_temp': 250.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 21.527, 'pid_ki': 1.063, 'pid_kd': 108.982, 'heater_pin': 'EBBCan:gpio7', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': '!EBBCan:gpio18', 'pressure_advance': 0.065, 'pressure_advance_smooth_time': 0.02, 'dir_pin': 'EBBCan:gpio19', 'rotation_distance': 21.63024711, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!EBBCan:gpio17'}, 'filament_switch_sensor extruder': {'switch_pin': 'EBBCan:gpio21', 'pause_on_runout': True, 'runout_gcode': '', 'pause_delay': 0.5, 'event_delay': 3.0}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'thermistor chamber_temp': {'temperature1': 25.0, 'resistance1': 10000.0, 'beta': 3950.0}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PC13', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'watermark', 'max_delta': 2.0, 'heater_pin': '!PA19', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan extruder_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'EBBCan:gpio13', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.25, 'off_below': 0.0, 'cycle_time': 0.08, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'EBBCan:gpio14'}, 'probe': {'z_offset': -1.35, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': '^EBBCan:gpio22', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 3, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.015, 'samples_tolerance_retries': 3}, 'homing_override': {'set_position_z': 0.0, 'axes': 'z', 'gcode': '\nstatus_homing\nG90\nG0 Z5 F500\nG28 X0 Y0\nG0 X150 Y100 F9000\nG28 Z0\nG0 Z5 F500\nstatus_ready'}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [6, 6], 'mesh_min': [25.0, 35.0], 'mesh_max': [225.0, 220.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 150.0, 'fade_start': 1.0, 'fade_end': 10.0, 'fade_target': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[-0.1, -0.025, 0.0125, 0.0375, 0.125, 0.2125], [-0.1875, -0.1, -0.025, 0.025, 0.1, 0.2125], [-0.2625, -0.1625, -0.075, -0.0125, 0.075, 0.1875], [-0.2625, -0.1625, -0.0875, -0.0, 0.1, 0.2375], [-0.2, -0.1, -0.0125, 0.0625, 0.2, 0.35], [-0.225, -0.075, -0.0, 0.0875, 0.225, 0.3875]], 'min_x': 25.0, 'max_x': 225.0, 'min_y': 35.0, 'max_y': 220.0, 'x_count': 6, 'y_count': 6, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'bicubic', 'tension': 0.2}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\nSTATUS_HEATING\nM109 S150\nSTATUS_HOMING\nM117 Homing...\nG28 Y0 X0 Z0\nSTATUS_MESHING\nBED_MESH_CALIBRATE ADAPTIVE=1\n\n\n\n\n\n\n\n\n\n\n\nSTATUS_HEATING\nM107\nM117 Heating bed\nM190 S{ params.BED }\nM117 Heating nozzle\nM109 S{target_extruder}\nstatus_ready\nG1 Z15.0 F600\nG1 X125 Y125 F3000\nG92 E0\nG1 F9000\nstatus_printing\nM117 Printing...', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\nstatus_busy\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\n\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y} F3600\nM117 Finished!\nstatus_off', 'description': 'G-Code macro'}, 'gcode_macro m600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state', 'description': 'G-Code macro'}, 'force_move': {'enable_force_move': True}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'minimum_cruise_ratio': 0.5, 'square_corner_velocity': 5.0, 'kinematics': 'corexz', 'max_z_velocity': 5.0, 'max_z_accel': 100.0}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-07-16 20:52:42,784 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-07-16 20:52:42,786 [printer.py:reinit()] - Klipper version: v0.12.0-175-g7b490f3e-dirty
2024-07-16 20:52:42,786 [printer.py:reinit()] - # Extruders: 1
2024-07-16 20:52:42,786 [printer.py:reinit()] - # Temperature devices: 2
2024-07-16 20:52:42,786 [printer.py:reinit()] - # Fans: 2
2024-07-16 20:52:42,786 [printer.py:reinit()] - # Output pins: 0
2024-07-16 20:52:42,786 [printer.py:reinit()] - # Leds: 20
2024-07-16 20:52:42,787 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-07-16 20:52:42,804 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-07-16 20:52:42,806 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor mcu&fan&heater_fan extruder_fan&filament_switch_sensor extruder&neopixel sb_leds
2024-07-16 20:52:43,076 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-07-16 20:52:43,077 [screen.py:init_klipper()] - Printer initialized
2024-07-16 20:52:43,077 [printer.py:change_state()] - Changing state from 'disconnected' to 'error'
2024-07-16 20:52:43,077 [printer.py:change_state()] - Adding callback for state: error
2024-07-16 20:52:43,256 [screen.py:show_panel()] - Reinitializing panel
2024-07-16 20:52:43,319 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-07-16 20:52:45,886 [KlippyWebsocket.py:restart_firmware()] - Sending printer.firmware_restart
2024-07-16 20:52:46,205 [printer.py:change_state()] - Changing state from 'error' to 'disconnected'
2024-07-16 20:52:46,205 [printer.py:change_state()] - Adding callback for state: disconnected
2024-07-16 20:52:46,207 [screen.py:state_disconnected()] - ### Going to disconnected
2024-07-16 20:52:46,207 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-07-16 20:52:46,210 [screen.py:show_panel()] - Reinitializing panel
2024-07-16 20:52:46,305 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-07-16 20:52:49,387 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-07-16 20:52:49,398 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-07-16 20:52:49,409 [printer.py:configure_cameras()] - Cameras: []
2024-07-16 20:52:49,409 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'octoprint_compat', 'update_manager', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-337-g546a17f', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-07-16 20:52:49,409 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-07-16 20:52:49,421 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-07-16 20:52:49,446 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set allow_park = client.park_at_cancel | default(false) | lower == \'true\' %}\n{% set retract = client.cancel_retract | default(5.0) | abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x | default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y | default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x | length > 0 or park_y | length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro | default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set idle_timeout = client.idle_timeout | default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE | default(1) | int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro | default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move | default(velocity) %}\n{% set runout_resume = True if client.runout_sensor | default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state | upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro | default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY | default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}"}, 'neopixel sb_leds': {'pin': 'EBBCan:gpio16', 'chain_count': '3', 'color_order': 'GRB', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0'}, 'led_effect sb_logo_busy': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (1,0,0)'}, 'led_effect sb_logo_cleaning': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.02, 0.5)'}, 'led_effect sb_logo_calibrating_z': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 0.35)'}, 'led_effect sb_logo_heating': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nbreathing  3 1 top (1, 0.18, 0)'}, 'led_effect sb_logo_cooling': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nbreathing  3 1 top (0, 0, 1)'}, 'led_effect sb_logo_homing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.6, 0.2)'}, 'led_effect sb_logo_leveling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.5, 0.1, 0.4)'}, 'led_effect sb_logo_meshing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.2, 1.0, 0.0)'}, 'led_effect sb_logo_printing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.3, 0.3, 0.0),(0.3, 0.1, 0.0)'}, 'led_effect sb_logo_standby': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.01, 0.01, 0.01)'}, 'led_effect sb_logo_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 1.0, 0.0)'}, 'led_effect sb_nozzle_heating': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (1.0, 0.18, 0.0, 0.0)'}, 'led_effect sb_nozzle_cooling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 1.0, 0.1)'}, 'led_effect sb_nozzle_standby': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.6, 0.0, 0.0, 0.0)'}, 'led_effect sb_nozzle_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.6, 1.0, 0.0, 0.1)'}, 'led_effect sb_critical_error': {'leds': '\nneopixel:sb_leds', 'layers': '\nstrobe         1  1.5   add        (1.0,  1.0, 1.0)\nbreathing      2  0     difference (0.95, 0.0, 0.0)\nstatic         1  0     top        (1.0,  0.0, 0.0)', 'autostart': 'false', 'frame_rate': '24', 'run_on_error': 'true'}, 'led_effect rainbow': {'leds': '\nneopixel:sb_leds', 'autostart': 'true', 'frame_rate': '24', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.0, 0.3, 0.0),(0.0, 0.0, 0.3)'}, 'led_effect set_nozzle_leds': {'leds': '\nneopixel:sb_leds (2,3)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nstatic         0  0     top        (0.5,  0.5, 0.5)'}, 'led_effect set_logo_leds': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nstatic         0  0     top        (1.0,  1.0, 1.0)'}, 'gcode_macro set_logo_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds STOP=1'}, 'gcode_macro set_logo_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1'}, 'gcode_macro status_off': {'gcode': '\nSTOP_LED_EFFECTS'}, 'gcode_macro status_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=rainbow'}, 'gcode_macro status_part_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready'}, 'gcode_macro status_busy': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_busy\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_heating\nSET_LED_EFFECT EFFECT=sb_nozzle_heating'}, 'gcode_macro status_cooling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cooling\nSET_LED_EFFECT EFFECT=sb_nozzle_cooling'}, 'gcode_macro status_leveling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_leveling\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_homing\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cleaning\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_meshing\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_calibrating_z\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_printing\nset_nozzle_leds_on'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_sam4e8e_00313753364B37373032303038303139-if00'}, 'mcu EBBCan': {'canbus_uuid': '8250861450f7'}, 'adxl345': {'cs_pin': 'EBBCan:gpio1', 'spi_software_sclk_pin': 'EBBCan:gpio2', 'spi_software_mosi_pin': 'EBBCan:gpio0', 'spi_software_miso_pin': 'EBBCan:gpio3', 'axes_map': 'z,-y,x'}, 'resonance_tester': {'probe_points': '100, 100, 20', 'accel_chip': 'adxl345'}, 'input_shaper': {'shaper_freq_x': '45', 'shaper_type': '3hump_ei'}, 'stepper_x': {'step_pin': 'PD6', 'dir_pin': '!PD11', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'EBBCan:gpio24', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '40'}, 'tmc2660 stepper_x': {'cs_pin': 'PD14', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'stepper_y': {'step_pin': 'PD7', 'dir_pin': '!PD12', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'PA2', 'position_endstop': '0', 'position_max': '225', 'position_min': '-4', 'homing_speed': '35', 'homing_retract_dist': '0'}, 'tmc2660 stepper_y': {'cs_pin': 'PC9', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'stepper_z': {'step_pin': 'PD8', 'dir_pin': '!PD13', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '230', 'position_min': '-2.5', 'homing_speed': '35.0'}, 'tmc2660 stepper_z': {'cs_pin': 'PC10', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'adc_temperature my_thermistor': {'temperature1': '0', 'resistance1': '1000', 'temperature2': '80', 'resistance2': '1309'}, 'extruder': {'step_pin': '!EBBCan:gpio18', 'dir_pin': 'EBBCan:gpio19', 'enable_pin': '!EBBCan:gpio17', 'microsteps': '32', 'rotation_distance': '21.63024711', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'pressure_advance': '0.065', 'pressure_advance_smooth_time': '0.02', 'gear_ratio': '50:10', 'heater_pin': 'EBBCan:gpio7', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'EBBCan:gpio27', 'control': 'pid', 'pid_kp': '21.527', 'pid_ki': '1.063', 'pid_kd': '108.982', 'min_temp': '0', 'max_temp': '250'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan:gpio20', 'run_current': '0.5', 'stealthchop_threshold': '999999'}, 'filament_switch_sensor extruder': {'pause_on_runout': 'True', 'switch_pin': 'EBBCan:gpio21'}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu'}, 'thermistor chamber_temp': {'temperature1': '25', 'resistance1': '10000', 'beta': '3950'}, 'heater_bed': {'heater_pin': '!PA19', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PC13', 'control': 'watermark', 'min_temp': '0', 'max_temp': '120'}, 'heater_fan extruder_fan': {'pin': 'EBBCan:gpio13', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'EBBCan:gpio14', 'cycle_time': '.08', 'kick_start_time': '.25'}, 'probe': {'pin': '^EBBCan:gpio22', 'x_offset': '0', 'y_offset': '0', 'samples': '3', 'samples_result': 'median', 'sample_retract_dist': '3', 'samples_tolerance': '0.015', 'samples_tolerance_retries': '3', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'z_offset': '-1.350'}, 'homing_override': {'axes': 'z', 'set_position_z': '0', 'gcode': '\nstatus_homing\nG90\nG0 Z5 F500\nG28 X0 Y0\nG0 X150 Y100 F9000\nG28 Z0\nG0 Z5 F500\nstatus_ready'}, 'bed_mesh': {'speed': '150', 'horizontal_move_z': '5', 'mesh_min': '25,35.0', 'mesh_max': '225.0,220', 'probe_count': '6,6', 'algorithm': 'bicubic', 'fade_start': '1', 'fade_end': '10', 'fade_target': '0'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\nSTATUS_HEATING\nM109 S150\nSTATUS_HOMING\nM117 Homing...\nG28 Y0 X0 Z0\nSTATUS_MESHING\nBED_MESH_CALIBRATE ADAPTIVE=1\n\n\n\n\n\n\n\n\n\n\n\nSTATUS_HEATING\nM107\nM117 Heating bed\nM190 S{ params.BED }\nM117 Heating nozzle\nM109 S{target_extruder}\nstatus_ready\nG1 Z15.0 F600\nG1 X125 Y125 F3000\nG92 E0\nG1 F9000\nstatus_printing\nM117 Printing...'}, 'gcode_macro PRINT_END': {'gcode': '\nstatus_busy\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\n\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y} F3600\nM117 Finished!\nstatus_off'}, 'gcode_macro M600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state'}, 'printer': {'kinematics': 'corexz', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '5', 'max_z_accel': '100'}, 'force_move': {'enable_force_move': 'true'}, 'exclude_object': {}, 'bed_mesh default': {'version': '1', 'points': '\n-0.100000, -0.025000, 0.012500, 0.037500, 0.125000, 0.212500\n-0.187500, -0.100000, -0.025000, 0.025000, 0.100000, 0.212500\n-0.262500, -0.162500, -0.075000, -0.012500, 0.075000, 0.187500\n-0.262500, -0.162500, -0.087500, -0.000000, 0.100000, 0.237500\n-0.200000, -0.100000, -0.012500, 0.062500, 0.200000, 0.350000\n-0.225000, -0.075000, -0.000000, 0.087500, 0.225000, 0.387500', 'x_count': '6', 'y_count': '6', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'bicubic', 'tension': '0.2', 'min_x': '25.0', 'max_x': '225.0', 'min_y': '35.0', 'max_y': '220.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_sam4e8e_00313753364B37373032303038303139-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu ebbcan': {'canbus_uuid': '8250861450f7', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set allow_park = client.park_at_cancel | default(false) | lower == \'true\' %}\n{% set retract = client.cancel_retract | default(5.0) | abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x | default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y | default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x | length > 0 or park_y | length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro | default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set idle_timeout = client.idle_timeout | default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE | default(1) | int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro | default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move | default(velocity) %}\n{% set runout_resume = True if client.runout_sensor | default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state | upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro | default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY | default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'neopixel sb_leds': {'pin': 'EBBCan:gpio16', 'chain_count': 3, 'color_order': ['GRB'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'led_effect sb_logo_busy': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1,0,0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_cleaning': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.02, 0.5)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_calibrating_z': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 0.35)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1, 0.18, 0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0, 0, 1)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_homing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.6, 0.2)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_leveling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.5, 0.1, 0.4)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_meshing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.2, 1.0, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_printing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.3, 0.3, 0.0),(0.3, 0.1, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_standby': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.01, 0.01, 0.01)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 1.0, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_nozzle_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1.0, 0.18, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 1.0, 0.1)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_standby': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.6, 0.0, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.6, 1.0, 0.0, 0.1)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_critical_error': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': True, 'endstops': '', 'layers': '\nstrobe         1  1.5   add        (1.0,  1.0, 1.0)\nbreathing      2  0     difference (0.95, 0.0, 0.0)\nstatic         1  0     top        (1.0,  0.0, 0.0)', 'leds': '\nneopixel:sb_leds'}, 'led_effect rainbow': {'frame_rate': 24.0, 'autostart': True, 'run_on_error': False, 'endstops': '', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.0, 0.3, 0.0),(0.0, 0.0, 0.3)', 'leds': '\nneopixel:sb_leds'}, 'led_effect set_nozzle_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic         0  0     top        (0.5,  0.5, 0.5)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect set_logo_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic         0  0     top        (1.0,  1.0, 1.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'gcode_macro set_logo_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nSTOP_LED_EFFECTS', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=rainbow', 'description': 'G-Code macro'}, 'gcode_macro status_part_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_busy\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_heating\nSET_LED_EFFECT EFFECT=sb_nozzle_heating', 'description': 'G-Code macro'}, 'gcode_macro status_cooling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cooling\nSET_LED_EFFECT EFFECT=sb_nozzle_cooling', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_leveling\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_homing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cleaning\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_meshing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_calibrating_z\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_printing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'adxl345': {'axes_map': ['z', '-y', 'x'], 'rate': 3200, 'cs_pin': 'EBBCan:gpio1', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'EBBCan:gpio2', 'spi_software_miso_pin': 'EBBCan:gpio3', 'spi_software_mosi_pin': 'EBBCan:gpio0'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[100.0, 100.0, 20.0]], 'accel_chip': 'adxl345'}, 'input_shaper': {'shaper_type': '3hump_ei', 'shaper_type_x': '3hump_ei', 'damping_ratio_x': 0.1, 'shaper_freq_x': 45.0, 'shaper_type_y': '3hump_ei', 'damping_ratio_y': 0.1, 'shaper_freq_y': 0.0}, 'tmc2660 stepper_x': {'cs_pin': 'PD14', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PD6', 'dir_pin': '!PD11', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'EBBCan:gpio24', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2660 stepper_y': {'cs_pin': 'PC9', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PD7', 'dir_pin': '!PD12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'PA2', 'position_endstop': 0.0, 'position_min': -4.0, 'position_max': 225.0, 'homing_speed': 35.0, 'second_homing_speed': 17.5, 'homing_retract_speed': 35.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2660 stepper_z': {'cs_pin': 'PC10', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PD8', 'dir_pin': '!PD13', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -2.5, 'position_max': 230.0, 'homing_speed': 35.0, 'second_homing_speed': 17.5, 'homing_retract_speed': 35.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'adc_temperature my_thermistor': {'resistance1': 1000.0, 'temperature1': 0.0, 'temperature2': 80.0, 'resistance2': 1309.0}, 'tmc2209 extruder': {'uart_pin': 'EBBCan:gpio20', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan:gpio27', 'min_temp': 0.0, 'max_temp': 250.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 21.527, 'pid_ki': 1.063, 'pid_kd': 108.982, 'heater_pin': 'EBBCan:gpio7', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': '!EBBCan:gpio18', 'pressure_advance': 0.065, 'pressure_advance_smooth_time': 0.02, 'dir_pin': 'EBBCan:gpio19', 'rotation_distance': 21.63024711, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!EBBCan:gpio17'}, 'filament_switch_sensor extruder': {'switch_pin': 'EBBCan:gpio21', 'pause_on_runout': True, 'runout_gcode': '', 'pause_delay': 0.5, 'event_delay': 3.0}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'thermistor chamber_temp': {'temperature1': 25.0, 'resistance1': 10000.0, 'beta': 3950.0}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PC13', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'watermark', 'max_delta': 2.0, 'heater_pin': '!PA19', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan extruder_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'EBBCan:gpio13', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.25, 'off_below': 0.0, 'cycle_time': 0.08, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'EBBCan:gpio14'}, 'probe': {'z_offset': -1.35, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': '^EBBCan:gpio22', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 3, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.015, 'samples_tolerance_retries': 3}, 'homing_override': {'set_position_z': 0.0, 'axes': 'z', 'gcode': '\nstatus_homing\nG90\nG0 Z5 F500\nG28 X0 Y0\nG0 X150 Y100 F9000\nG28 Z0\nG0 Z5 F500\nstatus_ready'}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [6, 6], 'mesh_min': [25.0, 35.0], 'mesh_max': [225.0, 220.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 150.0, 'fade_start': 1.0, 'fade_end': 10.0, 'fade_target': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[-0.1, -0.025, 0.0125, 0.0375, 0.125, 0.2125], [-0.1875, -0.1, -0.025, 0.025, 0.1, 0.2125], [-0.2625, -0.1625, -0.075, -0.0125, 0.075, 0.1875], [-0.2625, -0.1625, -0.0875, -0.0, 0.1, 0.2375], [-0.2, -0.1, -0.0125, 0.0625, 0.2, 0.35], [-0.225, -0.075, -0.0, 0.0875, 0.225, 0.3875]], 'min_x': 25.0, 'max_x': 225.0, 'min_y': 35.0, 'max_y': 220.0, 'x_count': 6, 'y_count': 6, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'bicubic', 'tension': 0.2}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\nSTATUS_HEATING\nM109 S150\nSTATUS_HOMING\nM117 Homing...\nG28 Y0 X0 Z0\nSTATUS_MESHING\nBED_MESH_CALIBRATE ADAPTIVE=1\n\n\n\n\n\n\n\n\n\n\n\nSTATUS_HEATING\nM107\nM117 Heating bed\nM190 S{ params.BED }\nM117 Heating nozzle\nM109 S{target_extruder}\nstatus_ready\nG1 Z15.0 F600\nG1 X125 Y125 F3000\nG92 E0\nG1 F9000\nstatus_printing\nM117 Printing...', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\nstatus_busy\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\n\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y} F3600\nM117 Finished!\nstatus_off', 'description': 'G-Code macro'}, 'gcode_macro m600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state', 'description': 'G-Code macro'}, 'force_move': {'enable_force_move': True}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'minimum_cruise_ratio': 0.5, 'square_corner_velocity': 5.0, 'kinematics': 'corexz', 'max_z_velocity': 5.0, 'max_z_accel': 100.0}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-07-16 20:52:49,449 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-07-16 20:52:49,451 [printer.py:reinit()] - Klipper version: v0.12.0-175-g7b490f3e-dirty
2024-07-16 20:52:49,451 [printer.py:reinit()] - # Extruders: 1
2024-07-16 20:52:49,451 [printer.py:reinit()] - # Temperature devices: 2
2024-07-16 20:52:49,451 [printer.py:reinit()] - # Fans: 2
2024-07-16 20:52:49,451 [printer.py:reinit()] - # Output pins: 0
2024-07-16 20:52:49,451 [printer.py:reinit()] - # Leds: 20
2024-07-16 20:52:49,451 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-07-16 20:52:49,467 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-07-16 20:52:49,470 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor mcu&fan&heater_fan extruder_fan&filament_switch_sensor extruder&neopixel sb_leds
2024-07-16 20:52:49,742 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-07-16 20:52:49,742 [screen.py:init_klipper()] - Printer initialized
2024-07-16 20:52:49,742 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-07-16 20:52:49,743 [printer.py:change_state()] - Adding callback for state: startup
2024-07-16 20:54:27,134 [functions.py:log_start()] - --------------------KlipperScreen Log Start--------------------
2024-07-16 20:54:27,134 [functions.py:log_start()] - KlipperScreen Version: v0.3.9-50-gdaed9a0
2024-07-16 20:54:27,134 [functions.py:log_start()] - Python version: 3.11
2024-07-16 20:54:27,287 [config.py:get_config_file_location()] - Passed config (-c): .
2024-07-16 20:54:27,288 [config.py:__init__()] - Config path location: /home/pi/printer_data/config/KlipperScreen.conf
2024-07-16 20:54:27,313 [config.py:log_config()] -  ===== Config File =====

=======================
2024-07-16 20:54:27,315 [config.py:__init__()] - ====== Saved Def ======

[main]
use_dpms = False
print_sort_dir = date_desc

=======================
2024-07-16 20:54:27,316 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2024-07-16 20:54:27,423 [config.py:create_translations()] - Selected lang: None OS lang: en_GB
2024-07-16 20:54:27,423 [config.py:install_language()] - Using lang en
2024-07-16 20:54:27,442 [screen.py:__init__()] - Monitors: 1 using number: 0
2024-07-16 20:54:27,443 [screen.py:__init__()] - Wayland: False Display name: :100
2024-07-16 20:54:27,446 [screen.py:__init__()] - Screen resolution: 984x540
2024-07-16 20:54:27,448 [KlippyGtk.py:__init__()] - Font size: 18.6 (medium)
2024-07-16 20:54:28,053 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2024-07-16 20:54:28,053 [screen.py:set_screenblanking_timeout()] - Not using DPMS
2024-07-16 20:54:28,062 [screen.py:initial_connection()] - Default printer: None
2024-07-16 20:54:28,127 [screen.py:connect_printer()] - Connecting to printer: Printer
2024-07-16 20:54:28,128 [screen.py:_load_panel()] - Loading panel: splash_screen
2024-07-16 20:54:28,202 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-07-16 20:54:28,222 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-07-16 20:54:28,222 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-07-16 20:54:28,240 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/access/oneshot_token
2024-07-16 20:54:28,252 [KlippyWebsocket.py:connect()] - Starting websocket thread
2024-07-16 20:54:28,262 [_logging.py:info()] - Websocket connected
2024-07-16 20:54:28,265 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2024-07-16 20:54:28,272 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-07-16 20:54:28,284 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-07-16 20:54:28,297 [printer.py:configure_cameras()] - Cameras: []
2024-07-16 20:54:28,297 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': False, 'klippy_state': 'disconnected', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'octoprint_compat', 'update_manager', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-337-g546a17f', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-07-16 20:54:28,298 [screen.py:init_klipper()] - Klipper not connected
2024-07-16 20:54:31,388 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-07-16 20:54:31,410 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'octoprint_compat', 'update_manager', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-337-g546a17f', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-07-16 20:54:31,410 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-07-16 20:54:31,431 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-07-16 20:54:31,477 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set allow_park = client.park_at_cancel | default(false) | lower == \'true\' %}\n{% set retract = client.cancel_retract | default(5.0) | abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x | default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y | default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x | length > 0 or park_y | length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro | default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set idle_timeout = client.idle_timeout | default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE | default(1) | int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro | default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move | default(velocity) %}\n{% set runout_resume = True if client.runout_sensor | default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state | upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro | default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY | default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}"}, 'neopixel sb_leds': {'pin': 'EBBCan:gpio16', 'chain_count': '3', 'color_order': 'GRB', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0'}, 'led_effect sb_logo_busy': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (1,0,0)'}, 'led_effect sb_logo_cleaning': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.02, 0.5)'}, 'led_effect sb_logo_calibrating_z': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 0.35)'}, 'led_effect sb_logo_heating': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nbreathing  3 1 top (1, 0.18, 0)'}, 'led_effect sb_logo_cooling': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nbreathing  3 1 top (0, 0, 1)'}, 'led_effect sb_logo_homing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.6, 0.2)'}, 'led_effect sb_logo_leveling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.5, 0.1, 0.4)'}, 'led_effect sb_logo_meshing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.2, 1.0, 0.0)'}, 'led_effect sb_logo_printing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.3, 0.3, 0.0),(0.3, 0.1, 0.0)'}, 'led_effect sb_logo_standby': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.01, 0.01, 0.01)'}, 'led_effect sb_logo_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 1.0, 0.0)'}, 'led_effect sb_nozzle_heating': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (1.0, 0.18, 0.0, 0.0)'}, 'led_effect sb_nozzle_cooling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 1.0, 0.1)'}, 'led_effect sb_nozzle_standby': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.6, 0.0, 0.0, 0.0)'}, 'led_effect sb_nozzle_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.6, 1.0, 0.0, 0.1)'}, 'led_effect sb_critical_error': {'leds': '\nneopixel:sb_leds', 'layers': '\nstrobe         1  1.5   add        (1.0,  1.0, 1.0)\nbreathing      2  0     difference (0.95, 0.0, 0.0)\nstatic         1  0     top        (1.0,  0.0, 0.0)', 'autostart': 'false', 'frame_rate': '24', 'run_on_error': 'true'}, 'led_effect rainbow': {'leds': '\nneopixel:sb_leds', 'autostart': 'true', 'frame_rate': '24', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.0, 0.3, 0.0),(0.0, 0.0, 0.3)'}, 'led_effect set_nozzle_leds': {'leds': '\nneopixel:sb_leds (2,3)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nstatic         0  0     top        (0.5,  0.5, 0.5)'}, 'led_effect set_logo_leds': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nstatic         0  0     top        (1.0,  1.0, 1.0)'}, 'gcode_macro set_logo_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds STOP=1'}, 'gcode_macro set_logo_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1'}, 'gcode_macro status_off': {'gcode': '\nSTOP_LED_EFFECTS'}, 'gcode_macro status_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=rainbow'}, 'gcode_macro status_part_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready'}, 'gcode_macro status_busy': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_busy\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_heating\nSET_LED_EFFECT EFFECT=sb_nozzle_heating'}, 'gcode_macro status_cooling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cooling\nSET_LED_EFFECT EFFECT=sb_nozzle_cooling'}, 'gcode_macro status_leveling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_leveling\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_homing\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cleaning\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_meshing\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_calibrating_z\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_printing\nset_nozzle_leds_on'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_sam4e8e_00313753364B37373032303038303139-if00'}, 'mcu EBBCan': {'canbus_uuid': '8250861450f7'}, 'adxl345': {'cs_pin': 'EBBCan:gpio1', 'spi_software_sclk_pin': 'EBBCan:gpio2', 'spi_software_mosi_pin': 'EBBCan:gpio0', 'spi_software_miso_pin': 'EBBCan:gpio3', 'axes_map': 'z,-y,x'}, 'resonance_tester': {'probe_points': '100, 100, 20', 'accel_chip': 'adxl345'}, 'input_shaper': {'shaper_freq_x': '45', 'shaper_type': '3hump_ei'}, 'stepper_x': {'step_pin': 'PD6', 'dir_pin': '!PD11', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'EBBCan:gpio24', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '40'}, 'tmc2660 stepper_x': {'cs_pin': 'PD14', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'stepper_y': {'step_pin': 'PD7', 'dir_pin': '!PD12', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'PA2', 'position_endstop': '0', 'position_max': '225', 'position_min': '-4', 'homing_speed': '35', 'homing_retract_dist': '0'}, 'tmc2660 stepper_y': {'cs_pin': 'PC9', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'stepper_z': {'step_pin': 'PD8', 'dir_pin': '!PD13', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '230', 'position_min': '-2.5', 'homing_speed': '35.0'}, 'tmc2660 stepper_z': {'cs_pin': 'PC10', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'adc_temperature my_thermistor': {'temperature1': '0', 'resistance1': '1000', 'temperature2': '80', 'resistance2': '1309'}, 'extruder': {'step_pin': '!EBBCan:gpio18', 'dir_pin': 'EBBCan:gpio19', 'enable_pin': '!EBBCan:gpio17', 'microsteps': '32', 'rotation_distance': '21.63024711', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'pressure_advance': '0.065', 'pressure_advance_smooth_time': '0.02', 'gear_ratio': '50:10', 'heater_pin': 'EBBCan:gpio7', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'EBBCan:gpio27', 'control': 'pid', 'pid_kp': '21.527', 'pid_ki': '1.063', 'pid_kd': '108.982', 'min_temp': '0', 'max_temp': '250'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan:gpio20', 'run_current': '0.5', 'stealthchop_threshold': '999999'}, 'filament_switch_sensor extruder': {'pause_on_runout': 'True', 'switch_pin': 'EBBCan:gpio21'}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu'}, 'thermistor chamber_temp': {'temperature1': '25', 'resistance1': '10000', 'beta': '3950'}, 'heater_bed': {'heater_pin': '!PA19', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PC13', 'control': 'watermark', 'min_temp': '0', 'max_temp': '120'}, 'heater_fan extruder_fan': {'pin': 'EBBCan:gpio13', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'EBBCan:gpio14', 'cycle_time': '.08', 'kick_start_time': '.25'}, 'probe': {'pin': '^EBBCan:gpio22', 'x_offset': '0', 'y_offset': '0', 'samples': '3', 'samples_result': 'median', 'sample_retract_dist': '3', 'samples_tolerance': '0.015', 'samples_tolerance_retries': '3', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'z_offset': '-1.350'}, 'homing_override': {'axes': 'z', 'set_position_z': '0', 'gcode': '\nstatus_homing\nG90\nG0 Z5 F500\nG28 X0 Y0\nG0 X150 Y100 F9000\nG28 Z0\nG0 Z5 F500\nstatus_ready'}, 'bed_mesh': {'speed': '150', 'horizontal_move_z': '5', 'mesh_min': '25,35.0', 'mesh_max': '225.0,220', 'probe_count': '6,6', 'algorithm': 'bicubic', 'fade_start': '1', 'fade_end': '10', 'fade_target': '0'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\nSTATUS_HEATING\nM109 S150\nSTATUS_HOMING\nM117 Homing...\nG28 Y0 X0 Z0\nSTATUS_MESHING\nBED_MESH_CALIBRATE ADAPTIVE=1\n\n\n\n\n\n\n\n\n\n\n\nSTATUS_HEATING\nM107\nM117 Heating bed\nM190 S{ params.BED }\nM117 Heating nozzle\nM109 S{target_extruder}\nstatus_ready\nG1 Z15.0 F600\nG1 X125 Y125 F3000\nG92 E0\nG1 F9000\nstatus_printing\nM117 Printing...'}, 'gcode_macro PRINT_END': {'gcode': '\nstatus_busy\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\n\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y} F3600\nM117 Finished!\nstatus_off'}, 'gcode_macro M600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state'}, 'printer': {'kinematics': 'corexz', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '5', 'max_z_accel': '100'}, 'force_move': {'enable_force_move': 'true'}, 'exclude_object': {}, 'bed_mesh default': {'version': '1', 'points': '\n-0.100000, -0.025000, 0.012500, 0.037500, 0.125000, 0.212500\n-0.187500, -0.100000, -0.025000, 0.025000, 0.100000, 0.212500\n-0.262500, -0.162500, -0.075000, -0.012500, 0.075000, 0.187500\n-0.262500, -0.162500, -0.087500, -0.000000, 0.100000, 0.237500\n-0.200000, -0.100000, -0.012500, 0.062500, 0.200000, 0.350000\n-0.225000, -0.075000, -0.000000, 0.087500, 0.225000, 0.387500', 'x_count': '6', 'y_count': '6', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'bicubic', 'tension': '0.2', 'min_x': '25.0', 'max_x': '225.0', 'min_y': '35.0', 'max_y': '220.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_sam4e8e_00313753364B37373032303038303139-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu ebbcan': {'canbus_uuid': '8250861450f7', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set allow_park = client.park_at_cancel | default(false) | lower == \'true\' %}\n{% set retract = client.cancel_retract | default(5.0) | abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x | default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y | default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x | length > 0 or park_y | length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro | default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set idle_timeout = client.idle_timeout | default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE | default(1) | int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro | default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move | default(velocity) %}\n{% set runout_resume = True if client.runout_sensor | default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state | upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro | default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY | default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'neopixel sb_leds': {'pin': 'EBBCan:gpio16', 'chain_count': 3, 'color_order': ['GRB'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'led_effect sb_logo_busy': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1,0,0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_cleaning': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.02, 0.5)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_calibrating_z': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 0.35)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1, 0.18, 0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0, 0, 1)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_homing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.6, 0.2)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_leveling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.5, 0.1, 0.4)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_meshing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.2, 1.0, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_printing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.3, 0.3, 0.0),(0.3, 0.1, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_standby': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.01, 0.01, 0.01)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 1.0, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_nozzle_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1.0, 0.18, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 1.0, 0.1)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_standby': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.6, 0.0, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.6, 1.0, 0.0, 0.1)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_critical_error': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': True, 'endstops': '', 'layers': '\nstrobe         1  1.5   add        (1.0,  1.0, 1.0)\nbreathing      2  0     difference (0.95, 0.0, 0.0)\nstatic         1  0     top        (1.0,  0.0, 0.0)', 'leds': '\nneopixel:sb_leds'}, 'led_effect rainbow': {'frame_rate': 24.0, 'autostart': True, 'run_on_error': False, 'endstops': '', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.0, 0.3, 0.0),(0.0, 0.0, 0.3)', 'leds': '\nneopixel:sb_leds'}, 'led_effect set_nozzle_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic         0  0     top        (0.5,  0.5, 0.5)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect set_logo_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic         0  0     top        (1.0,  1.0, 1.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'gcode_macro set_logo_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nSTOP_LED_EFFECTS', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=rainbow', 'description': 'G-Code macro'}, 'gcode_macro status_part_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_busy\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_heating\nSET_LED_EFFECT EFFECT=sb_nozzle_heating', 'description': 'G-Code macro'}, 'gcode_macro status_cooling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cooling\nSET_LED_EFFECT EFFECT=sb_nozzle_cooling', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_leveling\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_homing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cleaning\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_meshing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_calibrating_z\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_printing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'adxl345': {'axes_map': ['z', '-y', 'x'], 'rate': 3200, 'cs_pin': 'EBBCan:gpio1', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'EBBCan:gpio2', 'spi_software_miso_pin': 'EBBCan:gpio3', 'spi_software_mosi_pin': 'EBBCan:gpio0'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[100.0, 100.0, 20.0]], 'accel_chip': 'adxl345'}, 'input_shaper': {'shaper_type': '3hump_ei', 'shaper_type_x': '3hump_ei', 'damping_ratio_x': 0.1, 'shaper_freq_x': 45.0, 'shaper_type_y': '3hump_ei', 'damping_ratio_y': 0.1, 'shaper_freq_y': 0.0}, 'tmc2660 stepper_x': {'cs_pin': 'PD14', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PD6', 'dir_pin': '!PD11', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'EBBCan:gpio24', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2660 stepper_y': {'cs_pin': 'PC9', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PD7', 'dir_pin': '!PD12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'PA2', 'position_endstop': 0.0, 'position_min': -4.0, 'position_max': 225.0, 'homing_speed': 35.0, 'second_homing_speed': 17.5, 'homing_retract_speed': 35.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2660 stepper_z': {'cs_pin': 'PC10', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PD8', 'dir_pin': '!PD13', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -2.5, 'position_max': 230.0, 'homing_speed': 35.0, 'second_homing_speed': 17.5, 'homing_retract_speed': 35.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'adc_temperature my_thermistor': {'resistance1': 1000.0, 'temperature1': 0.0, 'temperature2': 80.0, 'resistance2': 1309.0}, 'tmc2209 extruder': {'uart_pin': 'EBBCan:gpio20', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan:gpio27', 'min_temp': 0.0, 'max_temp': 250.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 21.527, 'pid_ki': 1.063, 'pid_kd': 108.982, 'heater_pin': 'EBBCan:gpio7', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': '!EBBCan:gpio18', 'pressure_advance': 0.065, 'pressure_advance_smooth_time': 0.02, 'dir_pin': 'EBBCan:gpio19', 'rotation_distance': 21.63024711, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!EBBCan:gpio17'}, 'filament_switch_sensor extruder': {'switch_pin': 'EBBCan:gpio21', 'pause_on_runout': True, 'runout_gcode': '', 'pause_delay': 0.5, 'event_delay': 3.0}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'thermistor chamber_temp': {'temperature1': 25.0, 'resistance1': 10000.0, 'beta': 3950.0}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PC13', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'watermark', 'max_delta': 2.0, 'heater_pin': '!PA19', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan extruder_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'EBBCan:gpio13', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.25, 'off_below': 0.0, 'cycle_time': 0.08, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'EBBCan:gpio14'}, 'probe': {'z_offset': -1.35, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': '^EBBCan:gpio22', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 3, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.015, 'samples_tolerance_retries': 3}, 'homing_override': {'set_position_z': 0.0, 'axes': 'z', 'gcode': '\nstatus_homing\nG90\nG0 Z5 F500\nG28 X0 Y0\nG0 X150 Y100 F9000\nG28 Z0\nG0 Z5 F500\nstatus_ready'}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [6, 6], 'mesh_min': [25.0, 35.0], 'mesh_max': [225.0, 220.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 150.0, 'fade_start': 1.0, 'fade_end': 10.0, 'fade_target': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[-0.1, -0.025, 0.0125, 0.0375, 0.125, 0.2125], [-0.1875, -0.1, -0.025, 0.025, 0.1, 0.2125], [-0.2625, -0.1625, -0.075, -0.0125, 0.075, 0.1875], [-0.2625, -0.1625, -0.0875, -0.0, 0.1, 0.2375], [-0.2, -0.1, -0.0125, 0.0625, 0.2, 0.35], [-0.225, -0.075, -0.0, 0.0875, 0.225, 0.3875]], 'min_x': 25.0, 'max_x': 225.0, 'min_y': 35.0, 'max_y': 220.0, 'x_count': 6, 'y_count': 6, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'bicubic', 'tension': 0.2}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\nSTATUS_HEATING\nM109 S150\nSTATUS_HOMING\nM117 Homing...\nG28 Y0 X0 Z0\nSTATUS_MESHING\nBED_MESH_CALIBRATE ADAPTIVE=1\n\n\n\n\n\n\n\n\n\n\n\nSTATUS_HEATING\nM107\nM117 Heating bed\nM190 S{ params.BED }\nM117 Heating nozzle\nM109 S{target_extruder}\nstatus_ready\nG1 Z15.0 F600\nG1 X125 Y125 F3000\nG92 E0\nG1 F9000\nstatus_printing\nM117 Printing...', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\nstatus_busy\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\n\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y} F3600\nM117 Finished!\nstatus_off', 'description': 'G-Code macro'}, 'gcode_macro m600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state', 'description': 'G-Code macro'}, 'force_move': {'enable_force_move': True}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'minimum_cruise_ratio': 0.5, 'square_corner_velocity': 5.0, 'kinematics': 'corexz', 'max_z_velocity': 5.0, 'max_z_accel': 100.0}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-07-16 20:54:31,482 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-07-16 20:54:31,483 [printer.py:reinit()] - Klipper version: v0.12.0-175-g7b490f3e-dirty
2024-07-16 20:54:31,484 [printer.py:reinit()] - # Extruders: 1
2024-07-16 20:54:31,484 [printer.py:reinit()] - # Temperature devices: 2
2024-07-16 20:54:31,484 [printer.py:reinit()] - # Fans: 2
2024-07-16 20:54:31,484 [printer.py:reinit()] - # Output pins: 0
2024-07-16 20:54:31,484 [printer.py:reinit()] - # Leds: 20
2024-07-16 20:54:31,484 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-07-16 20:54:31,504 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-07-16 20:54:31,507 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor mcu&fan&heater_fan extruder_fan&filament_switch_sensor extruder&neopixel sb_leds
2024-07-16 20:54:31,741 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-07-16 20:54:31,742 [screen.py:init_klipper()] - Printer initialized
2024-07-16 20:54:31,742 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-07-16 20:54:31,742 [printer.py:change_state()] - Adding callback for state: startup
2024-07-16 20:54:51,137 [functions.py:log_start()] - --------------------KlipperScreen Log Start--------------------
2024-07-16 20:54:51,137 [functions.py:log_start()] - KlipperScreen Version: v0.3.9-50-gdaed9a0
2024-07-16 20:54:51,138 [functions.py:log_start()] - Python version: 3.11
2024-07-16 20:54:51,274 [config.py:get_config_file_location()] - Passed config (-c): .
2024-07-16 20:54:51,275 [config.py:__init__()] - Config path location: /home/pi/printer_data/config/KlipperScreen.conf
2024-07-16 20:54:51,299 [config.py:log_config()] -  ===== Config File =====

=======================
2024-07-16 20:54:51,302 [config.py:__init__()] - ====== Saved Def ======

[main]
use_dpms = False
print_sort_dir = date_desc

=======================
2024-07-16 20:54:51,302 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2024-07-16 20:54:51,406 [config.py:create_translations()] - Selected lang: None OS lang: en_GB
2024-07-16 20:54:51,410 [config.py:install_language()] - Using lang en
2024-07-16 20:54:51,428 [screen.py:__init__()] - Monitors: 1 using number: 0
2024-07-16 20:54:51,430 [screen.py:__init__()] - Wayland: False Display name: :100
2024-07-16 20:54:51,432 [screen.py:__init__()] - Screen resolution: 984x540
2024-07-16 20:54:51,434 [KlippyGtk.py:__init__()] - Font size: 18.6 (medium)
2024-07-16 20:54:51,995 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2024-07-16 20:54:51,995 [screen.py:set_screenblanking_timeout()] - Not using DPMS
2024-07-16 20:54:52,003 [screen.py:initial_connection()] - Default printer: None
2024-07-16 20:54:52,068 [screen.py:connect_printer()] - Connecting to printer: Printer
2024-07-16 20:54:52,069 [screen.py:_load_panel()] - Loading panel: splash_screen
2024-07-16 20:54:52,135 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-07-16 20:54:52,153 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-07-16 20:54:52,153 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-07-16 20:54:52,170 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/access/oneshot_token
2024-07-16 20:54:52,182 [KlippyWebsocket.py:connect()] - Starting websocket thread
2024-07-16 20:54:52,191 [_logging.py:info()] - Websocket connected
2024-07-16 20:54:52,192 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2024-07-16 20:54:52,201 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-07-16 20:54:52,212 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-07-16 20:54:52,224 [printer.py:configure_cameras()] - Cameras: []
2024-07-16 20:54:52,224 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'octoprint_compat', 'update_manager', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-337-g546a17f', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-07-16 20:54:52,224 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-07-16 20:54:52,237 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-07-16 20:54:52,276 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set allow_park = client.park_at_cancel | default(false) | lower == \'true\' %}\n{% set retract = client.cancel_retract | default(5.0) | abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x | default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y | default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x | length > 0 or park_y | length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro | default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set idle_timeout = client.idle_timeout | default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE | default(1) | int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro | default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move | default(velocity) %}\n{% set runout_resume = True if client.runout_sensor | default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state | upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro | default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY | default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}"}, 'neopixel sb_leds': {'pin': 'EBBCan:gpio16', 'chain_count': '3', 'color_order': 'GRB', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0'}, 'led_effect sb_logo_busy': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (1,0,0)'}, 'led_effect sb_logo_cleaning': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.02, 0.5)'}, 'led_effect sb_logo_calibrating_z': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 0.35)'}, 'led_effect sb_logo_heating': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nbreathing  3 1 top (1, 0.18, 0)'}, 'led_effect sb_logo_cooling': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nbreathing  3 1 top (0, 0, 1)'}, 'led_effect sb_logo_homing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.6, 0.2)'}, 'led_effect sb_logo_leveling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.5, 0.1, 0.4)'}, 'led_effect sb_logo_meshing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.2, 1.0, 0.0)'}, 'led_effect sb_logo_printing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.3, 0.3, 0.0),(0.3, 0.1, 0.0)'}, 'led_effect sb_logo_standby': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.01, 0.01, 0.01)'}, 'led_effect sb_logo_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 1.0, 0.0)'}, 'led_effect sb_nozzle_heating': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (1.0, 0.18, 0.0, 0.0)'}, 'led_effect sb_nozzle_cooling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 1.0, 0.1)'}, 'led_effect sb_nozzle_standby': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.6, 0.0, 0.0, 0.0)'}, 'led_effect sb_nozzle_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.6, 1.0, 0.0, 0.1)'}, 'led_effect sb_critical_error': {'leds': '\nneopixel:sb_leds', 'layers': '\nstrobe         1  1.5   add        (1.0,  1.0, 1.0)\nbreathing      2  0     difference (0.95, 0.0, 0.0)\nstatic         1  0     top        (1.0,  0.0, 0.0)', 'autostart': 'false', 'frame_rate': '24', 'run_on_error': 'true'}, 'led_effect rainbow': {'leds': '\nneopixel:sb_leds', 'autostart': 'true', 'frame_rate': '24', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.0, 0.3, 0.0),(0.0, 0.0, 0.3)'}, 'led_effect set_nozzle_leds': {'leds': '\nneopixel:sb_leds (2,3)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nstatic         0  0     top        (0.5,  0.5, 0.5)'}, 'led_effect set_logo_leds': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nstatic         0  0     top        (1.0,  1.0, 1.0)'}, 'gcode_macro set_logo_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds STOP=1'}, 'gcode_macro set_logo_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1'}, 'gcode_macro status_off': {'gcode': '\nSTOP_LED_EFFECTS'}, 'gcode_macro status_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=rainbow'}, 'gcode_macro status_part_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready'}, 'gcode_macro status_busy': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_busy\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_heating\nSET_LED_EFFECT EFFECT=sb_nozzle_heating'}, 'gcode_macro status_cooling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cooling\nSET_LED_EFFECT EFFECT=sb_nozzle_cooling'}, 'gcode_macro status_leveling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_leveling\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_homing\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cleaning\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_meshing\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_calibrating_z\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_printing\nset_nozzle_leds_on'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_sam4e8e_00313753364B37373032303038303139-if00'}, 'mcu EBBCan': {'canbus_uuid': '8250861450f7'}, 'adxl345': {'cs_pin': 'EBBCan:gpio1', 'spi_software_sclk_pin': 'EBBCan:gpio2', 'spi_software_mosi_pin': 'EBBCan:gpio0', 'spi_software_miso_pin': 'EBBCan:gpio3', 'axes_map': 'z,-y,x'}, 'resonance_tester': {'probe_points': '100, 100, 20', 'accel_chip': 'adxl345'}, 'input_shaper': {'shaper_freq_x': '45', 'shaper_type': '3hump_ei'}, 'stepper_x': {'step_pin': 'PD6', 'dir_pin': '!PD11', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'EBBCan:gpio24', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '40'}, 'tmc2660 stepper_x': {'cs_pin': 'PD14', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'stepper_y': {'step_pin': 'PD7', 'dir_pin': '!PD12', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'PA2', 'position_endstop': '0', 'position_max': '225', 'position_min': '-4', 'homing_speed': '35', 'homing_retract_dist': '0'}, 'tmc2660 stepper_y': {'cs_pin': 'PC9', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'stepper_z': {'step_pin': 'PD8', 'dir_pin': '!PD13', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '230', 'position_min': '-2.5', 'homing_speed': '35.0'}, 'tmc2660 stepper_z': {'cs_pin': 'PC10', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'adc_temperature my_thermistor': {'temperature1': '0', 'resistance1': '1000', 'temperature2': '80', 'resistance2': '1309'}, 'extruder': {'step_pin': '!EBBCan:gpio18', 'dir_pin': 'EBBCan:gpio19', 'enable_pin': '!EBBCan:gpio17', 'microsteps': '32', 'rotation_distance': '21.63024711', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'pressure_advance': '0.065', 'pressure_advance_smooth_time': '0.02', 'gear_ratio': '50:10', 'heater_pin': 'EBBCan:gpio7', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'EBBCan:gpio27', 'control': 'pid', 'pid_kp': '21.527', 'pid_ki': '1.063', 'pid_kd': '108.982', 'min_temp': '0', 'max_temp': '250'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan:gpio20', 'run_current': '0.5', 'stealthchop_threshold': '999999'}, 'filament_switch_sensor extruder': {'pause_on_runout': 'True', 'switch_pin': 'EBBCan:gpio21'}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu'}, 'thermistor chamber_temp': {'temperature1': '25', 'resistance1': '10000', 'beta': '3950'}, 'heater_bed': {'heater_pin': '!PA19', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PC13', 'control': 'watermark', 'min_temp': '0', 'max_temp': '120'}, 'heater_fan extruder_fan': {'pin': 'EBBCan:gpio13', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'EBBCan:gpio14', 'cycle_time': '.08', 'kick_start_time': '.25'}, 'probe': {'pin': '^EBBCan:gpio22', 'x_offset': '0', 'y_offset': '0', 'samples': '3', 'samples_result': 'median', 'sample_retract_dist': '3', 'samples_tolerance': '0.015', 'samples_tolerance_retries': '3', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'z_offset': '-1.350'}, 'homing_override': {'axes': 'z', 'set_position_z': '0', 'gcode': '\nstatus_homing\nG90\nG0 Z5 F500\nG28 X0 Y0\nG0 X150 Y100 F9000\nG28 Z0\nG0 Z5 F500\nstatus_ready'}, 'bed_mesh': {'speed': '150', 'horizontal_move_z': '5', 'mesh_min': '25,35.0', 'mesh_max': '225.0,220', 'probe_count': '6,6', 'algorithm': 'bicubic', 'fade_start': '1', 'fade_end': '10', 'fade_target': '0'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\nSTATUS_HEATING\nM109 S150\nSTATUS_HOMING\nM117 Homing...\nG28 Y0 X0 Z0\nSTATUS_MESHING\nBED_MESH_CALIBRATE ADAPTIVE=1\n\n\n\n\n\n\n\n\n\n\n\nSTATUS_HEATING\nM107\nM117 Heating bed\nM190 S{ params.BED }\nM117 Heating nozzle\nM109 S{target_extruder}\nstatus_ready\nG1 Z15.0 F600\nG1 X125 Y125 F3000\nG92 E0\nG1 F9000\nstatus_printing\nM117 Printing...'}, 'gcode_macro PRINT_END': {'gcode': '\nstatus_busy\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\n\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y} F3600\nM117 Finished!\nstatus_off'}, 'gcode_macro M600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state'}, 'printer': {'kinematics': 'corexz', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '5', 'max_z_accel': '100'}, 'force_move': {'enable_force_move': 'true'}, 'exclude_object': {}, 'bed_mesh default': {'version': '1', 'points': '\n-0.100000, -0.025000, 0.012500, 0.037500, 0.125000, 0.212500\n-0.187500, -0.100000, -0.025000, 0.025000, 0.100000, 0.212500\n-0.262500, -0.162500, -0.075000, -0.012500, 0.075000, 0.187500\n-0.262500, -0.162500, -0.087500, -0.000000, 0.100000, 0.237500\n-0.200000, -0.100000, -0.012500, 0.062500, 0.200000, 0.350000\n-0.225000, -0.075000, -0.000000, 0.087500, 0.225000, 0.387500', 'x_count': '6', 'y_count': '6', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'bicubic', 'tension': '0.2', 'min_x': '25.0', 'max_x': '225.0', 'min_y': '35.0', 'max_y': '220.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_sam4e8e_00313753364B37373032303038303139-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu ebbcan': {'canbus_uuid': '8250861450f7', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set allow_park = client.park_at_cancel | default(false) | lower == \'true\' %}\n{% set retract = client.cancel_retract | default(5.0) | abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x | default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y | default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x | length > 0 or park_y | length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro | default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set idle_timeout = client.idle_timeout | default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE | default(1) | int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro | default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move | default(velocity) %}\n{% set runout_resume = True if client.runout_sensor | default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state | upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro | default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY | default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'neopixel sb_leds': {'pin': 'EBBCan:gpio16', 'chain_count': 3, 'color_order': ['GRB'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'led_effect sb_logo_busy': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1,0,0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_cleaning': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.02, 0.5)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_calibrating_z': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 0.35)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1, 0.18, 0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0, 0, 1)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_homing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.6, 0.2)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_leveling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.5, 0.1, 0.4)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_meshing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.2, 1.0, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_printing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.3, 0.3, 0.0),(0.3, 0.1, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_standby': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.01, 0.01, 0.01)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 1.0, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_nozzle_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1.0, 0.18, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 1.0, 0.1)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_standby': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.6, 0.0, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.6, 1.0, 0.0, 0.1)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_critical_error': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': True, 'endstops': '', 'layers': '\nstrobe         1  1.5   add        (1.0,  1.0, 1.0)\nbreathing      2  0     difference (0.95, 0.0, 0.0)\nstatic         1  0     top        (1.0,  0.0, 0.0)', 'leds': '\nneopixel:sb_leds'}, 'led_effect rainbow': {'frame_rate': 24.0, 'autostart': True, 'run_on_error': False, 'endstops': '', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.0, 0.3, 0.0),(0.0, 0.0, 0.3)', 'leds': '\nneopixel:sb_leds'}, 'led_effect set_nozzle_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic         0  0     top        (0.5,  0.5, 0.5)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect set_logo_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic         0  0     top        (1.0,  1.0, 1.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'gcode_macro set_logo_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nSTOP_LED_EFFECTS', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=rainbow', 'description': 'G-Code macro'}, 'gcode_macro status_part_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_busy\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_heating\nSET_LED_EFFECT EFFECT=sb_nozzle_heating', 'description': 'G-Code macro'}, 'gcode_macro status_cooling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cooling\nSET_LED_EFFECT EFFECT=sb_nozzle_cooling', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_leveling\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_homing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cleaning\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_meshing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_calibrating_z\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_printing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'adxl345': {'axes_map': ['z', '-y', 'x'], 'rate': 3200, 'cs_pin': 'EBBCan:gpio1', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'EBBCan:gpio2', 'spi_software_miso_pin': 'EBBCan:gpio3', 'spi_software_mosi_pin': 'EBBCan:gpio0'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[100.0, 100.0, 20.0]], 'accel_chip': 'adxl345'}, 'input_shaper': {'shaper_type': '3hump_ei', 'shaper_type_x': '3hump_ei', 'damping_ratio_x': 0.1, 'shaper_freq_x': 45.0, 'shaper_type_y': '3hump_ei', 'damping_ratio_y': 0.1, 'shaper_freq_y': 0.0}, 'tmc2660 stepper_x': {'cs_pin': 'PD14', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PD6', 'dir_pin': '!PD11', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'EBBCan:gpio24', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2660 stepper_y': {'cs_pin': 'PC9', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PD7', 'dir_pin': '!PD12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'PA2', 'position_endstop': 0.0, 'position_min': -4.0, 'position_max': 225.0, 'homing_speed': 35.0, 'second_homing_speed': 17.5, 'homing_retract_speed': 35.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2660 stepper_z': {'cs_pin': 'PC10', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PD8', 'dir_pin': '!PD13', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -2.5, 'position_max': 230.0, 'homing_speed': 35.0, 'second_homing_speed': 17.5, 'homing_retract_speed': 35.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'adc_temperature my_thermistor': {'resistance1': 1000.0, 'temperature1': 0.0, 'temperature2': 80.0, 'resistance2': 1309.0}, 'tmc2209 extruder': {'uart_pin': 'EBBCan:gpio20', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan:gpio27', 'min_temp': 0.0, 'max_temp': 250.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 21.527, 'pid_ki': 1.063, 'pid_kd': 108.982, 'heater_pin': 'EBBCan:gpio7', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': '!EBBCan:gpio18', 'pressure_advance': 0.065, 'pressure_advance_smooth_time': 0.02, 'dir_pin': 'EBBCan:gpio19', 'rotation_distance': 21.63024711, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!EBBCan:gpio17'}, 'filament_switch_sensor extruder': {'switch_pin': 'EBBCan:gpio21', 'pause_on_runout': True, 'runout_gcode': '', 'pause_delay': 0.5, 'event_delay': 3.0}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'thermistor chamber_temp': {'temperature1': 25.0, 'resistance1': 10000.0, 'beta': 3950.0}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PC13', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'watermark', 'max_delta': 2.0, 'heater_pin': '!PA19', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan extruder_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'EBBCan:gpio13', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.25, 'off_below': 0.0, 'cycle_time': 0.08, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'EBBCan:gpio14'}, 'probe': {'z_offset': -1.35, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': '^EBBCan:gpio22', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 3, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.015, 'samples_tolerance_retries': 3}, 'homing_override': {'set_position_z': 0.0, 'axes': 'z', 'gcode': '\nstatus_homing\nG90\nG0 Z5 F500\nG28 X0 Y0\nG0 X150 Y100 F9000\nG28 Z0\nG0 Z5 F500\nstatus_ready'}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [6, 6], 'mesh_min': [25.0, 35.0], 'mesh_max': [225.0, 220.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 150.0, 'fade_start': 1.0, 'fade_end': 10.0, 'fade_target': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[-0.1, -0.025, 0.0125, 0.0375, 0.125, 0.2125], [-0.1875, -0.1, -0.025, 0.025, 0.1, 0.2125], [-0.2625, -0.1625, -0.075, -0.0125, 0.075, 0.1875], [-0.2625, -0.1625, -0.0875, -0.0, 0.1, 0.2375], [-0.2, -0.1, -0.0125, 0.0625, 0.2, 0.35], [-0.225, -0.075, -0.0, 0.0875, 0.225, 0.3875]], 'min_x': 25.0, 'max_x': 225.0, 'min_y': 35.0, 'max_y': 220.0, 'x_count': 6, 'y_count': 6, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'bicubic', 'tension': 0.2}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\nSTATUS_HEATING\nM109 S150\nSTATUS_HOMING\nM117 Homing...\nG28 Y0 X0 Z0\nSTATUS_MESHING\nBED_MESH_CALIBRATE ADAPTIVE=1\n\n\n\n\n\n\n\n\n\n\n\nSTATUS_HEATING\nM107\nM117 Heating bed\nM190 S{ params.BED }\nM117 Heating nozzle\nM109 S{target_extruder}\nstatus_ready\nG1 Z15.0 F600\nG1 X125 Y125 F3000\nG92 E0\nG1 F9000\nstatus_printing\nM117 Printing...', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\nstatus_busy\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\n\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y} F3600\nM117 Finished!\nstatus_off', 'description': 'G-Code macro'}, 'gcode_macro m600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state', 'description': 'G-Code macro'}, 'force_move': {'enable_force_move': True}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'minimum_cruise_ratio': 0.5, 'square_corner_velocity': 5.0, 'kinematics': 'corexz', 'max_z_velocity': 5.0, 'max_z_accel': 100.0}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-07-16 20:54:52,279 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-07-16 20:54:52,281 [printer.py:reinit()] - Klipper version: v0.12.0-175-g7b490f3e-dirty
2024-07-16 20:54:52,281 [printer.py:reinit()] - # Extruders: 1
2024-07-16 20:54:52,281 [printer.py:reinit()] - # Temperature devices: 2
2024-07-16 20:54:52,281 [printer.py:reinit()] - # Fans: 2
2024-07-16 20:54:52,282 [printer.py:reinit()] - # Output pins: 0
2024-07-16 20:54:52,282 [printer.py:reinit()] - # Leds: 20
2024-07-16 20:54:52,282 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-07-16 20:54:52,300 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-07-16 20:54:52,302 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor mcu&fan&heater_fan extruder_fan&filament_switch_sensor extruder&neopixel sb_leds
2024-07-16 20:54:52,571 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-07-16 20:54:52,571 [screen.py:init_klipper()] - Printer initialized
2024-07-16 20:54:52,571 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-07-16 20:54:52,572 [printer.py:change_state()] - Adding callback for state: startup
2024-07-16 21:13:22,305 [functions.py:log_start()] - --------------------KlipperScreen Log Start--------------------
2024-07-16 21:13:22,305 [functions.py:log_start()] - KlipperScreen Version: v0.3.9-50-gdaed9a0
2024-07-16 21:13:22,306 [functions.py:log_start()] - Python version: 3.11
2024-07-16 21:13:22,761 [config.py:get_config_file_location()] - Passed config (-c): .
2024-07-16 21:13:22,763 [config.py:__init__()] - Config path location: /home/pi/printer_data/config/KlipperScreen.conf
2024-07-16 21:13:22,827 [config.py:log_config()] -  ===== Config File =====

=======================
2024-07-16 21:13:22,832 [config.py:__init__()] - ====== Saved Def ======

[main]
use_dpms = False
print_sort_dir = date_desc

=======================
2024-07-16 21:13:22,833 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2024-07-16 21:13:23,110 [config.py:create_translations()] - Selected lang: None OS lang: en_GB
2024-07-16 21:13:23,110 [config.py:install_language()] - Using lang en
2024-07-16 21:13:23,160 [screen.py:__init__()] - Monitors: 1 using number: 0
2024-07-16 21:13:23,163 [screen.py:__init__()] - Wayland: False Display name: :100
2024-07-16 21:13:23,169 [screen.py:__init__()] - Screen resolution: 984x540
2024-07-16 21:13:23,172 [KlippyGtk.py:__init__()] - Font size: 18.6 (medium)
2024-07-16 21:13:25,620 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2024-07-16 21:13:25,621 [screen.py:set_screenblanking_timeout()] - Not using DPMS
2024-07-16 21:13:25,637 [screen.py:initial_connection()] - Default printer: None
2024-07-16 21:13:25,749 [screen.py:connect_printer()] - Connecting to printer: Printer
2024-07-16 21:13:25,750 [screen.py:_load_panel()] - Loading panel: splash_screen
2024-07-16 21:13:25,917 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-07-16 21:13:25,958 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-07-16 21:13:25,959 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-07-16 21:13:26,004 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/access/oneshot_token
2024-07-16 21:13:26,030 [KlippyWebsocket.py:connect()] - Starting websocket thread
2024-07-16 21:13:26,054 [_logging.py:info()] - Websocket connected
2024-07-16 21:13:26,055 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2024-07-16 21:13:26,689 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-07-16 21:13:26,715 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-07-16 21:13:26,738 [printer.py:configure_cameras()] - Cameras: []
2024-07-16 21:13:26,739 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'ready', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'update_manager', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-337-g546a17f', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-07-16 21:13:26,739 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-07-16 21:13:26,767 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-07-16 21:13:26,870 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set allow_park = client.park_at_cancel | default(false) | lower == \'true\' %}\n{% set retract = client.cancel_retract | default(5.0) | abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x | default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y | default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x | length > 0 or park_y | length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro | default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set idle_timeout = client.idle_timeout | default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE | default(1) | int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro | default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move | default(velocity) %}\n{% set runout_resume = True if client.runout_sensor | default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state | upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro | default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY | default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}"}, 'neopixel sb_leds': {'pin': 'EBBCan:gpio16', 'chain_count': '3', 'color_order': 'GRB', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0'}, 'led_effect sb_logo_busy': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (1,0,0)'}, 'led_effect sb_logo_cleaning': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.02, 0.5)'}, 'led_effect sb_logo_calibrating_z': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 0.35)'}, 'led_effect sb_logo_heating': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nbreathing  3 1 top (1, 0.18, 0)'}, 'led_effect sb_logo_cooling': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nbreathing  3 1 top (0, 0, 1)'}, 'led_effect sb_logo_homing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.6, 0.2)'}, 'led_effect sb_logo_leveling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.5, 0.1, 0.4)'}, 'led_effect sb_logo_meshing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.2, 1.0, 0.0)'}, 'led_effect sb_logo_printing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.3, 0.3, 0.0),(0.3, 0.1, 0.0)'}, 'led_effect sb_logo_standby': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.01, 0.01, 0.01)'}, 'led_effect sb_logo_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 1.0, 0.0)'}, 'led_effect sb_nozzle_heating': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (1.0, 0.18, 0.0, 0.0)'}, 'led_effect sb_nozzle_cooling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 1.0, 0.1)'}, 'led_effect sb_nozzle_standby': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.6, 0.0, 0.0, 0.0)'}, 'led_effect sb_nozzle_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.6, 1.0, 0.0, 0.1)'}, 'led_effect sb_critical_error': {'leds': '\nneopixel:sb_leds', 'layers': '\nstrobe         1  1.5   add        (1.0,  1.0, 1.0)\nbreathing      2  0     difference (0.95, 0.0, 0.0)\nstatic         1  0     top        (1.0,  0.0, 0.0)', 'autostart': 'false', 'frame_rate': '24', 'run_on_error': 'true'}, 'led_effect rainbow': {'leds': '\nneopixel:sb_leds', 'autostart': 'true', 'frame_rate': '24', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.0, 0.3, 0.0),(0.0, 0.0, 0.3)'}, 'led_effect set_nozzle_leds': {'leds': '\nneopixel:sb_leds (2,3)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nstatic         0  0     top        (0.5,  0.5, 0.5)'}, 'led_effect set_logo_leds': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nstatic         0  0     top        (1.0,  1.0, 1.0)'}, 'gcode_macro set_logo_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds STOP=1'}, 'gcode_macro set_logo_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1'}, 'gcode_macro status_off': {'gcode': '\nSTOP_LED_EFFECTS'}, 'gcode_macro status_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=rainbow'}, 'gcode_macro status_part_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready'}, 'gcode_macro status_busy': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_busy\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_heating\nSET_LED_EFFECT EFFECT=sb_nozzle_heating'}, 'gcode_macro status_cooling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cooling\nSET_LED_EFFECT EFFECT=sb_nozzle_cooling'}, 'gcode_macro status_leveling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_leveling\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_homing\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cleaning\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_meshing\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_calibrating_z\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_printing\nset_nozzle_leds_on'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_sam4e8e_00313753364B37373032303038303139-if00'}, 'mcu EBBCan': {'canbus_uuid': '8250861450f7'}, 'adxl345': {'cs_pin': 'EBBCan:gpio1', 'spi_software_sclk_pin': 'EBBCan:gpio2', 'spi_software_mosi_pin': 'EBBCan:gpio0', 'spi_software_miso_pin': 'EBBCan:gpio3', 'axes_map': 'z,-y,x'}, 'resonance_tester': {'probe_points': '100, 100, 20', 'accel_chip': 'adxl345'}, 'input_shaper': {'shaper_freq_x': '45', 'shaper_type': '3hump_ei'}, 'stepper_x': {'step_pin': 'PD6', 'dir_pin': '!PD11', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'EBBCan:gpio24', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '40'}, 'tmc2660 stepper_x': {'cs_pin': 'PD14', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'stepper_y': {'step_pin': 'PD7', 'dir_pin': '!PD12', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'PA2', 'position_endstop': '0', 'position_max': '225', 'position_min': '-4', 'homing_speed': '35', 'homing_retract_dist': '0'}, 'tmc2660 stepper_y': {'cs_pin': 'PC9', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'stepper_z': {'step_pin': 'PD8', 'dir_pin': '!PD13', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '230', 'position_min': '-2.5', 'homing_speed': '35.0'}, 'tmc2660 stepper_z': {'cs_pin': 'PC10', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'adc_temperature my_thermistor': {'temperature1': '0', 'resistance1': '1000', 'temperature2': '80', 'resistance2': '1309'}, 'extruder': {'step_pin': '!EBBCan:gpio18', 'dir_pin': 'EBBCan:gpio19', 'enable_pin': '!EBBCan:gpio17', 'microsteps': '32', 'rotation_distance': '21.63024711', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'pressure_advance': '0.065', 'pressure_advance_smooth_time': '0.02', 'gear_ratio': '50:10', 'heater_pin': 'EBBCan:gpio7', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'EBBCan:gpio27', 'control': 'pid', 'pid_kp': '21.527', 'pid_ki': '1.063', 'pid_kd': '108.982', 'min_temp': '0', 'max_temp': '250'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan:gpio20', 'run_current': '0.5', 'stealthchop_threshold': '999999'}, 'filament_switch_sensor extruder': {'pause_on_runout': 'True', 'switch_pin': 'EBBCan:gpio21'}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu'}, 'thermistor chamber_temp': {'temperature1': '25', 'resistance1': '10000', 'beta': '3950'}, 'heater_bed': {'heater_pin': '!PA19', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PC13', 'control': 'watermark', 'min_temp': '0', 'max_temp': '120'}, 'heater_fan extruder_fan': {'pin': 'EBBCan:gpio13', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'EBBCan:gpio14', 'cycle_time': '.08', 'kick_start_time': '.25'}, 'probe': {'pin': '^EBBCan:gpio22', 'x_offset': '0', 'y_offset': '0', 'samples': '3', 'samples_result': 'median', 'sample_retract_dist': '3', 'samples_tolerance': '0.015', 'samples_tolerance_retries': '3', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'z_offset': '-1.350'}, 'homing_override': {'axes': 'z', 'set_position_z': '0', 'gcode': '\nstatus_homing\nG90\nG0 Z5 F500\nG28 X0 Y0\nG0 X150 Y100 F9000\nG28 Z0\nG0 Z5 F500\nstatus_ready'}, 'bed_mesh': {'speed': '150', 'horizontal_move_z': '5', 'mesh_min': '25,35.0', 'mesh_max': '225.0,220', 'probe_count': '6,6', 'algorithm': 'bicubic', 'fade_start': '1', 'fade_end': '10', 'fade_target': '0'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\nSTATUS_HEATING\nM109 S150\nSTATUS_HOMING\nM117 Homing...\nG28 Y0 X0 Z0\nSTATUS_MESHING\nBED_MESH_CALIBRATE ADAPTIVE=1\n\n\n\n\n\n\n\n\n\n\n\nSTATUS_HEATING\nM107\nM117 Heating bed\nM190 S{ params.BED }\nM117 Heating nozzle\nM109 S{target_extruder}\nstatus_ready\nG1 Z15.0 F600\nG1 X125 Y125 F3000\nG92 E0\nG1 F9000\nstatus_printing\nM117 Printing...'}, 'gcode_macro PRINT_END': {'gcode': '\nstatus_busy\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\n\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y} F3600\nM117 Finished!\nstatus_off'}, 'gcode_macro M600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state'}, 'printer': {'kinematics': 'corexz', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '5', 'max_z_accel': '100'}, 'force_move': {'enable_force_move': 'true'}, 'exclude_object': {}, 'bed_mesh default': {'version': '1', 'points': '\n-0.100000, -0.025000, 0.012500, 0.037500, 0.125000, 0.212500\n-0.187500, -0.100000, -0.025000, 0.025000, 0.100000, 0.212500\n-0.262500, -0.162500, -0.075000, -0.012500, 0.075000, 0.187500\n-0.262500, -0.162500, -0.087500, -0.000000, 0.100000, 0.237500\n-0.200000, -0.100000, -0.012500, 0.062500, 0.200000, 0.350000\n-0.225000, -0.075000, -0.000000, 0.087500, 0.225000, 0.387500', 'x_count': '6', 'y_count': '6', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'bicubic', 'tension': '0.2', 'min_x': '25.0', 'max_x': '225.0', 'min_y': '35.0', 'max_y': '220.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_sam4e8e_00313753364B37373032303038303139-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu ebbcan': {'canbus_uuid': '8250861450f7', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set allow_park = client.park_at_cancel | default(false) | lower == \'true\' %}\n{% set retract = client.cancel_retract | default(5.0) | abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x | default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y | default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x | length > 0 or park_y | length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro | default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set idle_timeout = client.idle_timeout | default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE | default(1) | int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro | default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move | default(velocity) %}\n{% set runout_resume = True if client.runout_sensor | default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state | upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro | default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY | default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'neopixel sb_leds': {'pin': 'EBBCan:gpio16', 'chain_count': 3, 'color_order': ['GRB'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'led_effect sb_logo_busy': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1,0,0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_cleaning': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.02, 0.5)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_calibrating_z': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 0.35)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1, 0.18, 0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0, 0, 1)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_homing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.6, 0.2)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_leveling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.5, 0.1, 0.4)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_meshing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.2, 1.0, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_printing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.3, 0.3, 0.0),(0.3, 0.1, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_standby': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.01, 0.01, 0.01)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 1.0, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_nozzle_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1.0, 0.18, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 1.0, 0.1)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_standby': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.6, 0.0, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.6, 1.0, 0.0, 0.1)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_critical_error': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': True, 'endstops': '', 'layers': '\nstrobe         1  1.5   add        (1.0,  1.0, 1.0)\nbreathing      2  0     difference (0.95, 0.0, 0.0)\nstatic         1  0     top        (1.0,  0.0, 0.0)', 'leds': '\nneopixel:sb_leds'}, 'led_effect rainbow': {'frame_rate': 24.0, 'autostart': True, 'run_on_error': False, 'endstops': '', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.0, 0.3, 0.0),(0.0, 0.0, 0.3)', 'leds': '\nneopixel:sb_leds'}, 'led_effect set_nozzle_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic         0  0     top        (0.5,  0.5, 0.5)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect set_logo_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic         0  0     top        (1.0,  1.0, 1.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'gcode_macro set_logo_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nSTOP_LED_EFFECTS', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=rainbow', 'description': 'G-Code macro'}, 'gcode_macro status_part_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_busy\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_heating\nSET_LED_EFFECT EFFECT=sb_nozzle_heating', 'description': 'G-Code macro'}, 'gcode_macro status_cooling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cooling\nSET_LED_EFFECT EFFECT=sb_nozzle_cooling', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_leveling\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_homing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cleaning\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_meshing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_calibrating_z\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_printing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'adxl345': {'axes_map': ['z', '-y', 'x'], 'rate': 3200, 'cs_pin': 'EBBCan:gpio1', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'EBBCan:gpio2', 'spi_software_miso_pin': 'EBBCan:gpio3', 'spi_software_mosi_pin': 'EBBCan:gpio0'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[100.0, 100.0, 20.0]], 'accel_chip': 'adxl345'}, 'input_shaper': {'shaper_type': '3hump_ei', 'shaper_type_x': '3hump_ei', 'damping_ratio_x': 0.1, 'shaper_freq_x': 45.0, 'shaper_type_y': '3hump_ei', 'damping_ratio_y': 0.1, 'shaper_freq_y': 0.0}, 'tmc2660 stepper_x': {'cs_pin': 'PD14', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PD6', 'dir_pin': '!PD11', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'EBBCan:gpio24', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2660 stepper_y': {'cs_pin': 'PC9', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PD7', 'dir_pin': '!PD12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'PA2', 'position_endstop': 0.0, 'position_min': -4.0, 'position_max': 225.0, 'homing_speed': 35.0, 'second_homing_speed': 17.5, 'homing_retract_speed': 35.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2660 stepper_z': {'cs_pin': 'PC10', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PD8', 'dir_pin': '!PD13', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -2.5, 'position_max': 230.0, 'homing_speed': 35.0, 'second_homing_speed': 17.5, 'homing_retract_speed': 35.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'adc_temperature my_thermistor': {'resistance1': 1000.0, 'temperature1': 0.0, 'temperature2': 80.0, 'resistance2': 1309.0}, 'tmc2209 extruder': {'uart_pin': 'EBBCan:gpio20', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan:gpio27', 'min_temp': 0.0, 'max_temp': 250.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 21.527, 'pid_ki': 1.063, 'pid_kd': 108.982, 'heater_pin': 'EBBCan:gpio7', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': '!EBBCan:gpio18', 'pressure_advance': 0.065, 'pressure_advance_smooth_time': 0.02, 'dir_pin': 'EBBCan:gpio19', 'rotation_distance': 21.63024711, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!EBBCan:gpio17'}, 'filament_switch_sensor extruder': {'switch_pin': 'EBBCan:gpio21', 'pause_on_runout': True, 'runout_gcode': '', 'pause_delay': 0.5, 'event_delay': 3.0}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'thermistor chamber_temp': {'temperature1': 25.0, 'resistance1': 10000.0, 'beta': 3950.0}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PC13', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'watermark', 'max_delta': 2.0, 'heater_pin': '!PA19', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan extruder_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'EBBCan:gpio13', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.25, 'off_below': 0.0, 'cycle_time': 0.08, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'EBBCan:gpio14'}, 'probe': {'z_offset': -1.35, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': '^EBBCan:gpio22', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 3, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.015, 'samples_tolerance_retries': 3}, 'homing_override': {'set_position_z': 0.0, 'axes': 'z', 'gcode': '\nstatus_homing\nG90\nG0 Z5 F500\nG28 X0 Y0\nG0 X150 Y100 F9000\nG28 Z0\nG0 Z5 F500\nstatus_ready'}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [6, 6], 'mesh_min': [25.0, 35.0], 'mesh_max': [225.0, 220.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 150.0, 'fade_start': 1.0, 'fade_end': 10.0, 'fade_target': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[-0.1, -0.025, 0.0125, 0.0375, 0.125, 0.2125], [-0.1875, -0.1, -0.025, 0.025, 0.1, 0.2125], [-0.2625, -0.1625, -0.075, -0.0125, 0.075, 0.1875], [-0.2625, -0.1625, -0.0875, -0.0, 0.1, 0.2375], [-0.2, -0.1, -0.0125, 0.0625, 0.2, 0.35], [-0.225, -0.075, -0.0, 0.0875, 0.225, 0.3875]], 'min_x': 25.0, 'max_x': 225.0, 'min_y': 35.0, 'max_y': 220.0, 'x_count': 6, 'y_count': 6, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'bicubic', 'tension': 0.2}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\nSTATUS_HEATING\nM109 S150\nSTATUS_HOMING\nM117 Homing...\nG28 Y0 X0 Z0\nSTATUS_MESHING\nBED_MESH_CALIBRATE ADAPTIVE=1\n\n\n\n\n\n\n\n\n\n\n\nSTATUS_HEATING\nM107\nM117 Heating bed\nM190 S{ params.BED }\nM117 Heating nozzle\nM109 S{target_extruder}\nstatus_ready\nG1 Z15.0 F600\nG1 X125 Y125 F3000\nG92 E0\nG1 F9000\nstatus_printing\nM117 Printing...', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\nstatus_busy\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\n\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y} F3600\nM117 Finished!\nstatus_off', 'description': 'G-Code macro'}, 'gcode_macro m600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state', 'description': 'G-Code macro'}, 'force_move': {'enable_force_move': True}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'minimum_cruise_ratio': 0.5, 'square_corner_velocity': 5.0, 'kinematics': 'corexz', 'max_z_velocity': 5.0, 'max_z_accel': 100.0}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-07-16 21:13:26,878 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-07-16 21:13:26,882 [printer.py:reinit()] - Klipper version: v0.12.0-175-g7b490f3e-dirty
2024-07-16 21:13:26,882 [printer.py:reinit()] - # Extruders: 1
2024-07-16 21:13:26,883 [printer.py:reinit()] - # Temperature devices: 2
2024-07-16 21:13:26,883 [printer.py:reinit()] - # Fans: 2
2024-07-16 21:13:26,884 [printer.py:reinit()] - # Output pins: 0
2024-07-16 21:13:26,884 [printer.py:reinit()] - # Leds: 20
2024-07-16 21:13:26,884 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-07-16 21:13:26,918 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-07-16 21:13:26,922 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor mcu&fan&heater_fan extruder_fan&filament_switch_sensor extruder&neopixel sb_leds
2024-07-16 21:13:27,193 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-07-16 21:13:27,193 [screen.py:init_klipper()] - Printer initialized
2024-07-16 21:13:27,194 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2024-07-16 21:13:27,194 [printer.py:change_state()] - Adding callback for state: ready
2024-07-16 21:13:27,433 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-07-16 21:13:27,443 [screen.py:_load_panel()] - Loading panel: main_menu
2024-07-16 21:13:27,708 [main_menu.py:__init__()] - ### Making MainMenu
2024-07-16 21:13:27,742 [main_menu.py:add_device()] - Adding device: extruder
2024-07-16 21:13:27,768 [main_menu.py:add_device()] - Adding device: heater_bed
2024-07-16 21:13:27,787 [main_menu.py:add_device()] - Adding device: temperature_sensor mcu
2024-07-16 21:13:27,898 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-07-16 21:13:27,901 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-07-16 21:13:27,962 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor mcu', 'heater_bed', 'extruder']
2024-07-16 21:13:27,965 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-07-16 21:13:27,990 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-07-16 22:13:25,471 [screen.py:show_screensaver()] - Showing Screensaver
2024-07-17 02:37:36,250 [screen.py:close_screensaver()] - Closing Screensaver
2024-07-17 02:52:12,339 [screen.py:_load_panel()] - Loading panel: print
2024-07-17 02:52:12,492 [print.py:__init__()] - Thumbsize: 128.48275862068962
2024-07-17 02:52:12,498 [print.py:__init__()] - thumbs
2024-07-17 02:52:12,520 [KlippyWebsocket.py:get_dir_info()] - Sending server.files.get_directory  gcodes
2024-07-17 02:52:12,581 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > print
2024-07-17 02:52:12,881 [print.py:load_files()] - Loaded in 0.272 seconds
2024-07-17 02:52:16,226 [KlippyGtk.py:Dialog()] - Showing dialog Print head_led_case_PLA_40m51s.gcode (width=984, height=540)
2024-07-17 02:52:18,403 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2024-07-17 02:52:18,404 [print.py:confirm_print_response()] - Starting print: head_led_case_PLA_40m51s.gcode
2024-07-17 02:52:18,404 [KlippyWebsocket.py:print_start()] - Sending printer.print.start
2024-07-17 02:52:18,493 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2024-07-17 02:52:18,493 [printer.py:change_state()] - Adding callback for state: printing
2024-07-17 02:52:18,513 [screen.py:_load_panel()] - Loading panel: job_status
2024-07-17 02:52:19,225 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-07-17 02:52:19,245 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-07-17 02:52:19,302 [job_status.py:update_file_metadata()] - Update Metadata. File: head_led_case_PLA_40m51s.gcode Size: 2748380
2024-07-17 02:52:19,314 [job_status.py:show_file_thumbnail()] - head_led_case_PLA_40m51s.gcode
2024-07-17 03:00:50,279 [printer.py:change_state()] - Changing state from 'printing' to 'paused'
2024-07-17 03:00:50,279 [printer.py:change_state()] - Adding callback for state: paused
2024-07-17 03:00:50,293 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'paused'
2024-07-17 03:00:50,412 [files.py:remove_callback()] - callback not found <bound method Panel._callback of <panels.print.Panel object at 0x7fb7948cd0>>
2024-07-17 03:00:50,413 [screen.py:show_panel()] - Reinitializing panel
2024-07-17 03:00:50,802 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-07-17 03:00:50,822 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'paused'
2024-07-17 03:00:50,866 [job_status.py:update_file_metadata()] - Update Metadata. File: head_led_case_PLA_40m51s.gcode Size: 2748380
2024-07-17 03:00:50,879 [job_status.py:show_file_thumbnail()] - head_led_case_PLA_40m51s.gcode
2024-07-17 03:00:50,896 [screen.py:_load_panel()] - Loading panel: extrude
2024-07-17 03:00:51,119 [screen.py:attach_panel()] - Current panel hierarchy: job_status > extrude
2024-07-17 03:00:51,124 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: SET_FILAMENT_SENSOR SENSOR=extruder ENABLE=1
2024-07-17 03:00:51,127 [extrude.py:process_update()] - filament_switch_sensor extruder: {'filament_detected': False, 'enabled': True}
2024-07-17 03:01:05,315 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: SET_FILAMENT_SENSOR SENSOR=extruder ENABLE=0
2024-07-17 03:01:05,316 [extrude.py:process_update()] - filament_switch_sensor extruder: {'filament_detected': False, 'enabled': False}
2024-07-17 03:01:09,829 [printer.py:change_state()] - Changing state from 'paused' to 'printing'
2024-07-17 03:01:09,829 [printer.py:change_state()] - Adding callback for state: printing
2024-07-17 03:01:09,848 [files.py:remove_callback()] - callback not found <bound method Panel._callback of <panels.print.Panel object at 0x7fb7948cd0>>
2024-07-17 03:01:09,849 [screen.py:show_panel()] - Reinitializing panel
2024-07-17 03:01:10,243 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-07-17 03:01:10,263 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-07-17 03:01:10,308 [job_status.py:update_file_metadata()] - Update Metadata. File: head_led_case_PLA_40m51s.gcode Size: 2748380
2024-07-17 03:01:10,321 [job_status.py:show_file_thumbnail()] - head_led_case_PLA_40m51s.gcode
2024-07-18 18:32:12,889 [functions.py:log_start()] - --------------------KlipperScreen Log Start--------------------
2024-07-18 18:32:12,889 [functions.py:log_start()] - KlipperScreen Version: v0.3.9-50-gdaed9a0
2024-07-18 18:32:12,890 [functions.py:log_start()] - Python version: 3.11
2024-07-18 18:32:13,147 [config.py:get_config_file_location()] - Passed config (-c): .
2024-07-18 18:32:13,148 [config.py:__init__()] - Config path location: /home/pi/printer_data/config/KlipperScreen.conf
2024-07-18 18:32:13,180 [config.py:log_config()] -  ===== Config File =====

=======================
2024-07-18 18:32:13,182 [config.py:__init__()] - ====== Saved Def ======

[main]
use_dpms = False
print_sort_dir = date_desc

=======================
2024-07-18 18:32:13,182 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2024-07-18 18:32:13,333 [config.py:create_translations()] - Selected lang: None OS lang: en_GB
2024-07-18 18:32:13,333 [config.py:install_language()] - Using lang en
2024-07-18 18:32:13,361 [screen.py:__init__()] - Monitors: 1 using number: 0
2024-07-18 18:32:13,363 [screen.py:__init__()] - Wayland: False Display name: :100
2024-07-18 18:32:13,365 [screen.py:__init__()] - Screen resolution: 984x540
2024-07-18 18:32:13,367 [KlippyGtk.py:__init__()] - Font size: 18.6 (medium)
2024-07-18 18:32:15,054 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2024-07-18 18:32:15,054 [screen.py:set_screenblanking_timeout()] - Not using DPMS
2024-07-18 18:32:15,063 [screen.py:initial_connection()] - Default printer: None
2024-07-18 18:32:15,129 [screen.py:connect_printer()] - Connecting to printer: Printer
2024-07-18 18:32:15,129 [screen.py:_load_panel()] - Loading panel: splash_screen
2024-07-18 18:32:15,224 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-07-18 18:32:15,242 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-07-18 18:32:15,243 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-07-18 18:32:15,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/access/oneshot_token
2024-07-18 18:32:15,280 [KlippyWebsocket.py:connect()] - Starting websocket thread
2024-07-18 18:32:15,289 [_logging.py:info()] - Websocket connected
2024-07-18 18:32:15,290 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2024-07-18 18:32:15,977 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-07-18 18:32:15,989 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-07-18 18:32:16,000 [printer.py:configure_cameras()] - Cameras: []
2024-07-18 18:32:16,000 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'shutdown', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'history', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-337-g546a17f', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-07-18 18:32:16,001 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-07-18 18:32:16,013 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-07-18 18:32:16,044 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set allow_park = client.park_at_cancel | default(false) | lower == \'true\' %}\n{% set retract = client.cancel_retract | default(5.0) | abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x | default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y | default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x | length > 0 or park_y | length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro | default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set idle_timeout = client.idle_timeout | default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE | default(1) | int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro | default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move | default(velocity) %}\n{% set runout_resume = True if client.runout_sensor | default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state | upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro | default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY | default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}"}, 'neopixel sb_leds': {'pin': 'EBBCan:gpio16', 'chain_count': '3', 'color_order': 'GRB', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0'}, 'led_effect sb_logo_busy': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (1,0,0)'}, 'led_effect sb_logo_cleaning': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.02, 0.5)'}, 'led_effect sb_logo_calibrating_z': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 0.35)'}, 'led_effect sb_logo_heating': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nbreathing  3 1 top (1, 0.18, 0)'}, 'led_effect sb_logo_cooling': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nbreathing  3 1 top (0, 0, 1)'}, 'led_effect sb_logo_homing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.6, 0.2)'}, 'led_effect sb_logo_leveling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.5, 0.1, 0.4)'}, 'led_effect sb_logo_meshing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.2, 1.0, 0.0)'}, 'led_effect sb_logo_printing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.3, 0.3, 0.0),(0.3, 0.1, 0.0)'}, 'led_effect sb_logo_standby': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.01, 0.01, 0.01)'}, 'led_effect sb_logo_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 1.0, 0.0)'}, 'led_effect sb_nozzle_heating': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (1.0, 0.18, 0.0, 0.0)'}, 'led_effect sb_nozzle_cooling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 1.0, 0.1)'}, 'led_effect sb_nozzle_standby': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.6, 0.0, 0.0, 0.0)'}, 'led_effect sb_nozzle_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.6, 1.0, 0.0, 0.1)'}, 'led_effect sb_critical_error': {'leds': '\nneopixel:sb_leds', 'layers': '\nstrobe         1  1.5   add        (1.0,  1.0, 1.0)\nbreathing      2  0     difference (0.95, 0.0, 0.0)\nstatic         1  0     top        (1.0,  0.0, 0.0)', 'autostart': 'false', 'frame_rate': '24', 'run_on_error': 'true'}, 'led_effect rainbow': {'leds': '\nneopixel:sb_leds', 'autostart': 'true', 'frame_rate': '24', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.0, 0.3, 0.0),(0.0, 0.0, 0.3)'}, 'led_effect set_nozzle_leds': {'leds': '\nneopixel:sb_leds (2,3)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nstatic         0  0     top        (0.5,  0.5, 0.5)'}, 'led_effect set_logo_leds': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nstatic         0  0     top        (1.0,  1.0, 1.0)'}, 'gcode_macro set_logo_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds STOP=1'}, 'gcode_macro set_logo_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1'}, 'gcode_macro status_off': {'gcode': '\nSTOP_LED_EFFECTS'}, 'gcode_macro status_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=rainbow'}, 'gcode_macro status_part_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready'}, 'gcode_macro status_busy': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_busy\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_heating\nSET_LED_EFFECT EFFECT=sb_nozzle_heating'}, 'gcode_macro status_cooling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cooling\nSET_LED_EFFECT EFFECT=sb_nozzle_cooling'}, 'gcode_macro status_leveling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_leveling\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_homing\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cleaning\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_meshing\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_calibrating_z\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_printing\nset_nozzle_leds_on'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_sam4e8e_00313753364B37373032303038303139-if00'}, 'mcu EBBCan': {'canbus_uuid': '8250861450f7'}, 'adxl345': {'cs_pin': 'EBBCan:gpio1', 'spi_software_sclk_pin': 'EBBCan:gpio2', 'spi_software_mosi_pin': 'EBBCan:gpio0', 'spi_software_miso_pin': 'EBBCan:gpio3', 'axes_map': 'z,-y,x'}, 'resonance_tester': {'probe_points': '100, 100, 20', 'accel_chip': 'adxl345'}, 'input_shaper': {'shaper_freq_x': '45', 'shaper_type': '3hump_ei'}, 'stepper_x': {'step_pin': 'PD6', 'dir_pin': '!PD11', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'EBBCan:gpio24', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '40'}, 'tmc2660 stepper_x': {'cs_pin': 'PD14', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'stepper_y': {'step_pin': 'PD7', 'dir_pin': '!PD12', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'PA2', 'position_endstop': '0', 'position_max': '225', 'position_min': '-4', 'homing_speed': '35', 'homing_retract_dist': '0'}, 'tmc2660 stepper_y': {'cs_pin': 'PC9', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'stepper_z': {'step_pin': 'PD8', 'dir_pin': '!PD13', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '230', 'position_min': '-2.5', 'homing_speed': '35.0'}, 'tmc2660 stepper_z': {'cs_pin': 'PC10', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'adc_temperature my_thermistor': {'temperature1': '0', 'resistance1': '1000', 'temperature2': '80', 'resistance2': '1309'}, 'extruder': {'step_pin': '!EBBCan:gpio18', 'dir_pin': 'EBBCan:gpio19', 'enable_pin': '!EBBCan:gpio17', 'microsteps': '32', 'rotation_distance': '21.63024711', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'pressure_advance': '0.065', 'pressure_advance_smooth_time': '0.02', 'gear_ratio': '50:10', 'heater_pin': 'EBBCan:gpio7', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'EBBCan:gpio27', 'control': 'pid', 'pid_kp': '21.527', 'pid_ki': '1.063', 'pid_kd': '108.982', 'min_temp': '0', 'max_temp': '250'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan:gpio20', 'run_current': '0.5', 'stealthchop_threshold': '999999'}, 'filament_switch_sensor extruder': {'pause_on_runout': 'True', 'switch_pin': 'EBBCan:gpio21'}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu'}, 'thermistor chamber_temp': {'temperature1': '25', 'resistance1': '10000', 'beta': '3950'}, 'heater_bed': {'heater_pin': '!PA19', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PC13', 'control': 'watermark', 'min_temp': '0', 'max_temp': '120'}, 'heater_fan extruder_fan': {'pin': 'EBBCan:gpio13', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'EBBCan:gpio14', 'cycle_time': '.08', 'kick_start_time': '.25'}, 'probe': {'pin': '^EBBCan:gpio22', 'x_offset': '0', 'y_offset': '0', 'samples': '3', 'samples_result': 'median', 'sample_retract_dist': '3', 'samples_tolerance': '0.015', 'samples_tolerance_retries': '3', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'z_offset': '-1.350'}, 'homing_override': {'axes': 'z', 'set_position_z': '0', 'gcode': '\nstatus_homing\nG90\nG0 Z5 F500\nG28 X0 Y0\nG0 X150 Y100 F9000\nG28 Z0\nG0 Z5 F500\nstatus_ready'}, 'bed_mesh': {'speed': '150', 'horizontal_move_z': '5', 'mesh_min': '25,35.0', 'mesh_max': '225.0,220', 'probe_count': '6,6', 'algorithm': 'bicubic', 'fade_start': '1', 'fade_end': '10', 'fade_target': '0'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\nSTATUS_HEATING\nM109 S150\nSTATUS_HOMING\nM117 Homing...\nG28 Y0 X0 Z0\nSTATUS_MESHING\nBED_MESH_CALIBRATE ADAPTIVE=1\n\n\n\n\n\n\n\n\n\n\n\nSTATUS_HEATING\nM107\nM117 Heating bed\nM190 S{ params.BED }\nM117 Heating nozzle\nM109 S{target_extruder}\nstatus_ready\nG1 Z15.0 F600\nG1 X125 Y125 F3000\nG92 E0\nG1 F9000\nstatus_printing\nM117 Printing...'}, 'gcode_macro PRINT_END': {'gcode': '\nstatus_busy\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\n\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y} F3600\nM117 Finished!\nstatus_off'}, 'gcode_macro M600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state'}, 'printer': {'kinematics': 'corexz', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '5', 'max_z_accel': '100'}, 'force_move': {'enable_force_move': 'true'}, 'exclude_object': {}, 'bed_mesh default': {'version': '1', 'points': '\n-0.100000, -0.025000, 0.012500, 0.037500, 0.125000, 0.212500\n-0.187500, -0.100000, -0.025000, 0.025000, 0.100000, 0.212500\n-0.262500, -0.162500, -0.075000, -0.012500, 0.075000, 0.187500\n-0.262500, -0.162500, -0.087500, -0.000000, 0.100000, 0.237500\n-0.200000, -0.100000, -0.012500, 0.062500, 0.200000, 0.350000\n-0.225000, -0.075000, -0.000000, 0.087500, 0.225000, 0.387500', 'x_count': '6', 'y_count': '6', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'bicubic', 'tension': '0.2', 'min_x': '25.0', 'max_x': '225.0', 'min_y': '35.0', 'max_y': '220.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_sam4e8e_00313753364B37373032303038303139-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu ebbcan': {'canbus_uuid': '8250861450f7', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set allow_park = client.park_at_cancel | default(false) | lower == \'true\' %}\n{% set retract = client.cancel_retract | default(5.0) | abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x | default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y | default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x | length > 0 or park_y | length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro | default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set idle_timeout = client.idle_timeout | default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE | default(1) | int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro | default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move | default(velocity) %}\n{% set runout_resume = True if client.runout_sensor | default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state | upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro | default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY | default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'neopixel sb_leds': {'pin': 'EBBCan:gpio16', 'chain_count': 3, 'color_order': ['GRB'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'led_effect sb_logo_busy': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1,0,0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_cleaning': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.02, 0.5)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_calibrating_z': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 0.35)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1, 0.18, 0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0, 0, 1)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_homing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.6, 0.2)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_leveling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.5, 0.1, 0.4)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_meshing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.2, 1.0, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_printing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.3, 0.3, 0.0),(0.3, 0.1, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_standby': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.01, 0.01, 0.01)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 1.0, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_nozzle_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1.0, 0.18, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 1.0, 0.1)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_standby': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.6, 0.0, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.6, 1.0, 0.0, 0.1)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_critical_error': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': True, 'endstops': '', 'layers': '\nstrobe         1  1.5   add        (1.0,  1.0, 1.0)\nbreathing      2  0     difference (0.95, 0.0, 0.0)\nstatic         1  0     top        (1.0,  0.0, 0.0)', 'leds': '\nneopixel:sb_leds'}, 'led_effect rainbow': {'frame_rate': 24.0, 'autostart': True, 'run_on_error': False, 'endstops': '', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.0, 0.3, 0.0),(0.0, 0.0, 0.3)', 'leds': '\nneopixel:sb_leds'}, 'led_effect set_nozzle_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic         0  0     top        (0.5,  0.5, 0.5)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect set_logo_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic         0  0     top        (1.0,  1.0, 1.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'gcode_macro set_logo_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nSTOP_LED_EFFECTS', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=rainbow', 'description': 'G-Code macro'}, 'gcode_macro status_part_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_busy\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_heating\nSET_LED_EFFECT EFFECT=sb_nozzle_heating', 'description': 'G-Code macro'}, 'gcode_macro status_cooling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cooling\nSET_LED_EFFECT EFFECT=sb_nozzle_cooling', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_leveling\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_homing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cleaning\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_meshing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_calibrating_z\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_printing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'adxl345': {'axes_map': ['z', '-y', 'x'], 'rate': 3200, 'cs_pin': 'EBBCan:gpio1', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'EBBCan:gpio2', 'spi_software_miso_pin': 'EBBCan:gpio3', 'spi_software_mosi_pin': 'EBBCan:gpio0'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[100.0, 100.0, 20.0]], 'accel_chip': 'adxl345'}, 'input_shaper': {'shaper_type': '3hump_ei', 'shaper_type_x': '3hump_ei', 'damping_ratio_x': 0.1, 'shaper_freq_x': 45.0, 'shaper_type_y': '3hump_ei', 'damping_ratio_y': 0.1, 'shaper_freq_y': 0.0}, 'tmc2660 stepper_x': {'cs_pin': 'PD14', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PD6', 'dir_pin': '!PD11', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'EBBCan:gpio24', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2660 stepper_y': {'cs_pin': 'PC9', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PD7', 'dir_pin': '!PD12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'PA2', 'position_endstop': 0.0, 'position_min': -4.0, 'position_max': 225.0, 'homing_speed': 35.0, 'second_homing_speed': 17.5, 'homing_retract_speed': 35.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2660 stepper_z': {'cs_pin': 'PC10', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PD8', 'dir_pin': '!PD13', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -2.5, 'position_max': 230.0, 'homing_speed': 35.0, 'second_homing_speed': 17.5, 'homing_retract_speed': 35.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'adc_temperature my_thermistor': {'resistance1': 1000.0, 'temperature1': 0.0, 'temperature2': 80.0, 'resistance2': 1309.0}, 'tmc2209 extruder': {'uart_pin': 'EBBCan:gpio20', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan:gpio27', 'min_temp': 0.0, 'max_temp': 250.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 21.527, 'pid_ki': 1.063, 'pid_kd': 108.982, 'heater_pin': 'EBBCan:gpio7', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': '!EBBCan:gpio18', 'pressure_advance': 0.065, 'pressure_advance_smooth_time': 0.02, 'dir_pin': 'EBBCan:gpio19', 'rotation_distance': 21.63024711, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!EBBCan:gpio17'}, 'filament_switch_sensor extruder': {'switch_pin': 'EBBCan:gpio21', 'pause_on_runout': True, 'runout_gcode': '', 'pause_delay': 0.5, 'event_delay': 3.0}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'thermistor chamber_temp': {'temperature1': 25.0, 'resistance1': 10000.0, 'beta': 3950.0}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PC13', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'watermark', 'max_delta': 2.0, 'heater_pin': '!PA19', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan extruder_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'EBBCan:gpio13', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.25, 'off_below': 0.0, 'cycle_time': 0.08, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'EBBCan:gpio14'}, 'probe': {'z_offset': -1.35, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': '^EBBCan:gpio22', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 3, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.015, 'samples_tolerance_retries': 3}, 'homing_override': {'set_position_z': 0.0, 'axes': 'z', 'gcode': '\nstatus_homing\nG90\nG0 Z5 F500\nG28 X0 Y0\nG0 X150 Y100 F9000\nG28 Z0\nG0 Z5 F500\nstatus_ready'}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [6, 6], 'mesh_min': [25.0, 35.0], 'mesh_max': [225.0, 220.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 150.0, 'fade_start': 1.0, 'fade_end': 10.0, 'fade_target': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[-0.1, -0.025, 0.0125, 0.0375, 0.125, 0.2125], [-0.1875, -0.1, -0.025, 0.025, 0.1, 0.2125], [-0.2625, -0.1625, -0.075, -0.0125, 0.075, 0.1875], [-0.2625, -0.1625, -0.0875, -0.0, 0.1, 0.2375], [-0.2, -0.1, -0.0125, 0.0625, 0.2, 0.35], [-0.225, -0.075, -0.0, 0.0875, 0.225, 0.3875]], 'min_x': 25.0, 'max_x': 225.0, 'min_y': 35.0, 'max_y': 220.0, 'x_count': 6, 'y_count': 6, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'bicubic', 'tension': 0.2}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\nSTATUS_HEATING\nM109 S150\nSTATUS_HOMING\nM117 Homing...\nG28 Y0 X0 Z0\nSTATUS_MESHING\nBED_MESH_CALIBRATE ADAPTIVE=1\n\n\n\n\n\n\n\n\n\n\n\nSTATUS_HEATING\nM107\nM117 Heating bed\nM190 S{ params.BED }\nM117 Heating nozzle\nM109 S{target_extruder}\nstatus_ready\nG1 Z15.0 F600\nG1 X125 Y125 F3000\nG92 E0\nG1 F9000\nstatus_printing\nM117 Printing...', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\nstatus_busy\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\n\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y} F3600\nM117 Finished!\nstatus_off', 'description': 'G-Code macro'}, 'gcode_macro m600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state', 'description': 'G-Code macro'}, 'force_move': {'enable_force_move': True}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'minimum_cruise_ratio': 0.5, 'square_corner_velocity': 5.0, 'kinematics': 'corexz', 'max_z_velocity': 5.0, 'max_z_accel': 100.0}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-07-18 18:32:16,047 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-07-18 18:32:16,048 [printer.py:reinit()] - Klipper version: v0.12.0-175-g7b490f3e-dirty
2024-07-18 18:32:16,048 [printer.py:reinit()] - # Extruders: 1
2024-07-18 18:32:16,049 [printer.py:reinit()] - # Temperature devices: 2
2024-07-18 18:32:16,049 [printer.py:reinit()] - # Fans: 2
2024-07-18 18:32:16,049 [printer.py:reinit()] - # Output pins: 0
2024-07-18 18:32:16,049 [printer.py:reinit()] - # Leds: 20
2024-07-18 18:32:16,049 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-07-18 18:32:16,066 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-07-18 18:32:16,068 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor mcu&fan&heater_fan extruder_fan&filament_switch_sensor extruder&neopixel sb_leds
2024-07-18 18:32:16,344 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-07-18 18:32:16,344 [screen.py:init_klipper()] - Printer initialized
2024-07-18 18:32:16,344 [printer.py:change_state()] - Changing state from 'disconnected' to 'shutdown'
2024-07-18 18:32:16,344 [printer.py:change_state()] - Adding callback for state: shutdown
2024-07-18 18:32:16,477 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-07-18 18:32:16,479 [screen.py:show_panel()] - Reinitializing panel
2024-07-18 18:32:16,543 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-07-18 18:32:21,141 [KlippyWebsocket.py:restart_firmware()] - Sending printer.firmware_restart
2024-07-18 18:32:21,160 [printer.py:change_state()] - Changing state from 'shutdown' to 'disconnected'
2024-07-18 18:32:21,160 [printer.py:change_state()] - Adding callback for state: disconnected
2024-07-18 18:32:21,170 [screen.py:state_disconnected()] - ### Going to disconnected
2024-07-18 18:32:21,170 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-07-18 18:32:21,173 [screen.py:show_panel()] - Reinitializing panel
2024-07-18 18:32:21,279 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-07-18 18:32:24,233 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-07-18 18:32:24,245 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-07-18 18:32:24,259 [printer.py:configure_cameras()] - Cameras: []
2024-07-18 18:32:24,259 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'history', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-337-g546a17f', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-07-18 18:32:24,260 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-07-18 18:32:24,272 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-07-18 18:32:24,297 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set allow_park = client.park_at_cancel | default(false) | lower == \'true\' %}\n{% set retract = client.cancel_retract | default(5.0) | abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x | default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y | default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x | length > 0 or park_y | length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro | default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set idle_timeout = client.idle_timeout | default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE | default(1) | int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro | default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move | default(velocity) %}\n{% set runout_resume = True if client.runout_sensor | default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state | upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro | default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY | default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}"}, 'neopixel sb_leds': {'pin': 'EBBCan:gpio16', 'chain_count': '3', 'color_order': 'GRB', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0'}, 'led_effect sb_logo_busy': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (1,0,0)'}, 'led_effect sb_logo_cleaning': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.02, 0.5)'}, 'led_effect sb_logo_calibrating_z': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 0.35)'}, 'led_effect sb_logo_heating': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nbreathing  3 1 top (1, 0.18, 0)'}, 'led_effect sb_logo_cooling': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nbreathing  3 1 top (0, 0, 1)'}, 'led_effect sb_logo_homing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.6, 0.2)'}, 'led_effect sb_logo_leveling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.5, 0.1, 0.4)'}, 'led_effect sb_logo_meshing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.2, 1.0, 0.0)'}, 'led_effect sb_logo_printing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.3, 0.3, 0.0),(0.3, 0.1, 0.0)'}, 'led_effect sb_logo_standby': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.01, 0.01, 0.01)'}, 'led_effect sb_logo_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 1.0, 0.0)'}, 'led_effect sb_nozzle_heating': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (1.0, 0.18, 0.0, 0.0)'}, 'led_effect sb_nozzle_cooling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 1.0, 0.1)'}, 'led_effect sb_nozzle_standby': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.6, 0.0, 0.0, 0.0)'}, 'led_effect sb_nozzle_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.6, 1.0, 0.0, 0.1)'}, 'led_effect sb_critical_error': {'leds': '\nneopixel:sb_leds', 'layers': '\nstrobe         1  1.5   add        (1.0,  1.0, 1.0)\nbreathing      2  0     difference (0.95, 0.0, 0.0)\nstatic         1  0     top        (1.0,  0.0, 0.0)', 'autostart': 'false', 'frame_rate': '24', 'run_on_error': 'true'}, 'led_effect rainbow': {'leds': '\nneopixel:sb_leds', 'autostart': 'true', 'frame_rate': '24', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.0, 0.3, 0.0),(0.0, 0.0, 0.3)'}, 'led_effect set_nozzle_leds': {'leds': '\nneopixel:sb_leds (2,3)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nstatic         0  0     top        (0.5,  0.5, 0.5)'}, 'led_effect set_logo_leds': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nstatic         0  0     top        (1.0,  1.0, 1.0)'}, 'gcode_macro set_logo_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds STOP=1'}, 'gcode_macro set_logo_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1'}, 'gcode_macro status_off': {'gcode': '\nSTOP_LED_EFFECTS'}, 'gcode_macro status_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=rainbow'}, 'gcode_macro status_part_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready'}, 'gcode_macro status_busy': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_busy\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_heating\nSET_LED_EFFECT EFFECT=sb_nozzle_heating'}, 'gcode_macro status_cooling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cooling\nSET_LED_EFFECT EFFECT=sb_nozzle_cooling'}, 'gcode_macro status_leveling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_leveling\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_homing\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cleaning\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_meshing\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_calibrating_z\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_printing\nset_nozzle_leds_on'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_sam4e8e_00313753364B37373032303038303139-if00'}, 'mcu EBBCan': {'canbus_uuid': '8250861450f7'}, 'adxl345': {'cs_pin': 'EBBCan:gpio1', 'spi_software_sclk_pin': 'EBBCan:gpio2', 'spi_software_mosi_pin': 'EBBCan:gpio0', 'spi_software_miso_pin': 'EBBCan:gpio3', 'axes_map': 'z,-y,x'}, 'resonance_tester': {'probe_points': '100, 100, 20', 'accel_chip': 'adxl345'}, 'input_shaper': {'shaper_freq_x': '45', 'shaper_type': '3hump_ei'}, 'stepper_x': {'step_pin': 'PD6', 'dir_pin': '!PD11', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'EBBCan:gpio24', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '40'}, 'tmc2660 stepper_x': {'cs_pin': 'PD14', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'stepper_y': {'step_pin': 'PD7', 'dir_pin': '!PD12', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'PA2', 'position_endstop': '0', 'position_max': '225', 'position_min': '-4', 'homing_speed': '35', 'homing_retract_dist': '0'}, 'tmc2660 stepper_y': {'cs_pin': 'PC9', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'stepper_z': {'step_pin': 'PD8', 'dir_pin': '!PD13', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '230', 'position_min': '-2.5', 'homing_speed': '35.0'}, 'tmc2660 stepper_z': {'cs_pin': 'PC10', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'adc_temperature my_thermistor': {'temperature1': '0', 'resistance1': '1000', 'temperature2': '80', 'resistance2': '1309'}, 'extruder': {'step_pin': '!EBBCan:gpio18', 'dir_pin': 'EBBCan:gpio19', 'enable_pin': '!EBBCan:gpio17', 'microsteps': '32', 'rotation_distance': '21.63024711', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'pressure_advance': '0.065', 'pressure_advance_smooth_time': '0.02', 'gear_ratio': '50:10', 'heater_pin': 'EBBCan:gpio7', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'EBBCan:gpio27', 'control': 'pid', 'pid_kp': '21.527', 'pid_ki': '1.063', 'pid_kd': '108.982', 'min_temp': '0', 'max_temp': '250'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan:gpio20', 'run_current': '0.5', 'stealthchop_threshold': '999999'}, 'filament_switch_sensor extruder': {'pause_on_runout': 'True', 'switch_pin': 'EBBCan:gpio21'}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu'}, 'thermistor chamber_temp': {'temperature1': '25', 'resistance1': '10000', 'beta': '3950'}, 'heater_bed': {'heater_pin': '!PA19', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PC13', 'control': 'watermark', 'min_temp': '0', 'max_temp': '120'}, 'heater_fan extruder_fan': {'pin': 'EBBCan:gpio13', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'EBBCan:gpio14', 'cycle_time': '.08', 'kick_start_time': '.25'}, 'probe': {'pin': '^EBBCan:gpio22', 'x_offset': '0', 'y_offset': '0', 'samples': '3', 'samples_result': 'median', 'sample_retract_dist': '3', 'samples_tolerance': '0.015', 'samples_tolerance_retries': '3', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'z_offset': '-1.350'}, 'homing_override': {'axes': 'z', 'set_position_z': '0', 'gcode': '\nstatus_homing\nG90\nG0 Z5 F500\nG28 X0 Y0\nG0 X150 Y100 F9000\nG28 Z0\nG0 Z5 F500\nstatus_ready'}, 'bed_mesh': {'speed': '150', 'horizontal_move_z': '5', 'mesh_min': '25,35.0', 'mesh_max': '225.0,220', 'probe_count': '6,6', 'algorithm': 'bicubic', 'fade_start': '1', 'fade_end': '10', 'fade_target': '0'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\nSTATUS_HEATING\nM109 S150\nSTATUS_HOMING\nM117 Homing...\nG28 Y0 X0 Z0\nSTATUS_MESHING\nBED_MESH_CALIBRATE ADAPTIVE=1\n\n\n\n\n\n\n\n\n\n\n\nSTATUS_HEATING\nM107\nM117 Heating bed\nM190 S{ params.BED }\nM117 Heating nozzle\nM109 S{target_extruder}\nstatus_ready\nG1 Z15.0 F600\nG1 X125 Y125 F3000\nG92 E0\nG1 F9000\nstatus_printing\nM117 Printing...'}, 'gcode_macro PRINT_END': {'gcode': '\nstatus_busy\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\n\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y} F3600\nM117 Finished!\nstatus_off'}, 'gcode_macro M600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state'}, 'printer': {'kinematics': 'corexz', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '5', 'max_z_accel': '100'}, 'force_move': {'enable_force_move': 'true'}, 'exclude_object': {}, 'bed_mesh default': {'version': '1', 'points': '\n-0.100000, -0.025000, 0.012500, 0.037500, 0.125000, 0.212500\n-0.187500, -0.100000, -0.025000, 0.025000, 0.100000, 0.212500\n-0.262500, -0.162500, -0.075000, -0.012500, 0.075000, 0.187500\n-0.262500, -0.162500, -0.087500, -0.000000, 0.100000, 0.237500\n-0.200000, -0.100000, -0.012500, 0.062500, 0.200000, 0.350000\n-0.225000, -0.075000, -0.000000, 0.087500, 0.225000, 0.387500', 'x_count': '6', 'y_count': '6', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'bicubic', 'tension': '0.2', 'min_x': '25.0', 'max_x': '225.0', 'min_y': '35.0', 'max_y': '220.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_sam4e8e_00313753364B37373032303038303139-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu ebbcan': {'canbus_uuid': '8250861450f7', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set allow_park = client.park_at_cancel | default(false) | lower == \'true\' %}\n{% set retract = client.cancel_retract | default(5.0) | abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x | default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y | default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x | length > 0 or park_y | length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro | default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set idle_timeout = client.idle_timeout | default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE | default(1) | int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro | default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move | default(velocity) %}\n{% set runout_resume = True if client.runout_sensor | default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state | upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro | default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY | default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'neopixel sb_leds': {'pin': 'EBBCan:gpio16', 'chain_count': 3, 'color_order': ['GRB'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'led_effect sb_logo_busy': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1,0,0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_cleaning': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.02, 0.5)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_calibrating_z': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 0.35)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1, 0.18, 0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0, 0, 1)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_homing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.6, 0.2)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_leveling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.5, 0.1, 0.4)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_meshing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.2, 1.0, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_printing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.3, 0.3, 0.0),(0.3, 0.1, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_standby': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.01, 0.01, 0.01)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 1.0, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_nozzle_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1.0, 0.18, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 1.0, 0.1)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_standby': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.6, 0.0, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.6, 1.0, 0.0, 0.1)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_critical_error': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': True, 'endstops': '', 'layers': '\nstrobe         1  1.5   add        (1.0,  1.0, 1.0)\nbreathing      2  0     difference (0.95, 0.0, 0.0)\nstatic         1  0     top        (1.0,  0.0, 0.0)', 'leds': '\nneopixel:sb_leds'}, 'led_effect rainbow': {'frame_rate': 24.0, 'autostart': True, 'run_on_error': False, 'endstops': '', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.0, 0.3, 0.0),(0.0, 0.0, 0.3)', 'leds': '\nneopixel:sb_leds'}, 'led_effect set_nozzle_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic         0  0     top        (0.5,  0.5, 0.5)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect set_logo_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic         0  0     top        (1.0,  1.0, 1.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'gcode_macro set_logo_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nSTOP_LED_EFFECTS', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=rainbow', 'description': 'G-Code macro'}, 'gcode_macro status_part_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_busy\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_heating\nSET_LED_EFFECT EFFECT=sb_nozzle_heating', 'description': 'G-Code macro'}, 'gcode_macro status_cooling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cooling\nSET_LED_EFFECT EFFECT=sb_nozzle_cooling', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_leveling\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_homing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cleaning\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_meshing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_calibrating_z\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_printing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'adxl345': {'axes_map': ['z', '-y', 'x'], 'rate': 3200, 'cs_pin': 'EBBCan:gpio1', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'EBBCan:gpio2', 'spi_software_miso_pin': 'EBBCan:gpio3', 'spi_software_mosi_pin': 'EBBCan:gpio0'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[100.0, 100.0, 20.0]], 'accel_chip': 'adxl345'}, 'input_shaper': {'shaper_type': '3hump_ei', 'shaper_type_x': '3hump_ei', 'damping_ratio_x': 0.1, 'shaper_freq_x': 45.0, 'shaper_type_y': '3hump_ei', 'damping_ratio_y': 0.1, 'shaper_freq_y': 0.0}, 'tmc2660 stepper_x': {'cs_pin': 'PD14', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PD6', 'dir_pin': '!PD11', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'EBBCan:gpio24', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2660 stepper_y': {'cs_pin': 'PC9', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PD7', 'dir_pin': '!PD12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'PA2', 'position_endstop': 0.0, 'position_min': -4.0, 'position_max': 225.0, 'homing_speed': 35.0, 'second_homing_speed': 17.5, 'homing_retract_speed': 35.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2660 stepper_z': {'cs_pin': 'PC10', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PD8', 'dir_pin': '!PD13', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -2.5, 'position_max': 230.0, 'homing_speed': 35.0, 'second_homing_speed': 17.5, 'homing_retract_speed': 35.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'adc_temperature my_thermistor': {'resistance1': 1000.0, 'temperature1': 0.0, 'temperature2': 80.0, 'resistance2': 1309.0}, 'tmc2209 extruder': {'uart_pin': 'EBBCan:gpio20', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan:gpio27', 'min_temp': 0.0, 'max_temp': 250.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 21.527, 'pid_ki': 1.063, 'pid_kd': 108.982, 'heater_pin': 'EBBCan:gpio7', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': '!EBBCan:gpio18', 'pressure_advance': 0.065, 'pressure_advance_smooth_time': 0.02, 'dir_pin': 'EBBCan:gpio19', 'rotation_distance': 21.63024711, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!EBBCan:gpio17'}, 'filament_switch_sensor extruder': {'switch_pin': 'EBBCan:gpio21', 'pause_on_runout': True, 'runout_gcode': '', 'pause_delay': 0.5, 'event_delay': 3.0}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'thermistor chamber_temp': {'temperature1': 25.0, 'resistance1': 10000.0, 'beta': 3950.0}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PC13', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'watermark', 'max_delta': 2.0, 'heater_pin': '!PA19', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan extruder_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'EBBCan:gpio13', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.25, 'off_below': 0.0, 'cycle_time': 0.08, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'EBBCan:gpio14'}, 'probe': {'z_offset': -1.35, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': '^EBBCan:gpio22', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 3, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.015, 'samples_tolerance_retries': 3}, 'homing_override': {'set_position_z': 0.0, 'axes': 'z', 'gcode': '\nstatus_homing\nG90\nG0 Z5 F500\nG28 X0 Y0\nG0 X150 Y100 F9000\nG28 Z0\nG0 Z5 F500\nstatus_ready'}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [6, 6], 'mesh_min': [25.0, 35.0], 'mesh_max': [225.0, 220.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 150.0, 'fade_start': 1.0, 'fade_end': 10.0, 'fade_target': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[-0.1, -0.025, 0.0125, 0.0375, 0.125, 0.2125], [-0.1875, -0.1, -0.025, 0.025, 0.1, 0.2125], [-0.2625, -0.1625, -0.075, -0.0125, 0.075, 0.1875], [-0.2625, -0.1625, -0.0875, -0.0, 0.1, 0.2375], [-0.2, -0.1, -0.0125, 0.0625, 0.2, 0.35], [-0.225, -0.075, -0.0, 0.0875, 0.225, 0.3875]], 'min_x': 25.0, 'max_x': 225.0, 'min_y': 35.0, 'max_y': 220.0, 'x_count': 6, 'y_count': 6, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'bicubic', 'tension': 0.2}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\nSTATUS_HEATING\nM109 S150\nSTATUS_HOMING\nM117 Homing...\nG28 Y0 X0 Z0\nSTATUS_MESHING\nBED_MESH_CALIBRATE ADAPTIVE=1\n\n\n\n\n\n\n\n\n\n\n\nSTATUS_HEATING\nM107\nM117 Heating bed\nM190 S{ params.BED }\nM117 Heating nozzle\nM109 S{target_extruder}\nstatus_ready\nG1 Z15.0 F600\nG1 X125 Y125 F3000\nG92 E0\nG1 F9000\nstatus_printing\nM117 Printing...', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\nstatus_busy\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\n\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y} F3600\nM117 Finished!\nstatus_off', 'description': 'G-Code macro'}, 'gcode_macro m600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state', 'description': 'G-Code macro'}, 'force_move': {'enable_force_move': True}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'minimum_cruise_ratio': 0.5, 'square_corner_velocity': 5.0, 'kinematics': 'corexz', 'max_z_velocity': 5.0, 'max_z_accel': 100.0}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-07-18 18:32:24,301 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-07-18 18:32:24,303 [printer.py:reinit()] - Klipper version: v0.12.0-175-g7b490f3e-dirty
2024-07-18 18:32:24,303 [printer.py:reinit()] - # Extruders: 1
2024-07-18 18:32:24,303 [printer.py:reinit()] - # Temperature devices: 2
2024-07-18 18:32:24,303 [printer.py:reinit()] - # Fans: 2
2024-07-18 18:32:24,303 [printer.py:reinit()] - # Output pins: 0
2024-07-18 18:32:24,303 [printer.py:reinit()] - # Leds: 20
2024-07-18 18:32:24,303 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-07-18 18:32:24,320 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-07-18 18:32:24,322 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor mcu&fan&heater_fan extruder_fan&filament_switch_sensor extruder&neopixel sb_leds
2024-07-18 18:32:24,592 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-07-18 18:32:24,593 [screen.py:init_klipper()] - Printer initialized
2024-07-18 18:32:24,593 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-07-18 18:32:24,593 [printer.py:change_state()] - Adding callback for state: startup
2024-07-18 18:33:54,071 [printer.py:change_state()] - Changing state from 'startup' to 'error'
2024-07-18 18:33:54,072 [printer.py:change_state()] - Adding callback for state: error
2024-07-18 18:33:54,080 [screen.py:show_panel()] - Reinitializing panel
2024-07-18 18:33:54,180 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-07-18 18:33:59,444 [printer.py:change_state()] - Changing state from 'error' to 'disconnected'
2024-07-18 18:33:59,444 [printer.py:change_state()] - Adding callback for state: disconnected
2024-07-18 18:33:59,446 [screen.py:state_disconnected()] - ### Going to disconnected
2024-07-18 18:33:59,446 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-07-18 18:33:59,449 [screen.py:show_panel()] - Reinitializing panel
2024-07-18 18:33:59,591 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-07-18 18:34:03,232 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-07-18 18:34:03,242 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-07-18 18:34:03,253 [printer.py:configure_cameras()] - Cameras: []
2024-07-18 18:34:03,254 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'history', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-337-g546a17f', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-07-18 18:34:03,254 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-07-18 18:34:03,266 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-07-18 18:34:03,291 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set allow_park = client.park_at_cancel | default(false) | lower == \'true\' %}\n{% set retract = client.cancel_retract | default(5.0) | abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x | default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y | default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x | length > 0 or park_y | length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro | default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set idle_timeout = client.idle_timeout | default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE | default(1) | int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro | default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move | default(velocity) %}\n{% set runout_resume = True if client.runout_sensor | default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state | upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro | default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY | default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}"}, 'neopixel sb_leds': {'pin': 'EBBCan:gpio16', 'chain_count': '3', 'color_order': 'GRB', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '1.0'}, 'led_effect sb_logo_busy': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (1,0,0)'}, 'led_effect sb_logo_cleaning': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.02, 0.5)'}, 'led_effect sb_logo_calibrating_z': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 0.35)'}, 'led_effect sb_logo_heating': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nbreathing  3 1 top (1, 0.18, 0)'}, 'led_effect sb_logo_cooling': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nbreathing  3 1 top (0, 0, 1)'}, 'led_effect sb_logo_homing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 0.6, 0.2)'}, 'led_effect sb_logo_leveling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.5, 0.1, 0.4)'}, 'led_effect sb_logo_meshing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.2, 1.0, 0.0)'}, 'led_effect sb_logo_printing': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.3, 0.3, 0.0),(0.3, 0.1, 0.0)'}, 'led_effect sb_logo_standby': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.01, 0.01, 0.01)'}, 'led_effect sb_logo_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (1)', 'layers': '\nbreathing  3 1 top (0.0, 1.0, 0.0)'}, 'led_effect sb_nozzle_heating': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (1.0, 0.18, 0.0, 0.0)'}, 'led_effect sb_nozzle_cooling': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 1.0, 0.1)'}, 'led_effect sb_nozzle_standby': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.6, 0.0, 0.0, 0.0)'}, 'led_effect sb_nozzle_part_ready': {'autostart': 'false', 'frame_rate': '24', 'leds': '\nneopixel:sb_leds (2,3)', 'layers': '\nbreathing  3 1 top (0.6, 1.0, 0.0, 0.1)'}, 'led_effect sb_critical_error': {'leds': '\nneopixel:sb_leds', 'layers': '\nstrobe         1  1.5   add        (1.0,  1.0, 1.0)\nbreathing      2  0     difference (0.95, 0.0, 0.0)\nstatic         1  0     top        (1.0,  0.0, 0.0)', 'autostart': 'false', 'frame_rate': '24', 'run_on_error': 'true'}, 'led_effect rainbow': {'leds': '\nneopixel:sb_leds', 'autostart': 'true', 'frame_rate': '24', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.0, 0.3, 0.0),(0.0, 0.0, 0.3)'}, 'led_effect set_nozzle_leds': {'leds': '\nneopixel:sb_leds (2,3)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nstatic         0  0     top        (0.5,  0.5, 0.5)'}, 'led_effect set_logo_leds': {'leds': '\nneopixel:sb_leds (1)', 'autostart': 'false', 'frame_rate': '24', 'layers': '\nstatic         0  0     top        (1.0,  1.0, 1.0)'}, 'gcode_macro set_logo_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds STOP=1'}, 'gcode_macro set_logo_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1'}, 'gcode_macro status_off': {'gcode': '\nSTOP_LED_EFFECTS'}, 'gcode_macro status_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=rainbow'}, 'gcode_macro status_part_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready'}, 'gcode_macro status_busy': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_busy\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_heating\nSET_LED_EFFECT EFFECT=sb_nozzle_heating'}, 'gcode_macro status_cooling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cooling\nSET_LED_EFFECT EFFECT=sb_nozzle_cooling'}, 'gcode_macro status_leveling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_leveling\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_homing\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cleaning\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_meshing\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_calibrating_z\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_printing\nset_nozzle_leds_on'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_sam4e8e_00313753364B37373032303038303139-if00'}, 'mcu EBBCan': {'canbus_uuid': '8250861450f7'}, 'adxl345': {'cs_pin': 'EBBCan:gpio1', 'spi_software_sclk_pin': 'EBBCan:gpio2', 'spi_software_mosi_pin': 'EBBCan:gpio0', 'spi_software_miso_pin': 'EBBCan:gpio3', 'axes_map': 'z,-y,x'}, 'resonance_tester': {'probe_points': '100, 100, 20', 'accel_chip': 'adxl345'}, 'input_shaper': {'shaper_freq_x': '45', 'shaper_type': '3hump_ei'}, 'stepper_x': {'step_pin': 'PD6', 'dir_pin': '!PD11', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'EBBCan:gpio24', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '40'}, 'tmc2660 stepper_x': {'cs_pin': 'PD14', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'stepper_y': {'step_pin': 'PD7', 'dir_pin': '!PD12', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'PA2', 'position_endstop': '0', 'position_max': '225', 'position_min': '-4', 'homing_speed': '35', 'homing_retract_dist': '0'}, 'tmc2660 stepper_y': {'cs_pin': 'PC9', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'stepper_z': {'step_pin': 'PD8', 'dir_pin': '!PD13', 'enable_pin': '!PC6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '230', 'position_min': '-2.5', 'homing_speed': '35.0'}, 'tmc2660 stepper_z': {'cs_pin': 'PC10', 'spi_bus': 'usart1', 'run_current': '0.5', 'sense_resistor': '0.051', 'interpolate': 'False'}, 'adc_temperature my_thermistor': {'temperature1': '0', 'resistance1': '1000', 'temperature2': '80', 'resistance2': '1309'}, 'extruder': {'step_pin': '!EBBCan:gpio18', 'dir_pin': 'EBBCan:gpio19', 'enable_pin': '!EBBCan:gpio17', 'microsteps': '32', 'rotation_distance': '21.63024711', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'pressure_advance': '0.065', 'pressure_advance_smooth_time': '0.02', 'gear_ratio': '50:10', 'heater_pin': 'EBBCan:gpio7', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'EBBCan:gpio27', 'control': 'pid', 'pid_kp': '21.527', 'pid_ki': '1.063', 'pid_kd': '108.982', 'min_temp': '0', 'max_temp': '250'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan:gpio20', 'run_current': '0.5', 'stealthchop_threshold': '999999'}, 'filament_switch_sensor extruder': {'pause_on_runout': 'True', 'switch_pin': 'EBBCan:gpio21'}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu'}, 'thermistor chamber_temp': {'temperature1': '25', 'resistance1': '10000', 'beta': '3950'}, 'heater_bed': {'heater_pin': '!PA19', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PC13', 'control': 'watermark', 'min_temp': '0', 'max_temp': '120'}, 'heater_fan extruder_fan': {'pin': 'EBBCan:gpio13', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'EBBCan:gpio14', 'cycle_time': '.08', 'kick_start_time': '.25'}, 'probe': {'pin': '^EBBCan:gpio22', 'x_offset': '0', 'y_offset': '0', 'samples': '3', 'samples_result': 'median', 'sample_retract_dist': '3', 'samples_tolerance': '0.015', 'samples_tolerance_retries': '3', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'z_offset': '-1.350'}, 'homing_override': {'axes': 'z', 'set_position_z': '0', 'gcode': '\nstatus_homing\nG90\nG0 Z5 F500\nG28 X0 Y0\nG0 X150 Y100 F9000\nG28 Z0\nG0 Z5 F500\nstatus_ready'}, 'bed_mesh': {'speed': '150', 'horizontal_move_z': '5', 'mesh_min': '25,35.0', 'mesh_max': '225.0,220', 'probe_count': '6,6', 'algorithm': 'bicubic', 'fade_start': '1', 'fade_end': '10', 'fade_target': '0'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\nSTATUS_HEATING\nM109 S150\nSTATUS_HOMING\nM117 Homing...\nG28 Y0 X0 Z0\nSTATUS_MESHING\nBED_MESH_CALIBRATE ADAPTIVE=1\n\n\n\n\n\n\n\n\n\n\n\nSTATUS_HEATING\nM107\nM117 Heating bed\nM190 S{ params.BED }\nM117 Heating nozzle\nM109 S{target_extruder}\nstatus_ready\nG1 Z15.0 F600\nG1 X125 Y125 F3000\nG92 E0\nG1 F9000\nstatus_printing\nM117 Printing...'}, 'gcode_macro PRINT_END': {'gcode': '\nstatus_busy\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\n\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y} F3600\nM117 Finished!\nstatus_off'}, 'gcode_macro M600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state'}, 'printer': {'kinematics': 'corexz', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '5', 'max_z_accel': '100'}, 'force_move': {'enable_force_move': 'true'}, 'exclude_object': {}, 'bed_mesh default': {'version': '1', 'points': '\n-0.100000, -0.025000, 0.012500, 0.037500, 0.125000, 0.212500\n-0.187500, -0.100000, -0.025000, 0.025000, 0.100000, 0.212500\n-0.262500, -0.162500, -0.075000, -0.012500, 0.075000, 0.187500\n-0.262500, -0.162500, -0.087500, -0.000000, 0.100000, 0.237500\n-0.200000, -0.100000, -0.012500, 0.062500, 0.200000, 0.350000\n-0.225000, -0.075000, -0.000000, 0.087500, 0.225000, 0.387500', 'x_count': '6', 'y_count': '6', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'bicubic', 'tension': '0.2', 'min_x': '25.0', 'max_x': '225.0', 'min_y': '35.0', 'max_y': '220.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_sam4e8e_00313753364B37373032303038303139-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu ebbcan': {'canbus_uuid': '8250861450f7', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set allow_park = client.park_at_cancel | default(false) | lower == \'true\' %}\n{% set retract = client.cancel_retract | default(5.0) | abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x | default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y | default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x | length > 0 or park_y | length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro | default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set idle_timeout = client.idle_timeout | default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE | default(1) | int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro | default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move | default(velocity) %}\n{% set runout_resume = True if client.runout_sensor | default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state | upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro | default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY | default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'neopixel sb_leds': {'pin': 'EBBCan:gpio16', 'chain_count': 3, 'color_order': ['GRB'], 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'led_effect sb_logo_busy': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1,0,0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_cleaning': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.02, 0.5)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_calibrating_z': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 0.35)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1, 0.18, 0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0, 0, 1)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_homing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.6, 0.2)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_leveling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.5, 0.1, 0.4)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_meshing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.2, 1.0, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_printing': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.3, 0.3, 0.0),(0.3, 0.1, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_standby': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.01, 0.01, 0.01)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_logo_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 1.0, 0.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'led_effect sb_nozzle_heating': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (1.0, 0.18, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_cooling': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.0, 0.0, 1.0, 0.1)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_standby': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.6, 0.0, 0.0, 0.0)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_nozzle_part_ready': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nbreathing  3 1 top (0.6, 1.0, 0.0, 0.1)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect sb_critical_error': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': True, 'endstops': '', 'layers': '\nstrobe         1  1.5   add        (1.0,  1.0, 1.0)\nbreathing      2  0     difference (0.95, 0.0, 0.0)\nstatic         1  0     top        (1.0,  0.0, 0.0)', 'leds': '\nneopixel:sb_leds'}, 'led_effect rainbow': {'frame_rate': 24.0, 'autostart': True, 'run_on_error': False, 'endstops': '', 'layers': '\ngradient  0.3  1 add (0.3, 0.0, 0.0),(0.0, 0.3, 0.0),(0.0, 0.0, 0.3)', 'leds': '\nneopixel:sb_leds'}, 'led_effect set_nozzle_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic         0  0     top        (0.5,  0.5, 0.5)', 'leds': '\nneopixel:sb_leds (2,3)'}, 'led_effect set_logo_leds': {'frame_rate': 24.0, 'autostart': False, 'run_on_error': False, 'endstops': '', 'layers': '\nstatic         0  0     top        (1.0,  1.0, 1.0)', 'leds': '\nneopixel:sb_leds (1)'}, 'gcode_macro set_logo_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_logo_leds', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\nSET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nSTOP_LED_EFFECTS', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=rainbow', 'description': 'G-Code macro'}, 'gcode_macro status_part_ready': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_nozzle_part_ready\nSET_LED_EFFECT EFFECT=sb_logo_part_ready', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_busy\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_heating\nSET_LED_EFFECT EFFECT=sb_nozzle_heating', 'description': 'G-Code macro'}, 'gcode_macro status_cooling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cooling\nSET_LED_EFFECT EFFECT=sb_nozzle_cooling', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_leveling\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_homing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_cleaning\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_meshing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_calibrating_z\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\nSTOP_LED_EFFECTS\nSET_LED_EFFECT EFFECT=sb_logo_printing\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'adxl345': {'axes_map': ['z', '-y', 'x'], 'rate': 3200, 'cs_pin': 'EBBCan:gpio1', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'EBBCan:gpio2', 'spi_software_miso_pin': 'EBBCan:gpio3', 'spi_software_mosi_pin': 'EBBCan:gpio0'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[100.0, 100.0, 20.0]], 'accel_chip': 'adxl345'}, 'input_shaper': {'shaper_type': '3hump_ei', 'shaper_type_x': '3hump_ei', 'damping_ratio_x': 0.1, 'shaper_freq_x': 45.0, 'shaper_type_y': '3hump_ei', 'damping_ratio_y': 0.1, 'shaper_freq_y': 0.0}, 'tmc2660 stepper_x': {'cs_pin': 'PD14', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PD6', 'dir_pin': '!PD11', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'EBBCan:gpio24', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2660 stepper_y': {'cs_pin': 'PC9', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PD7', 'dir_pin': '!PD12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'PA2', 'position_endstop': 0.0, 'position_min': -4.0, 'position_max': 225.0, 'homing_speed': 35.0, 'second_homing_speed': 17.5, 'homing_retract_speed': 35.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2660 stepper_z': {'cs_pin': 'PC10', 'spi_speed': 4000000, 'spi_bus': 'usart1', 'run_current': 0.5, 'sense_resistor': 0.051, 'idle_current_percent': 100, 'interpolate': False, 'driver_tbl': 2, 'driver_rndtf': 0, 'driver_hdec': 0, 'driver_chm': 0, 'driver_hend': 3, 'driver_hstrt': 3, 'driver_toff': 4, 'driver_seimin': 0, 'driver_sedn': 0, 'driver_semax': 0, 'driver_seup': 0, 'driver_semin': 0, 'driver_sfilt': 0, 'driver_sgt': 0, 'driver_slph': 0, 'driver_slpl': 0, 'driver_diss2g': 0, 'driver_ts2g': 3}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PD8', 'dir_pin': '!PD13', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC6', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -2.5, 'position_max': 230.0, 'homing_speed': 35.0, 'second_homing_speed': 17.5, 'homing_retract_speed': 35.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'adc_temperature my_thermistor': {'resistance1': 1000.0, 'temperature1': 0.0, 'temperature2': 80.0, 'resistance2': 1309.0}, 'tmc2209 extruder': {'uart_pin': 'EBBCan:gpio20', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan:gpio27', 'min_temp': 0.0, 'max_temp': 250.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 21.527, 'pid_ki': 1.063, 'pid_kd': 108.982, 'heater_pin': 'EBBCan:gpio7', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': '!EBBCan:gpio18', 'pressure_advance': 0.065, 'pressure_advance_smooth_time': 0.02, 'dir_pin': 'EBBCan:gpio19', 'rotation_distance': 21.63024711, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!EBBCan:gpio17'}, 'filament_switch_sensor extruder': {'switch_pin': 'EBBCan:gpio21', 'pause_on_runout': True, 'runout_gcode': '', 'pause_delay': 0.5, 'event_delay': 3.0}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'thermistor chamber_temp': {'temperature1': 25.0, 'resistance1': 10000.0, 'beta': 3950.0}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PC13', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'watermark', 'max_delta': 2.0, 'heater_pin': '!PA19', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan extruder_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'EBBCan:gpio13', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.25, 'off_below': 0.0, 'cycle_time': 0.08, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'EBBCan:gpio14'}, 'probe': {'z_offset': -1.35, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': '^EBBCan:gpio22', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 3, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.015, 'samples_tolerance_retries': 3}, 'homing_override': {'set_position_z': 0.0, 'axes': 'z', 'gcode': '\nstatus_homing\nG90\nG0 Z5 F500\nG28 X0 Y0\nG0 X150 Y100 F9000\nG28 Z0\nG0 Z5 F500\nstatus_ready'}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [6, 6], 'mesh_min': [25.0, 35.0], 'mesh_max': [225.0, 220.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 150.0, 'fade_start': 1.0, 'fade_end': 10.0, 'fade_target': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[-0.1, -0.025, 0.0125, 0.0375, 0.125, 0.2125], [-0.1875, -0.1, -0.025, 0.025, 0.1, 0.2125], [-0.2625, -0.1625, -0.075, -0.0125, 0.075, 0.1875], [-0.2625, -0.1625, -0.0875, -0.0, 0.1, 0.2375], [-0.2, -0.1, -0.0125, 0.0625, 0.2, 0.35], [-0.225, -0.075, -0.0, 0.0875, 0.225, 0.3875]], 'min_x': 25.0, 'max_x': 225.0, 'min_y': 35.0, 'max_y': 220.0, 'x_count': 6, 'y_count': 6, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'bicubic', 'tension': 0.2}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\nSTATUS_HEATING\nM109 S150\nSTATUS_HOMING\nM117 Homing...\nG28 Y0 X0 Z0\nSTATUS_MESHING\nBED_MESH_CALIBRATE ADAPTIVE=1\n\n\n\n\n\n\n\n\n\n\n\nSTATUS_HEATING\nM107\nM117 Heating bed\nM190 S{ params.BED }\nM117 Heating nozzle\nM109 S{target_extruder}\nstatus_ready\nG1 Z15.0 F600\nG1 X125 Y125 F3000\nG92 E0\nG1 F9000\nstatus_printing\nM117 Printing...', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\nstatus_busy\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\n\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y} F3600\nM117 Finished!\nstatus_off', 'description': 'G-Code macro'}, 'gcode_macro m600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state', 'description': 'G-Code macro'}, 'force_move': {'enable_force_move': True}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'minimum_cruise_ratio': 0.5, 'square_corner_velocity': 5.0, 'kinematics': 'corexz', 'max_z_velocity': 5.0, 'max_z_accel': 100.0}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-07-18 18:34:03,294 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-07-18 18:34:03,296 [printer.py:reinit()] - Klipper version: v0.12.0-175-g7b490f3e-dirty
2024-07-18 18:34:03,296 [printer.py:reinit()] - # Extruders: 1
2024-07-18 18:34:03,296 [printer.py:reinit()] - # Temperature devices: 2
2024-07-18 18:34:03,296 [printer.py:reinit()] - # Fans: 2
2024-07-18 18:34:03,296 [printer.py:reinit()] - # Output pins: 0
2024-07-18 18:34:03,296 [printer.py:reinit()] - # Leds: 20
2024-07-18 18:34:03,297 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-07-18 18:34:03,313 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-07-18 18:34:03,315 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor mcu&fan&heater_fan extruder_fan&filament_switch_sensor extruder&neopixel sb_leds
2024-07-18 18:34:03,590 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-07-18 18:34:03,590 [screen.py:init_klipper()] - Printer initialized
2024-07-18 18:34:03,590 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-07-18 18:34:03,590 [printer.py:change_state()] - Adding callback for state: startup
